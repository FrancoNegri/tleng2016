Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> g
Rule 1     g -> sentencia g
Rule 2     g -> ctrl g
Rule 3     g -> empty
Rule 4     sentencia -> varsOps ;
Rule 5     sentencia -> func ;
Rule 6     sentencia -> varAsig ;
Rule 7     sentencia -> RETURN ;
Rule 8     ctrl -> if
Rule 9     ctrl -> loop
Rule 10    loop -> WHILE ( expBool ) bloque
Rule 11    loop -> DO bloque WHILE ( expBool ) ;
Rule 12    loop -> FOR ( varAsig ; expBool ; varsOps ) bloque
Rule 13    if -> IF ( expBool ) bloque else
Rule 14    else -> ELSE bloque
Rule 15    else -> empty
Rule 16    bloque -> sentencia ;
Rule 17    bloque -> { g }
Rule 18    func -> funcReturn
Rule 19    func -> funcVoid
Rule 20    funcReturn -> funcInt
Rule 21    funcReturn -> funcString
Rule 22    funcReturn -> funcBool
Rule 23    funcInt -> MULTIESCALAR ( vec , eMat , param )
Rule 24    funcInt -> LENGTH ( vec )
Rule 25    funcString -> CAPITALIZAR ( eMat )
Rule 26    funcBool -> COLINEALES ( vec , vec )
Rule 27    funcVoid -> PRINT ( valores )
Rule 28    param -> expBool
Rule 29    param -> empty
Rule 30    empty -> <empty>
Rule 31    vec -> [ elem ]
Rule 32    elem -> valores , elem
Rule 33    elem -> valores
Rule 34    valores -> eMat
Rule 35    valores -> expBool
Rule 36    valores -> reg
Rule 37    valores -> INT
Rule 38    valores -> FLOAT
Rule 39    valores -> STRING
Rule 40    valores -> BOOL
Rule 41    valores -> varYVals
Rule 42    valores -> varsOps
Rule 43    valores -> vec
Rule 44    valores -> ID . valoresCampos
Rule 45    valores -> RES
Rule 46    valoresCampos -> ID
Rule 47    valoresCampos -> END
Rule 48    valoresCampos -> BEGIN
Rule 49    varYVals -> ID
Rule 50    varYVals -> vecVal
Rule 51    vecVal -> ID m
Rule 52    m -> [ INT ]
Rule 53    m -> [ INT ] m
Rule 54    m -> [ varYVals ] m
Rule 55    m -> [ varYVals ]
Rule 56    reg -> { campos }
Rule 57    campos -> ID : valores , campos
Rule 58    campos -> valores
Rule 59    varsOps -> MENOSMENOS varYVals
Rule 60    varsOps -> MASMAS varYVals
Rule 61    varsOps -> varYVals MASMAS
Rule 62    varsOps -> varYVals MENOSMENOS
Rule 63    valoresAsig -> valores
Rule 64    varAsig -> varYVals MULEQ valoresAsig
Rule 65    varAsig -> varYVals DIVEQ valoresAsig
Rule 66    varAsig -> varYVals MASEQ valoresAsig
Rule 67    varAsig -> varYVals MENOSEQ valoresAsig
Rule 68    varAsig -> varYVals = valoresAsig
Rule 69    varAsig -> ID . ID = valoresAsig
Rule 70    valoresMat -> INT
Rule 71    valoresMat -> FLOAT
Rule 72    valoresMat -> funcInt
Rule 73    valoresMat -> varYVals
Rule 74    valoresMat -> varsOps
Rule 75    valoresMat -> STRING
Rule 76    eMat -> eMat + p
Rule 77    eMat -> eMat - p
Rule 78    eMat -> valoresMat + p
Rule 79    eMat -> valoresMat - p
Rule 80    eMat -> eMat + valoresMat
Rule 81    eMat -> eMat - valoresMat
Rule 82    eMat -> valoresMat + valoresMat
Rule 83    eMat -> valoresMat - valoresMat
Rule 84    eMat -> p
Rule 85    p -> p * exp
Rule 86    p -> p / exp
Rule 87    p -> p % exp
Rule 88    p -> valoresMat * exp
Rule 89    p -> valoresMat / exp
Rule 90    p -> valoresMat % exp
Rule 91    p -> p * valoresMat
Rule 92    p -> p / valoresMat
Rule 93    p -> p % valoresMat
Rule 94    p -> valoresMat * valoresMat
Rule 95    p -> valoresMat / valoresMat
Rule 96    p -> valoresMat % valoresMat
Rule 97    p -> exp
Rule 98    exp -> exp ^ iSing
Rule 99    exp -> valoresMat ^ iSing
Rule 100   exp -> exp ^ valoresMat
Rule 101   exp -> valoresMat ^ valoresMat
Rule 102   exp -> iSing
Rule 103   iSing -> - paren
Rule 104   iSing -> + paren
Rule 105   iSing -> - valoresMat
Rule 106   iSing -> + valoresMat
Rule 107   iSing -> paren
Rule 108   paren -> ( eMat )
Rule 109   valoresBool -> BOOL
Rule 110   valoresBool -> funcBool
Rule 111   valoresBool -> varYVals
Rule 112   valoresBool -> varsOps
Rule 113   expBool -> or ? expBool : expBool
Rule 114   expBool -> valoresBool ? expBool : expBool
Rule 115   expBool -> or ? valoresBool : valoresBool
Rule 116   expBool -> valoresBool ? valoresBool : valoresBool
Rule 117   expBool -> or
Rule 118   or -> or OR and
Rule 119   or -> valoresBool OR and
Rule 120   or -> or OR valoresBool
Rule 121   or -> valoresBool OR valoresBool
Rule 122   or -> and
Rule 123   and -> and AND eq
Rule 124   and -> valoresBool AND eq
Rule 125   and -> and AND valoresBool
Rule 126   and -> valoresBool AND valoresBool
Rule 127   and -> eq
Rule 128   eq -> eq EQEQ parenBool
Rule 129   eq -> eq DISTINTO parenBool
Rule 130   eq -> valoresBool EQEQ parenBool
Rule 131   eq -> valoresBool DISTINTO parenBool
Rule 132   eq -> eq EQEQ valoresBool
Rule 133   eq -> eq DISTINTO valoresBool
Rule 134   eq -> valoresBool EQEQ valoresBool
Rule 135   eq -> valoresBool DISTINTO valoresBool
Rule 136   eq -> mayor
Rule 137   tCompare -> eMat
Rule 138   tCompare -> varsOps
Rule 139   tCompare -> varYVals
Rule 140   mayor -> tCompare > tCompare
Rule 141   mayor -> menor
Rule 142   menor -> tCompare < tCompare
Rule 143   menor -> not
Rule 144   not -> NOT not
Rule 145   not -> NOT valoresBool
Rule 146   not -> parenBool
Rule 147   parenBool -> ( expBool )

Terminals, with rules where they appear

%                    : 87 90 93 96
(                    : 10 11 12 13 23 24 25 26 27 108 147
)                    : 10 11 12 13 23 24 25 26 27 108 147
*                    : 85 88 91 94
+                    : 76 78 80 82 104 106
,                    : 23 23 26 32 57
-                    : 77 79 81 83 103 105
.                    : 44 69
/                    : 86 89 92 95
:                    : 57 113 114 115 116
;                    : 4 5 6 7 11 12 12 16
<                    : 142
=                    : 68 69
>                    : 140
?                    : 113 114 115 116
AND                  : 123 124 125 126
BEGIN                : 48
BOOL                 : 40 109
CAPITALIZAR          : 25
COLINEALES           : 26
COMMENT              : 
DISTINTO             : 129 131 133 135
DIVEQ                : 65
DO                   : 11
ELSE                 : 14
END                  : 47
EQEQ                 : 128 130 132 134
FLOAT                : 38 71
FOR                  : 12
ID                   : 44 46 49 51 57 69 69
IF                   : 13
INT                  : 37 52 53 70
LENGTH               : 24
MASEQ                : 66
MASMAS               : 60 61
MENOSEQ              : 67
MENOSMENOS           : 59 62
MULEQ                : 64
MULTIESCALAR         : 23
NOT                  : 144 145
OR                   : 118 119 120 121
PRINT                : 27
RES                  : 45
RETURN               : 7
STRING               : 39 75
WHILE                : 10 11
[                    : 31 52 53 54 55
]                    : 31 52 53 54 55
^                    : 98 99 100 101
error                : 
{                    : 17 56
}                    : 17 56

Nonterminals, with rules where they appear

and                  : 118 119 122 123 125
bloque               : 10 11 12 13 14
campos               : 56 57
ctrl                 : 2
eMat                 : 23 25 34 76 77 80 81 108 137
elem                 : 31 32
else                 : 13
empty                : 3 15 29
eq                   : 123 124 127 128 129 132 133
exp                  : 85 86 87 88 89 90 97 98 100
expBool              : 10 11 12 13 28 35 113 113 114 114 147
func                 : 5
funcBool             : 22 110
funcInt              : 20 72
funcReturn           : 18
funcString           : 21
funcVoid             : 19
g                    : 1 2 17 0
iSing                : 98 99 102
if                   : 8
loop                 : 9
m                    : 51 53 54
mayor                : 136
menor                : 141
not                  : 143 144
or                   : 113 115 117 118 120
p                    : 76 77 78 79 84 85 86 87 91 92 93
param                : 23
paren                : 103 104 107
parenBool            : 128 129 130 131 146
reg                  : 36
sentencia            : 1 16
tCompare             : 140 140 142 142
valores              : 27 32 33 57 58 63
valoresAsig          : 64 65 66 67 68 69
valoresBool          : 114 115 115 116 116 116 119 120 121 121 124 125 126 126 130 131 132 133 134 134 135 135 145
valoresCampos        : 44
valoresMat           : 78 79 80 81 82 82 83 83 88 89 90 91 92 93 94 94 95 95 96 96 99 100 101 101 105 106
varAsig              : 6 12
varYVals             : 41 54 55 59 60 61 62 64 65 66 67 68 73 111 139
varsOps              : 4 12 42 74 112 138
vec                  : 23 24 26 26 43
vecVal               : 50

Parsing method: LALR

state 0

    (0) S' -> . g
    (1) g -> . sentencia g
    (2) g -> . ctrl g
    (3) g -> . empty
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (8) ctrl -> . if
    (9) ctrl -> . loop
    (30) empty -> .
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (64) varAsig -> . varYVals MULEQ valoresAsig
    (65) varAsig -> . varYVals DIVEQ valoresAsig
    (66) varAsig -> . varYVals MASEQ valoresAsig
    (67) varAsig -> . varYVals MENOSEQ valoresAsig
    (68) varAsig -> . varYVals = valoresAsig
    (69) varAsig -> . ID . ID = valoresAsig
    (13) if -> . IF ( expBool ) bloque else
    (10) loop -> . WHILE ( expBool ) bloque
    (11) loop -> . DO bloque WHILE ( expBool ) ;
    (12) loop -> . FOR ( varAsig ; expBool ; varsOps ) bloque
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (51) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( eMat )
    (26) funcBool -> . COLINEALES ( vec , vec )

    RETURN          shift and go to state 2
    $end            reduce using rule 30 (empty -> .)
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 6
    DO              shift and go to state 1
    FOR             shift and go to state 14
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    CAPITALIZAR     shift and go to state 23
    COLINEALES      shift and go to state 13

    funcBool                       shift and go to state 3
    ctrl                           shift and go to state 4
    funcInt                        shift and go to state 5
    loop                           shift and go to state 7
    vecVal                         shift and go to state 9
    if                             shift and go to state 10
    sentencia                      shift and go to state 11
    empty                          shift and go to state 25
    funcVoid                       shift and go to state 12
    func                           shift and go to state 15
    varAsig                        shift and go to state 18
    g                              shift and go to state 19
    funcString                     shift and go to state 20
    funcReturn                     shift and go to state 22
    varsOps                        shift and go to state 27
    varYVals                       shift and go to state 28

state 1

    (11) loop -> DO . bloque WHILE ( expBool ) ;
    (16) bloque -> . sentencia ;
    (17) bloque -> . { g }
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (64) varAsig -> . varYVals MULEQ valoresAsig
    (65) varAsig -> . varYVals DIVEQ valoresAsig
    (66) varAsig -> . varYVals MASEQ valoresAsig
    (67) varAsig -> . varYVals MENOSEQ valoresAsig
    (68) varAsig -> . varYVals = valoresAsig
    (69) varAsig -> . ID . ID = valoresAsig
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (51) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( eMat )
    (26) funcBool -> . COLINEALES ( vec , vec )

    {               shift and go to state 32
    RETURN          shift and go to state 2
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    ID              shift and go to state 16
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    CAPITALIZAR     shift and go to state 23
    COLINEALES      shift and go to state 13

    varAsig                        shift and go to state 18
    sentencia                      shift and go to state 31
    funcInt                        shift and go to state 5
    funcString                     shift and go to state 20
    funcVoid                       shift and go to state 12
    funcReturn                     shift and go to state 22
    funcBool                       shift and go to state 3
    varsOps                        shift and go to state 27
    func                           shift and go to state 15
    bloque                         shift and go to state 30
    varYVals                       shift and go to state 28
    vecVal                         shift and go to state 9

state 2

    (7) sentencia -> RETURN . ;

    ;               shift and go to state 33


state 3

    (22) funcReturn -> funcBool .

    ;               reduce using rule 22 (funcReturn -> funcBool .)


state 4

    (2) g -> ctrl . g
    (1) g -> . sentencia g
    (2) g -> . ctrl g
    (3) g -> . empty
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (8) ctrl -> . if
    (9) ctrl -> . loop
    (30) empty -> .
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (64) varAsig -> . varYVals MULEQ valoresAsig
    (65) varAsig -> . varYVals DIVEQ valoresAsig
    (66) varAsig -> . varYVals MASEQ valoresAsig
    (67) varAsig -> . varYVals MENOSEQ valoresAsig
    (68) varAsig -> . varYVals = valoresAsig
    (69) varAsig -> . ID . ID = valoresAsig
    (13) if -> . IF ( expBool ) bloque else
    (10) loop -> . WHILE ( expBool ) bloque
    (11) loop -> . DO bloque WHILE ( expBool ) ;
    (12) loop -> . FOR ( varAsig ; expBool ; varsOps ) bloque
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (51) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( eMat )
    (26) funcBool -> . COLINEALES ( vec , vec )

    RETURN          shift and go to state 2
    $end            reduce using rule 30 (empty -> .)
    }               reduce using rule 30 (empty -> .)
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 6
    DO              shift and go to state 1
    FOR             shift and go to state 14
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    CAPITALIZAR     shift and go to state 23
    COLINEALES      shift and go to state 13

    funcBool                       shift and go to state 3
    ctrl                           shift and go to state 4
    funcInt                        shift and go to state 5
    loop                           shift and go to state 7
    vecVal                         shift and go to state 9
    if                             shift and go to state 10
    sentencia                      shift and go to state 11
    empty                          shift and go to state 25
    funcVoid                       shift and go to state 12
    func                           shift and go to state 15
    varAsig                        shift and go to state 18
    g                              shift and go to state 34
    funcString                     shift and go to state 20
    funcReturn                     shift and go to state 22
    varsOps                        shift and go to state 27
    varYVals                       shift and go to state 28

state 5

    (20) funcReturn -> funcInt .

    ;               reduce using rule 20 (funcReturn -> funcInt .)


state 6

    (10) loop -> WHILE . ( expBool ) bloque

    (               shift and go to state 35


state 7

    (9) ctrl -> loop .

    RETURN          reduce using rule 9 (ctrl -> loop .)
    MENOSMENOS      reduce using rule 9 (ctrl -> loop .)
    MASMAS          reduce using rule 9 (ctrl -> loop .)
    ID              reduce using rule 9 (ctrl -> loop .)
    IF              reduce using rule 9 (ctrl -> loop .)
    WHILE           reduce using rule 9 (ctrl -> loop .)
    DO              reduce using rule 9 (ctrl -> loop .)
    FOR             reduce using rule 9 (ctrl -> loop .)
    PRINT           reduce using rule 9 (ctrl -> loop .)
    MULTIESCALAR    reduce using rule 9 (ctrl -> loop .)
    LENGTH          reduce using rule 9 (ctrl -> loop .)
    CAPITALIZAR     reduce using rule 9 (ctrl -> loop .)
    COLINEALES      reduce using rule 9 (ctrl -> loop .)
    $end            reduce using rule 9 (ctrl -> loop .)
    }               reduce using rule 9 (ctrl -> loop .)


state 8

    (27) funcVoid -> PRINT . ( valores )

    (               shift and go to state 36


state 9

    (50) varYVals -> vecVal .

    MASMAS          reduce using rule 50 (varYVals -> vecVal .)
    MENOSMENOS      reduce using rule 50 (varYVals -> vecVal .)
    MULEQ           reduce using rule 50 (varYVals -> vecVal .)
    DIVEQ           reduce using rule 50 (varYVals -> vecVal .)
    MASEQ           reduce using rule 50 (varYVals -> vecVal .)
    MENOSEQ         reduce using rule 50 (varYVals -> vecVal .)
    =               reduce using rule 50 (varYVals -> vecVal .)
    ^               reduce using rule 50 (varYVals -> vecVal .)
    *               reduce using rule 50 (varYVals -> vecVal .)
    /               reduce using rule 50 (varYVals -> vecVal .)
    %               reduce using rule 50 (varYVals -> vecVal .)
    +               reduce using rule 50 (varYVals -> vecVal .)
    -               reduce using rule 50 (varYVals -> vecVal .)
    >               reduce using rule 50 (varYVals -> vecVal .)
    <               reduce using rule 50 (varYVals -> vecVal .)
    )               reduce using rule 50 (varYVals -> vecVal .)
    ;               reduce using rule 50 (varYVals -> vecVal .)
    ,               reduce using rule 50 (varYVals -> vecVal .)
    ]               reduce using rule 50 (varYVals -> vecVal .)
    }               reduce using rule 50 (varYVals -> vecVal .)
    EQEQ            reduce using rule 50 (varYVals -> vecVal .)
    DISTINTO        reduce using rule 50 (varYVals -> vecVal .)
    AND             reduce using rule 50 (varYVals -> vecVal .)
    ?               reduce using rule 50 (varYVals -> vecVal .)
    OR              reduce using rule 50 (varYVals -> vecVal .)
    :               reduce using rule 50 (varYVals -> vecVal .)


state 10

    (8) ctrl -> if .

    RETURN          reduce using rule 8 (ctrl -> if .)
    MENOSMENOS      reduce using rule 8 (ctrl -> if .)
    MASMAS          reduce using rule 8 (ctrl -> if .)
    ID              reduce using rule 8 (ctrl -> if .)
    IF              reduce using rule 8 (ctrl -> if .)
    WHILE           reduce using rule 8 (ctrl -> if .)
    DO              reduce using rule 8 (ctrl -> if .)
    FOR             reduce using rule 8 (ctrl -> if .)
    PRINT           reduce using rule 8 (ctrl -> if .)
    MULTIESCALAR    reduce using rule 8 (ctrl -> if .)
    LENGTH          reduce using rule 8 (ctrl -> if .)
    CAPITALIZAR     reduce using rule 8 (ctrl -> if .)
    COLINEALES      reduce using rule 8 (ctrl -> if .)
    $end            reduce using rule 8 (ctrl -> if .)
    }               reduce using rule 8 (ctrl -> if .)


state 11

    (1) g -> sentencia . g
    (1) g -> . sentencia g
    (2) g -> . ctrl g
    (3) g -> . empty
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (8) ctrl -> . if
    (9) ctrl -> . loop
    (30) empty -> .
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (64) varAsig -> . varYVals MULEQ valoresAsig
    (65) varAsig -> . varYVals DIVEQ valoresAsig
    (66) varAsig -> . varYVals MASEQ valoresAsig
    (67) varAsig -> . varYVals MENOSEQ valoresAsig
    (68) varAsig -> . varYVals = valoresAsig
    (69) varAsig -> . ID . ID = valoresAsig
    (13) if -> . IF ( expBool ) bloque else
    (10) loop -> . WHILE ( expBool ) bloque
    (11) loop -> . DO bloque WHILE ( expBool ) ;
    (12) loop -> . FOR ( varAsig ; expBool ; varsOps ) bloque
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (51) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( eMat )
    (26) funcBool -> . COLINEALES ( vec , vec )

    RETURN          shift and go to state 2
    $end            reduce using rule 30 (empty -> .)
    }               reduce using rule 30 (empty -> .)
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 6
    DO              shift and go to state 1
    FOR             shift and go to state 14
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    CAPITALIZAR     shift and go to state 23
    COLINEALES      shift and go to state 13

    funcBool                       shift and go to state 3
    ctrl                           shift and go to state 4
    funcInt                        shift and go to state 5
    loop                           shift and go to state 7
    vecVal                         shift and go to state 9
    if                             shift and go to state 10
    sentencia                      shift and go to state 11
    empty                          shift and go to state 25
    funcVoid                       shift and go to state 12
    func                           shift and go to state 15
    varAsig                        shift and go to state 18
    g                              shift and go to state 37
    funcString                     shift and go to state 20
    funcReturn                     shift and go to state 22
    varsOps                        shift and go to state 27
    varYVals                       shift and go to state 28

state 12

    (19) func -> funcVoid .

    ;               reduce using rule 19 (func -> funcVoid .)


state 13

    (26) funcBool -> COLINEALES . ( vec , vec )

    (               shift and go to state 38


state 14

    (12) loop -> FOR . ( varAsig ; expBool ; varsOps ) bloque

    (               shift and go to state 39


state 15

    (5) sentencia -> func . ;

    ;               shift and go to state 40


state 16

    (69) varAsig -> ID . . ID = valoresAsig
    (49) varYVals -> ID .
    (51) vecVal -> ID . m
    (52) m -> . [ INT ]
    (53) m -> . [ INT ] m
    (54) m -> . [ varYVals ] m
    (55) m -> . [ varYVals ]

    .               shift and go to state 42
    MASMAS          reduce using rule 49 (varYVals -> ID .)
    MENOSMENOS      reduce using rule 49 (varYVals -> ID .)
    MULEQ           reduce using rule 49 (varYVals -> ID .)
    DIVEQ           reduce using rule 49 (varYVals -> ID .)
    MASEQ           reduce using rule 49 (varYVals -> ID .)
    MENOSEQ         reduce using rule 49 (varYVals -> ID .)
    =               reduce using rule 49 (varYVals -> ID .)
    [               shift and go to state 43

    m                              shift and go to state 41

state 17

    (13) if -> IF . ( expBool ) bloque else

    (               shift and go to state 44


state 18

    (6) sentencia -> varAsig . ;

    ;               shift and go to state 45


state 19

    (0) S' -> g .



state 20

    (21) funcReturn -> funcString .

    ;               reduce using rule 21 (funcReturn -> funcString .)


state 21

    (23) funcInt -> MULTIESCALAR . ( vec , eMat , param )

    (               shift and go to state 46


state 22

    (18) func -> funcReturn .

    ;               reduce using rule 18 (func -> funcReturn .)


state 23

    (25) funcString -> CAPITALIZAR . ( eMat )

    (               shift and go to state 47


state 24

    (24) funcInt -> LENGTH . ( vec )

    (               shift and go to state 48


state 25

    (3) g -> empty .

    $end            reduce using rule 3 (g -> empty .)
    }               reduce using rule 3 (g -> empty .)


state 26

    (60) varsOps -> MASMAS . varYVals
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (51) vecVal -> . ID m

    ID              shift and go to state 50

    varYVals                       shift and go to state 49
    vecVal                         shift and go to state 9

state 27

    (4) sentencia -> varsOps . ;

    ;               shift and go to state 51


state 28

    (61) varsOps -> varYVals . MASMAS
    (62) varsOps -> varYVals . MENOSMENOS
    (64) varAsig -> varYVals . MULEQ valoresAsig
    (65) varAsig -> varYVals . DIVEQ valoresAsig
    (66) varAsig -> varYVals . MASEQ valoresAsig
    (67) varAsig -> varYVals . MENOSEQ valoresAsig
    (68) varAsig -> varYVals . = valoresAsig

    MASMAS          shift and go to state 56
    MENOSMENOS      shift and go to state 53
    MULEQ           shift and go to state 57
    DIVEQ           shift and go to state 58
    MASEQ           shift and go to state 54
    MENOSEQ         shift and go to state 52
    =               shift and go to state 55


state 29

    (59) varsOps -> MENOSMENOS . varYVals
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (51) vecVal -> . ID m

    ID              shift and go to state 50

    varYVals                       shift and go to state 59
    vecVal                         shift and go to state 9

state 30

    (11) loop -> DO bloque . WHILE ( expBool ) ;

    WHILE           shift and go to state 60


state 31

    (16) bloque -> sentencia . ;

    ;               shift and go to state 61


state 32

    (17) bloque -> { . g }
    (1) g -> . sentencia g
    (2) g -> . ctrl g
    (3) g -> . empty
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (8) ctrl -> . if
    (9) ctrl -> . loop
    (30) empty -> .
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (64) varAsig -> . varYVals MULEQ valoresAsig
    (65) varAsig -> . varYVals DIVEQ valoresAsig
    (66) varAsig -> . varYVals MASEQ valoresAsig
    (67) varAsig -> . varYVals MENOSEQ valoresAsig
    (68) varAsig -> . varYVals = valoresAsig
    (69) varAsig -> . ID . ID = valoresAsig
    (13) if -> . IF ( expBool ) bloque else
    (10) loop -> . WHILE ( expBool ) bloque
    (11) loop -> . DO bloque WHILE ( expBool ) ;
    (12) loop -> . FOR ( varAsig ; expBool ; varsOps ) bloque
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (51) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( eMat )
    (26) funcBool -> . COLINEALES ( vec , vec )

    RETURN          shift and go to state 2
    }               reduce using rule 30 (empty -> .)
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 6
    DO              shift and go to state 1
    FOR             shift and go to state 14
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    CAPITALIZAR     shift and go to state 23
    COLINEALES      shift and go to state 13

    funcBool                       shift and go to state 3
    ctrl                           shift and go to state 4
    funcInt                        shift and go to state 5
    loop                           shift and go to state 7
    vecVal                         shift and go to state 9
    if                             shift and go to state 10
    sentencia                      shift and go to state 11
    empty                          shift and go to state 25
    funcVoid                       shift and go to state 12
    func                           shift and go to state 15
    varAsig                        shift and go to state 18
    g                              shift and go to state 62
    funcString                     shift and go to state 20
    funcReturn                     shift and go to state 22
    varsOps                        shift and go to state 27
    varYVals                       shift and go to state 28

state 33

    (7) sentencia -> RETURN ; .

    RETURN          reduce using rule 7 (sentencia -> RETURN ; .)
    MENOSMENOS      reduce using rule 7 (sentencia -> RETURN ; .)
    MASMAS          reduce using rule 7 (sentencia -> RETURN ; .)
    ID              reduce using rule 7 (sentencia -> RETURN ; .)
    IF              reduce using rule 7 (sentencia -> RETURN ; .)
    WHILE           reduce using rule 7 (sentencia -> RETURN ; .)
    DO              reduce using rule 7 (sentencia -> RETURN ; .)
    FOR             reduce using rule 7 (sentencia -> RETURN ; .)
    PRINT           reduce using rule 7 (sentencia -> RETURN ; .)
    MULTIESCALAR    reduce using rule 7 (sentencia -> RETURN ; .)
    LENGTH          reduce using rule 7 (sentencia -> RETURN ; .)
    CAPITALIZAR     reduce using rule 7 (sentencia -> RETURN ; .)
    COLINEALES      reduce using rule 7 (sentencia -> RETURN ; .)
    $end            reduce using rule 7 (sentencia -> RETURN ; .)
    }               reduce using rule 7 (sentencia -> RETURN ; .)
    ;               reduce using rule 7 (sentencia -> RETURN ; .)


state 34

    (2) g -> ctrl g .

    $end            reduce using rule 2 (g -> ctrl g .)
    }               reduce using rule 2 (g -> ctrl g .)


state 35

    (10) loop -> WHILE ( . expBool ) bloque
    (113) expBool -> . or ? expBool : expBool
    (114) expBool -> . valoresBool ? expBool : expBool
    (115) expBool -> . or ? valoresBool : valoresBool
    (116) expBool -> . valoresBool ? valoresBool : valoresBool
    (117) expBool -> . or
    (118) or -> . or OR and
    (119) or -> . valoresBool OR and
    (120) or -> . or OR valoresBool
    (121) or -> . valoresBool OR valoresBool
    (122) or -> . and
    (109) valoresBool -> . BOOL
    (110) valoresBool -> . funcBool
    (111) valoresBool -> . varYVals
    (112) valoresBool -> . varsOps
    (123) and -> . and AND eq
    (124) and -> . valoresBool AND eq
    (125) and -> . and AND valoresBool
    (126) and -> . valoresBool AND valoresBool
    (127) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (128) eq -> . eq EQEQ parenBool
    (129) eq -> . eq DISTINTO parenBool
    (130) eq -> . valoresBool EQEQ parenBool
    (131) eq -> . valoresBool DISTINTO parenBool
    (132) eq -> . eq EQEQ valoresBool
    (133) eq -> . eq DISTINTO valoresBool
    (134) eq -> . valoresBool EQEQ valoresBool
    (135) eq -> . valoresBool DISTINTO valoresBool
    (136) eq -> . mayor
    (51) vecVal -> . ID m
    (140) mayor -> . tCompare > tCompare
    (141) mayor -> . menor
    (137) tCompare -> . eMat
    (138) tCompare -> . varsOps
    (139) tCompare -> . varYVals
    (142) menor -> . tCompare < tCompare
    (143) menor -> . not
    (76) eMat -> . eMat + p
    (77) eMat -> . eMat - p
    (78) eMat -> . valoresMat + p
    (79) eMat -> . valoresMat - p
    (80) eMat -> . eMat + valoresMat
    (81) eMat -> . eMat - valoresMat
    (82) eMat -> . valoresMat + valoresMat
    (83) eMat -> . valoresMat - valoresMat
    (84) eMat -> . p
    (144) not -> . NOT not
    (145) not -> . NOT valoresBool
    (146) not -> . parenBool
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (85) p -> . p * exp
    (86) p -> . p / exp
    (87) p -> . p % exp
    (88) p -> . valoresMat * exp
    (89) p -> . valoresMat / exp
    (90) p -> . valoresMat % exp
    (91) p -> . p * valoresMat
    (92) p -> . p / valoresMat
    (93) p -> . p % valoresMat
    (94) p -> . valoresMat * valoresMat
    (95) p -> . valoresMat / valoresMat
    (96) p -> . valoresMat % valoresMat
    (97) p -> . exp
    (147) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (108) paren -> . ( eMat )

    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 87
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    (               shift and go to state 72
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 74
    +               shift and go to state 73

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 71
    vecVal                         shift and go to state 9
    paren                          shift and go to state 77
    iSing                          shift and go to state 75
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    varYVals                       shift and go to state 88
    or                             shift and go to state 89
    p                              shift and go to state 82
    varsOps                        shift and go to state 84
    exp                            shift and go to state 85
    mayor                          shift and go to state 66
    parenBool                      shift and go to state 86
    expBool                        shift and go to state 90

state 36

    (27) funcVoid -> PRINT ( . valores )
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . reg
    (37) valores -> . INT
    (38) valores -> . FLOAT
    (39) valores -> . STRING
    (40) valores -> . BOOL
    (41) valores -> . varYVals
    (42) valores -> . varsOps
    (43) valores -> . vec
    (44) valores -> . ID . valoresCampos
    (45) valores -> . RES
    (76) eMat -> . eMat + p
    (77) eMat -> . eMat - p
    (78) eMat -> . valoresMat + p
    (79) eMat -> . valoresMat - p
    (80) eMat -> . eMat + valoresMat
    (81) eMat -> . eMat - valoresMat
    (82) eMat -> . valoresMat + valoresMat
    (83) eMat -> . valoresMat - valoresMat
    (84) eMat -> . p
    (113) expBool -> . or ? expBool : expBool
    (114) expBool -> . valoresBool ? expBool : expBool
    (115) expBool -> . or ? valoresBool : valoresBool
    (116) expBool -> . valoresBool ? valoresBool : valoresBool
    (117) expBool -> . or
    (56) reg -> . { campos }
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (31) vec -> . [ elem ]
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (85) p -> . p * exp
    (86) p -> . p / exp
    (87) p -> . p % exp
    (88) p -> . valoresMat * exp
    (89) p -> . valoresMat / exp
    (90) p -> . valoresMat % exp
    (91) p -> . p * valoresMat
    (92) p -> . p / valoresMat
    (93) p -> . p % valoresMat
    (94) p -> . valoresMat * valoresMat
    (95) p -> . valoresMat / valoresMat
    (96) p -> . valoresMat % valoresMat
    (97) p -> . exp
    (118) or -> . or OR and
    (119) or -> . valoresBool OR and
    (120) or -> . or OR valoresBool
    (121) or -> . valoresBool OR valoresBool
    (122) or -> . and
    (109) valoresBool -> . BOOL
    (110) valoresBool -> . funcBool
    (111) valoresBool -> . varYVals
    (112) valoresBool -> . varsOps
    (51) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (123) and -> . and AND eq
    (124) and -> . valoresBool AND eq
    (125) and -> . and AND valoresBool
    (126) and -> . valoresBool AND valoresBool
    (127) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (128) eq -> . eq EQEQ parenBool
    (129) eq -> . eq DISTINTO parenBool
    (130) eq -> . valoresBool EQEQ parenBool
    (131) eq -> . valoresBool DISTINTO parenBool
    (132) eq -> . eq EQEQ valoresBool
    (133) eq -> . eq DISTINTO valoresBool
    (134) eq -> . valoresBool EQEQ valoresBool
    (135) eq -> . valoresBool DISTINTO valoresBool
    (136) eq -> . mayor
    (108) paren -> . ( eMat )
    (140) mayor -> . tCompare > tCompare
    (141) mayor -> . menor
    (137) tCompare -> . eMat
    (138) tCompare -> . varsOps
    (139) tCompare -> . varYVals
    (142) menor -> . tCompare < tCompare
    (143) menor -> . not
    (144) not -> . NOT not
    (145) not -> . NOT valoresBool
    (146) not -> . parenBool
    (147) parenBool -> . ( expBool )

    INT             shift and go to state 99
    FLOAT           shift and go to state 100
    STRING          shift and go to state 96
    BOOL            shift and go to state 102
    ID              shift and go to state 98
    RES             shift and go to state 91
    {               shift and go to state 104
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    [               shift and go to state 97
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 93
    NOT             shift and go to state 87

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    mayor                          shift and go to state 66
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 92
    vecVal                         shift and go to state 9
    vec                            shift and go to state 94
    paren                          shift and go to state 77
    reg                            shift and go to state 95
    varsOps                        shift and go to state 103
    exp                            shift and go to state 85
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    valores                        shift and go to state 101
    parenBool                      shift and go to state 86
    p                              shift and go to state 82
    iSing                          shift and go to state 75
    varYVals                       shift and go to state 105
    or                             shift and go to state 89
    expBool                        shift and go to state 106

state 37

    (1) g -> sentencia g .

    $end            reduce using rule 1 (g -> sentencia g .)
    }               reduce using rule 1 (g -> sentencia g .)


state 38

    (26) funcBool -> COLINEALES ( . vec , vec )
    (31) vec -> . [ elem ]

    [               shift and go to state 97

    vec                            shift and go to state 107

state 39

    (12) loop -> FOR ( . varAsig ; expBool ; varsOps ) bloque
    (64) varAsig -> . varYVals MULEQ valoresAsig
    (65) varAsig -> . varYVals DIVEQ valoresAsig
    (66) varAsig -> . varYVals MASEQ valoresAsig
    (67) varAsig -> . varYVals MENOSEQ valoresAsig
    (68) varAsig -> . varYVals = valoresAsig
    (69) varAsig -> . ID . ID = valoresAsig
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (51) vecVal -> . ID m

    ID              shift and go to state 16

    varAsig                        shift and go to state 108
    varYVals                       shift and go to state 109
    vecVal                         shift and go to state 9

state 40

    (5) sentencia -> func ; .

    RETURN          reduce using rule 5 (sentencia -> func ; .)
    MENOSMENOS      reduce using rule 5 (sentencia -> func ; .)
    MASMAS          reduce using rule 5 (sentencia -> func ; .)
    ID              reduce using rule 5 (sentencia -> func ; .)
    IF              reduce using rule 5 (sentencia -> func ; .)
    WHILE           reduce using rule 5 (sentencia -> func ; .)
    DO              reduce using rule 5 (sentencia -> func ; .)
    FOR             reduce using rule 5 (sentencia -> func ; .)
    PRINT           reduce using rule 5 (sentencia -> func ; .)
    MULTIESCALAR    reduce using rule 5 (sentencia -> func ; .)
    LENGTH          reduce using rule 5 (sentencia -> func ; .)
    CAPITALIZAR     reduce using rule 5 (sentencia -> func ; .)
    COLINEALES      reduce using rule 5 (sentencia -> func ; .)
    $end            reduce using rule 5 (sentencia -> func ; .)
    }               reduce using rule 5 (sentencia -> func ; .)
    ;               reduce using rule 5 (sentencia -> func ; .)


state 41

    (51) vecVal -> ID m .

    MASMAS          reduce using rule 51 (vecVal -> ID m .)
    MENOSMENOS      reduce using rule 51 (vecVal -> ID m .)
    )               reduce using rule 51 (vecVal -> ID m .)
    +               reduce using rule 51 (vecVal -> ID m .)
    -               reduce using rule 51 (vecVal -> ID m .)
    *               reduce using rule 51 (vecVal -> ID m .)
    /               reduce using rule 51 (vecVal -> ID m .)
    %               reduce using rule 51 (vecVal -> ID m .)
    ^               reduce using rule 51 (vecVal -> ID m .)
    ?               reduce using rule 51 (vecVal -> ID m .)
    OR              reduce using rule 51 (vecVal -> ID m .)
    AND             reduce using rule 51 (vecVal -> ID m .)
    EQEQ            reduce using rule 51 (vecVal -> ID m .)
    DISTINTO        reduce using rule 51 (vecVal -> ID m .)
    >               reduce using rule 51 (vecVal -> ID m .)
    <               reduce using rule 51 (vecVal -> ID m .)
    ;               reduce using rule 51 (vecVal -> ID m .)
    ,               reduce using rule 51 (vecVal -> ID m .)
    ]               reduce using rule 51 (vecVal -> ID m .)
    }               reduce using rule 51 (vecVal -> ID m .)
    :               reduce using rule 51 (vecVal -> ID m .)
    MULEQ           reduce using rule 51 (vecVal -> ID m .)
    DIVEQ           reduce using rule 51 (vecVal -> ID m .)
    MASEQ           reduce using rule 51 (vecVal -> ID m .)
    MENOSEQ         reduce using rule 51 (vecVal -> ID m .)
    =               reduce using rule 51 (vecVal -> ID m .)


state 42

    (69) varAsig -> ID . . ID = valoresAsig

    ID              shift and go to state 110


state 43

    (52) m -> [ . INT ]
    (53) m -> [ . INT ] m
    (54) m -> [ . varYVals ] m
    (55) m -> [ . varYVals ]
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (51) vecVal -> . ID m

    INT             shift and go to state 111
    ID              shift and go to state 50

    varYVals                       shift and go to state 112
    vecVal                         shift and go to state 9

state 44

    (13) if -> IF ( . expBool ) bloque else
    (113) expBool -> . or ? expBool : expBool
    (114) expBool -> . valoresBool ? expBool : expBool
    (115) expBool -> . or ? valoresBool : valoresBool
    (116) expBool -> . valoresBool ? valoresBool : valoresBool
    (117) expBool -> . or
    (118) or -> . or OR and
    (119) or -> . valoresBool OR and
    (120) or -> . or OR valoresBool
    (121) or -> . valoresBool OR valoresBool
    (122) or -> . and
    (109) valoresBool -> . BOOL
    (110) valoresBool -> . funcBool
    (111) valoresBool -> . varYVals
    (112) valoresBool -> . varsOps
    (123) and -> . and AND eq
    (124) and -> . valoresBool AND eq
    (125) and -> . and AND valoresBool
    (126) and -> . valoresBool AND valoresBool
    (127) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (128) eq -> . eq EQEQ parenBool
    (129) eq -> . eq DISTINTO parenBool
    (130) eq -> . valoresBool EQEQ parenBool
    (131) eq -> . valoresBool DISTINTO parenBool
    (132) eq -> . eq EQEQ valoresBool
    (133) eq -> . eq DISTINTO valoresBool
    (134) eq -> . valoresBool EQEQ valoresBool
    (135) eq -> . valoresBool DISTINTO valoresBool
    (136) eq -> . mayor
    (51) vecVal -> . ID m
    (140) mayor -> . tCompare > tCompare
    (141) mayor -> . menor
    (137) tCompare -> . eMat
    (138) tCompare -> . varsOps
    (139) tCompare -> . varYVals
    (142) menor -> . tCompare < tCompare
    (143) menor -> . not
    (76) eMat -> . eMat + p
    (77) eMat -> . eMat - p
    (78) eMat -> . valoresMat + p
    (79) eMat -> . valoresMat - p
    (80) eMat -> . eMat + valoresMat
    (81) eMat -> . eMat - valoresMat
    (82) eMat -> . valoresMat + valoresMat
    (83) eMat -> . valoresMat - valoresMat
    (84) eMat -> . p
    (144) not -> . NOT not
    (145) not -> . NOT valoresBool
    (146) not -> . parenBool
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (85) p -> . p * exp
    (86) p -> . p / exp
    (87) p -> . p % exp
    (88) p -> . valoresMat * exp
    (89) p -> . valoresMat / exp
    (90) p -> . valoresMat % exp
    (91) p -> . p * valoresMat
    (92) p -> . p / valoresMat
    (93) p -> . p % valoresMat
    (94) p -> . valoresMat * valoresMat
    (95) p -> . valoresMat / valoresMat
    (96) p -> . valoresMat % valoresMat
    (97) p -> . exp
    (147) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (108) paren -> . ( eMat )

    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 87
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    (               shift and go to state 72
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 74
    +               shift and go to state 73

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    mayor                          shift and go to state 66
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 71
    vecVal                         shift and go to state 9
    paren                          shift and go to state 77
    iSing                          shift and go to state 75
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    parenBool                      shift and go to state 86
    p                              shift and go to state 82
    varsOps                        shift and go to state 84
    exp                            shift and go to state 85
    varYVals                       shift and go to state 88
    or                             shift and go to state 89
    expBool                        shift and go to state 113

state 45

    (6) sentencia -> varAsig ; .

    RETURN          reduce using rule 6 (sentencia -> varAsig ; .)
    MENOSMENOS      reduce using rule 6 (sentencia -> varAsig ; .)
    MASMAS          reduce using rule 6 (sentencia -> varAsig ; .)
    ID              reduce using rule 6 (sentencia -> varAsig ; .)
    IF              reduce using rule 6 (sentencia -> varAsig ; .)
    WHILE           reduce using rule 6 (sentencia -> varAsig ; .)
    DO              reduce using rule 6 (sentencia -> varAsig ; .)
    FOR             reduce using rule 6 (sentencia -> varAsig ; .)
    PRINT           reduce using rule 6 (sentencia -> varAsig ; .)
    MULTIESCALAR    reduce using rule 6 (sentencia -> varAsig ; .)
    LENGTH          reduce using rule 6 (sentencia -> varAsig ; .)
    CAPITALIZAR     reduce using rule 6 (sentencia -> varAsig ; .)
    COLINEALES      reduce using rule 6 (sentencia -> varAsig ; .)
    $end            reduce using rule 6 (sentencia -> varAsig ; .)
    }               reduce using rule 6 (sentencia -> varAsig ; .)
    ;               reduce using rule 6 (sentencia -> varAsig ; .)


state 46

    (23) funcInt -> MULTIESCALAR ( . vec , eMat , param )
    (31) vec -> . [ elem ]

    [               shift and go to state 97

    vec                            shift and go to state 114

state 47

    (25) funcString -> CAPITALIZAR ( . eMat )
    (76) eMat -> . eMat + p
    (77) eMat -> . eMat - p
    (78) eMat -> . valoresMat + p
    (79) eMat -> . valoresMat - p
    (80) eMat -> . eMat + valoresMat
    (81) eMat -> . eMat - valoresMat
    (82) eMat -> . valoresMat + valoresMat
    (83) eMat -> . valoresMat - valoresMat
    (84) eMat -> . p
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (85) p -> . p * exp
    (86) p -> . p / exp
    (87) p -> . p % exp
    (88) p -> . valoresMat * exp
    (89) p -> . valoresMat / exp
    (90) p -> . valoresMat % exp
    (91) p -> . p * valoresMat
    (92) p -> . p / valoresMat
    (93) p -> . p % valoresMat
    (94) p -> . valoresMat * valoresMat
    (95) p -> . valoresMat / valoresMat
    (96) p -> . valoresMat % valoresMat
    (97) p -> . exp
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (51) vecVal -> . ID m
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (108) paren -> . ( eMat )

    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 116

    eMat                           shift and go to state 115
    funcInt                        shift and go to state 65
    iSing                          shift and go to state 75
    p                              shift and go to state 82
    varsOps                        shift and go to state 117
    valoresMat                     shift and go to state 67
    paren                          shift and go to state 77
    exp                            shift and go to state 85
    varYVals                       shift and go to state 118
    vecVal                         shift and go to state 9

state 48

    (24) funcInt -> LENGTH ( . vec )
    (31) vec -> . [ elem ]

    [               shift and go to state 97

    vec                            shift and go to state 119

state 49

    (60) varsOps -> MASMAS varYVals .

    *               reduce using rule 60 (varsOps -> MASMAS varYVals .)
    /               reduce using rule 60 (varsOps -> MASMAS varYVals .)
    %               reduce using rule 60 (varsOps -> MASMAS varYVals .)
    ^               reduce using rule 60 (varsOps -> MASMAS varYVals .)
    +               reduce using rule 60 (varsOps -> MASMAS varYVals .)
    -               reduce using rule 60 (varsOps -> MASMAS varYVals .)
    >               reduce using rule 60 (varsOps -> MASMAS varYVals .)
    <               reduce using rule 60 (varsOps -> MASMAS varYVals .)
    )               reduce using rule 60 (varsOps -> MASMAS varYVals .)
    ;               reduce using rule 60 (varsOps -> MASMAS varYVals .)
    ,               reduce using rule 60 (varsOps -> MASMAS varYVals .)
    ]               reduce using rule 60 (varsOps -> MASMAS varYVals .)
    }               reduce using rule 60 (varsOps -> MASMAS varYVals .)
    EQEQ            reduce using rule 60 (varsOps -> MASMAS varYVals .)
    DISTINTO        reduce using rule 60 (varsOps -> MASMAS varYVals .)
    AND             reduce using rule 60 (varsOps -> MASMAS varYVals .)
    ?               reduce using rule 60 (varsOps -> MASMAS varYVals .)
    OR              reduce using rule 60 (varsOps -> MASMAS varYVals .)
    :               reduce using rule 60 (varsOps -> MASMAS varYVals .)


state 50

    (49) varYVals -> ID .
    (51) vecVal -> ID . m
    (52) m -> . [ INT ]
    (53) m -> . [ INT ] m
    (54) m -> . [ varYVals ] m
    (55) m -> . [ varYVals ]

    MASMAS          reduce using rule 49 (varYVals -> ID .)
    MENOSMENOS      reduce using rule 49 (varYVals -> ID .)
    ^               reduce using rule 49 (varYVals -> ID .)
    *               reduce using rule 49 (varYVals -> ID .)
    /               reduce using rule 49 (varYVals -> ID .)
    %               reduce using rule 49 (varYVals -> ID .)
    +               reduce using rule 49 (varYVals -> ID .)
    -               reduce using rule 49 (varYVals -> ID .)
    >               reduce using rule 49 (varYVals -> ID .)
    <               reduce using rule 49 (varYVals -> ID .)
    )               reduce using rule 49 (varYVals -> ID .)
    ;               reduce using rule 49 (varYVals -> ID .)
    ,               reduce using rule 49 (varYVals -> ID .)
    ]               reduce using rule 49 (varYVals -> ID .)
    }               reduce using rule 49 (varYVals -> ID .)
    EQEQ            reduce using rule 49 (varYVals -> ID .)
    DISTINTO        reduce using rule 49 (varYVals -> ID .)
    AND             reduce using rule 49 (varYVals -> ID .)
    ?               reduce using rule 49 (varYVals -> ID .)
    OR              reduce using rule 49 (varYVals -> ID .)
    :               reduce using rule 49 (varYVals -> ID .)
    [               shift and go to state 43

    m                              shift and go to state 41

state 51

    (4) sentencia -> varsOps ; .

    RETURN          reduce using rule 4 (sentencia -> varsOps ; .)
    MENOSMENOS      reduce using rule 4 (sentencia -> varsOps ; .)
    MASMAS          reduce using rule 4 (sentencia -> varsOps ; .)
    ID              reduce using rule 4 (sentencia -> varsOps ; .)
    IF              reduce using rule 4 (sentencia -> varsOps ; .)
    WHILE           reduce using rule 4 (sentencia -> varsOps ; .)
    DO              reduce using rule 4 (sentencia -> varsOps ; .)
    FOR             reduce using rule 4 (sentencia -> varsOps ; .)
    PRINT           reduce using rule 4 (sentencia -> varsOps ; .)
    MULTIESCALAR    reduce using rule 4 (sentencia -> varsOps ; .)
    LENGTH          reduce using rule 4 (sentencia -> varsOps ; .)
    CAPITALIZAR     reduce using rule 4 (sentencia -> varsOps ; .)
    COLINEALES      reduce using rule 4 (sentencia -> varsOps ; .)
    $end            reduce using rule 4 (sentencia -> varsOps ; .)
    }               reduce using rule 4 (sentencia -> varsOps ; .)
    ;               reduce using rule 4 (sentencia -> varsOps ; .)


state 52

    (67) varAsig -> varYVals MENOSEQ . valoresAsig
    (63) valoresAsig -> . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . reg
    (37) valores -> . INT
    (38) valores -> . FLOAT
    (39) valores -> . STRING
    (40) valores -> . BOOL
    (41) valores -> . varYVals
    (42) valores -> . varsOps
    (43) valores -> . vec
    (44) valores -> . ID . valoresCampos
    (45) valores -> . RES
    (76) eMat -> . eMat + p
    (77) eMat -> . eMat - p
    (78) eMat -> . valoresMat + p
    (79) eMat -> . valoresMat - p
    (80) eMat -> . eMat + valoresMat
    (81) eMat -> . eMat - valoresMat
    (82) eMat -> . valoresMat + valoresMat
    (83) eMat -> . valoresMat - valoresMat
    (84) eMat -> . p
    (113) expBool -> . or ? expBool : expBool
    (114) expBool -> . valoresBool ? expBool : expBool
    (115) expBool -> . or ? valoresBool : valoresBool
    (116) expBool -> . valoresBool ? valoresBool : valoresBool
    (117) expBool -> . or
    (56) reg -> . { campos }
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (31) vec -> . [ elem ]
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (85) p -> . p * exp
    (86) p -> . p / exp
    (87) p -> . p % exp
    (88) p -> . valoresMat * exp
    (89) p -> . valoresMat / exp
    (90) p -> . valoresMat % exp
    (91) p -> . p * valoresMat
    (92) p -> . p / valoresMat
    (93) p -> . p % valoresMat
    (94) p -> . valoresMat * valoresMat
    (95) p -> . valoresMat / valoresMat
    (96) p -> . valoresMat % valoresMat
    (97) p -> . exp
    (118) or -> . or OR and
    (119) or -> . valoresBool OR and
    (120) or -> . or OR valoresBool
    (121) or -> . valoresBool OR valoresBool
    (122) or -> . and
    (109) valoresBool -> . BOOL
    (110) valoresBool -> . funcBool
    (111) valoresBool -> . varYVals
    (112) valoresBool -> . varsOps
    (51) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (123) and -> . and AND eq
    (124) and -> . valoresBool AND eq
    (125) and -> . and AND valoresBool
    (126) and -> . valoresBool AND valoresBool
    (127) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (128) eq -> . eq EQEQ parenBool
    (129) eq -> . eq DISTINTO parenBool
    (130) eq -> . valoresBool EQEQ parenBool
    (131) eq -> . valoresBool DISTINTO parenBool
    (132) eq -> . eq EQEQ valoresBool
    (133) eq -> . eq DISTINTO valoresBool
    (134) eq -> . valoresBool EQEQ valoresBool
    (135) eq -> . valoresBool DISTINTO valoresBool
    (136) eq -> . mayor
    (108) paren -> . ( eMat )
    (140) mayor -> . tCompare > tCompare
    (141) mayor -> . menor
    (137) tCompare -> . eMat
    (138) tCompare -> . varsOps
    (139) tCompare -> . varYVals
    (142) menor -> . tCompare < tCompare
    (143) menor -> . not
    (144) not -> . NOT not
    (145) not -> . NOT valoresBool
    (146) not -> . parenBool
    (147) parenBool -> . ( expBool )

    INT             shift and go to state 99
    FLOAT           shift and go to state 100
    STRING          shift and go to state 96
    BOOL            shift and go to state 102
    ID              shift and go to state 98
    RES             shift and go to state 91
    {               shift and go to state 104
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    [               shift and go to state 97
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 93
    NOT             shift and go to state 87

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    mayor                          shift and go to state 66
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 92
    vecVal                         shift and go to state 9
    vec                            shift and go to state 94
    paren                          shift and go to state 77
    reg                            shift and go to state 95
    iSing                          shift and go to state 75
    exp                            shift and go to state 85
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    valoresAsig                    shift and go to state 120
    valores                        shift and go to state 121
    parenBool                      shift and go to state 86
    p                              shift and go to state 82
    varsOps                        shift and go to state 103
    varYVals                       shift and go to state 105
    or                             shift and go to state 89
    expBool                        shift and go to state 106

state 53

    (62) varsOps -> varYVals MENOSMENOS .

    *               reduce using rule 62 (varsOps -> varYVals MENOSMENOS .)
    /               reduce using rule 62 (varsOps -> varYVals MENOSMENOS .)
    %               reduce using rule 62 (varsOps -> varYVals MENOSMENOS .)
    ^               reduce using rule 62 (varsOps -> varYVals MENOSMENOS .)
    +               reduce using rule 62 (varsOps -> varYVals MENOSMENOS .)
    -               reduce using rule 62 (varsOps -> varYVals MENOSMENOS .)
    >               reduce using rule 62 (varsOps -> varYVals MENOSMENOS .)
    <               reduce using rule 62 (varsOps -> varYVals MENOSMENOS .)
    )               reduce using rule 62 (varsOps -> varYVals MENOSMENOS .)
    ;               reduce using rule 62 (varsOps -> varYVals MENOSMENOS .)
    ,               reduce using rule 62 (varsOps -> varYVals MENOSMENOS .)
    ]               reduce using rule 62 (varsOps -> varYVals MENOSMENOS .)
    }               reduce using rule 62 (varsOps -> varYVals MENOSMENOS .)
    EQEQ            reduce using rule 62 (varsOps -> varYVals MENOSMENOS .)
    DISTINTO        reduce using rule 62 (varsOps -> varYVals MENOSMENOS .)
    AND             reduce using rule 62 (varsOps -> varYVals MENOSMENOS .)
    ?               reduce using rule 62 (varsOps -> varYVals MENOSMENOS .)
    OR              reduce using rule 62 (varsOps -> varYVals MENOSMENOS .)
    :               reduce using rule 62 (varsOps -> varYVals MENOSMENOS .)


state 54

    (66) varAsig -> varYVals MASEQ . valoresAsig
    (63) valoresAsig -> . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . reg
    (37) valores -> . INT
    (38) valores -> . FLOAT
    (39) valores -> . STRING
    (40) valores -> . BOOL
    (41) valores -> . varYVals
    (42) valores -> . varsOps
    (43) valores -> . vec
    (44) valores -> . ID . valoresCampos
    (45) valores -> . RES
    (76) eMat -> . eMat + p
    (77) eMat -> . eMat - p
    (78) eMat -> . valoresMat + p
    (79) eMat -> . valoresMat - p
    (80) eMat -> . eMat + valoresMat
    (81) eMat -> . eMat - valoresMat
    (82) eMat -> . valoresMat + valoresMat
    (83) eMat -> . valoresMat - valoresMat
    (84) eMat -> . p
    (113) expBool -> . or ? expBool : expBool
    (114) expBool -> . valoresBool ? expBool : expBool
    (115) expBool -> . or ? valoresBool : valoresBool
    (116) expBool -> . valoresBool ? valoresBool : valoresBool
    (117) expBool -> . or
    (56) reg -> . { campos }
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (31) vec -> . [ elem ]
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (85) p -> . p * exp
    (86) p -> . p / exp
    (87) p -> . p % exp
    (88) p -> . valoresMat * exp
    (89) p -> . valoresMat / exp
    (90) p -> . valoresMat % exp
    (91) p -> . p * valoresMat
    (92) p -> . p / valoresMat
    (93) p -> . p % valoresMat
    (94) p -> . valoresMat * valoresMat
    (95) p -> . valoresMat / valoresMat
    (96) p -> . valoresMat % valoresMat
    (97) p -> . exp
    (118) or -> . or OR and
    (119) or -> . valoresBool OR and
    (120) or -> . or OR valoresBool
    (121) or -> . valoresBool OR valoresBool
    (122) or -> . and
    (109) valoresBool -> . BOOL
    (110) valoresBool -> . funcBool
    (111) valoresBool -> . varYVals
    (112) valoresBool -> . varsOps
    (51) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (123) and -> . and AND eq
    (124) and -> . valoresBool AND eq
    (125) and -> . and AND valoresBool
    (126) and -> . valoresBool AND valoresBool
    (127) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (128) eq -> . eq EQEQ parenBool
    (129) eq -> . eq DISTINTO parenBool
    (130) eq -> . valoresBool EQEQ parenBool
    (131) eq -> . valoresBool DISTINTO parenBool
    (132) eq -> . eq EQEQ valoresBool
    (133) eq -> . eq DISTINTO valoresBool
    (134) eq -> . valoresBool EQEQ valoresBool
    (135) eq -> . valoresBool DISTINTO valoresBool
    (136) eq -> . mayor
    (108) paren -> . ( eMat )
    (140) mayor -> . tCompare > tCompare
    (141) mayor -> . menor
    (137) tCompare -> . eMat
    (138) tCompare -> . varsOps
    (139) tCompare -> . varYVals
    (142) menor -> . tCompare < tCompare
    (143) menor -> . not
    (144) not -> . NOT not
    (145) not -> . NOT valoresBool
    (146) not -> . parenBool
    (147) parenBool -> . ( expBool )

    INT             shift and go to state 99
    FLOAT           shift and go to state 100
    STRING          shift and go to state 96
    BOOL            shift and go to state 102
    ID              shift and go to state 98
    RES             shift and go to state 91
    {               shift and go to state 104
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    [               shift and go to state 97
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 93
    NOT             shift and go to state 87

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    mayor                          shift and go to state 66
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 92
    vecVal                         shift and go to state 9
    vec                            shift and go to state 94
    paren                          shift and go to state 77
    reg                            shift and go to state 95
    iSing                          shift and go to state 75
    exp                            shift and go to state 85
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    valoresAsig                    shift and go to state 122
    valores                        shift and go to state 121
    parenBool                      shift and go to state 86
    p                              shift and go to state 82
    varsOps                        shift and go to state 103
    varYVals                       shift and go to state 105
    or                             shift and go to state 89
    expBool                        shift and go to state 106

state 55

    (68) varAsig -> varYVals = . valoresAsig
    (63) valoresAsig -> . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . reg
    (37) valores -> . INT
    (38) valores -> . FLOAT
    (39) valores -> . STRING
    (40) valores -> . BOOL
    (41) valores -> . varYVals
    (42) valores -> . varsOps
    (43) valores -> . vec
    (44) valores -> . ID . valoresCampos
    (45) valores -> . RES
    (76) eMat -> . eMat + p
    (77) eMat -> . eMat - p
    (78) eMat -> . valoresMat + p
    (79) eMat -> . valoresMat - p
    (80) eMat -> . eMat + valoresMat
    (81) eMat -> . eMat - valoresMat
    (82) eMat -> . valoresMat + valoresMat
    (83) eMat -> . valoresMat - valoresMat
    (84) eMat -> . p
    (113) expBool -> . or ? expBool : expBool
    (114) expBool -> . valoresBool ? expBool : expBool
    (115) expBool -> . or ? valoresBool : valoresBool
    (116) expBool -> . valoresBool ? valoresBool : valoresBool
    (117) expBool -> . or
    (56) reg -> . { campos }
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (31) vec -> . [ elem ]
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (85) p -> . p * exp
    (86) p -> . p / exp
    (87) p -> . p % exp
    (88) p -> . valoresMat * exp
    (89) p -> . valoresMat / exp
    (90) p -> . valoresMat % exp
    (91) p -> . p * valoresMat
    (92) p -> . p / valoresMat
    (93) p -> . p % valoresMat
    (94) p -> . valoresMat * valoresMat
    (95) p -> . valoresMat / valoresMat
    (96) p -> . valoresMat % valoresMat
    (97) p -> . exp
    (118) or -> . or OR and
    (119) or -> . valoresBool OR and
    (120) or -> . or OR valoresBool
    (121) or -> . valoresBool OR valoresBool
    (122) or -> . and
    (109) valoresBool -> . BOOL
    (110) valoresBool -> . funcBool
    (111) valoresBool -> . varYVals
    (112) valoresBool -> . varsOps
    (51) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (123) and -> . and AND eq
    (124) and -> . valoresBool AND eq
    (125) and -> . and AND valoresBool
    (126) and -> . valoresBool AND valoresBool
    (127) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (128) eq -> . eq EQEQ parenBool
    (129) eq -> . eq DISTINTO parenBool
    (130) eq -> . valoresBool EQEQ parenBool
    (131) eq -> . valoresBool DISTINTO parenBool
    (132) eq -> . eq EQEQ valoresBool
    (133) eq -> . eq DISTINTO valoresBool
    (134) eq -> . valoresBool EQEQ valoresBool
    (135) eq -> . valoresBool DISTINTO valoresBool
    (136) eq -> . mayor
    (108) paren -> . ( eMat )
    (140) mayor -> . tCompare > tCompare
    (141) mayor -> . menor
    (137) tCompare -> . eMat
    (138) tCompare -> . varsOps
    (139) tCompare -> . varYVals
    (142) menor -> . tCompare < tCompare
    (143) menor -> . not
    (144) not -> . NOT not
    (145) not -> . NOT valoresBool
    (146) not -> . parenBool
    (147) parenBool -> . ( expBool )

    INT             shift and go to state 99
    FLOAT           shift and go to state 100
    STRING          shift and go to state 96
    BOOL            shift and go to state 102
    ID              shift and go to state 98
    RES             shift and go to state 91
    {               shift and go to state 104
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    [               shift and go to state 97
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 93
    NOT             shift and go to state 87

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    mayor                          shift and go to state 66
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 92
    vecVal                         shift and go to state 9
    vec                            shift and go to state 94
    paren                          shift and go to state 77
    reg                            shift and go to state 95
    iSing                          shift and go to state 75
    exp                            shift and go to state 85
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    valoresAsig                    shift and go to state 123
    valores                        shift and go to state 121
    parenBool                      shift and go to state 86
    p                              shift and go to state 82
    varsOps                        shift and go to state 103
    varYVals                       shift and go to state 105
    or                             shift and go to state 89
    expBool                        shift and go to state 106

state 56

    (61) varsOps -> varYVals MASMAS .

    *               reduce using rule 61 (varsOps -> varYVals MASMAS .)
    /               reduce using rule 61 (varsOps -> varYVals MASMAS .)
    %               reduce using rule 61 (varsOps -> varYVals MASMAS .)
    ^               reduce using rule 61 (varsOps -> varYVals MASMAS .)
    +               reduce using rule 61 (varsOps -> varYVals MASMAS .)
    -               reduce using rule 61 (varsOps -> varYVals MASMAS .)
    >               reduce using rule 61 (varsOps -> varYVals MASMAS .)
    <               reduce using rule 61 (varsOps -> varYVals MASMAS .)
    )               reduce using rule 61 (varsOps -> varYVals MASMAS .)
    ;               reduce using rule 61 (varsOps -> varYVals MASMAS .)
    ,               reduce using rule 61 (varsOps -> varYVals MASMAS .)
    ]               reduce using rule 61 (varsOps -> varYVals MASMAS .)
    }               reduce using rule 61 (varsOps -> varYVals MASMAS .)
    EQEQ            reduce using rule 61 (varsOps -> varYVals MASMAS .)
    DISTINTO        reduce using rule 61 (varsOps -> varYVals MASMAS .)
    AND             reduce using rule 61 (varsOps -> varYVals MASMAS .)
    ?               reduce using rule 61 (varsOps -> varYVals MASMAS .)
    OR              reduce using rule 61 (varsOps -> varYVals MASMAS .)
    :               reduce using rule 61 (varsOps -> varYVals MASMAS .)


state 57

    (64) varAsig -> varYVals MULEQ . valoresAsig
    (63) valoresAsig -> . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . reg
    (37) valores -> . INT
    (38) valores -> . FLOAT
    (39) valores -> . STRING
    (40) valores -> . BOOL
    (41) valores -> . varYVals
    (42) valores -> . varsOps
    (43) valores -> . vec
    (44) valores -> . ID . valoresCampos
    (45) valores -> . RES
    (76) eMat -> . eMat + p
    (77) eMat -> . eMat - p
    (78) eMat -> . valoresMat + p
    (79) eMat -> . valoresMat - p
    (80) eMat -> . eMat + valoresMat
    (81) eMat -> . eMat - valoresMat
    (82) eMat -> . valoresMat + valoresMat
    (83) eMat -> . valoresMat - valoresMat
    (84) eMat -> . p
    (113) expBool -> . or ? expBool : expBool
    (114) expBool -> . valoresBool ? expBool : expBool
    (115) expBool -> . or ? valoresBool : valoresBool
    (116) expBool -> . valoresBool ? valoresBool : valoresBool
    (117) expBool -> . or
    (56) reg -> . { campos }
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (31) vec -> . [ elem ]
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (85) p -> . p * exp
    (86) p -> . p / exp
    (87) p -> . p % exp
    (88) p -> . valoresMat * exp
    (89) p -> . valoresMat / exp
    (90) p -> . valoresMat % exp
    (91) p -> . p * valoresMat
    (92) p -> . p / valoresMat
    (93) p -> . p % valoresMat
    (94) p -> . valoresMat * valoresMat
    (95) p -> . valoresMat / valoresMat
    (96) p -> . valoresMat % valoresMat
    (97) p -> . exp
    (118) or -> . or OR and
    (119) or -> . valoresBool OR and
    (120) or -> . or OR valoresBool
    (121) or -> . valoresBool OR valoresBool
    (122) or -> . and
    (109) valoresBool -> . BOOL
    (110) valoresBool -> . funcBool
    (111) valoresBool -> . varYVals
    (112) valoresBool -> . varsOps
    (51) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (123) and -> . and AND eq
    (124) and -> . valoresBool AND eq
    (125) and -> . and AND valoresBool
    (126) and -> . valoresBool AND valoresBool
    (127) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (128) eq -> . eq EQEQ parenBool
    (129) eq -> . eq DISTINTO parenBool
    (130) eq -> . valoresBool EQEQ parenBool
    (131) eq -> . valoresBool DISTINTO parenBool
    (132) eq -> . eq EQEQ valoresBool
    (133) eq -> . eq DISTINTO valoresBool
    (134) eq -> . valoresBool EQEQ valoresBool
    (135) eq -> . valoresBool DISTINTO valoresBool
    (136) eq -> . mayor
    (108) paren -> . ( eMat )
    (140) mayor -> . tCompare > tCompare
    (141) mayor -> . menor
    (137) tCompare -> . eMat
    (138) tCompare -> . varsOps
    (139) tCompare -> . varYVals
    (142) menor -> . tCompare < tCompare
    (143) menor -> . not
    (144) not -> . NOT not
    (145) not -> . NOT valoresBool
    (146) not -> . parenBool
    (147) parenBool -> . ( expBool )

    INT             shift and go to state 99
    FLOAT           shift and go to state 100
    STRING          shift and go to state 96
    BOOL            shift and go to state 102
    ID              shift and go to state 98
    RES             shift and go to state 91
    {               shift and go to state 104
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    [               shift and go to state 97
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 93
    NOT             shift and go to state 87

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    mayor                          shift and go to state 66
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 92
    vecVal                         shift and go to state 9
    vec                            shift and go to state 94
    paren                          shift and go to state 77
    reg                            shift and go to state 95
    iSing                          shift and go to state 75
    exp                            shift and go to state 85
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    valoresAsig                    shift and go to state 124
    valores                        shift and go to state 121
    parenBool                      shift and go to state 86
    p                              shift and go to state 82
    varsOps                        shift and go to state 103
    varYVals                       shift and go to state 105
    or                             shift and go to state 89
    expBool                        shift and go to state 106

state 58

    (65) varAsig -> varYVals DIVEQ . valoresAsig
    (63) valoresAsig -> . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . reg
    (37) valores -> . INT
    (38) valores -> . FLOAT
    (39) valores -> . STRING
    (40) valores -> . BOOL
    (41) valores -> . varYVals
    (42) valores -> . varsOps
    (43) valores -> . vec
    (44) valores -> . ID . valoresCampos
    (45) valores -> . RES
    (76) eMat -> . eMat + p
    (77) eMat -> . eMat - p
    (78) eMat -> . valoresMat + p
    (79) eMat -> . valoresMat - p
    (80) eMat -> . eMat + valoresMat
    (81) eMat -> . eMat - valoresMat
    (82) eMat -> . valoresMat + valoresMat
    (83) eMat -> . valoresMat - valoresMat
    (84) eMat -> . p
    (113) expBool -> . or ? expBool : expBool
    (114) expBool -> . valoresBool ? expBool : expBool
    (115) expBool -> . or ? valoresBool : valoresBool
    (116) expBool -> . valoresBool ? valoresBool : valoresBool
    (117) expBool -> . or
    (56) reg -> . { campos }
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (31) vec -> . [ elem ]
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (85) p -> . p * exp
    (86) p -> . p / exp
    (87) p -> . p % exp
    (88) p -> . valoresMat * exp
    (89) p -> . valoresMat / exp
    (90) p -> . valoresMat % exp
    (91) p -> . p * valoresMat
    (92) p -> . p / valoresMat
    (93) p -> . p % valoresMat
    (94) p -> . valoresMat * valoresMat
    (95) p -> . valoresMat / valoresMat
    (96) p -> . valoresMat % valoresMat
    (97) p -> . exp
    (118) or -> . or OR and
    (119) or -> . valoresBool OR and
    (120) or -> . or OR valoresBool
    (121) or -> . valoresBool OR valoresBool
    (122) or -> . and
    (109) valoresBool -> . BOOL
    (110) valoresBool -> . funcBool
    (111) valoresBool -> . varYVals
    (112) valoresBool -> . varsOps
    (51) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (123) and -> . and AND eq
    (124) and -> . valoresBool AND eq
    (125) and -> . and AND valoresBool
    (126) and -> . valoresBool AND valoresBool
    (127) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (128) eq -> . eq EQEQ parenBool
    (129) eq -> . eq DISTINTO parenBool
    (130) eq -> . valoresBool EQEQ parenBool
    (131) eq -> . valoresBool DISTINTO parenBool
    (132) eq -> . eq EQEQ valoresBool
    (133) eq -> . eq DISTINTO valoresBool
    (134) eq -> . valoresBool EQEQ valoresBool
    (135) eq -> . valoresBool DISTINTO valoresBool
    (136) eq -> . mayor
    (108) paren -> . ( eMat )
    (140) mayor -> . tCompare > tCompare
    (141) mayor -> . menor
    (137) tCompare -> . eMat
    (138) tCompare -> . varsOps
    (139) tCompare -> . varYVals
    (142) menor -> . tCompare < tCompare
    (143) menor -> . not
    (144) not -> . NOT not
    (145) not -> . NOT valoresBool
    (146) not -> . parenBool
    (147) parenBool -> . ( expBool )

    INT             shift and go to state 99
    FLOAT           shift and go to state 100
    STRING          shift and go to state 96
    BOOL            shift and go to state 102
    ID              shift and go to state 98
    RES             shift and go to state 91
    {               shift and go to state 104
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    [               shift and go to state 97
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 93
    NOT             shift and go to state 87

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    mayor                          shift and go to state 66
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 92
    vecVal                         shift and go to state 9
    vec                            shift and go to state 94
    paren                          shift and go to state 77
    reg                            shift and go to state 95
    iSing                          shift and go to state 75
    exp                            shift and go to state 85
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    valoresAsig                    shift and go to state 125
    valores                        shift and go to state 121
    parenBool                      shift and go to state 86
    p                              shift and go to state 82
    varsOps                        shift and go to state 103
    varYVals                       shift and go to state 105
    or                             shift and go to state 89
    expBool                        shift and go to state 106

state 59

    (59) varsOps -> MENOSMENOS varYVals .

    *               reduce using rule 59 (varsOps -> MENOSMENOS varYVals .)
    /               reduce using rule 59 (varsOps -> MENOSMENOS varYVals .)
    %               reduce using rule 59 (varsOps -> MENOSMENOS varYVals .)
    ^               reduce using rule 59 (varsOps -> MENOSMENOS varYVals .)
    +               reduce using rule 59 (varsOps -> MENOSMENOS varYVals .)
    -               reduce using rule 59 (varsOps -> MENOSMENOS varYVals .)
    >               reduce using rule 59 (varsOps -> MENOSMENOS varYVals .)
    <               reduce using rule 59 (varsOps -> MENOSMENOS varYVals .)
    )               reduce using rule 59 (varsOps -> MENOSMENOS varYVals .)
    ;               reduce using rule 59 (varsOps -> MENOSMENOS varYVals .)
    ,               reduce using rule 59 (varsOps -> MENOSMENOS varYVals .)
    ]               reduce using rule 59 (varsOps -> MENOSMENOS varYVals .)
    }               reduce using rule 59 (varsOps -> MENOSMENOS varYVals .)
    EQEQ            reduce using rule 59 (varsOps -> MENOSMENOS varYVals .)
    DISTINTO        reduce using rule 59 (varsOps -> MENOSMENOS varYVals .)
    AND             reduce using rule 59 (varsOps -> MENOSMENOS varYVals .)
    ?               reduce using rule 59 (varsOps -> MENOSMENOS varYVals .)
    OR              reduce using rule 59 (varsOps -> MENOSMENOS varYVals .)
    :               reduce using rule 59 (varsOps -> MENOSMENOS varYVals .)


state 60

    (11) loop -> DO bloque WHILE . ( expBool ) ;

    (               shift and go to state 126


state 61

    (16) bloque -> sentencia ; .

    RETURN          reduce using rule 16 (bloque -> sentencia ; .)
    MENOSMENOS      reduce using rule 16 (bloque -> sentencia ; .)
    MASMAS          reduce using rule 16 (bloque -> sentencia ; .)
    ID              reduce using rule 16 (bloque -> sentencia ; .)
    IF              reduce using rule 16 (bloque -> sentencia ; .)
    WHILE           reduce using rule 16 (bloque -> sentencia ; .)
    DO              reduce using rule 16 (bloque -> sentencia ; .)
    FOR             reduce using rule 16 (bloque -> sentencia ; .)
    PRINT           reduce using rule 16 (bloque -> sentencia ; .)
    MULTIESCALAR    reduce using rule 16 (bloque -> sentencia ; .)
    LENGTH          reduce using rule 16 (bloque -> sentencia ; .)
    CAPITALIZAR     reduce using rule 16 (bloque -> sentencia ; .)
    COLINEALES      reduce using rule 16 (bloque -> sentencia ; .)
    $end            reduce using rule 16 (bloque -> sentencia ; .)
    }               reduce using rule 16 (bloque -> sentencia ; .)
    ELSE            reduce using rule 16 (bloque -> sentencia ; .)


state 62

    (17) bloque -> { g . }

    }               shift and go to state 127


state 63

    (122) or -> and .
    (123) and -> and . AND eq
    (125) and -> and . AND valoresBool

    ?               reduce using rule 122 (or -> and .)
    OR              reduce using rule 122 (or -> and .)
    ;               reduce using rule 122 (or -> and .)
    ,               reduce using rule 122 (or -> and .)
    ]               reduce using rule 122 (or -> and .)
    )               reduce using rule 122 (or -> and .)
    }               reduce using rule 122 (or -> and .)
    :               reduce using rule 122 (or -> and .)
    AND             shift and go to state 128


state 64

    (110) valoresBool -> funcBool .

    EQEQ            reduce using rule 110 (valoresBool -> funcBool .)
    DISTINTO        reduce using rule 110 (valoresBool -> funcBool .)
    AND             reduce using rule 110 (valoresBool -> funcBool .)
    ?               reduce using rule 110 (valoresBool -> funcBool .)
    OR              reduce using rule 110 (valoresBool -> funcBool .)
    )               reduce using rule 110 (valoresBool -> funcBool .)
    ;               reduce using rule 110 (valoresBool -> funcBool .)
    ,               reduce using rule 110 (valoresBool -> funcBool .)
    ]               reduce using rule 110 (valoresBool -> funcBool .)
    }               reduce using rule 110 (valoresBool -> funcBool .)
    :               reduce using rule 110 (valoresBool -> funcBool .)


state 65

    (72) valoresMat -> funcInt .

    +               reduce using rule 72 (valoresMat -> funcInt .)
    -               reduce using rule 72 (valoresMat -> funcInt .)
    *               reduce using rule 72 (valoresMat -> funcInt .)
    /               reduce using rule 72 (valoresMat -> funcInt .)
    %               reduce using rule 72 (valoresMat -> funcInt .)
    ^               reduce using rule 72 (valoresMat -> funcInt .)
    >               reduce using rule 72 (valoresMat -> funcInt .)
    <               reduce using rule 72 (valoresMat -> funcInt .)
    )               reduce using rule 72 (valoresMat -> funcInt .)
    ;               reduce using rule 72 (valoresMat -> funcInt .)
    ,               reduce using rule 72 (valoresMat -> funcInt .)
    ]               reduce using rule 72 (valoresMat -> funcInt .)
    }               reduce using rule 72 (valoresMat -> funcInt .)
    EQEQ            reduce using rule 72 (valoresMat -> funcInt .)
    DISTINTO        reduce using rule 72 (valoresMat -> funcInt .)
    AND             reduce using rule 72 (valoresMat -> funcInt .)
    ?               reduce using rule 72 (valoresMat -> funcInt .)
    OR              reduce using rule 72 (valoresMat -> funcInt .)
    :               reduce using rule 72 (valoresMat -> funcInt .)


state 66

    (136) eq -> mayor .

    EQEQ            reduce using rule 136 (eq -> mayor .)
    DISTINTO        reduce using rule 136 (eq -> mayor .)
    AND             reduce using rule 136 (eq -> mayor .)
    ?               reduce using rule 136 (eq -> mayor .)
    OR              reduce using rule 136 (eq -> mayor .)
    )               reduce using rule 136 (eq -> mayor .)
    ;               reduce using rule 136 (eq -> mayor .)
    ,               reduce using rule 136 (eq -> mayor .)
    ]               reduce using rule 136 (eq -> mayor .)
    }               reduce using rule 136 (eq -> mayor .)
    :               reduce using rule 136 (eq -> mayor .)


state 67

    (78) eMat -> valoresMat . + p
    (79) eMat -> valoresMat . - p
    (82) eMat -> valoresMat . + valoresMat
    (83) eMat -> valoresMat . - valoresMat
    (88) p -> valoresMat . * exp
    (89) p -> valoresMat . / exp
    (90) p -> valoresMat . % exp
    (94) p -> valoresMat . * valoresMat
    (95) p -> valoresMat . / valoresMat
    (96) p -> valoresMat . % valoresMat
    (99) exp -> valoresMat . ^ iSing
    (101) exp -> valoresMat . ^ valoresMat

    +               shift and go to state 130
    -               shift and go to state 132
    *               shift and go to state 131
    /               shift and go to state 133
    %               shift and go to state 129
    ^               shift and go to state 134


state 68

    (127) and -> eq .
    (128) eq -> eq . EQEQ parenBool
    (129) eq -> eq . DISTINTO parenBool
    (132) eq -> eq . EQEQ valoresBool
    (133) eq -> eq . DISTINTO valoresBool

    AND             reduce using rule 127 (and -> eq .)
    ?               reduce using rule 127 (and -> eq .)
    OR              reduce using rule 127 (and -> eq .)
    ;               reduce using rule 127 (and -> eq .)
    )               reduce using rule 127 (and -> eq .)
    ,               reduce using rule 127 (and -> eq .)
    ]               reduce using rule 127 (and -> eq .)
    }               reduce using rule 127 (and -> eq .)
    :               reduce using rule 127 (and -> eq .)
    EQEQ            shift and go to state 135
    DISTINTO        shift and go to state 136


state 69

    (114) expBool -> valoresBool . ? expBool : expBool
    (116) expBool -> valoresBool . ? valoresBool : valoresBool
    (119) or -> valoresBool . OR and
    (121) or -> valoresBool . OR valoresBool
    (124) and -> valoresBool . AND eq
    (126) and -> valoresBool . AND valoresBool
    (130) eq -> valoresBool . EQEQ parenBool
    (131) eq -> valoresBool . DISTINTO parenBool
    (134) eq -> valoresBool . EQEQ valoresBool
    (135) eq -> valoresBool . DISTINTO valoresBool

    ?               shift and go to state 141
    OR              shift and go to state 140
    AND             shift and go to state 137
    EQEQ            shift and go to state 139
    DISTINTO        shift and go to state 138


state 70

    (75) valoresMat -> STRING .

    +               reduce using rule 75 (valoresMat -> STRING .)
    -               reduce using rule 75 (valoresMat -> STRING .)
    *               reduce using rule 75 (valoresMat -> STRING .)
    /               reduce using rule 75 (valoresMat -> STRING .)
    %               reduce using rule 75 (valoresMat -> STRING .)
    ^               reduce using rule 75 (valoresMat -> STRING .)
    >               reduce using rule 75 (valoresMat -> STRING .)
    <               reduce using rule 75 (valoresMat -> STRING .)
    )               reduce using rule 75 (valoresMat -> STRING .)
    ;               reduce using rule 75 (valoresMat -> STRING .)
    ,               reduce using rule 75 (valoresMat -> STRING .)
    ]               reduce using rule 75 (valoresMat -> STRING .)
    }               reduce using rule 75 (valoresMat -> STRING .)
    EQEQ            reduce using rule 75 (valoresMat -> STRING .)
    DISTINTO        reduce using rule 75 (valoresMat -> STRING .)
    AND             reduce using rule 75 (valoresMat -> STRING .)
    ?               reduce using rule 75 (valoresMat -> STRING .)
    OR              reduce using rule 75 (valoresMat -> STRING .)
    :               reduce using rule 75 (valoresMat -> STRING .)


state 71

    (137) tCompare -> eMat .
    (76) eMat -> eMat . + p
    (77) eMat -> eMat . - p
    (80) eMat -> eMat . + valoresMat
    (81) eMat -> eMat . - valoresMat

    >               reduce using rule 137 (tCompare -> eMat .)
    <               reduce using rule 137 (tCompare -> eMat .)
    EQEQ            reduce using rule 137 (tCompare -> eMat .)
    DISTINTO        reduce using rule 137 (tCompare -> eMat .)
    AND             reduce using rule 137 (tCompare -> eMat .)
    ?               reduce using rule 137 (tCompare -> eMat .)
    OR              reduce using rule 137 (tCompare -> eMat .)
    )               reduce using rule 137 (tCompare -> eMat .)
    ;               reduce using rule 137 (tCompare -> eMat .)
    ,               reduce using rule 137 (tCompare -> eMat .)
    ]               reduce using rule 137 (tCompare -> eMat .)
    }               reduce using rule 137 (tCompare -> eMat .)
    :               reduce using rule 137 (tCompare -> eMat .)
    +               shift and go to state 142
    -               shift and go to state 143


state 72

    (147) parenBool -> ( . expBool )
    (108) paren -> ( . eMat )
    (113) expBool -> . or ? expBool : expBool
    (114) expBool -> . valoresBool ? expBool : expBool
    (115) expBool -> . or ? valoresBool : valoresBool
    (116) expBool -> . valoresBool ? valoresBool : valoresBool
    (117) expBool -> . or
    (76) eMat -> . eMat + p
    (77) eMat -> . eMat - p
    (78) eMat -> . valoresMat + p
    (79) eMat -> . valoresMat - p
    (80) eMat -> . eMat + valoresMat
    (81) eMat -> . eMat - valoresMat
    (82) eMat -> . valoresMat + valoresMat
    (83) eMat -> . valoresMat - valoresMat
    (84) eMat -> . p
    (118) or -> . or OR and
    (119) or -> . valoresBool OR and
    (120) or -> . or OR valoresBool
    (121) or -> . valoresBool OR valoresBool
    (122) or -> . and
    (109) valoresBool -> . BOOL
    (110) valoresBool -> . funcBool
    (111) valoresBool -> . varYVals
    (112) valoresBool -> . varsOps
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (85) p -> . p * exp
    (86) p -> . p / exp
    (87) p -> . p % exp
    (88) p -> . valoresMat * exp
    (89) p -> . valoresMat / exp
    (90) p -> . valoresMat % exp
    (91) p -> . p * valoresMat
    (92) p -> . p / valoresMat
    (93) p -> . p % valoresMat
    (94) p -> . valoresMat * valoresMat
    (95) p -> . valoresMat / valoresMat
    (96) p -> . valoresMat % valoresMat
    (97) p -> . exp
    (123) and -> . and AND eq
    (124) and -> . valoresBool AND eq
    (125) and -> . and AND valoresBool
    (126) and -> . valoresBool AND valoresBool
    (127) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (128) eq -> . eq EQEQ parenBool
    (129) eq -> . eq DISTINTO parenBool
    (130) eq -> . valoresBool EQEQ parenBool
    (131) eq -> . valoresBool DISTINTO parenBool
    (132) eq -> . eq EQEQ valoresBool
    (133) eq -> . eq DISTINTO valoresBool
    (134) eq -> . valoresBool EQEQ valoresBool
    (135) eq -> . valoresBool DISTINTO valoresBool
    (136) eq -> . mayor
    (51) vecVal -> . ID m
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (140) mayor -> . tCompare > tCompare
    (141) mayor -> . menor
    (108) paren -> . ( eMat )
    (137) tCompare -> . eMat
    (138) tCompare -> . varsOps
    (139) tCompare -> . varYVals
    (142) menor -> . tCompare < tCompare
    (143) menor -> . not
    (144) not -> . NOT not
    (145) not -> . NOT valoresBool
    (146) not -> . parenBool
    (147) parenBool -> . ( expBool )

    BOOL            shift and go to state 83
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    COLINEALES      shift and go to state 13
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 93
    NOT             shift and go to state 87

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    vecVal                         shift and go to state 9
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 144
    mayor                          shift and go to state 66
    paren                          shift and go to state 77
    varsOps                        shift and go to state 145
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    parenBool                      shift and go to state 86
    p                              shift and go to state 82
    iSing                          shift and go to state 75
    exp                            shift and go to state 85
    varYVals                       shift and go to state 146
    or                             shift and go to state 89
    expBool                        shift and go to state 147

state 73

    (104) iSing -> + . paren
    (106) iSing -> + . valoresMat
    (108) paren -> . ( eMat )
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (51) vecVal -> . ID m

    (               shift and go to state 116
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26

    funcInt                        shift and go to state 65
    varsOps                        shift and go to state 117
    valoresMat                     shift and go to state 148
    paren                          shift and go to state 149
    varYVals                       shift and go to state 118
    vecVal                         shift and go to state 9

state 74

    (103) iSing -> - . paren
    (105) iSing -> - . valoresMat
    (108) paren -> . ( eMat )
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (51) vecVal -> . ID m

    (               shift and go to state 116
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26

    funcInt                        shift and go to state 65
    varsOps                        shift and go to state 117
    valoresMat                     shift and go to state 150
    paren                          shift and go to state 151
    varYVals                       shift and go to state 118
    vecVal                         shift and go to state 9

state 75

    (102) exp -> iSing .

    ^               reduce using rule 102 (exp -> iSing .)
    *               reduce using rule 102 (exp -> iSing .)
    /               reduce using rule 102 (exp -> iSing .)
    %               reduce using rule 102 (exp -> iSing .)
    +               reduce using rule 102 (exp -> iSing .)
    -               reduce using rule 102 (exp -> iSing .)
    ,               reduce using rule 102 (exp -> iSing .)
    >               reduce using rule 102 (exp -> iSing .)
    <               reduce using rule 102 (exp -> iSing .)
    )               reduce using rule 102 (exp -> iSing .)
    ;               reduce using rule 102 (exp -> iSing .)
    ]               reduce using rule 102 (exp -> iSing .)
    }               reduce using rule 102 (exp -> iSing .)
    EQEQ            reduce using rule 102 (exp -> iSing .)
    DISTINTO        reduce using rule 102 (exp -> iSing .)
    AND             reduce using rule 102 (exp -> iSing .)
    ?               reduce using rule 102 (exp -> iSing .)
    OR              reduce using rule 102 (exp -> iSing .)
    :               reduce using rule 102 (exp -> iSing .)


state 76

    (140) mayor -> tCompare . > tCompare
    (142) menor -> tCompare . < tCompare

    >               shift and go to state 153
    <               shift and go to state 152


state 77

    (107) iSing -> paren .

    ^               reduce using rule 107 (iSing -> paren .)
    *               reduce using rule 107 (iSing -> paren .)
    /               reduce using rule 107 (iSing -> paren .)
    %               reduce using rule 107 (iSing -> paren .)
    +               reduce using rule 107 (iSing -> paren .)
    -               reduce using rule 107 (iSing -> paren .)
    ;               reduce using rule 107 (iSing -> paren .)
    >               reduce using rule 107 (iSing -> paren .)
    <               reduce using rule 107 (iSing -> paren .)
    ,               reduce using rule 107 (iSing -> paren .)
    ]               reduce using rule 107 (iSing -> paren .)
    )               reduce using rule 107 (iSing -> paren .)
    }               reduce using rule 107 (iSing -> paren .)
    EQEQ            reduce using rule 107 (iSing -> paren .)
    DISTINTO        reduce using rule 107 (iSing -> paren .)
    AND             reduce using rule 107 (iSing -> paren .)
    ?               reduce using rule 107 (iSing -> paren .)
    OR              reduce using rule 107 (iSing -> paren .)
    :               reduce using rule 107 (iSing -> paren .)


state 78

    (143) menor -> not .

    EQEQ            reduce using rule 143 (menor -> not .)
    DISTINTO        reduce using rule 143 (menor -> not .)
    AND             reduce using rule 143 (menor -> not .)
    ?               reduce using rule 143 (menor -> not .)
    OR              reduce using rule 143 (menor -> not .)
    )               reduce using rule 143 (menor -> not .)
    ;               reduce using rule 143 (menor -> not .)
    ,               reduce using rule 143 (menor -> not .)
    ]               reduce using rule 143 (menor -> not .)
    }               reduce using rule 143 (menor -> not .)
    :               reduce using rule 143 (menor -> not .)


state 79

    (70) valoresMat -> INT .

    +               reduce using rule 70 (valoresMat -> INT .)
    -               reduce using rule 70 (valoresMat -> INT .)
    *               reduce using rule 70 (valoresMat -> INT .)
    /               reduce using rule 70 (valoresMat -> INT .)
    %               reduce using rule 70 (valoresMat -> INT .)
    ^               reduce using rule 70 (valoresMat -> INT .)
    >               reduce using rule 70 (valoresMat -> INT .)
    <               reduce using rule 70 (valoresMat -> INT .)
    )               reduce using rule 70 (valoresMat -> INT .)
    ;               reduce using rule 70 (valoresMat -> INT .)
    ,               reduce using rule 70 (valoresMat -> INT .)
    ]               reduce using rule 70 (valoresMat -> INT .)
    }               reduce using rule 70 (valoresMat -> INT .)
    EQEQ            reduce using rule 70 (valoresMat -> INT .)
    DISTINTO        reduce using rule 70 (valoresMat -> INT .)
    AND             reduce using rule 70 (valoresMat -> INT .)
    ?               reduce using rule 70 (valoresMat -> INT .)
    OR              reduce using rule 70 (valoresMat -> INT .)
    :               reduce using rule 70 (valoresMat -> INT .)


state 80

    (71) valoresMat -> FLOAT .

    +               reduce using rule 71 (valoresMat -> FLOAT .)
    -               reduce using rule 71 (valoresMat -> FLOAT .)
    *               reduce using rule 71 (valoresMat -> FLOAT .)
    /               reduce using rule 71 (valoresMat -> FLOAT .)
    %               reduce using rule 71 (valoresMat -> FLOAT .)
    ^               reduce using rule 71 (valoresMat -> FLOAT .)
    >               reduce using rule 71 (valoresMat -> FLOAT .)
    <               reduce using rule 71 (valoresMat -> FLOAT .)
    )               reduce using rule 71 (valoresMat -> FLOAT .)
    ;               reduce using rule 71 (valoresMat -> FLOAT .)
    ,               reduce using rule 71 (valoresMat -> FLOAT .)
    ]               reduce using rule 71 (valoresMat -> FLOAT .)
    }               reduce using rule 71 (valoresMat -> FLOAT .)
    EQEQ            reduce using rule 71 (valoresMat -> FLOAT .)
    DISTINTO        reduce using rule 71 (valoresMat -> FLOAT .)
    AND             reduce using rule 71 (valoresMat -> FLOAT .)
    ?               reduce using rule 71 (valoresMat -> FLOAT .)
    OR              reduce using rule 71 (valoresMat -> FLOAT .)
    :               reduce using rule 71 (valoresMat -> FLOAT .)


state 81

    (141) mayor -> menor .

    EQEQ            reduce using rule 141 (mayor -> menor .)
    DISTINTO        reduce using rule 141 (mayor -> menor .)
    AND             reduce using rule 141 (mayor -> menor .)
    ?               reduce using rule 141 (mayor -> menor .)
    OR              reduce using rule 141 (mayor -> menor .)
    )               reduce using rule 141 (mayor -> menor .)
    ;               reduce using rule 141 (mayor -> menor .)
    ,               reduce using rule 141 (mayor -> menor .)
    ]               reduce using rule 141 (mayor -> menor .)
    }               reduce using rule 141 (mayor -> menor .)
    :               reduce using rule 141 (mayor -> menor .)


state 82

    (84) eMat -> p .
    (85) p -> p . * exp
    (86) p -> p . / exp
    (87) p -> p . % exp
    (91) p -> p . * valoresMat
    (92) p -> p . / valoresMat
    (93) p -> p . % valoresMat

    +               reduce using rule 84 (eMat -> p .)
    -               reduce using rule 84 (eMat -> p .)
    >               reduce using rule 84 (eMat -> p .)
    <               reduce using rule 84 (eMat -> p .)
    }               reduce using rule 84 (eMat -> p .)
    ;               reduce using rule 84 (eMat -> p .)
    ,               reduce using rule 84 (eMat -> p .)
    EQEQ            reduce using rule 84 (eMat -> p .)
    DISTINTO        reduce using rule 84 (eMat -> p .)
    AND             reduce using rule 84 (eMat -> p .)
    ?               reduce using rule 84 (eMat -> p .)
    OR              reduce using rule 84 (eMat -> p .)
    )               reduce using rule 84 (eMat -> p .)
    ]               reduce using rule 84 (eMat -> p .)
    :               reduce using rule 84 (eMat -> p .)
    *               shift and go to state 155
    /               shift and go to state 156
    %               shift and go to state 154


state 83

    (109) valoresBool -> BOOL .

    EQEQ            reduce using rule 109 (valoresBool -> BOOL .)
    DISTINTO        reduce using rule 109 (valoresBool -> BOOL .)
    AND             reduce using rule 109 (valoresBool -> BOOL .)
    ?               reduce using rule 109 (valoresBool -> BOOL .)
    OR              reduce using rule 109 (valoresBool -> BOOL .)
    )               reduce using rule 109 (valoresBool -> BOOL .)
    ;               reduce using rule 109 (valoresBool -> BOOL .)
    ,               reduce using rule 109 (valoresBool -> BOOL .)
    ]               reduce using rule 109 (valoresBool -> BOOL .)
    }               reduce using rule 109 (valoresBool -> BOOL .)
    :               reduce using rule 109 (valoresBool -> BOOL .)


state 84

    (112) valoresBool -> varsOps .
    (138) tCompare -> varsOps .
    (74) valoresMat -> varsOps .

    ?               reduce using rule 112 (valoresBool -> varsOps .)
    OR              reduce using rule 112 (valoresBool -> varsOps .)
    AND             reduce using rule 112 (valoresBool -> varsOps .)
    EQEQ            reduce using rule 112 (valoresBool -> varsOps .)
    DISTINTO        reduce using rule 112 (valoresBool -> varsOps .)
    )               reduce using rule 112 (valoresBool -> varsOps .)
    ;               reduce using rule 112 (valoresBool -> varsOps .)
    ,               reduce using rule 112 (valoresBool -> varsOps .)
    ]               reduce using rule 112 (valoresBool -> varsOps .)
    }               reduce using rule 112 (valoresBool -> varsOps .)
    :               reduce using rule 112 (valoresBool -> varsOps .)
    >               reduce using rule 138 (tCompare -> varsOps .)
    <               reduce using rule 138 (tCompare -> varsOps .)
    +               reduce using rule 74 (valoresMat -> varsOps .)
    -               reduce using rule 74 (valoresMat -> varsOps .)
    *               reduce using rule 74 (valoresMat -> varsOps .)
    /               reduce using rule 74 (valoresMat -> varsOps .)
    %               reduce using rule 74 (valoresMat -> varsOps .)
    ^               reduce using rule 74 (valoresMat -> varsOps .)


state 85

    (97) p -> exp .
    (98) exp -> exp . ^ iSing
    (100) exp -> exp . ^ valoresMat

    *               reduce using rule 97 (p -> exp .)
    /               reduce using rule 97 (p -> exp .)
    %               reduce using rule 97 (p -> exp .)
    +               reduce using rule 97 (p -> exp .)
    -               reduce using rule 97 (p -> exp .)
    >               reduce using rule 97 (p -> exp .)
    <               reduce using rule 97 (p -> exp .)
    ,               reduce using rule 97 (p -> exp .)
    ]               reduce using rule 97 (p -> exp .)
    )               reduce using rule 97 (p -> exp .)
    }               reduce using rule 97 (p -> exp .)
    ;               reduce using rule 97 (p -> exp .)
    EQEQ            reduce using rule 97 (p -> exp .)
    DISTINTO        reduce using rule 97 (p -> exp .)
    AND             reduce using rule 97 (p -> exp .)
    ?               reduce using rule 97 (p -> exp .)
    OR              reduce using rule 97 (p -> exp .)
    :               reduce using rule 97 (p -> exp .)
    ^               shift and go to state 157


state 86

    (146) not -> parenBool .

    EQEQ            reduce using rule 146 (not -> parenBool .)
    DISTINTO        reduce using rule 146 (not -> parenBool .)
    AND             reduce using rule 146 (not -> parenBool .)
    ?               reduce using rule 146 (not -> parenBool .)
    OR              reduce using rule 146 (not -> parenBool .)
    }               reduce using rule 146 (not -> parenBool .)
    ;               reduce using rule 146 (not -> parenBool .)
    )               reduce using rule 146 (not -> parenBool .)
    ,               reduce using rule 146 (not -> parenBool .)
    ]               reduce using rule 146 (not -> parenBool .)
    :               reduce using rule 146 (not -> parenBool .)


state 87

    (144) not -> NOT . not
    (145) not -> NOT . valoresBool
    (144) not -> . NOT not
    (145) not -> . NOT valoresBool
    (146) not -> . parenBool
    (109) valoresBool -> . BOOL
    (110) valoresBool -> . funcBool
    (111) valoresBool -> . varYVals
    (112) valoresBool -> . varsOps
    (147) parenBool -> . ( expBool )
    (26) funcBool -> . COLINEALES ( vec , vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (51) vecVal -> . ID m

    NOT             shift and go to state 87
    BOOL            shift and go to state 83
    (               shift and go to state 158
    COLINEALES      shift and go to state 13
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26

    funcBool                       shift and go to state 64
    parenBool                      shift and go to state 86
    varsOps                        shift and go to state 160
    vecVal                         shift and go to state 9
    not                            shift and go to state 159
    varYVals                       shift and go to state 161
    valoresBool                    shift and go to state 162

state 88

    (111) valoresBool -> varYVals .
    (61) varsOps -> varYVals . MASMAS
    (62) varsOps -> varYVals . MENOSMENOS
    (139) tCompare -> varYVals .
    (73) valoresMat -> varYVals .

    ?               reduce using rule 111 (valoresBool -> varYVals .)
    OR              reduce using rule 111 (valoresBool -> varYVals .)
    AND             reduce using rule 111 (valoresBool -> varYVals .)
    EQEQ            reduce using rule 111 (valoresBool -> varYVals .)
    DISTINTO        reduce using rule 111 (valoresBool -> varYVals .)
    )               reduce using rule 111 (valoresBool -> varYVals .)
    ;               reduce using rule 111 (valoresBool -> varYVals .)
    ,               reduce using rule 111 (valoresBool -> varYVals .)
    ]               reduce using rule 111 (valoresBool -> varYVals .)
    }               reduce using rule 111 (valoresBool -> varYVals .)
    :               reduce using rule 111 (valoresBool -> varYVals .)
    MASMAS          shift and go to state 56
    MENOSMENOS      shift and go to state 53
    >               reduce using rule 139 (tCompare -> varYVals .)
    <               reduce using rule 139 (tCompare -> varYVals .)
    +               reduce using rule 73 (valoresMat -> varYVals .)
    -               reduce using rule 73 (valoresMat -> varYVals .)
    *               reduce using rule 73 (valoresMat -> varYVals .)
    /               reduce using rule 73 (valoresMat -> varYVals .)
    %               reduce using rule 73 (valoresMat -> varYVals .)
    ^               reduce using rule 73 (valoresMat -> varYVals .)


state 89

    (113) expBool -> or . ? expBool : expBool
    (115) expBool -> or . ? valoresBool : valoresBool
    (117) expBool -> or .
    (118) or -> or . OR and
    (120) or -> or . OR valoresBool

    ?               shift and go to state 163
    ,               reduce using rule 117 (expBool -> or .)
    ]               reduce using rule 117 (expBool -> or .)
    ;               reduce using rule 117 (expBool -> or .)
    )               reduce using rule 117 (expBool -> or .)
    }               reduce using rule 117 (expBool -> or .)
    :               reduce using rule 117 (expBool -> or .)
    OR              shift and go to state 164


state 90

    (10) loop -> WHILE ( expBool . ) bloque

    )               shift and go to state 165


state 91

    (45) valores -> RES .

    ,               reduce using rule 45 (valores -> RES .)
    ;               reduce using rule 45 (valores -> RES .)
    ]               reduce using rule 45 (valores -> RES .)
    }               reduce using rule 45 (valores -> RES .)
    )               reduce using rule 45 (valores -> RES .)


state 92

    (34) valores -> eMat .
    (76) eMat -> eMat . + p
    (77) eMat -> eMat . - p
    (80) eMat -> eMat . + valoresMat
    (81) eMat -> eMat . - valoresMat
    (137) tCompare -> eMat .

    ,               reduce using rule 34 (valores -> eMat .)
    ;               reduce using rule 34 (valores -> eMat .)
    ]               reduce using rule 34 (valores -> eMat .)
    }               reduce using rule 34 (valores -> eMat .)
    )               reduce using rule 34 (valores -> eMat .)
    +               shift and go to state 142
    -               shift and go to state 143
    >               reduce using rule 137 (tCompare -> eMat .)
    <               reduce using rule 137 (tCompare -> eMat .)


state 93

    (108) paren -> ( . eMat )
    (147) parenBool -> ( . expBool )
    (76) eMat -> . eMat + p
    (77) eMat -> . eMat - p
    (78) eMat -> . valoresMat + p
    (79) eMat -> . valoresMat - p
    (80) eMat -> . eMat + valoresMat
    (81) eMat -> . eMat - valoresMat
    (82) eMat -> . valoresMat + valoresMat
    (83) eMat -> . valoresMat - valoresMat
    (84) eMat -> . p
    (113) expBool -> . or ? expBool : expBool
    (114) expBool -> . valoresBool ? expBool : expBool
    (115) expBool -> . or ? valoresBool : valoresBool
    (116) expBool -> . valoresBool ? valoresBool : valoresBool
    (117) expBool -> . or
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (85) p -> . p * exp
    (86) p -> . p / exp
    (87) p -> . p % exp
    (88) p -> . valoresMat * exp
    (89) p -> . valoresMat / exp
    (90) p -> . valoresMat % exp
    (91) p -> . p * valoresMat
    (92) p -> . p / valoresMat
    (93) p -> . p % valoresMat
    (94) p -> . valoresMat * valoresMat
    (95) p -> . valoresMat / valoresMat
    (96) p -> . valoresMat % valoresMat
    (97) p -> . exp
    (118) or -> . or OR and
    (119) or -> . valoresBool OR and
    (120) or -> . or OR valoresBool
    (121) or -> . valoresBool OR valoresBool
    (122) or -> . and
    (109) valoresBool -> . BOOL
    (110) valoresBool -> . funcBool
    (111) valoresBool -> . varYVals
    (112) valoresBool -> . varsOps
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (123) and -> . and AND eq
    (124) and -> . valoresBool AND eq
    (125) and -> . and AND valoresBool
    (126) and -> . valoresBool AND valoresBool
    (127) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (51) vecVal -> . ID m
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (128) eq -> . eq EQEQ parenBool
    (129) eq -> . eq DISTINTO parenBool
    (130) eq -> . valoresBool EQEQ parenBool
    (131) eq -> . valoresBool DISTINTO parenBool
    (132) eq -> . eq EQEQ valoresBool
    (133) eq -> . eq DISTINTO valoresBool
    (134) eq -> . valoresBool EQEQ valoresBool
    (135) eq -> . valoresBool DISTINTO valoresBool
    (136) eq -> . mayor
    (108) paren -> . ( eMat )
    (140) mayor -> . tCompare > tCompare
    (141) mayor -> . menor
    (137) tCompare -> . eMat
    (138) tCompare -> . varsOps
    (139) tCompare -> . varYVals
    (142) menor -> . tCompare < tCompare
    (143) menor -> . not
    (144) not -> . NOT not
    (145) not -> . NOT valoresBool
    (146) not -> . parenBool
    (147) parenBool -> . ( expBool )

    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    BOOL            shift and go to state 83
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    COLINEALES      shift and go to state 13
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 93
    NOT             shift and go to state 87

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    vecVal                         shift and go to state 9
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 144
    mayor                          shift and go to state 66
    paren                          shift and go to state 77
    varsOps                        shift and go to state 166
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    parenBool                      shift and go to state 86
    p                              shift and go to state 82
    iSing                          shift and go to state 75
    exp                            shift and go to state 85
    varYVals                       shift and go to state 167
    or                             shift and go to state 89
    expBool                        shift and go to state 147

state 94

    (43) valores -> vec .

    ,               reduce using rule 43 (valores -> vec .)
    ;               reduce using rule 43 (valores -> vec .)
    ]               reduce using rule 43 (valores -> vec .)
    }               reduce using rule 43 (valores -> vec .)
    )               reduce using rule 43 (valores -> vec .)


state 95

    (36) valores -> reg .

    ,               reduce using rule 36 (valores -> reg .)
    ;               reduce using rule 36 (valores -> reg .)
    ]               reduce using rule 36 (valores -> reg .)
    }               reduce using rule 36 (valores -> reg .)
    )               reduce using rule 36 (valores -> reg .)


state 96

    (39) valores -> STRING .
    (75) valoresMat -> STRING .

    ,               reduce using rule 39 (valores -> STRING .)
    ;               reduce using rule 39 (valores -> STRING .)
    ]               reduce using rule 39 (valores -> STRING .)
    }               reduce using rule 39 (valores -> STRING .)
    )               reduce using rule 39 (valores -> STRING .)
    +               reduce using rule 75 (valoresMat -> STRING .)
    -               reduce using rule 75 (valoresMat -> STRING .)
    *               reduce using rule 75 (valoresMat -> STRING .)
    /               reduce using rule 75 (valoresMat -> STRING .)
    %               reduce using rule 75 (valoresMat -> STRING .)
    ^               reduce using rule 75 (valoresMat -> STRING .)


state 97

    (31) vec -> [ . elem ]
    (32) elem -> . valores , elem
    (33) elem -> . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . reg
    (37) valores -> . INT
    (38) valores -> . FLOAT
    (39) valores -> . STRING
    (40) valores -> . BOOL
    (41) valores -> . varYVals
    (42) valores -> . varsOps
    (43) valores -> . vec
    (44) valores -> . ID . valoresCampos
    (45) valores -> . RES
    (76) eMat -> . eMat + p
    (77) eMat -> . eMat - p
    (78) eMat -> . valoresMat + p
    (79) eMat -> . valoresMat - p
    (80) eMat -> . eMat + valoresMat
    (81) eMat -> . eMat - valoresMat
    (82) eMat -> . valoresMat + valoresMat
    (83) eMat -> . valoresMat - valoresMat
    (84) eMat -> . p
    (113) expBool -> . or ? expBool : expBool
    (114) expBool -> . valoresBool ? expBool : expBool
    (115) expBool -> . or ? valoresBool : valoresBool
    (116) expBool -> . valoresBool ? valoresBool : valoresBool
    (117) expBool -> . or
    (56) reg -> . { campos }
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (31) vec -> . [ elem ]
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (85) p -> . p * exp
    (86) p -> . p / exp
    (87) p -> . p % exp
    (88) p -> . valoresMat * exp
    (89) p -> . valoresMat / exp
    (90) p -> . valoresMat % exp
    (91) p -> . p * valoresMat
    (92) p -> . p / valoresMat
    (93) p -> . p % valoresMat
    (94) p -> . valoresMat * valoresMat
    (95) p -> . valoresMat / valoresMat
    (96) p -> . valoresMat % valoresMat
    (97) p -> . exp
    (118) or -> . or OR and
    (119) or -> . valoresBool OR and
    (120) or -> . or OR valoresBool
    (121) or -> . valoresBool OR valoresBool
    (122) or -> . and
    (109) valoresBool -> . BOOL
    (110) valoresBool -> . funcBool
    (111) valoresBool -> . varYVals
    (112) valoresBool -> . varsOps
    (51) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (123) and -> . and AND eq
    (124) and -> . valoresBool AND eq
    (125) and -> . and AND valoresBool
    (126) and -> . valoresBool AND valoresBool
    (127) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (128) eq -> . eq EQEQ parenBool
    (129) eq -> . eq DISTINTO parenBool
    (130) eq -> . valoresBool EQEQ parenBool
    (131) eq -> . valoresBool DISTINTO parenBool
    (132) eq -> . eq EQEQ valoresBool
    (133) eq -> . eq DISTINTO valoresBool
    (134) eq -> . valoresBool EQEQ valoresBool
    (135) eq -> . valoresBool DISTINTO valoresBool
    (136) eq -> . mayor
    (108) paren -> . ( eMat )
    (140) mayor -> . tCompare > tCompare
    (141) mayor -> . menor
    (137) tCompare -> . eMat
    (138) tCompare -> . varsOps
    (139) tCompare -> . varYVals
    (142) menor -> . tCompare < tCompare
    (143) menor -> . not
    (144) not -> . NOT not
    (145) not -> . NOT valoresBool
    (146) not -> . parenBool
    (147) parenBool -> . ( expBool )

    INT             shift and go to state 99
    FLOAT           shift and go to state 100
    STRING          shift and go to state 96
    BOOL            shift and go to state 102
    ID              shift and go to state 98
    RES             shift and go to state 91
    {               shift and go to state 104
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    [               shift and go to state 97
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 93
    NOT             shift and go to state 87

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    valores                        shift and go to state 168
    menor                          shift and go to state 81
    mayor                          shift and go to state 66
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 92
    vecVal                         shift and go to state 9
    vec                            shift and go to state 94
    paren                          shift and go to state 77
    reg                            shift and go to state 95
    varsOps                        shift and go to state 103
    exp                            shift and go to state 85
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    elem                           shift and go to state 169
    parenBool                      shift and go to state 86
    p                              shift and go to state 82
    iSing                          shift and go to state 75
    varYVals                       shift and go to state 105
    or                             shift and go to state 89
    expBool                        shift and go to state 106

state 98

    (44) valores -> ID . . valoresCampos
    (49) varYVals -> ID .
    (51) vecVal -> ID . m
    (52) m -> . [ INT ]
    (53) m -> . [ INT ] m
    (54) m -> . [ varYVals ] m
    (55) m -> . [ varYVals ]

    .               shift and go to state 170
    MASMAS          reduce using rule 49 (varYVals -> ID .)
    MENOSMENOS      reduce using rule 49 (varYVals -> ID .)
    ;               reduce using rule 49 (varYVals -> ID .)
    +               reduce using rule 49 (varYVals -> ID .)
    -               reduce using rule 49 (varYVals -> ID .)
    *               reduce using rule 49 (varYVals -> ID .)
    /               reduce using rule 49 (varYVals -> ID .)
    %               reduce using rule 49 (varYVals -> ID .)
    ^               reduce using rule 49 (varYVals -> ID .)
    ?               reduce using rule 49 (varYVals -> ID .)
    OR              reduce using rule 49 (varYVals -> ID .)
    AND             reduce using rule 49 (varYVals -> ID .)
    EQEQ            reduce using rule 49 (varYVals -> ID .)
    DISTINTO        reduce using rule 49 (varYVals -> ID .)
    >               reduce using rule 49 (varYVals -> ID .)
    <               reduce using rule 49 (varYVals -> ID .)
    ,               reduce using rule 49 (varYVals -> ID .)
    ]               reduce using rule 49 (varYVals -> ID .)
    )               reduce using rule 49 (varYVals -> ID .)
    [               shift and go to state 43

    m                              shift and go to state 41

state 99

    (37) valores -> INT .
    (70) valoresMat -> INT .

    ,               reduce using rule 37 (valores -> INT .)
    ;               reduce using rule 37 (valores -> INT .)
    ]               reduce using rule 37 (valores -> INT .)
    }               reduce using rule 37 (valores -> INT .)
    )               reduce using rule 37 (valores -> INT .)
    +               reduce using rule 70 (valoresMat -> INT .)
    -               reduce using rule 70 (valoresMat -> INT .)
    *               reduce using rule 70 (valoresMat -> INT .)
    /               reduce using rule 70 (valoresMat -> INT .)
    %               reduce using rule 70 (valoresMat -> INT .)
    ^               reduce using rule 70 (valoresMat -> INT .)


state 100

    (38) valores -> FLOAT .
    (71) valoresMat -> FLOAT .

    ,               reduce using rule 38 (valores -> FLOAT .)
    ;               reduce using rule 38 (valores -> FLOAT .)
    ]               reduce using rule 38 (valores -> FLOAT .)
    }               reduce using rule 38 (valores -> FLOAT .)
    )               reduce using rule 38 (valores -> FLOAT .)
    +               reduce using rule 71 (valoresMat -> FLOAT .)
    -               reduce using rule 71 (valoresMat -> FLOAT .)
    *               reduce using rule 71 (valoresMat -> FLOAT .)
    /               reduce using rule 71 (valoresMat -> FLOAT .)
    %               reduce using rule 71 (valoresMat -> FLOAT .)
    ^               reduce using rule 71 (valoresMat -> FLOAT .)


state 101

    (27) funcVoid -> PRINT ( valores . )

    )               shift and go to state 171


state 102

    (40) valores -> BOOL .
    (109) valoresBool -> BOOL .

    ,               reduce using rule 40 (valores -> BOOL .)
    ;               reduce using rule 40 (valores -> BOOL .)
    ]               reduce using rule 40 (valores -> BOOL .)
    }               reduce using rule 40 (valores -> BOOL .)
    )               reduce using rule 40 (valores -> BOOL .)
    ?               reduce using rule 109 (valoresBool -> BOOL .)
    OR              reduce using rule 109 (valoresBool -> BOOL .)
    AND             reduce using rule 109 (valoresBool -> BOOL .)
    EQEQ            reduce using rule 109 (valoresBool -> BOOL .)
    DISTINTO        reduce using rule 109 (valoresBool -> BOOL .)


state 103

    (42) valores -> varsOps .
    (74) valoresMat -> varsOps .
    (112) valoresBool -> varsOps .
    (138) tCompare -> varsOps .

    ,               reduce using rule 42 (valores -> varsOps .)
    ;               reduce using rule 42 (valores -> varsOps .)
    ]               reduce using rule 42 (valores -> varsOps .)
    }               reduce using rule 42 (valores -> varsOps .)
    )               reduce using rule 42 (valores -> varsOps .)
    +               reduce using rule 74 (valoresMat -> varsOps .)
    -               reduce using rule 74 (valoresMat -> varsOps .)
    *               reduce using rule 74 (valoresMat -> varsOps .)
    /               reduce using rule 74 (valoresMat -> varsOps .)
    %               reduce using rule 74 (valoresMat -> varsOps .)
    ^               reduce using rule 74 (valoresMat -> varsOps .)
    ?               reduce using rule 112 (valoresBool -> varsOps .)
    OR              reduce using rule 112 (valoresBool -> varsOps .)
    AND             reduce using rule 112 (valoresBool -> varsOps .)
    EQEQ            reduce using rule 112 (valoresBool -> varsOps .)
    DISTINTO        reduce using rule 112 (valoresBool -> varsOps .)
    >               reduce using rule 138 (tCompare -> varsOps .)
    <               reduce using rule 138 (tCompare -> varsOps .)


state 104

    (56) reg -> { . campos }
    (57) campos -> . ID : valores , campos
    (58) campos -> . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . reg
    (37) valores -> . INT
    (38) valores -> . FLOAT
    (39) valores -> . STRING
    (40) valores -> . BOOL
    (41) valores -> . varYVals
    (42) valores -> . varsOps
    (43) valores -> . vec
    (44) valores -> . ID . valoresCampos
    (45) valores -> . RES
    (76) eMat -> . eMat + p
    (77) eMat -> . eMat - p
    (78) eMat -> . valoresMat + p
    (79) eMat -> . valoresMat - p
    (80) eMat -> . eMat + valoresMat
    (81) eMat -> . eMat - valoresMat
    (82) eMat -> . valoresMat + valoresMat
    (83) eMat -> . valoresMat - valoresMat
    (84) eMat -> . p
    (113) expBool -> . or ? expBool : expBool
    (114) expBool -> . valoresBool ? expBool : expBool
    (115) expBool -> . or ? valoresBool : valoresBool
    (116) expBool -> . valoresBool ? valoresBool : valoresBool
    (117) expBool -> . or
    (56) reg -> . { campos }
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (31) vec -> . [ elem ]
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (85) p -> . p * exp
    (86) p -> . p / exp
    (87) p -> . p % exp
    (88) p -> . valoresMat * exp
    (89) p -> . valoresMat / exp
    (90) p -> . valoresMat % exp
    (91) p -> . p * valoresMat
    (92) p -> . p / valoresMat
    (93) p -> . p % valoresMat
    (94) p -> . valoresMat * valoresMat
    (95) p -> . valoresMat / valoresMat
    (96) p -> . valoresMat % valoresMat
    (97) p -> . exp
    (118) or -> . or OR and
    (119) or -> . valoresBool OR and
    (120) or -> . or OR valoresBool
    (121) or -> . valoresBool OR valoresBool
    (122) or -> . and
    (109) valoresBool -> . BOOL
    (110) valoresBool -> . funcBool
    (111) valoresBool -> . varYVals
    (112) valoresBool -> . varsOps
    (51) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (123) and -> . and AND eq
    (124) and -> . valoresBool AND eq
    (125) and -> . and AND valoresBool
    (126) and -> . valoresBool AND valoresBool
    (127) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (128) eq -> . eq EQEQ parenBool
    (129) eq -> . eq DISTINTO parenBool
    (130) eq -> . valoresBool EQEQ parenBool
    (131) eq -> . valoresBool DISTINTO parenBool
    (132) eq -> . eq EQEQ valoresBool
    (133) eq -> . eq DISTINTO valoresBool
    (134) eq -> . valoresBool EQEQ valoresBool
    (135) eq -> . valoresBool DISTINTO valoresBool
    (136) eq -> . mayor
    (108) paren -> . ( eMat )
    (140) mayor -> . tCompare > tCompare
    (141) mayor -> . menor
    (137) tCompare -> . eMat
    (138) tCompare -> . varsOps
    (139) tCompare -> . varYVals
    (142) menor -> . tCompare < tCompare
    (143) menor -> . not
    (144) not -> . NOT not
    (145) not -> . NOT valoresBool
    (146) not -> . parenBool
    (147) parenBool -> . ( expBool )

    ID              shift and go to state 173
    INT             shift and go to state 99
    FLOAT           shift and go to state 100
    STRING          shift and go to state 96
    BOOL            shift and go to state 102
    RES             shift and go to state 91
    {               shift and go to state 104
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    [               shift and go to state 97
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 93
    NOT             shift and go to state 87

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    mayor                          shift and go to state 66
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 92
    vecVal                         shift and go to state 9
    vec                            shift and go to state 94
    paren                          shift and go to state 77
    reg                            shift and go to state 95
    varsOps                        shift and go to state 103
    exp                            shift and go to state 85
    tCompare                       shift and go to state 76
    campos                         shift and go to state 172
    not                            shift and go to state 78
    valores                        shift and go to state 174
    parenBool                      shift and go to state 86
    p                              shift and go to state 82
    iSing                          shift and go to state 75
    varYVals                       shift and go to state 105
    or                             shift and go to state 89
    expBool                        shift and go to state 106

state 105

    (41) valores -> varYVals .
    (61) varsOps -> varYVals . MASMAS
    (62) varsOps -> varYVals . MENOSMENOS
    (73) valoresMat -> varYVals .
    (111) valoresBool -> varYVals .
    (139) tCompare -> varYVals .

    ,               reduce using rule 41 (valores -> varYVals .)
    ;               reduce using rule 41 (valores -> varYVals .)
    ]               reduce using rule 41 (valores -> varYVals .)
    }               reduce using rule 41 (valores -> varYVals .)
    )               reduce using rule 41 (valores -> varYVals .)
    MASMAS          shift and go to state 56
    MENOSMENOS      shift and go to state 53
    +               reduce using rule 73 (valoresMat -> varYVals .)
    -               reduce using rule 73 (valoresMat -> varYVals .)
    *               reduce using rule 73 (valoresMat -> varYVals .)
    /               reduce using rule 73 (valoresMat -> varYVals .)
    %               reduce using rule 73 (valoresMat -> varYVals .)
    ^               reduce using rule 73 (valoresMat -> varYVals .)
    ?               reduce using rule 111 (valoresBool -> varYVals .)
    OR              reduce using rule 111 (valoresBool -> varYVals .)
    AND             reduce using rule 111 (valoresBool -> varYVals .)
    EQEQ            reduce using rule 111 (valoresBool -> varYVals .)
    DISTINTO        reduce using rule 111 (valoresBool -> varYVals .)
    >               reduce using rule 139 (tCompare -> varYVals .)
    <               reduce using rule 139 (tCompare -> varYVals .)


state 106

    (35) valores -> expBool .

    ,               reduce using rule 35 (valores -> expBool .)
    ;               reduce using rule 35 (valores -> expBool .)
    ]               reduce using rule 35 (valores -> expBool .)
    }               reduce using rule 35 (valores -> expBool .)
    )               reduce using rule 35 (valores -> expBool .)


state 107

    (26) funcBool -> COLINEALES ( vec . , vec )

    ,               shift and go to state 175


state 108

    (12) loop -> FOR ( varAsig . ; expBool ; varsOps ) bloque

    ;               shift and go to state 176


state 109

    (64) varAsig -> varYVals . MULEQ valoresAsig
    (65) varAsig -> varYVals . DIVEQ valoresAsig
    (66) varAsig -> varYVals . MASEQ valoresAsig
    (67) varAsig -> varYVals . MENOSEQ valoresAsig
    (68) varAsig -> varYVals . = valoresAsig

    MULEQ           shift and go to state 57
    DIVEQ           shift and go to state 58
    MASEQ           shift and go to state 54
    MENOSEQ         shift and go to state 52
    =               shift and go to state 55


state 110

    (69) varAsig -> ID . ID . = valoresAsig

    =               shift and go to state 177


state 111

    (52) m -> [ INT . ]
    (53) m -> [ INT . ] m

    ]               shift and go to state 178


state 112

    (54) m -> [ varYVals . ] m
    (55) m -> [ varYVals . ]

    ]               shift and go to state 179


state 113

    (13) if -> IF ( expBool . ) bloque else

    )               shift and go to state 180


state 114

    (23) funcInt -> MULTIESCALAR ( vec . , eMat , param )

    ,               shift and go to state 181


state 115

    (25) funcString -> CAPITALIZAR ( eMat . )
    (76) eMat -> eMat . + p
    (77) eMat -> eMat . - p
    (80) eMat -> eMat . + valoresMat
    (81) eMat -> eMat . - valoresMat

    )               shift and go to state 182
    +               shift and go to state 142
    -               shift and go to state 143


state 116

    (108) paren -> ( . eMat )
    (76) eMat -> . eMat + p
    (77) eMat -> . eMat - p
    (78) eMat -> . valoresMat + p
    (79) eMat -> . valoresMat - p
    (80) eMat -> . eMat + valoresMat
    (81) eMat -> . eMat - valoresMat
    (82) eMat -> . valoresMat + valoresMat
    (83) eMat -> . valoresMat - valoresMat
    (84) eMat -> . p
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (85) p -> . p * exp
    (86) p -> . p / exp
    (87) p -> . p % exp
    (88) p -> . valoresMat * exp
    (89) p -> . valoresMat / exp
    (90) p -> . valoresMat % exp
    (91) p -> . p * valoresMat
    (92) p -> . p / valoresMat
    (93) p -> . p % valoresMat
    (94) p -> . valoresMat * valoresMat
    (95) p -> . valoresMat / valoresMat
    (96) p -> . valoresMat % valoresMat
    (97) p -> . exp
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (51) vecVal -> . ID m
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (108) paren -> . ( eMat )

    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 116

    eMat                           shift and go to state 183
    funcInt                        shift and go to state 65
    iSing                          shift and go to state 75
    p                              shift and go to state 82
    varsOps                        shift and go to state 117
    valoresMat                     shift and go to state 67
    paren                          shift and go to state 77
    exp                            shift and go to state 85
    varYVals                       shift and go to state 118
    vecVal                         shift and go to state 9

state 117

    (74) valoresMat -> varsOps .

    ^               reduce using rule 74 (valoresMat -> varsOps .)
    *               reduce using rule 74 (valoresMat -> varsOps .)
    /               reduce using rule 74 (valoresMat -> varsOps .)
    %               reduce using rule 74 (valoresMat -> varsOps .)
    +               reduce using rule 74 (valoresMat -> varsOps .)
    -               reduce using rule 74 (valoresMat -> varsOps .)
    >               reduce using rule 74 (valoresMat -> varsOps .)
    <               reduce using rule 74 (valoresMat -> varsOps .)
    )               reduce using rule 74 (valoresMat -> varsOps .)
    ;               reduce using rule 74 (valoresMat -> varsOps .)
    ,               reduce using rule 74 (valoresMat -> varsOps .)
    ]               reduce using rule 74 (valoresMat -> varsOps .)
    }               reduce using rule 74 (valoresMat -> varsOps .)
    EQEQ            reduce using rule 74 (valoresMat -> varsOps .)
    DISTINTO        reduce using rule 74 (valoresMat -> varsOps .)
    AND             reduce using rule 74 (valoresMat -> varsOps .)
    ?               reduce using rule 74 (valoresMat -> varsOps .)
    OR              reduce using rule 74 (valoresMat -> varsOps .)
    :               reduce using rule 74 (valoresMat -> varsOps .)


state 118

    (73) valoresMat -> varYVals .
    (61) varsOps -> varYVals . MASMAS
    (62) varsOps -> varYVals . MENOSMENOS

    ^               reduce using rule 73 (valoresMat -> varYVals .)
    *               reduce using rule 73 (valoresMat -> varYVals .)
    /               reduce using rule 73 (valoresMat -> varYVals .)
    %               reduce using rule 73 (valoresMat -> varYVals .)
    +               reduce using rule 73 (valoresMat -> varYVals .)
    -               reduce using rule 73 (valoresMat -> varYVals .)
    >               reduce using rule 73 (valoresMat -> varYVals .)
    <               reduce using rule 73 (valoresMat -> varYVals .)
    )               reduce using rule 73 (valoresMat -> varYVals .)
    ;               reduce using rule 73 (valoresMat -> varYVals .)
    ,               reduce using rule 73 (valoresMat -> varYVals .)
    ]               reduce using rule 73 (valoresMat -> varYVals .)
    }               reduce using rule 73 (valoresMat -> varYVals .)
    EQEQ            reduce using rule 73 (valoresMat -> varYVals .)
    DISTINTO        reduce using rule 73 (valoresMat -> varYVals .)
    AND             reduce using rule 73 (valoresMat -> varYVals .)
    ?               reduce using rule 73 (valoresMat -> varYVals .)
    OR              reduce using rule 73 (valoresMat -> varYVals .)
    :               reduce using rule 73 (valoresMat -> varYVals .)
    MASMAS          shift and go to state 56
    MENOSMENOS      shift and go to state 53


state 119

    (24) funcInt -> LENGTH ( vec . )

    )               shift and go to state 184


state 120

    (67) varAsig -> varYVals MENOSEQ valoresAsig .

    ;               reduce using rule 67 (varAsig -> varYVals MENOSEQ valoresAsig .)


state 121

    (63) valoresAsig -> valores .

    ;               reduce using rule 63 (valoresAsig -> valores .)


state 122

    (66) varAsig -> varYVals MASEQ valoresAsig .

    ;               reduce using rule 66 (varAsig -> varYVals MASEQ valoresAsig .)


state 123

    (68) varAsig -> varYVals = valoresAsig .

    ;               reduce using rule 68 (varAsig -> varYVals = valoresAsig .)


state 124

    (64) varAsig -> varYVals MULEQ valoresAsig .

    ;               reduce using rule 64 (varAsig -> varYVals MULEQ valoresAsig .)


state 125

    (65) varAsig -> varYVals DIVEQ valoresAsig .

    ;               reduce using rule 65 (varAsig -> varYVals DIVEQ valoresAsig .)


state 126

    (11) loop -> DO bloque WHILE ( . expBool ) ;
    (113) expBool -> . or ? expBool : expBool
    (114) expBool -> . valoresBool ? expBool : expBool
    (115) expBool -> . or ? valoresBool : valoresBool
    (116) expBool -> . valoresBool ? valoresBool : valoresBool
    (117) expBool -> . or
    (118) or -> . or OR and
    (119) or -> . valoresBool OR and
    (120) or -> . or OR valoresBool
    (121) or -> . valoresBool OR valoresBool
    (122) or -> . and
    (109) valoresBool -> . BOOL
    (110) valoresBool -> . funcBool
    (111) valoresBool -> . varYVals
    (112) valoresBool -> . varsOps
    (123) and -> . and AND eq
    (124) and -> . valoresBool AND eq
    (125) and -> . and AND valoresBool
    (126) and -> . valoresBool AND valoresBool
    (127) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (128) eq -> . eq EQEQ parenBool
    (129) eq -> . eq DISTINTO parenBool
    (130) eq -> . valoresBool EQEQ parenBool
    (131) eq -> . valoresBool DISTINTO parenBool
    (132) eq -> . eq EQEQ valoresBool
    (133) eq -> . eq DISTINTO valoresBool
    (134) eq -> . valoresBool EQEQ valoresBool
    (135) eq -> . valoresBool DISTINTO valoresBool
    (136) eq -> . mayor
    (51) vecVal -> . ID m
    (140) mayor -> . tCompare > tCompare
    (141) mayor -> . menor
    (137) tCompare -> . eMat
    (138) tCompare -> . varsOps
    (139) tCompare -> . varYVals
    (142) menor -> . tCompare < tCompare
    (143) menor -> . not
    (76) eMat -> . eMat + p
    (77) eMat -> . eMat - p
    (78) eMat -> . valoresMat + p
    (79) eMat -> . valoresMat - p
    (80) eMat -> . eMat + valoresMat
    (81) eMat -> . eMat - valoresMat
    (82) eMat -> . valoresMat + valoresMat
    (83) eMat -> . valoresMat - valoresMat
    (84) eMat -> . p
    (144) not -> . NOT not
    (145) not -> . NOT valoresBool
    (146) not -> . parenBool
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (85) p -> . p * exp
    (86) p -> . p / exp
    (87) p -> . p % exp
    (88) p -> . valoresMat * exp
    (89) p -> . valoresMat / exp
    (90) p -> . valoresMat % exp
    (91) p -> . p * valoresMat
    (92) p -> . p / valoresMat
    (93) p -> . p % valoresMat
    (94) p -> . valoresMat * valoresMat
    (95) p -> . valoresMat / valoresMat
    (96) p -> . valoresMat % valoresMat
    (97) p -> . exp
    (147) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (108) paren -> . ( eMat )

    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 87
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    (               shift and go to state 72
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 74
    +               shift and go to state 73

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 71
    vecVal                         shift and go to state 9
    paren                          shift and go to state 77
    iSing                          shift and go to state 75
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    varYVals                       shift and go to state 88
    or                             shift and go to state 89
    p                              shift and go to state 82
    varsOps                        shift and go to state 84
    exp                            shift and go to state 85
    mayor                          shift and go to state 66
    parenBool                      shift and go to state 86
    expBool                        shift and go to state 185

state 127

    (17) bloque -> { g } .

    RETURN          reduce using rule 17 (bloque -> { g } .)
    MENOSMENOS      reduce using rule 17 (bloque -> { g } .)
    MASMAS          reduce using rule 17 (bloque -> { g } .)
    ID              reduce using rule 17 (bloque -> { g } .)
    IF              reduce using rule 17 (bloque -> { g } .)
    WHILE           reduce using rule 17 (bloque -> { g } .)
    DO              reduce using rule 17 (bloque -> { g } .)
    FOR             reduce using rule 17 (bloque -> { g } .)
    PRINT           reduce using rule 17 (bloque -> { g } .)
    MULTIESCALAR    reduce using rule 17 (bloque -> { g } .)
    LENGTH          reduce using rule 17 (bloque -> { g } .)
    CAPITALIZAR     reduce using rule 17 (bloque -> { g } .)
    COLINEALES      reduce using rule 17 (bloque -> { g } .)
    $end            reduce using rule 17 (bloque -> { g } .)
    }               reduce using rule 17 (bloque -> { g } .)
    ELSE            reduce using rule 17 (bloque -> { g } .)


state 128

    (123) and -> and AND . eq
    (125) and -> and AND . valoresBool
    (128) eq -> . eq EQEQ parenBool
    (129) eq -> . eq DISTINTO parenBool
    (130) eq -> . valoresBool EQEQ parenBool
    (131) eq -> . valoresBool DISTINTO parenBool
    (132) eq -> . eq EQEQ valoresBool
    (133) eq -> . eq DISTINTO valoresBool
    (134) eq -> . valoresBool EQEQ valoresBool
    (135) eq -> . valoresBool DISTINTO valoresBool
    (136) eq -> . mayor
    (109) valoresBool -> . BOOL
    (110) valoresBool -> . funcBool
    (111) valoresBool -> . varYVals
    (112) valoresBool -> . varsOps
    (140) mayor -> . tCompare > tCompare
    (141) mayor -> . menor
    (26) funcBool -> . COLINEALES ( vec , vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (137) tCompare -> . eMat
    (138) tCompare -> . varsOps
    (139) tCompare -> . varYVals
    (142) menor -> . tCompare < tCompare
    (143) menor -> . not
    (51) vecVal -> . ID m
    (76) eMat -> . eMat + p
    (77) eMat -> . eMat - p
    (78) eMat -> . valoresMat + p
    (79) eMat -> . valoresMat - p
    (80) eMat -> . eMat + valoresMat
    (81) eMat -> . eMat - valoresMat
    (82) eMat -> . valoresMat + valoresMat
    (83) eMat -> . valoresMat - valoresMat
    (84) eMat -> . p
    (144) not -> . NOT not
    (145) not -> . NOT valoresBool
    (146) not -> . parenBool
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (85) p -> . p * exp
    (86) p -> . p / exp
    (87) p -> . p % exp
    (88) p -> . valoresMat * exp
    (89) p -> . valoresMat / exp
    (90) p -> . valoresMat % exp
    (91) p -> . p * valoresMat
    (92) p -> . p / valoresMat
    (93) p -> . p % valoresMat
    (94) p -> . valoresMat * valoresMat
    (95) p -> . valoresMat / valoresMat
    (96) p -> . valoresMat % valoresMat
    (97) p -> . exp
    (147) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (108) paren -> . ( eMat )

    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 87
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    (               shift and go to state 72
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 74
    +               shift and go to state 73

    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    mayor                          shift and go to state 66
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 186
    valoresBool                    shift and go to state 187
    eMat                           shift and go to state 71
    vecVal                         shift and go to state 9
    paren                          shift and go to state 77
    varsOps                        shift and go to state 84
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    p                              shift and go to state 82
    iSing                          shift and go to state 75
    exp                            shift and go to state 85
    varYVals                       shift and go to state 88
    parenBool                      shift and go to state 86

state 129

    (90) p -> valoresMat % . exp
    (96) p -> valoresMat % . valoresMat
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (108) paren -> . ( eMat )
    (51) vecVal -> . ID m

    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    -               shift and go to state 74
    +               shift and go to state 73
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    (               shift and go to state 116

    valoresMat                     shift and go to state 188
    funcInt                        shift and go to state 65
    vecVal                         shift and go to state 9
    varsOps                        shift and go to state 117
    exp                            shift and go to state 189
    paren                          shift and go to state 77
    varYVals                       shift and go to state 118
    iSing                          shift and go to state 75

state 130

    (78) eMat -> valoresMat + . p
    (82) eMat -> valoresMat + . valoresMat
    (85) p -> . p * exp
    (86) p -> . p / exp
    (87) p -> . p % exp
    (88) p -> . valoresMat * exp
    (89) p -> . valoresMat / exp
    (90) p -> . valoresMat % exp
    (91) p -> . p * valoresMat
    (92) p -> . p / valoresMat
    (93) p -> . p % valoresMat
    (94) p -> . valoresMat * valoresMat
    (95) p -> . valoresMat / valoresMat
    (96) p -> . valoresMat % valoresMat
    (97) p -> . exp
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (51) vecVal -> . ID m
    (108) paren -> . ( eMat )

    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 116

    valoresMat                     shift and go to state 190
    funcInt                        shift and go to state 65
    vecVal                         shift and go to state 9
    p                              shift and go to state 191
    varsOps                        shift and go to state 117
    exp                            shift and go to state 85
    paren                          shift and go to state 77
    varYVals                       shift and go to state 118
    iSing                          shift and go to state 75

state 131

    (88) p -> valoresMat * . exp
    (94) p -> valoresMat * . valoresMat
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (108) paren -> . ( eMat )
    (51) vecVal -> . ID m

    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    -               shift and go to state 74
    +               shift and go to state 73
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    (               shift and go to state 116

    valoresMat                     shift and go to state 192
    funcInt                        shift and go to state 65
    vecVal                         shift and go to state 9
    varsOps                        shift and go to state 117
    exp                            shift and go to state 193
    paren                          shift and go to state 77
    varYVals                       shift and go to state 118
    iSing                          shift and go to state 75

state 132

    (79) eMat -> valoresMat - . p
    (83) eMat -> valoresMat - . valoresMat
    (85) p -> . p * exp
    (86) p -> . p / exp
    (87) p -> . p % exp
    (88) p -> . valoresMat * exp
    (89) p -> . valoresMat / exp
    (90) p -> . valoresMat % exp
    (91) p -> . p * valoresMat
    (92) p -> . p / valoresMat
    (93) p -> . p % valoresMat
    (94) p -> . valoresMat * valoresMat
    (95) p -> . valoresMat / valoresMat
    (96) p -> . valoresMat % valoresMat
    (97) p -> . exp
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (51) vecVal -> . ID m
    (108) paren -> . ( eMat )

    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 116

    valoresMat                     shift and go to state 194
    funcInt                        shift and go to state 65
    vecVal                         shift and go to state 9
    p                              shift and go to state 195
    varsOps                        shift and go to state 117
    exp                            shift and go to state 85
    paren                          shift and go to state 77
    varYVals                       shift and go to state 118
    iSing                          shift and go to state 75

state 133

    (89) p -> valoresMat / . exp
    (95) p -> valoresMat / . valoresMat
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (108) paren -> . ( eMat )
    (51) vecVal -> . ID m

    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    -               shift and go to state 74
    +               shift and go to state 73
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    (               shift and go to state 116

    valoresMat                     shift and go to state 196
    funcInt                        shift and go to state 65
    vecVal                         shift and go to state 9
    varsOps                        shift and go to state 117
    exp                            shift and go to state 197
    paren                          shift and go to state 77
    varYVals                       shift and go to state 118
    iSing                          shift and go to state 75

state 134

    (99) exp -> valoresMat ^ . iSing
    (101) exp -> valoresMat ^ . valoresMat
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (108) paren -> . ( eMat )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (51) vecVal -> . ID m

    -               shift and go to state 74
    +               shift and go to state 73
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    (               shift and go to state 116
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26

    funcInt                        shift and go to state 65
    vecVal                         shift and go to state 9
    iSing                          shift and go to state 199
    valoresMat                     shift and go to state 198
    paren                          shift and go to state 77
    varYVals                       shift and go to state 118
    varsOps                        shift and go to state 117

state 135

    (128) eq -> eq EQEQ . parenBool
    (132) eq -> eq EQEQ . valoresBool
    (147) parenBool -> . ( expBool )
    (109) valoresBool -> . BOOL
    (110) valoresBool -> . funcBool
    (111) valoresBool -> . varYVals
    (112) valoresBool -> . varsOps
    (26) funcBool -> . COLINEALES ( vec , vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (51) vecVal -> . ID m

    (               shift and go to state 158
    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26

    funcBool                       shift and go to state 64
    valoresBool                    shift and go to state 200
    varsOps                        shift and go to state 160
    vecVal                         shift and go to state 9
    varYVals                       shift and go to state 161
    parenBool                      shift and go to state 201

state 136

    (129) eq -> eq DISTINTO . parenBool
    (133) eq -> eq DISTINTO . valoresBool
    (147) parenBool -> . ( expBool )
    (109) valoresBool -> . BOOL
    (110) valoresBool -> . funcBool
    (111) valoresBool -> . varYVals
    (112) valoresBool -> . varsOps
    (26) funcBool -> . COLINEALES ( vec , vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (51) vecVal -> . ID m

    (               shift and go to state 158
    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26

    funcBool                       shift and go to state 64
    valoresBool                    shift and go to state 202
    varsOps                        shift and go to state 160
    vecVal                         shift and go to state 9
    varYVals                       shift and go to state 161
    parenBool                      shift and go to state 203

state 137

    (124) and -> valoresBool AND . eq
    (126) and -> valoresBool AND . valoresBool
    (128) eq -> . eq EQEQ parenBool
    (129) eq -> . eq DISTINTO parenBool
    (130) eq -> . valoresBool EQEQ parenBool
    (131) eq -> . valoresBool DISTINTO parenBool
    (132) eq -> . eq EQEQ valoresBool
    (133) eq -> . eq DISTINTO valoresBool
    (134) eq -> . valoresBool EQEQ valoresBool
    (135) eq -> . valoresBool DISTINTO valoresBool
    (136) eq -> . mayor
    (109) valoresBool -> . BOOL
    (110) valoresBool -> . funcBool
    (111) valoresBool -> . varYVals
    (112) valoresBool -> . varsOps
    (140) mayor -> . tCompare > tCompare
    (141) mayor -> . menor
    (26) funcBool -> . COLINEALES ( vec , vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (137) tCompare -> . eMat
    (138) tCompare -> . varsOps
    (139) tCompare -> . varYVals
    (142) menor -> . tCompare < tCompare
    (143) menor -> . not
    (51) vecVal -> . ID m
    (76) eMat -> . eMat + p
    (77) eMat -> . eMat - p
    (78) eMat -> . valoresMat + p
    (79) eMat -> . valoresMat - p
    (80) eMat -> . eMat + valoresMat
    (81) eMat -> . eMat - valoresMat
    (82) eMat -> . valoresMat + valoresMat
    (83) eMat -> . valoresMat - valoresMat
    (84) eMat -> . p
    (144) not -> . NOT not
    (145) not -> . NOT valoresBool
    (146) not -> . parenBool
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (85) p -> . p * exp
    (86) p -> . p / exp
    (87) p -> . p % exp
    (88) p -> . valoresMat * exp
    (89) p -> . valoresMat / exp
    (90) p -> . valoresMat % exp
    (91) p -> . p * valoresMat
    (92) p -> . p / valoresMat
    (93) p -> . p % valoresMat
    (94) p -> . valoresMat * valoresMat
    (95) p -> . valoresMat / valoresMat
    (96) p -> . valoresMat % valoresMat
    (97) p -> . exp
    (147) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (108) paren -> . ( eMat )

    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 87
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    (               shift and go to state 72
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 74
    +               shift and go to state 73

    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    mayor                          shift and go to state 66
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 204
    valoresBool                    shift and go to state 205
    eMat                           shift and go to state 71
    vecVal                         shift and go to state 9
    paren                          shift and go to state 77
    varsOps                        shift and go to state 84
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    p                              shift and go to state 82
    iSing                          shift and go to state 75
    exp                            shift and go to state 85
    varYVals                       shift and go to state 88
    parenBool                      shift and go to state 86

state 138

    (131) eq -> valoresBool DISTINTO . parenBool
    (135) eq -> valoresBool DISTINTO . valoresBool
    (147) parenBool -> . ( expBool )
    (109) valoresBool -> . BOOL
    (110) valoresBool -> . funcBool
    (111) valoresBool -> . varYVals
    (112) valoresBool -> . varsOps
    (26) funcBool -> . COLINEALES ( vec , vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (51) vecVal -> . ID m

    (               shift and go to state 158
    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26

    funcBool                       shift and go to state 64
    parenBool                      shift and go to state 206
    varsOps                        shift and go to state 160
    vecVal                         shift and go to state 9
    varYVals                       shift and go to state 161
    valoresBool                    shift and go to state 207

state 139

    (130) eq -> valoresBool EQEQ . parenBool
    (134) eq -> valoresBool EQEQ . valoresBool
    (147) parenBool -> . ( expBool )
    (109) valoresBool -> . BOOL
    (110) valoresBool -> . funcBool
    (111) valoresBool -> . varYVals
    (112) valoresBool -> . varsOps
    (26) funcBool -> . COLINEALES ( vec , vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (51) vecVal -> . ID m

    (               shift and go to state 158
    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26

    funcBool                       shift and go to state 64
    parenBool                      shift and go to state 208
    varsOps                        shift and go to state 160
    vecVal                         shift and go to state 9
    varYVals                       shift and go to state 161
    valoresBool                    shift and go to state 209

state 140

    (119) or -> valoresBool OR . and
    (121) or -> valoresBool OR . valoresBool
    (123) and -> . and AND eq
    (124) and -> . valoresBool AND eq
    (125) and -> . and AND valoresBool
    (126) and -> . valoresBool AND valoresBool
    (127) and -> . eq
    (109) valoresBool -> . BOOL
    (110) valoresBool -> . funcBool
    (111) valoresBool -> . varYVals
    (112) valoresBool -> . varsOps
    (128) eq -> . eq EQEQ parenBool
    (129) eq -> . eq DISTINTO parenBool
    (130) eq -> . valoresBool EQEQ parenBool
    (131) eq -> . valoresBool DISTINTO parenBool
    (132) eq -> . eq EQEQ valoresBool
    (133) eq -> . eq DISTINTO valoresBool
    (134) eq -> . valoresBool EQEQ valoresBool
    (135) eq -> . valoresBool DISTINTO valoresBool
    (136) eq -> . mayor
    (26) funcBool -> . COLINEALES ( vec , vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (140) mayor -> . tCompare > tCompare
    (141) mayor -> . menor
    (51) vecVal -> . ID m
    (137) tCompare -> . eMat
    (138) tCompare -> . varsOps
    (139) tCompare -> . varYVals
    (142) menor -> . tCompare < tCompare
    (143) menor -> . not
    (76) eMat -> . eMat + p
    (77) eMat -> . eMat - p
    (78) eMat -> . valoresMat + p
    (79) eMat -> . valoresMat - p
    (80) eMat -> . eMat + valoresMat
    (81) eMat -> . eMat - valoresMat
    (82) eMat -> . valoresMat + valoresMat
    (83) eMat -> . valoresMat - valoresMat
    (84) eMat -> . p
    (144) not -> . NOT not
    (145) not -> . NOT valoresBool
    (146) not -> . parenBool
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (85) p -> . p * exp
    (86) p -> . p / exp
    (87) p -> . p % exp
    (88) p -> . valoresMat * exp
    (89) p -> . valoresMat / exp
    (90) p -> . valoresMat % exp
    (91) p -> . p * valoresMat
    (92) p -> . p / valoresMat
    (93) p -> . p % valoresMat
    (94) p -> . valoresMat * valoresMat
    (95) p -> . valoresMat / valoresMat
    (96) p -> . valoresMat % valoresMat
    (97) p -> . exp
    (147) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (108) paren -> . ( eMat )

    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 87
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    (               shift and go to state 72
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 74
    +               shift and go to state 73

    and                            shift and go to state 210
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    vecVal                         shift and go to state 9
    valoresBool                    shift and go to state 211
    eMat                           shift and go to state 71
    mayor                          shift and go to state 66
    paren                          shift and go to state 77
    varsOps                        shift and go to state 84
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    p                              shift and go to state 82
    iSing                          shift and go to state 75
    exp                            shift and go to state 85
    varYVals                       shift and go to state 88
    parenBool                      shift and go to state 86

state 141

    (114) expBool -> valoresBool ? . expBool : expBool
    (116) expBool -> valoresBool ? . valoresBool : valoresBool
    (113) expBool -> . or ? expBool : expBool
    (114) expBool -> . valoresBool ? expBool : expBool
    (115) expBool -> . or ? valoresBool : valoresBool
    (116) expBool -> . valoresBool ? valoresBool : valoresBool
    (117) expBool -> . or
    (109) valoresBool -> . BOOL
    (110) valoresBool -> . funcBool
    (111) valoresBool -> . varYVals
    (112) valoresBool -> . varsOps
    (118) or -> . or OR and
    (119) or -> . valoresBool OR and
    (120) or -> . or OR valoresBool
    (121) or -> . valoresBool OR valoresBool
    (122) or -> . and
    (26) funcBool -> . COLINEALES ( vec , vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (123) and -> . and AND eq
    (124) and -> . valoresBool AND eq
    (125) and -> . and AND valoresBool
    (126) and -> . valoresBool AND valoresBool
    (127) and -> . eq
    (51) vecVal -> . ID m
    (128) eq -> . eq EQEQ parenBool
    (129) eq -> . eq DISTINTO parenBool
    (130) eq -> . valoresBool EQEQ parenBool
    (131) eq -> . valoresBool DISTINTO parenBool
    (132) eq -> . eq EQEQ valoresBool
    (133) eq -> . eq DISTINTO valoresBool
    (134) eq -> . valoresBool EQEQ valoresBool
    (135) eq -> . valoresBool DISTINTO valoresBool
    (136) eq -> . mayor
    (140) mayor -> . tCompare > tCompare
    (141) mayor -> . menor
    (137) tCompare -> . eMat
    (138) tCompare -> . varsOps
    (139) tCompare -> . varYVals
    (142) menor -> . tCompare < tCompare
    (143) menor -> . not
    (76) eMat -> . eMat + p
    (77) eMat -> . eMat - p
    (78) eMat -> . valoresMat + p
    (79) eMat -> . valoresMat - p
    (80) eMat -> . eMat + valoresMat
    (81) eMat -> . eMat - valoresMat
    (82) eMat -> . valoresMat + valoresMat
    (83) eMat -> . valoresMat - valoresMat
    (84) eMat -> . p
    (144) not -> . NOT not
    (145) not -> . NOT valoresBool
    (146) not -> . parenBool
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (85) p -> . p * exp
    (86) p -> . p / exp
    (87) p -> . p % exp
    (88) p -> . valoresMat * exp
    (89) p -> . valoresMat / exp
    (90) p -> . valoresMat % exp
    (91) p -> . p * valoresMat
    (92) p -> . p / valoresMat
    (93) p -> . p % valoresMat
    (94) p -> . valoresMat * valoresMat
    (95) p -> . valoresMat / valoresMat
    (96) p -> . valoresMat % valoresMat
    (97) p -> . exp
    (147) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (108) paren -> . ( eMat )

    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 87
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    (               shift and go to state 72
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 74
    +               shift and go to state 73

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    vecVal                         shift and go to state 9
    valoresBool                    shift and go to state 212
    eMat                           shift and go to state 71
    mayor                          shift and go to state 66
    paren                          shift and go to state 77
    iSing                          shift and go to state 75
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    parenBool                      shift and go to state 86
    p                              shift and go to state 82
    varsOps                        shift and go to state 84
    exp                            shift and go to state 85
    varYVals                       shift and go to state 88
    or                             shift and go to state 89
    expBool                        shift and go to state 213

state 142

    (76) eMat -> eMat + . p
    (80) eMat -> eMat + . valoresMat
    (85) p -> . p * exp
    (86) p -> . p / exp
    (87) p -> . p % exp
    (88) p -> . valoresMat * exp
    (89) p -> . valoresMat / exp
    (90) p -> . valoresMat % exp
    (91) p -> . p * valoresMat
    (92) p -> . p / valoresMat
    (93) p -> . p % valoresMat
    (94) p -> . valoresMat * valoresMat
    (95) p -> . valoresMat / valoresMat
    (96) p -> . valoresMat % valoresMat
    (97) p -> . exp
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (51) vecVal -> . ID m
    (108) paren -> . ( eMat )

    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 116

    valoresMat                     shift and go to state 214
    funcInt                        shift and go to state 65
    vecVal                         shift and go to state 9
    p                              shift and go to state 215
    varsOps                        shift and go to state 117
    exp                            shift and go to state 85
    paren                          shift and go to state 77
    varYVals                       shift and go to state 118
    iSing                          shift and go to state 75

state 143

    (77) eMat -> eMat - . p
    (81) eMat -> eMat - . valoresMat
    (85) p -> . p * exp
    (86) p -> . p / exp
    (87) p -> . p % exp
    (88) p -> . valoresMat * exp
    (89) p -> . valoresMat / exp
    (90) p -> . valoresMat % exp
    (91) p -> . p * valoresMat
    (92) p -> . p / valoresMat
    (93) p -> . p % valoresMat
    (94) p -> . valoresMat * valoresMat
    (95) p -> . valoresMat / valoresMat
    (96) p -> . valoresMat % valoresMat
    (97) p -> . exp
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (51) vecVal -> . ID m
    (108) paren -> . ( eMat )

    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 116

    valoresMat                     shift and go to state 216
    funcInt                        shift and go to state 65
    vecVal                         shift and go to state 9
    p                              shift and go to state 217
    varsOps                        shift and go to state 117
    exp                            shift and go to state 85
    paren                          shift and go to state 77
    varYVals                       shift and go to state 118
    iSing                          shift and go to state 75

state 144

    (108) paren -> ( eMat . )
    (76) eMat -> eMat . + p
    (77) eMat -> eMat . - p
    (80) eMat -> eMat . + valoresMat
    (81) eMat -> eMat . - valoresMat
    (137) tCompare -> eMat .

    )               shift and go to state 218
    +               shift and go to state 142
    -               shift and go to state 143
    >               reduce using rule 137 (tCompare -> eMat .)
    <               reduce using rule 137 (tCompare -> eMat .)


state 145

    (112) valoresBool -> varsOps .
    (74) valoresMat -> varsOps .
    (138) tCompare -> varsOps .

    ?               reduce using rule 112 (valoresBool -> varsOps .)
    OR              reduce using rule 112 (valoresBool -> varsOps .)
    AND             reduce using rule 112 (valoresBool -> varsOps .)
    EQEQ            reduce using rule 112 (valoresBool -> varsOps .)
    DISTINTO        reduce using rule 112 (valoresBool -> varsOps .)
    +               reduce using rule 74 (valoresMat -> varsOps .)
    -               reduce using rule 74 (valoresMat -> varsOps .)
    *               reduce using rule 74 (valoresMat -> varsOps .)
    /               reduce using rule 74 (valoresMat -> varsOps .)
    %               reduce using rule 74 (valoresMat -> varsOps .)
    ^               reduce using rule 74 (valoresMat -> varsOps .)
    >               reduce using rule 138 (tCompare -> varsOps .)
    <               reduce using rule 138 (tCompare -> varsOps .)


state 146

    (111) valoresBool -> varYVals .
    (73) valoresMat -> varYVals .
    (61) varsOps -> varYVals . MASMAS
    (62) varsOps -> varYVals . MENOSMENOS
    (139) tCompare -> varYVals .

    ?               reduce using rule 111 (valoresBool -> varYVals .)
    OR              reduce using rule 111 (valoresBool -> varYVals .)
    AND             reduce using rule 111 (valoresBool -> varYVals .)
    EQEQ            reduce using rule 111 (valoresBool -> varYVals .)
    DISTINTO        reduce using rule 111 (valoresBool -> varYVals .)
    +               reduce using rule 73 (valoresMat -> varYVals .)
    -               reduce using rule 73 (valoresMat -> varYVals .)
    *               reduce using rule 73 (valoresMat -> varYVals .)
    /               reduce using rule 73 (valoresMat -> varYVals .)
    %               reduce using rule 73 (valoresMat -> varYVals .)
    ^               reduce using rule 73 (valoresMat -> varYVals .)
    MASMAS          shift and go to state 56
    MENOSMENOS      shift and go to state 53
    >               reduce using rule 139 (tCompare -> varYVals .)
    <               reduce using rule 139 (tCompare -> varYVals .)


state 147

    (147) parenBool -> ( expBool . )

    )               shift and go to state 219


state 148

    (106) iSing -> + valoresMat .

    ^               reduce using rule 106 (iSing -> + valoresMat .)
    *               reduce using rule 106 (iSing -> + valoresMat .)
    /               reduce using rule 106 (iSing -> + valoresMat .)
    %               reduce using rule 106 (iSing -> + valoresMat .)
    +               reduce using rule 106 (iSing -> + valoresMat .)
    -               reduce using rule 106 (iSing -> + valoresMat .)
    ;               reduce using rule 106 (iSing -> + valoresMat .)
    >               reduce using rule 106 (iSing -> + valoresMat .)
    <               reduce using rule 106 (iSing -> + valoresMat .)
    ,               reduce using rule 106 (iSing -> + valoresMat .)
    ]               reduce using rule 106 (iSing -> + valoresMat .)
    )               reduce using rule 106 (iSing -> + valoresMat .)
    }               reduce using rule 106 (iSing -> + valoresMat .)
    EQEQ            reduce using rule 106 (iSing -> + valoresMat .)
    DISTINTO        reduce using rule 106 (iSing -> + valoresMat .)
    AND             reduce using rule 106 (iSing -> + valoresMat .)
    ?               reduce using rule 106 (iSing -> + valoresMat .)
    OR              reduce using rule 106 (iSing -> + valoresMat .)
    :               reduce using rule 106 (iSing -> + valoresMat .)


state 149

    (104) iSing -> + paren .

    ^               reduce using rule 104 (iSing -> + paren .)
    *               reduce using rule 104 (iSing -> + paren .)
    /               reduce using rule 104 (iSing -> + paren .)
    %               reduce using rule 104 (iSing -> + paren .)
    +               reduce using rule 104 (iSing -> + paren .)
    -               reduce using rule 104 (iSing -> + paren .)
    ;               reduce using rule 104 (iSing -> + paren .)
    >               reduce using rule 104 (iSing -> + paren .)
    <               reduce using rule 104 (iSing -> + paren .)
    ,               reduce using rule 104 (iSing -> + paren .)
    ]               reduce using rule 104 (iSing -> + paren .)
    )               reduce using rule 104 (iSing -> + paren .)
    }               reduce using rule 104 (iSing -> + paren .)
    EQEQ            reduce using rule 104 (iSing -> + paren .)
    DISTINTO        reduce using rule 104 (iSing -> + paren .)
    AND             reduce using rule 104 (iSing -> + paren .)
    ?               reduce using rule 104 (iSing -> + paren .)
    OR              reduce using rule 104 (iSing -> + paren .)
    :               reduce using rule 104 (iSing -> + paren .)


state 150

    (105) iSing -> - valoresMat .

    ^               reduce using rule 105 (iSing -> - valoresMat .)
    *               reduce using rule 105 (iSing -> - valoresMat .)
    /               reduce using rule 105 (iSing -> - valoresMat .)
    %               reduce using rule 105 (iSing -> - valoresMat .)
    +               reduce using rule 105 (iSing -> - valoresMat .)
    -               reduce using rule 105 (iSing -> - valoresMat .)
    ;               reduce using rule 105 (iSing -> - valoresMat .)
    >               reduce using rule 105 (iSing -> - valoresMat .)
    <               reduce using rule 105 (iSing -> - valoresMat .)
    ,               reduce using rule 105 (iSing -> - valoresMat .)
    ]               reduce using rule 105 (iSing -> - valoresMat .)
    )               reduce using rule 105 (iSing -> - valoresMat .)
    }               reduce using rule 105 (iSing -> - valoresMat .)
    EQEQ            reduce using rule 105 (iSing -> - valoresMat .)
    DISTINTO        reduce using rule 105 (iSing -> - valoresMat .)
    AND             reduce using rule 105 (iSing -> - valoresMat .)
    ?               reduce using rule 105 (iSing -> - valoresMat .)
    OR              reduce using rule 105 (iSing -> - valoresMat .)
    :               reduce using rule 105 (iSing -> - valoresMat .)


state 151

    (103) iSing -> - paren .

    ^               reduce using rule 103 (iSing -> - paren .)
    *               reduce using rule 103 (iSing -> - paren .)
    /               reduce using rule 103 (iSing -> - paren .)
    %               reduce using rule 103 (iSing -> - paren .)
    +               reduce using rule 103 (iSing -> - paren .)
    -               reduce using rule 103 (iSing -> - paren .)
    ;               reduce using rule 103 (iSing -> - paren .)
    >               reduce using rule 103 (iSing -> - paren .)
    <               reduce using rule 103 (iSing -> - paren .)
    ,               reduce using rule 103 (iSing -> - paren .)
    ]               reduce using rule 103 (iSing -> - paren .)
    )               reduce using rule 103 (iSing -> - paren .)
    }               reduce using rule 103 (iSing -> - paren .)
    EQEQ            reduce using rule 103 (iSing -> - paren .)
    DISTINTO        reduce using rule 103 (iSing -> - paren .)
    AND             reduce using rule 103 (iSing -> - paren .)
    ?               reduce using rule 103 (iSing -> - paren .)
    OR              reduce using rule 103 (iSing -> - paren .)
    :               reduce using rule 103 (iSing -> - paren .)


state 152

    (142) menor -> tCompare < . tCompare
    (137) tCompare -> . eMat
    (138) tCompare -> . varsOps
    (139) tCompare -> . varYVals
    (76) eMat -> . eMat + p
    (77) eMat -> . eMat - p
    (78) eMat -> . valoresMat + p
    (79) eMat -> . valoresMat - p
    (80) eMat -> . eMat + valoresMat
    (81) eMat -> . eMat - valoresMat
    (82) eMat -> . valoresMat + valoresMat
    (83) eMat -> . valoresMat - valoresMat
    (84) eMat -> . p
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (85) p -> . p * exp
    (86) p -> . p / exp
    (87) p -> . p % exp
    (88) p -> . valoresMat * exp
    (89) p -> . valoresMat / exp
    (90) p -> . valoresMat % exp
    (91) p -> . p * valoresMat
    (92) p -> . p / valoresMat
    (93) p -> . p % valoresMat
    (94) p -> . valoresMat * valoresMat
    (95) p -> . valoresMat / valoresMat
    (96) p -> . valoresMat % valoresMat
    (97) p -> . exp
    (51) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (108) paren -> . ( eMat )

    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    ID              shift and go to state 50
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 116

    eMat                           shift and go to state 71
    p                              shift and go to state 82
    funcInt                        shift and go to state 65
    iSing                          shift and go to state 75
    tCompare                       shift and go to state 220
    varsOps                        shift and go to state 221
    valoresMat                     shift and go to state 67
    paren                          shift and go to state 77
    exp                            shift and go to state 85
    varYVals                       shift and go to state 222
    vecVal                         shift and go to state 9

state 153

    (140) mayor -> tCompare > . tCompare
    (137) tCompare -> . eMat
    (138) tCompare -> . varsOps
    (139) tCompare -> . varYVals
    (76) eMat -> . eMat + p
    (77) eMat -> . eMat - p
    (78) eMat -> . valoresMat + p
    (79) eMat -> . valoresMat - p
    (80) eMat -> . eMat + valoresMat
    (81) eMat -> . eMat - valoresMat
    (82) eMat -> . valoresMat + valoresMat
    (83) eMat -> . valoresMat - valoresMat
    (84) eMat -> . p
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (85) p -> . p * exp
    (86) p -> . p / exp
    (87) p -> . p % exp
    (88) p -> . valoresMat * exp
    (89) p -> . valoresMat / exp
    (90) p -> . valoresMat % exp
    (91) p -> . p * valoresMat
    (92) p -> . p / valoresMat
    (93) p -> . p % valoresMat
    (94) p -> . valoresMat * valoresMat
    (95) p -> . valoresMat / valoresMat
    (96) p -> . valoresMat % valoresMat
    (97) p -> . exp
    (51) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (108) paren -> . ( eMat )

    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    ID              shift and go to state 50
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 116

    eMat                           shift and go to state 71
    p                              shift and go to state 82
    funcInt                        shift and go to state 65
    iSing                          shift and go to state 75
    tCompare                       shift and go to state 223
    varsOps                        shift and go to state 221
    valoresMat                     shift and go to state 67
    paren                          shift and go to state 77
    exp                            shift and go to state 85
    varYVals                       shift and go to state 222
    vecVal                         shift and go to state 9

state 154

    (87) p -> p % . exp
    (93) p -> p % . valoresMat
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (108) paren -> . ( eMat )
    (51) vecVal -> . ID m

    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    -               shift and go to state 74
    +               shift and go to state 73
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    (               shift and go to state 116

    exp                            shift and go to state 225
    funcInt                        shift and go to state 65
    vecVal                         shift and go to state 9
    iSing                          shift and go to state 75
    valoresMat                     shift and go to state 224
    paren                          shift and go to state 77
    varYVals                       shift and go to state 118
    varsOps                        shift and go to state 117

state 155

    (85) p -> p * . exp
    (91) p -> p * . valoresMat
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (108) paren -> . ( eMat )
    (51) vecVal -> . ID m

    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    -               shift and go to state 74
    +               shift and go to state 73
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    (               shift and go to state 116

    exp                            shift and go to state 227
    funcInt                        shift and go to state 65
    vecVal                         shift and go to state 9
    iSing                          shift and go to state 75
    valoresMat                     shift and go to state 226
    paren                          shift and go to state 77
    varYVals                       shift and go to state 118
    varsOps                        shift and go to state 117

state 156

    (86) p -> p / . exp
    (92) p -> p / . valoresMat
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (108) paren -> . ( eMat )
    (51) vecVal -> . ID m

    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    -               shift and go to state 74
    +               shift and go to state 73
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    (               shift and go to state 116

    exp                            shift and go to state 229
    funcInt                        shift and go to state 65
    vecVal                         shift and go to state 9
    iSing                          shift and go to state 75
    valoresMat                     shift and go to state 228
    paren                          shift and go to state 77
    varYVals                       shift and go to state 118
    varsOps                        shift and go to state 117

state 157

    (98) exp -> exp ^ . iSing
    (100) exp -> exp ^ . valoresMat
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (108) paren -> . ( eMat )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (51) vecVal -> . ID m

    -               shift and go to state 74
    +               shift and go to state 73
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    (               shift and go to state 116
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26

    funcInt                        shift and go to state 65
    vecVal                         shift and go to state 9
    iSing                          shift and go to state 231
    valoresMat                     shift and go to state 230
    paren                          shift and go to state 77
    varYVals                       shift and go to state 118
    varsOps                        shift and go to state 117

state 158

    (147) parenBool -> ( . expBool )
    (113) expBool -> . or ? expBool : expBool
    (114) expBool -> . valoresBool ? expBool : expBool
    (115) expBool -> . or ? valoresBool : valoresBool
    (116) expBool -> . valoresBool ? valoresBool : valoresBool
    (117) expBool -> . or
    (118) or -> . or OR and
    (119) or -> . valoresBool OR and
    (120) or -> . or OR valoresBool
    (121) or -> . valoresBool OR valoresBool
    (122) or -> . and
    (109) valoresBool -> . BOOL
    (110) valoresBool -> . funcBool
    (111) valoresBool -> . varYVals
    (112) valoresBool -> . varsOps
    (123) and -> . and AND eq
    (124) and -> . valoresBool AND eq
    (125) and -> . and AND valoresBool
    (126) and -> . valoresBool AND valoresBool
    (127) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (128) eq -> . eq EQEQ parenBool
    (129) eq -> . eq DISTINTO parenBool
    (130) eq -> . valoresBool EQEQ parenBool
    (131) eq -> . valoresBool DISTINTO parenBool
    (132) eq -> . eq EQEQ valoresBool
    (133) eq -> . eq DISTINTO valoresBool
    (134) eq -> . valoresBool EQEQ valoresBool
    (135) eq -> . valoresBool DISTINTO valoresBool
    (136) eq -> . mayor
    (51) vecVal -> . ID m
    (140) mayor -> . tCompare > tCompare
    (141) mayor -> . menor
    (137) tCompare -> . eMat
    (138) tCompare -> . varsOps
    (139) tCompare -> . varYVals
    (142) menor -> . tCompare < tCompare
    (143) menor -> . not
    (76) eMat -> . eMat + p
    (77) eMat -> . eMat - p
    (78) eMat -> . valoresMat + p
    (79) eMat -> . valoresMat - p
    (80) eMat -> . eMat + valoresMat
    (81) eMat -> . eMat - valoresMat
    (82) eMat -> . valoresMat + valoresMat
    (83) eMat -> . valoresMat - valoresMat
    (84) eMat -> . p
    (144) not -> . NOT not
    (145) not -> . NOT valoresBool
    (146) not -> . parenBool
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (85) p -> . p * exp
    (86) p -> . p / exp
    (87) p -> . p % exp
    (88) p -> . valoresMat * exp
    (89) p -> . valoresMat / exp
    (90) p -> . valoresMat % exp
    (91) p -> . p * valoresMat
    (92) p -> . p / valoresMat
    (93) p -> . p % valoresMat
    (94) p -> . valoresMat * valoresMat
    (95) p -> . valoresMat / valoresMat
    (96) p -> . valoresMat % valoresMat
    (97) p -> . exp
    (147) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (108) paren -> . ( eMat )

    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 87
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    (               shift and go to state 72
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 74
    +               shift and go to state 73

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 71
    vecVal                         shift and go to state 9
    paren                          shift and go to state 77
    iSing                          shift and go to state 75
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    varYVals                       shift and go to state 88
    or                             shift and go to state 89
    p                              shift and go to state 82
    varsOps                        shift and go to state 84
    exp                            shift and go to state 85
    mayor                          shift and go to state 66
    parenBool                      shift and go to state 86
    expBool                        shift and go to state 147

state 159

    (144) not -> NOT not .

    EQEQ            reduce using rule 144 (not -> NOT not .)
    DISTINTO        reduce using rule 144 (not -> NOT not .)
    AND             reduce using rule 144 (not -> NOT not .)
    ?               reduce using rule 144 (not -> NOT not .)
    OR              reduce using rule 144 (not -> NOT not .)
    }               reduce using rule 144 (not -> NOT not .)
    ;               reduce using rule 144 (not -> NOT not .)
    )               reduce using rule 144 (not -> NOT not .)
    ,               reduce using rule 144 (not -> NOT not .)
    ]               reduce using rule 144 (not -> NOT not .)
    :               reduce using rule 144 (not -> NOT not .)


state 160

    (112) valoresBool -> varsOps .

    EQEQ            reduce using rule 112 (valoresBool -> varsOps .)
    DISTINTO        reduce using rule 112 (valoresBool -> varsOps .)
    AND             reduce using rule 112 (valoresBool -> varsOps .)
    ?               reduce using rule 112 (valoresBool -> varsOps .)
    OR              reduce using rule 112 (valoresBool -> varsOps .)
    )               reduce using rule 112 (valoresBool -> varsOps .)
    ;               reduce using rule 112 (valoresBool -> varsOps .)
    ,               reduce using rule 112 (valoresBool -> varsOps .)
    ]               reduce using rule 112 (valoresBool -> varsOps .)
    }               reduce using rule 112 (valoresBool -> varsOps .)
    :               reduce using rule 112 (valoresBool -> varsOps .)


state 161

    (111) valoresBool -> varYVals .
    (61) varsOps -> varYVals . MASMAS
    (62) varsOps -> varYVals . MENOSMENOS

    EQEQ            reduce using rule 111 (valoresBool -> varYVals .)
    DISTINTO        reduce using rule 111 (valoresBool -> varYVals .)
    AND             reduce using rule 111 (valoresBool -> varYVals .)
    ?               reduce using rule 111 (valoresBool -> varYVals .)
    OR              reduce using rule 111 (valoresBool -> varYVals .)
    )               reduce using rule 111 (valoresBool -> varYVals .)
    ;               reduce using rule 111 (valoresBool -> varYVals .)
    ,               reduce using rule 111 (valoresBool -> varYVals .)
    ]               reduce using rule 111 (valoresBool -> varYVals .)
    }               reduce using rule 111 (valoresBool -> varYVals .)
    :               reduce using rule 111 (valoresBool -> varYVals .)
    MASMAS          shift and go to state 56
    MENOSMENOS      shift and go to state 53


state 162

    (145) not -> NOT valoresBool .

    EQEQ            reduce using rule 145 (not -> NOT valoresBool .)
    DISTINTO        reduce using rule 145 (not -> NOT valoresBool .)
    AND             reduce using rule 145 (not -> NOT valoresBool .)
    ?               reduce using rule 145 (not -> NOT valoresBool .)
    OR              reduce using rule 145 (not -> NOT valoresBool .)
    }               reduce using rule 145 (not -> NOT valoresBool .)
    ;               reduce using rule 145 (not -> NOT valoresBool .)
    )               reduce using rule 145 (not -> NOT valoresBool .)
    ,               reduce using rule 145 (not -> NOT valoresBool .)
    ]               reduce using rule 145 (not -> NOT valoresBool .)
    :               reduce using rule 145 (not -> NOT valoresBool .)


state 163

    (113) expBool -> or ? . expBool : expBool
    (115) expBool -> or ? . valoresBool : valoresBool
    (113) expBool -> . or ? expBool : expBool
    (114) expBool -> . valoresBool ? expBool : expBool
    (115) expBool -> . or ? valoresBool : valoresBool
    (116) expBool -> . valoresBool ? valoresBool : valoresBool
    (117) expBool -> . or
    (109) valoresBool -> . BOOL
    (110) valoresBool -> . funcBool
    (111) valoresBool -> . varYVals
    (112) valoresBool -> . varsOps
    (118) or -> . or OR and
    (119) or -> . valoresBool OR and
    (120) or -> . or OR valoresBool
    (121) or -> . valoresBool OR valoresBool
    (122) or -> . and
    (26) funcBool -> . COLINEALES ( vec , vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (123) and -> . and AND eq
    (124) and -> . valoresBool AND eq
    (125) and -> . and AND valoresBool
    (126) and -> . valoresBool AND valoresBool
    (127) and -> . eq
    (51) vecVal -> . ID m
    (128) eq -> . eq EQEQ parenBool
    (129) eq -> . eq DISTINTO parenBool
    (130) eq -> . valoresBool EQEQ parenBool
    (131) eq -> . valoresBool DISTINTO parenBool
    (132) eq -> . eq EQEQ valoresBool
    (133) eq -> . eq DISTINTO valoresBool
    (134) eq -> . valoresBool EQEQ valoresBool
    (135) eq -> . valoresBool DISTINTO valoresBool
    (136) eq -> . mayor
    (140) mayor -> . tCompare > tCompare
    (141) mayor -> . menor
    (137) tCompare -> . eMat
    (138) tCompare -> . varsOps
    (139) tCompare -> . varYVals
    (142) menor -> . tCompare < tCompare
    (143) menor -> . not
    (76) eMat -> . eMat + p
    (77) eMat -> . eMat - p
    (78) eMat -> . valoresMat + p
    (79) eMat -> . valoresMat - p
    (80) eMat -> . eMat + valoresMat
    (81) eMat -> . eMat - valoresMat
    (82) eMat -> . valoresMat + valoresMat
    (83) eMat -> . valoresMat - valoresMat
    (84) eMat -> . p
    (144) not -> . NOT not
    (145) not -> . NOT valoresBool
    (146) not -> . parenBool
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (85) p -> . p * exp
    (86) p -> . p / exp
    (87) p -> . p % exp
    (88) p -> . valoresMat * exp
    (89) p -> . valoresMat / exp
    (90) p -> . valoresMat % exp
    (91) p -> . p * valoresMat
    (92) p -> . p / valoresMat
    (93) p -> . p % valoresMat
    (94) p -> . valoresMat * valoresMat
    (95) p -> . valoresMat / valoresMat
    (96) p -> . valoresMat % valoresMat
    (97) p -> . exp
    (147) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (108) paren -> . ( eMat )

    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 87
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    (               shift and go to state 72
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 74
    +               shift and go to state 73

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    valoresBool                    shift and go to state 232
    eMat                           shift and go to state 71
    vecVal                         shift and go to state 9
    paren                          shift and go to state 77
    iSing                          shift and go to state 75
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    varYVals                       shift and go to state 88
    or                             shift and go to state 89
    p                              shift and go to state 82
    varsOps                        shift and go to state 84
    exp                            shift and go to state 85
    mayor                          shift and go to state 66
    parenBool                      shift and go to state 86
    expBool                        shift and go to state 233

state 164

    (118) or -> or OR . and
    (120) or -> or OR . valoresBool
    (123) and -> . and AND eq
    (124) and -> . valoresBool AND eq
    (125) and -> . and AND valoresBool
    (126) and -> . valoresBool AND valoresBool
    (127) and -> . eq
    (109) valoresBool -> . BOOL
    (110) valoresBool -> . funcBool
    (111) valoresBool -> . varYVals
    (112) valoresBool -> . varsOps
    (128) eq -> . eq EQEQ parenBool
    (129) eq -> . eq DISTINTO parenBool
    (130) eq -> . valoresBool EQEQ parenBool
    (131) eq -> . valoresBool DISTINTO parenBool
    (132) eq -> . eq EQEQ valoresBool
    (133) eq -> . eq DISTINTO valoresBool
    (134) eq -> . valoresBool EQEQ valoresBool
    (135) eq -> . valoresBool DISTINTO valoresBool
    (136) eq -> . mayor
    (26) funcBool -> . COLINEALES ( vec , vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (140) mayor -> . tCompare > tCompare
    (141) mayor -> . menor
    (51) vecVal -> . ID m
    (137) tCompare -> . eMat
    (138) tCompare -> . varsOps
    (139) tCompare -> . varYVals
    (142) menor -> . tCompare < tCompare
    (143) menor -> . not
    (76) eMat -> . eMat + p
    (77) eMat -> . eMat - p
    (78) eMat -> . valoresMat + p
    (79) eMat -> . valoresMat - p
    (80) eMat -> . eMat + valoresMat
    (81) eMat -> . eMat - valoresMat
    (82) eMat -> . valoresMat + valoresMat
    (83) eMat -> . valoresMat - valoresMat
    (84) eMat -> . p
    (144) not -> . NOT not
    (145) not -> . NOT valoresBool
    (146) not -> . parenBool
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (85) p -> . p * exp
    (86) p -> . p / exp
    (87) p -> . p % exp
    (88) p -> . valoresMat * exp
    (89) p -> . valoresMat / exp
    (90) p -> . valoresMat % exp
    (91) p -> . p * valoresMat
    (92) p -> . p / valoresMat
    (93) p -> . p % valoresMat
    (94) p -> . valoresMat * valoresMat
    (95) p -> . valoresMat / valoresMat
    (96) p -> . valoresMat % valoresMat
    (97) p -> . exp
    (147) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (108) paren -> . ( eMat )

    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 87
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    (               shift and go to state 72
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 74
    +               shift and go to state 73

    and                            shift and go to state 234
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    valoresBool                    shift and go to state 235
    eMat                           shift and go to state 71
    vecVal                         shift and go to state 9
    paren                          shift and go to state 77
    iSing                          shift and go to state 75
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    varYVals                       shift and go to state 88
    p                              shift and go to state 82
    varsOps                        shift and go to state 84
    exp                            shift and go to state 85
    mayor                          shift and go to state 66
    parenBool                      shift and go to state 86

state 165

    (10) loop -> WHILE ( expBool ) . bloque
    (16) bloque -> . sentencia ;
    (17) bloque -> . { g }
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (64) varAsig -> . varYVals MULEQ valoresAsig
    (65) varAsig -> . varYVals DIVEQ valoresAsig
    (66) varAsig -> . varYVals MASEQ valoresAsig
    (67) varAsig -> . varYVals MENOSEQ valoresAsig
    (68) varAsig -> . varYVals = valoresAsig
    (69) varAsig -> . ID . ID = valoresAsig
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (51) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( eMat )
    (26) funcBool -> . COLINEALES ( vec , vec )

    {               shift and go to state 32
    RETURN          shift and go to state 2
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    ID              shift and go to state 16
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    CAPITALIZAR     shift and go to state 23
    COLINEALES      shift and go to state 13

    varAsig                        shift and go to state 18
    sentencia                      shift and go to state 31
    funcInt                        shift and go to state 5
    funcString                     shift and go to state 20
    funcVoid                       shift and go to state 12
    funcReturn                     shift and go to state 22
    funcBool                       shift and go to state 3
    varsOps                        shift and go to state 27
    func                           shift and go to state 15
    bloque                         shift and go to state 236
    varYVals                       shift and go to state 28
    vecVal                         shift and go to state 9

state 166

    (74) valoresMat -> varsOps .
    (112) valoresBool -> varsOps .
    (138) tCompare -> varsOps .

    +               reduce using rule 74 (valoresMat -> varsOps .)
    -               reduce using rule 74 (valoresMat -> varsOps .)
    *               reduce using rule 74 (valoresMat -> varsOps .)
    /               reduce using rule 74 (valoresMat -> varsOps .)
    %               reduce using rule 74 (valoresMat -> varsOps .)
    ^               reduce using rule 74 (valoresMat -> varsOps .)
    ?               reduce using rule 112 (valoresBool -> varsOps .)
    OR              reduce using rule 112 (valoresBool -> varsOps .)
    AND             reduce using rule 112 (valoresBool -> varsOps .)
    EQEQ            reduce using rule 112 (valoresBool -> varsOps .)
    DISTINTO        reduce using rule 112 (valoresBool -> varsOps .)
    >               reduce using rule 138 (tCompare -> varsOps .)
    <               reduce using rule 138 (tCompare -> varsOps .)


state 167

    (73) valoresMat -> varYVals .
    (111) valoresBool -> varYVals .
    (61) varsOps -> varYVals . MASMAS
    (62) varsOps -> varYVals . MENOSMENOS
    (139) tCompare -> varYVals .

    +               reduce using rule 73 (valoresMat -> varYVals .)
    -               reduce using rule 73 (valoresMat -> varYVals .)
    *               reduce using rule 73 (valoresMat -> varYVals .)
    /               reduce using rule 73 (valoresMat -> varYVals .)
    %               reduce using rule 73 (valoresMat -> varYVals .)
    ^               reduce using rule 73 (valoresMat -> varYVals .)
    ?               reduce using rule 111 (valoresBool -> varYVals .)
    OR              reduce using rule 111 (valoresBool -> varYVals .)
    AND             reduce using rule 111 (valoresBool -> varYVals .)
    EQEQ            reduce using rule 111 (valoresBool -> varYVals .)
    DISTINTO        reduce using rule 111 (valoresBool -> varYVals .)
    MASMAS          shift and go to state 56
    MENOSMENOS      shift and go to state 53
    >               reduce using rule 139 (tCompare -> varYVals .)
    <               reduce using rule 139 (tCompare -> varYVals .)


state 168

    (32) elem -> valores . , elem
    (33) elem -> valores .

    ,               shift and go to state 237
    ]               reduce using rule 33 (elem -> valores .)


state 169

    (31) vec -> [ elem . ]

    ]               shift and go to state 238


state 170

    (44) valores -> ID . . valoresCampos
    (46) valoresCampos -> . ID
    (47) valoresCampos -> . END
    (48) valoresCampos -> . BEGIN

    ID              shift and go to state 241
    END             shift and go to state 240
    BEGIN           shift and go to state 239

    valoresCampos                  shift and go to state 242

state 171

    (27) funcVoid -> PRINT ( valores ) .

    ;               reduce using rule 27 (funcVoid -> PRINT ( valores ) .)


state 172

    (56) reg -> { campos . }

    }               shift and go to state 243


state 173

    (57) campos -> ID . : valores , campos
    (44) valores -> ID . . valoresCampos
    (49) varYVals -> ID .
    (51) vecVal -> ID . m
    (52) m -> . [ INT ]
    (53) m -> . [ INT ] m
    (54) m -> . [ varYVals ] m
    (55) m -> . [ varYVals ]

    :               shift and go to state 244
    .               shift and go to state 170
    MASMAS          reduce using rule 49 (varYVals -> ID .)
    MENOSMENOS      reduce using rule 49 (varYVals -> ID .)
    }               reduce using rule 49 (varYVals -> ID .)
    +               reduce using rule 49 (varYVals -> ID .)
    -               reduce using rule 49 (varYVals -> ID .)
    *               reduce using rule 49 (varYVals -> ID .)
    /               reduce using rule 49 (varYVals -> ID .)
    %               reduce using rule 49 (varYVals -> ID .)
    ^               reduce using rule 49 (varYVals -> ID .)
    ?               reduce using rule 49 (varYVals -> ID .)
    OR              reduce using rule 49 (varYVals -> ID .)
    AND             reduce using rule 49 (varYVals -> ID .)
    EQEQ            reduce using rule 49 (varYVals -> ID .)
    DISTINTO        reduce using rule 49 (varYVals -> ID .)
    >               reduce using rule 49 (varYVals -> ID .)
    <               reduce using rule 49 (varYVals -> ID .)
    [               shift and go to state 43

    m                              shift and go to state 41

state 174

    (58) campos -> valores .

    }               reduce using rule 58 (campos -> valores .)


state 175

    (26) funcBool -> COLINEALES ( vec , . vec )
    (31) vec -> . [ elem ]

    [               shift and go to state 97

    vec                            shift and go to state 245

state 176

    (12) loop -> FOR ( varAsig ; . expBool ; varsOps ) bloque
    (113) expBool -> . or ? expBool : expBool
    (114) expBool -> . valoresBool ? expBool : expBool
    (115) expBool -> . or ? valoresBool : valoresBool
    (116) expBool -> . valoresBool ? valoresBool : valoresBool
    (117) expBool -> . or
    (118) or -> . or OR and
    (119) or -> . valoresBool OR and
    (120) or -> . or OR valoresBool
    (121) or -> . valoresBool OR valoresBool
    (122) or -> . and
    (109) valoresBool -> . BOOL
    (110) valoresBool -> . funcBool
    (111) valoresBool -> . varYVals
    (112) valoresBool -> . varsOps
    (123) and -> . and AND eq
    (124) and -> . valoresBool AND eq
    (125) and -> . and AND valoresBool
    (126) and -> . valoresBool AND valoresBool
    (127) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (128) eq -> . eq EQEQ parenBool
    (129) eq -> . eq DISTINTO parenBool
    (130) eq -> . valoresBool EQEQ parenBool
    (131) eq -> . valoresBool DISTINTO parenBool
    (132) eq -> . eq EQEQ valoresBool
    (133) eq -> . eq DISTINTO valoresBool
    (134) eq -> . valoresBool EQEQ valoresBool
    (135) eq -> . valoresBool DISTINTO valoresBool
    (136) eq -> . mayor
    (51) vecVal -> . ID m
    (140) mayor -> . tCompare > tCompare
    (141) mayor -> . menor
    (137) tCompare -> . eMat
    (138) tCompare -> . varsOps
    (139) tCompare -> . varYVals
    (142) menor -> . tCompare < tCompare
    (143) menor -> . not
    (76) eMat -> . eMat + p
    (77) eMat -> . eMat - p
    (78) eMat -> . valoresMat + p
    (79) eMat -> . valoresMat - p
    (80) eMat -> . eMat + valoresMat
    (81) eMat -> . eMat - valoresMat
    (82) eMat -> . valoresMat + valoresMat
    (83) eMat -> . valoresMat - valoresMat
    (84) eMat -> . p
    (144) not -> . NOT not
    (145) not -> . NOT valoresBool
    (146) not -> . parenBool
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (85) p -> . p * exp
    (86) p -> . p / exp
    (87) p -> . p % exp
    (88) p -> . valoresMat * exp
    (89) p -> . valoresMat / exp
    (90) p -> . valoresMat % exp
    (91) p -> . p * valoresMat
    (92) p -> . p / valoresMat
    (93) p -> . p % valoresMat
    (94) p -> . valoresMat * valoresMat
    (95) p -> . valoresMat / valoresMat
    (96) p -> . valoresMat % valoresMat
    (97) p -> . exp
    (147) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (108) paren -> . ( eMat )

    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 87
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    (               shift and go to state 72
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 74
    +               shift and go to state 73

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    vecVal                         shift and go to state 9
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 71
    mayor                          shift and go to state 66
    paren                          shift and go to state 77
    iSing                          shift and go to state 75
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    parenBool                      shift and go to state 86
    p                              shift and go to state 82
    varsOps                        shift and go to state 84
    exp                            shift and go to state 85
    varYVals                       shift and go to state 88
    or                             shift and go to state 89
    expBool                        shift and go to state 246

state 177

    (69) varAsig -> ID . ID = . valoresAsig
    (63) valoresAsig -> . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . reg
    (37) valores -> . INT
    (38) valores -> . FLOAT
    (39) valores -> . STRING
    (40) valores -> . BOOL
    (41) valores -> . varYVals
    (42) valores -> . varsOps
    (43) valores -> . vec
    (44) valores -> . ID . valoresCampos
    (45) valores -> . RES
    (76) eMat -> . eMat + p
    (77) eMat -> . eMat - p
    (78) eMat -> . valoresMat + p
    (79) eMat -> . valoresMat - p
    (80) eMat -> . eMat + valoresMat
    (81) eMat -> . eMat - valoresMat
    (82) eMat -> . valoresMat + valoresMat
    (83) eMat -> . valoresMat - valoresMat
    (84) eMat -> . p
    (113) expBool -> . or ? expBool : expBool
    (114) expBool -> . valoresBool ? expBool : expBool
    (115) expBool -> . or ? valoresBool : valoresBool
    (116) expBool -> . valoresBool ? valoresBool : valoresBool
    (117) expBool -> . or
    (56) reg -> . { campos }
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (31) vec -> . [ elem ]
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (85) p -> . p * exp
    (86) p -> . p / exp
    (87) p -> . p % exp
    (88) p -> . valoresMat * exp
    (89) p -> . valoresMat / exp
    (90) p -> . valoresMat % exp
    (91) p -> . p * valoresMat
    (92) p -> . p / valoresMat
    (93) p -> . p % valoresMat
    (94) p -> . valoresMat * valoresMat
    (95) p -> . valoresMat / valoresMat
    (96) p -> . valoresMat % valoresMat
    (97) p -> . exp
    (118) or -> . or OR and
    (119) or -> . valoresBool OR and
    (120) or -> . or OR valoresBool
    (121) or -> . valoresBool OR valoresBool
    (122) or -> . and
    (109) valoresBool -> . BOOL
    (110) valoresBool -> . funcBool
    (111) valoresBool -> . varYVals
    (112) valoresBool -> . varsOps
    (51) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (123) and -> . and AND eq
    (124) and -> . valoresBool AND eq
    (125) and -> . and AND valoresBool
    (126) and -> . valoresBool AND valoresBool
    (127) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (128) eq -> . eq EQEQ parenBool
    (129) eq -> . eq DISTINTO parenBool
    (130) eq -> . valoresBool EQEQ parenBool
    (131) eq -> . valoresBool DISTINTO parenBool
    (132) eq -> . eq EQEQ valoresBool
    (133) eq -> . eq DISTINTO valoresBool
    (134) eq -> . valoresBool EQEQ valoresBool
    (135) eq -> . valoresBool DISTINTO valoresBool
    (136) eq -> . mayor
    (108) paren -> . ( eMat )
    (140) mayor -> . tCompare > tCompare
    (141) mayor -> . menor
    (137) tCompare -> . eMat
    (138) tCompare -> . varsOps
    (139) tCompare -> . varYVals
    (142) menor -> . tCompare < tCompare
    (143) menor -> . not
    (144) not -> . NOT not
    (145) not -> . NOT valoresBool
    (146) not -> . parenBool
    (147) parenBool -> . ( expBool )

    INT             shift and go to state 99
    FLOAT           shift and go to state 100
    STRING          shift and go to state 96
    BOOL            shift and go to state 102
    ID              shift and go to state 98
    RES             shift and go to state 91
    {               shift and go to state 104
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    [               shift and go to state 97
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 93
    NOT             shift and go to state 87

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    mayor                          shift and go to state 66
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 92
    vecVal                         shift and go to state 9
    vec                            shift and go to state 94
    paren                          shift and go to state 77
    reg                            shift and go to state 95
    iSing                          shift and go to state 75
    exp                            shift and go to state 85
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    valoresAsig                    shift and go to state 247
    valores                        shift and go to state 121
    parenBool                      shift and go to state 86
    p                              shift and go to state 82
    varsOps                        shift and go to state 103
    varYVals                       shift and go to state 105
    or                             shift and go to state 89
    expBool                        shift and go to state 106

state 178

    (52) m -> [ INT ] .
    (53) m -> [ INT ] . m
    (52) m -> . [ INT ]
    (53) m -> . [ INT ] m
    (54) m -> . [ varYVals ] m
    (55) m -> . [ varYVals ]

    MASMAS          reduce using rule 52 (m -> [ INT ] .)
    MENOSMENOS      reduce using rule 52 (m -> [ INT ] .)
    MULEQ           reduce using rule 52 (m -> [ INT ] .)
    DIVEQ           reduce using rule 52 (m -> [ INT ] .)
    MASEQ           reduce using rule 52 (m -> [ INT ] .)
    MENOSEQ         reduce using rule 52 (m -> [ INT ] .)
    =               reduce using rule 52 (m -> [ INT ] .)
    ;               reduce using rule 52 (m -> [ INT ] .)
    ?               reduce using rule 52 (m -> [ INT ] .)
    OR              reduce using rule 52 (m -> [ INT ] .)
    AND             reduce using rule 52 (m -> [ INT ] .)
    EQEQ            reduce using rule 52 (m -> [ INT ] .)
    DISTINTO        reduce using rule 52 (m -> [ INT ] .)
    >               reduce using rule 52 (m -> [ INT ] .)
    <               reduce using rule 52 (m -> [ INT ] .)
    +               reduce using rule 52 (m -> [ INT ] .)
    -               reduce using rule 52 (m -> [ INT ] .)
    *               reduce using rule 52 (m -> [ INT ] .)
    /               reduce using rule 52 (m -> [ INT ] .)
    %               reduce using rule 52 (m -> [ INT ] .)
    ^               reduce using rule 52 (m -> [ INT ] .)
    )               reduce using rule 52 (m -> [ INT ] .)
    ,               reduce using rule 52 (m -> [ INT ] .)
    ]               reduce using rule 52 (m -> [ INT ] .)
    }               reduce using rule 52 (m -> [ INT ] .)
    :               reduce using rule 52 (m -> [ INT ] .)
    [               shift and go to state 43

    m                              shift and go to state 248

state 179

    (54) m -> [ varYVals ] . m
    (55) m -> [ varYVals ] .
    (52) m -> . [ INT ]
    (53) m -> . [ INT ] m
    (54) m -> . [ varYVals ] m
    (55) m -> . [ varYVals ]

    MASMAS          reduce using rule 55 (m -> [ varYVals ] .)
    MENOSMENOS      reduce using rule 55 (m -> [ varYVals ] .)
    MULEQ           reduce using rule 55 (m -> [ varYVals ] .)
    DIVEQ           reduce using rule 55 (m -> [ varYVals ] .)
    MASEQ           reduce using rule 55 (m -> [ varYVals ] .)
    MENOSEQ         reduce using rule 55 (m -> [ varYVals ] .)
    =               reduce using rule 55 (m -> [ varYVals ] .)
    ;               reduce using rule 55 (m -> [ varYVals ] .)
    ?               reduce using rule 55 (m -> [ varYVals ] .)
    OR              reduce using rule 55 (m -> [ varYVals ] .)
    AND             reduce using rule 55 (m -> [ varYVals ] .)
    EQEQ            reduce using rule 55 (m -> [ varYVals ] .)
    DISTINTO        reduce using rule 55 (m -> [ varYVals ] .)
    >               reduce using rule 55 (m -> [ varYVals ] .)
    <               reduce using rule 55 (m -> [ varYVals ] .)
    +               reduce using rule 55 (m -> [ varYVals ] .)
    -               reduce using rule 55 (m -> [ varYVals ] .)
    *               reduce using rule 55 (m -> [ varYVals ] .)
    /               reduce using rule 55 (m -> [ varYVals ] .)
    %               reduce using rule 55 (m -> [ varYVals ] .)
    ^               reduce using rule 55 (m -> [ varYVals ] .)
    )               reduce using rule 55 (m -> [ varYVals ] .)
    ,               reduce using rule 55 (m -> [ varYVals ] .)
    ]               reduce using rule 55 (m -> [ varYVals ] .)
    }               reduce using rule 55 (m -> [ varYVals ] .)
    :               reduce using rule 55 (m -> [ varYVals ] .)
    [               shift and go to state 43

    m                              shift and go to state 249

state 180

    (13) if -> IF ( expBool ) . bloque else
    (16) bloque -> . sentencia ;
    (17) bloque -> . { g }
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (64) varAsig -> . varYVals MULEQ valoresAsig
    (65) varAsig -> . varYVals DIVEQ valoresAsig
    (66) varAsig -> . varYVals MASEQ valoresAsig
    (67) varAsig -> . varYVals MENOSEQ valoresAsig
    (68) varAsig -> . varYVals = valoresAsig
    (69) varAsig -> . ID . ID = valoresAsig
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (51) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( eMat )
    (26) funcBool -> . COLINEALES ( vec , vec )

    {               shift and go to state 32
    RETURN          shift and go to state 2
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    ID              shift and go to state 16
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    CAPITALIZAR     shift and go to state 23
    COLINEALES      shift and go to state 13

    varAsig                        shift and go to state 18
    sentencia                      shift and go to state 31
    funcInt                        shift and go to state 5
    funcString                     shift and go to state 20
    funcVoid                       shift and go to state 12
    funcReturn                     shift and go to state 22
    funcBool                       shift and go to state 3
    varsOps                        shift and go to state 27
    func                           shift and go to state 15
    bloque                         shift and go to state 250
    varYVals                       shift and go to state 28
    vecVal                         shift and go to state 9

state 181

    (23) funcInt -> MULTIESCALAR ( vec , . eMat , param )
    (76) eMat -> . eMat + p
    (77) eMat -> . eMat - p
    (78) eMat -> . valoresMat + p
    (79) eMat -> . valoresMat - p
    (80) eMat -> . eMat + valoresMat
    (81) eMat -> . eMat - valoresMat
    (82) eMat -> . valoresMat + valoresMat
    (83) eMat -> . valoresMat - valoresMat
    (84) eMat -> . p
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (85) p -> . p * exp
    (86) p -> . p / exp
    (87) p -> . p % exp
    (88) p -> . valoresMat * exp
    (89) p -> . valoresMat / exp
    (90) p -> . valoresMat % exp
    (91) p -> . p * valoresMat
    (92) p -> . p / valoresMat
    (93) p -> . p % valoresMat
    (94) p -> . valoresMat * valoresMat
    (95) p -> . valoresMat / valoresMat
    (96) p -> . valoresMat % valoresMat
    (97) p -> . exp
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (51) vecVal -> . ID m
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (108) paren -> . ( eMat )

    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 116

    eMat                           shift and go to state 251
    funcInt                        shift and go to state 65
    iSing                          shift and go to state 75
    p                              shift and go to state 82
    valoresMat                     shift and go to state 67
    paren                          shift and go to state 77
    exp                            shift and go to state 85
    varYVals                       shift and go to state 118
    vecVal                         shift and go to state 9
    varsOps                        shift and go to state 117

state 182

    (25) funcString -> CAPITALIZAR ( eMat ) .

    ;               reduce using rule 25 (funcString -> CAPITALIZAR ( eMat ) .)


state 183

    (108) paren -> ( eMat . )
    (76) eMat -> eMat . + p
    (77) eMat -> eMat . - p
    (80) eMat -> eMat . + valoresMat
    (81) eMat -> eMat . - valoresMat

    )               shift and go to state 218
    +               shift and go to state 142
    -               shift and go to state 143


state 184

    (24) funcInt -> LENGTH ( vec ) .

    ;               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    +               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    -               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    *               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    /               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    %               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    ^               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    >               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    <               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    )               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    ,               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    ]               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    }               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    EQEQ            reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    DISTINTO        reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    AND             reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    ?               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    OR              reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    :               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)


state 185

    (11) loop -> DO bloque WHILE ( expBool . ) ;

    )               shift and go to state 252


state 186

    (123) and -> and AND eq .
    (128) eq -> eq . EQEQ parenBool
    (129) eq -> eq . DISTINTO parenBool
    (132) eq -> eq . EQEQ valoresBool
    (133) eq -> eq . DISTINTO valoresBool

    AND             reduce using rule 123 (and -> and AND eq .)
    ?               reduce using rule 123 (and -> and AND eq .)
    OR              reduce using rule 123 (and -> and AND eq .)
    ;               reduce using rule 123 (and -> and AND eq .)
    )               reduce using rule 123 (and -> and AND eq .)
    ,               reduce using rule 123 (and -> and AND eq .)
    ]               reduce using rule 123 (and -> and AND eq .)
    }               reduce using rule 123 (and -> and AND eq .)
    :               reduce using rule 123 (and -> and AND eq .)
    EQEQ            shift and go to state 135
    DISTINTO        shift and go to state 136


state 187

    (125) and -> and AND valoresBool .
    (130) eq -> valoresBool . EQEQ parenBool
    (131) eq -> valoresBool . DISTINTO parenBool
    (134) eq -> valoresBool . EQEQ valoresBool
    (135) eq -> valoresBool . DISTINTO valoresBool

    AND             reduce using rule 125 (and -> and AND valoresBool .)
    ?               reduce using rule 125 (and -> and AND valoresBool .)
    OR              reduce using rule 125 (and -> and AND valoresBool .)
    ;               reduce using rule 125 (and -> and AND valoresBool .)
    )               reduce using rule 125 (and -> and AND valoresBool .)
    ,               reduce using rule 125 (and -> and AND valoresBool .)
    ]               reduce using rule 125 (and -> and AND valoresBool .)
    }               reduce using rule 125 (and -> and AND valoresBool .)
    :               reduce using rule 125 (and -> and AND valoresBool .)
    EQEQ            shift and go to state 139
    DISTINTO        shift and go to state 138


state 188

    (96) p -> valoresMat % valoresMat .
    (99) exp -> valoresMat . ^ iSing
    (101) exp -> valoresMat . ^ valoresMat

    *               reduce using rule 96 (p -> valoresMat % valoresMat .)
    /               reduce using rule 96 (p -> valoresMat % valoresMat .)
    %               reduce using rule 96 (p -> valoresMat % valoresMat .)
    +               reduce using rule 96 (p -> valoresMat % valoresMat .)
    -               reduce using rule 96 (p -> valoresMat % valoresMat .)
    >               reduce using rule 96 (p -> valoresMat % valoresMat .)
    <               reduce using rule 96 (p -> valoresMat % valoresMat .)
    ,               reduce using rule 96 (p -> valoresMat % valoresMat .)
    ]               reduce using rule 96 (p -> valoresMat % valoresMat .)
    )               reduce using rule 96 (p -> valoresMat % valoresMat .)
    }               reduce using rule 96 (p -> valoresMat % valoresMat .)
    ;               reduce using rule 96 (p -> valoresMat % valoresMat .)
    EQEQ            reduce using rule 96 (p -> valoresMat % valoresMat .)
    DISTINTO        reduce using rule 96 (p -> valoresMat % valoresMat .)
    AND             reduce using rule 96 (p -> valoresMat % valoresMat .)
    ?               reduce using rule 96 (p -> valoresMat % valoresMat .)
    OR              reduce using rule 96 (p -> valoresMat % valoresMat .)
    :               reduce using rule 96 (p -> valoresMat % valoresMat .)
    ^               shift and go to state 134


state 189

    (90) p -> valoresMat % exp .
    (98) exp -> exp . ^ iSing
    (100) exp -> exp . ^ valoresMat

    *               reduce using rule 90 (p -> valoresMat % exp .)
    /               reduce using rule 90 (p -> valoresMat % exp .)
    %               reduce using rule 90 (p -> valoresMat % exp .)
    +               reduce using rule 90 (p -> valoresMat % exp .)
    -               reduce using rule 90 (p -> valoresMat % exp .)
    >               reduce using rule 90 (p -> valoresMat % exp .)
    <               reduce using rule 90 (p -> valoresMat % exp .)
    ,               reduce using rule 90 (p -> valoresMat % exp .)
    ]               reduce using rule 90 (p -> valoresMat % exp .)
    )               reduce using rule 90 (p -> valoresMat % exp .)
    }               reduce using rule 90 (p -> valoresMat % exp .)
    ;               reduce using rule 90 (p -> valoresMat % exp .)
    EQEQ            reduce using rule 90 (p -> valoresMat % exp .)
    DISTINTO        reduce using rule 90 (p -> valoresMat % exp .)
    AND             reduce using rule 90 (p -> valoresMat % exp .)
    ?               reduce using rule 90 (p -> valoresMat % exp .)
    OR              reduce using rule 90 (p -> valoresMat % exp .)
    :               reduce using rule 90 (p -> valoresMat % exp .)
    ^               shift and go to state 157


state 190

    (82) eMat -> valoresMat + valoresMat .
    (88) p -> valoresMat . * exp
    (89) p -> valoresMat . / exp
    (90) p -> valoresMat . % exp
    (94) p -> valoresMat . * valoresMat
    (95) p -> valoresMat . / valoresMat
    (96) p -> valoresMat . % valoresMat
    (99) exp -> valoresMat . ^ iSing
    (101) exp -> valoresMat . ^ valoresMat

    +               reduce using rule 82 (eMat -> valoresMat + valoresMat .)
    -               reduce using rule 82 (eMat -> valoresMat + valoresMat .)
    >               reduce using rule 82 (eMat -> valoresMat + valoresMat .)
    <               reduce using rule 82 (eMat -> valoresMat + valoresMat .)
    }               reduce using rule 82 (eMat -> valoresMat + valoresMat .)
    ;               reduce using rule 82 (eMat -> valoresMat + valoresMat .)
    ,               reduce using rule 82 (eMat -> valoresMat + valoresMat .)
    EQEQ            reduce using rule 82 (eMat -> valoresMat + valoresMat .)
    DISTINTO        reduce using rule 82 (eMat -> valoresMat + valoresMat .)
    AND             reduce using rule 82 (eMat -> valoresMat + valoresMat .)
    ?               reduce using rule 82 (eMat -> valoresMat + valoresMat .)
    OR              reduce using rule 82 (eMat -> valoresMat + valoresMat .)
    )               reduce using rule 82 (eMat -> valoresMat + valoresMat .)
    ]               reduce using rule 82 (eMat -> valoresMat + valoresMat .)
    :               reduce using rule 82 (eMat -> valoresMat + valoresMat .)
    *               shift and go to state 131
    /               shift and go to state 133
    %               shift and go to state 129
    ^               shift and go to state 134


state 191

    (78) eMat -> valoresMat + p .
    (85) p -> p . * exp
    (86) p -> p . / exp
    (87) p -> p . % exp
    (91) p -> p . * valoresMat
    (92) p -> p . / valoresMat
    (93) p -> p . % valoresMat

    +               reduce using rule 78 (eMat -> valoresMat + p .)
    -               reduce using rule 78 (eMat -> valoresMat + p .)
    >               reduce using rule 78 (eMat -> valoresMat + p .)
    <               reduce using rule 78 (eMat -> valoresMat + p .)
    }               reduce using rule 78 (eMat -> valoresMat + p .)
    ;               reduce using rule 78 (eMat -> valoresMat + p .)
    ,               reduce using rule 78 (eMat -> valoresMat + p .)
    EQEQ            reduce using rule 78 (eMat -> valoresMat + p .)
    DISTINTO        reduce using rule 78 (eMat -> valoresMat + p .)
    AND             reduce using rule 78 (eMat -> valoresMat + p .)
    ?               reduce using rule 78 (eMat -> valoresMat + p .)
    OR              reduce using rule 78 (eMat -> valoresMat + p .)
    )               reduce using rule 78 (eMat -> valoresMat + p .)
    ]               reduce using rule 78 (eMat -> valoresMat + p .)
    :               reduce using rule 78 (eMat -> valoresMat + p .)
    *               shift and go to state 155
    /               shift and go to state 156
    %               shift and go to state 154


state 192

    (94) p -> valoresMat * valoresMat .
    (99) exp -> valoresMat . ^ iSing
    (101) exp -> valoresMat . ^ valoresMat

    *               reduce using rule 94 (p -> valoresMat * valoresMat .)
    /               reduce using rule 94 (p -> valoresMat * valoresMat .)
    %               reduce using rule 94 (p -> valoresMat * valoresMat .)
    +               reduce using rule 94 (p -> valoresMat * valoresMat .)
    -               reduce using rule 94 (p -> valoresMat * valoresMat .)
    >               reduce using rule 94 (p -> valoresMat * valoresMat .)
    <               reduce using rule 94 (p -> valoresMat * valoresMat .)
    ,               reduce using rule 94 (p -> valoresMat * valoresMat .)
    ]               reduce using rule 94 (p -> valoresMat * valoresMat .)
    )               reduce using rule 94 (p -> valoresMat * valoresMat .)
    }               reduce using rule 94 (p -> valoresMat * valoresMat .)
    ;               reduce using rule 94 (p -> valoresMat * valoresMat .)
    EQEQ            reduce using rule 94 (p -> valoresMat * valoresMat .)
    DISTINTO        reduce using rule 94 (p -> valoresMat * valoresMat .)
    AND             reduce using rule 94 (p -> valoresMat * valoresMat .)
    ?               reduce using rule 94 (p -> valoresMat * valoresMat .)
    OR              reduce using rule 94 (p -> valoresMat * valoresMat .)
    :               reduce using rule 94 (p -> valoresMat * valoresMat .)
    ^               shift and go to state 134


state 193

    (88) p -> valoresMat * exp .
    (98) exp -> exp . ^ iSing
    (100) exp -> exp . ^ valoresMat

    *               reduce using rule 88 (p -> valoresMat * exp .)
    /               reduce using rule 88 (p -> valoresMat * exp .)
    %               reduce using rule 88 (p -> valoresMat * exp .)
    +               reduce using rule 88 (p -> valoresMat * exp .)
    -               reduce using rule 88 (p -> valoresMat * exp .)
    >               reduce using rule 88 (p -> valoresMat * exp .)
    <               reduce using rule 88 (p -> valoresMat * exp .)
    ,               reduce using rule 88 (p -> valoresMat * exp .)
    ]               reduce using rule 88 (p -> valoresMat * exp .)
    )               reduce using rule 88 (p -> valoresMat * exp .)
    }               reduce using rule 88 (p -> valoresMat * exp .)
    ;               reduce using rule 88 (p -> valoresMat * exp .)
    EQEQ            reduce using rule 88 (p -> valoresMat * exp .)
    DISTINTO        reduce using rule 88 (p -> valoresMat * exp .)
    AND             reduce using rule 88 (p -> valoresMat * exp .)
    ?               reduce using rule 88 (p -> valoresMat * exp .)
    OR              reduce using rule 88 (p -> valoresMat * exp .)
    :               reduce using rule 88 (p -> valoresMat * exp .)
    ^               shift and go to state 157


state 194

    (83) eMat -> valoresMat - valoresMat .
    (88) p -> valoresMat . * exp
    (89) p -> valoresMat . / exp
    (90) p -> valoresMat . % exp
    (94) p -> valoresMat . * valoresMat
    (95) p -> valoresMat . / valoresMat
    (96) p -> valoresMat . % valoresMat
    (99) exp -> valoresMat . ^ iSing
    (101) exp -> valoresMat . ^ valoresMat

    +               reduce using rule 83 (eMat -> valoresMat - valoresMat .)
    -               reduce using rule 83 (eMat -> valoresMat - valoresMat .)
    >               reduce using rule 83 (eMat -> valoresMat - valoresMat .)
    <               reduce using rule 83 (eMat -> valoresMat - valoresMat .)
    }               reduce using rule 83 (eMat -> valoresMat - valoresMat .)
    ;               reduce using rule 83 (eMat -> valoresMat - valoresMat .)
    ,               reduce using rule 83 (eMat -> valoresMat - valoresMat .)
    EQEQ            reduce using rule 83 (eMat -> valoresMat - valoresMat .)
    DISTINTO        reduce using rule 83 (eMat -> valoresMat - valoresMat .)
    AND             reduce using rule 83 (eMat -> valoresMat - valoresMat .)
    ?               reduce using rule 83 (eMat -> valoresMat - valoresMat .)
    OR              reduce using rule 83 (eMat -> valoresMat - valoresMat .)
    )               reduce using rule 83 (eMat -> valoresMat - valoresMat .)
    ]               reduce using rule 83 (eMat -> valoresMat - valoresMat .)
    :               reduce using rule 83 (eMat -> valoresMat - valoresMat .)
    *               shift and go to state 131
    /               shift and go to state 133
    %               shift and go to state 129
    ^               shift and go to state 134


state 195

    (79) eMat -> valoresMat - p .
    (85) p -> p . * exp
    (86) p -> p . / exp
    (87) p -> p . % exp
    (91) p -> p . * valoresMat
    (92) p -> p . / valoresMat
    (93) p -> p . % valoresMat

    +               reduce using rule 79 (eMat -> valoresMat - p .)
    -               reduce using rule 79 (eMat -> valoresMat - p .)
    >               reduce using rule 79 (eMat -> valoresMat - p .)
    <               reduce using rule 79 (eMat -> valoresMat - p .)
    }               reduce using rule 79 (eMat -> valoresMat - p .)
    ;               reduce using rule 79 (eMat -> valoresMat - p .)
    ,               reduce using rule 79 (eMat -> valoresMat - p .)
    EQEQ            reduce using rule 79 (eMat -> valoresMat - p .)
    DISTINTO        reduce using rule 79 (eMat -> valoresMat - p .)
    AND             reduce using rule 79 (eMat -> valoresMat - p .)
    ?               reduce using rule 79 (eMat -> valoresMat - p .)
    OR              reduce using rule 79 (eMat -> valoresMat - p .)
    )               reduce using rule 79 (eMat -> valoresMat - p .)
    ]               reduce using rule 79 (eMat -> valoresMat - p .)
    :               reduce using rule 79 (eMat -> valoresMat - p .)
    *               shift and go to state 155
    /               shift and go to state 156
    %               shift and go to state 154


state 196

    (95) p -> valoresMat / valoresMat .
    (99) exp -> valoresMat . ^ iSing
    (101) exp -> valoresMat . ^ valoresMat

    *               reduce using rule 95 (p -> valoresMat / valoresMat .)
    /               reduce using rule 95 (p -> valoresMat / valoresMat .)
    %               reduce using rule 95 (p -> valoresMat / valoresMat .)
    +               reduce using rule 95 (p -> valoresMat / valoresMat .)
    -               reduce using rule 95 (p -> valoresMat / valoresMat .)
    >               reduce using rule 95 (p -> valoresMat / valoresMat .)
    <               reduce using rule 95 (p -> valoresMat / valoresMat .)
    ,               reduce using rule 95 (p -> valoresMat / valoresMat .)
    ]               reduce using rule 95 (p -> valoresMat / valoresMat .)
    )               reduce using rule 95 (p -> valoresMat / valoresMat .)
    }               reduce using rule 95 (p -> valoresMat / valoresMat .)
    ;               reduce using rule 95 (p -> valoresMat / valoresMat .)
    EQEQ            reduce using rule 95 (p -> valoresMat / valoresMat .)
    DISTINTO        reduce using rule 95 (p -> valoresMat / valoresMat .)
    AND             reduce using rule 95 (p -> valoresMat / valoresMat .)
    ?               reduce using rule 95 (p -> valoresMat / valoresMat .)
    OR              reduce using rule 95 (p -> valoresMat / valoresMat .)
    :               reduce using rule 95 (p -> valoresMat / valoresMat .)
    ^               shift and go to state 134


state 197

    (89) p -> valoresMat / exp .
    (98) exp -> exp . ^ iSing
    (100) exp -> exp . ^ valoresMat

    *               reduce using rule 89 (p -> valoresMat / exp .)
    /               reduce using rule 89 (p -> valoresMat / exp .)
    %               reduce using rule 89 (p -> valoresMat / exp .)
    +               reduce using rule 89 (p -> valoresMat / exp .)
    -               reduce using rule 89 (p -> valoresMat / exp .)
    >               reduce using rule 89 (p -> valoresMat / exp .)
    <               reduce using rule 89 (p -> valoresMat / exp .)
    ,               reduce using rule 89 (p -> valoresMat / exp .)
    ]               reduce using rule 89 (p -> valoresMat / exp .)
    )               reduce using rule 89 (p -> valoresMat / exp .)
    }               reduce using rule 89 (p -> valoresMat / exp .)
    ;               reduce using rule 89 (p -> valoresMat / exp .)
    EQEQ            reduce using rule 89 (p -> valoresMat / exp .)
    DISTINTO        reduce using rule 89 (p -> valoresMat / exp .)
    AND             reduce using rule 89 (p -> valoresMat / exp .)
    ?               reduce using rule 89 (p -> valoresMat / exp .)
    OR              reduce using rule 89 (p -> valoresMat / exp .)
    :               reduce using rule 89 (p -> valoresMat / exp .)
    ^               shift and go to state 157


state 198

    (101) exp -> valoresMat ^ valoresMat .

    ^               reduce using rule 101 (exp -> valoresMat ^ valoresMat .)
    *               reduce using rule 101 (exp -> valoresMat ^ valoresMat .)
    /               reduce using rule 101 (exp -> valoresMat ^ valoresMat .)
    %               reduce using rule 101 (exp -> valoresMat ^ valoresMat .)
    +               reduce using rule 101 (exp -> valoresMat ^ valoresMat .)
    -               reduce using rule 101 (exp -> valoresMat ^ valoresMat .)
    ,               reduce using rule 101 (exp -> valoresMat ^ valoresMat .)
    >               reduce using rule 101 (exp -> valoresMat ^ valoresMat .)
    <               reduce using rule 101 (exp -> valoresMat ^ valoresMat .)
    )               reduce using rule 101 (exp -> valoresMat ^ valoresMat .)
    ;               reduce using rule 101 (exp -> valoresMat ^ valoresMat .)
    ]               reduce using rule 101 (exp -> valoresMat ^ valoresMat .)
    }               reduce using rule 101 (exp -> valoresMat ^ valoresMat .)
    EQEQ            reduce using rule 101 (exp -> valoresMat ^ valoresMat .)
    DISTINTO        reduce using rule 101 (exp -> valoresMat ^ valoresMat .)
    AND             reduce using rule 101 (exp -> valoresMat ^ valoresMat .)
    ?               reduce using rule 101 (exp -> valoresMat ^ valoresMat .)
    OR              reduce using rule 101 (exp -> valoresMat ^ valoresMat .)
    :               reduce using rule 101 (exp -> valoresMat ^ valoresMat .)


state 199

    (99) exp -> valoresMat ^ iSing .

    ^               reduce using rule 99 (exp -> valoresMat ^ iSing .)
    *               reduce using rule 99 (exp -> valoresMat ^ iSing .)
    /               reduce using rule 99 (exp -> valoresMat ^ iSing .)
    %               reduce using rule 99 (exp -> valoresMat ^ iSing .)
    +               reduce using rule 99 (exp -> valoresMat ^ iSing .)
    -               reduce using rule 99 (exp -> valoresMat ^ iSing .)
    ,               reduce using rule 99 (exp -> valoresMat ^ iSing .)
    >               reduce using rule 99 (exp -> valoresMat ^ iSing .)
    <               reduce using rule 99 (exp -> valoresMat ^ iSing .)
    )               reduce using rule 99 (exp -> valoresMat ^ iSing .)
    ;               reduce using rule 99 (exp -> valoresMat ^ iSing .)
    ]               reduce using rule 99 (exp -> valoresMat ^ iSing .)
    }               reduce using rule 99 (exp -> valoresMat ^ iSing .)
    EQEQ            reduce using rule 99 (exp -> valoresMat ^ iSing .)
    DISTINTO        reduce using rule 99 (exp -> valoresMat ^ iSing .)
    AND             reduce using rule 99 (exp -> valoresMat ^ iSing .)
    ?               reduce using rule 99 (exp -> valoresMat ^ iSing .)
    OR              reduce using rule 99 (exp -> valoresMat ^ iSing .)
    :               reduce using rule 99 (exp -> valoresMat ^ iSing .)


state 200

    (132) eq -> eq EQEQ valoresBool .

    EQEQ            reduce using rule 132 (eq -> eq EQEQ valoresBool .)
    DISTINTO        reduce using rule 132 (eq -> eq EQEQ valoresBool .)
    AND             reduce using rule 132 (eq -> eq EQEQ valoresBool .)
    ?               reduce using rule 132 (eq -> eq EQEQ valoresBool .)
    OR              reduce using rule 132 (eq -> eq EQEQ valoresBool .)
    )               reduce using rule 132 (eq -> eq EQEQ valoresBool .)
    ;               reduce using rule 132 (eq -> eq EQEQ valoresBool .)
    ,               reduce using rule 132 (eq -> eq EQEQ valoresBool .)
    ]               reduce using rule 132 (eq -> eq EQEQ valoresBool .)
    }               reduce using rule 132 (eq -> eq EQEQ valoresBool .)
    :               reduce using rule 132 (eq -> eq EQEQ valoresBool .)


state 201

    (128) eq -> eq EQEQ parenBool .

    EQEQ            reduce using rule 128 (eq -> eq EQEQ parenBool .)
    DISTINTO        reduce using rule 128 (eq -> eq EQEQ parenBool .)
    AND             reduce using rule 128 (eq -> eq EQEQ parenBool .)
    ?               reduce using rule 128 (eq -> eq EQEQ parenBool .)
    OR              reduce using rule 128 (eq -> eq EQEQ parenBool .)
    )               reduce using rule 128 (eq -> eq EQEQ parenBool .)
    ;               reduce using rule 128 (eq -> eq EQEQ parenBool .)
    ,               reduce using rule 128 (eq -> eq EQEQ parenBool .)
    ]               reduce using rule 128 (eq -> eq EQEQ parenBool .)
    }               reduce using rule 128 (eq -> eq EQEQ parenBool .)
    :               reduce using rule 128 (eq -> eq EQEQ parenBool .)


state 202

    (133) eq -> eq DISTINTO valoresBool .

    EQEQ            reduce using rule 133 (eq -> eq DISTINTO valoresBool .)
    DISTINTO        reduce using rule 133 (eq -> eq DISTINTO valoresBool .)
    AND             reduce using rule 133 (eq -> eq DISTINTO valoresBool .)
    ?               reduce using rule 133 (eq -> eq DISTINTO valoresBool .)
    OR              reduce using rule 133 (eq -> eq DISTINTO valoresBool .)
    )               reduce using rule 133 (eq -> eq DISTINTO valoresBool .)
    ;               reduce using rule 133 (eq -> eq DISTINTO valoresBool .)
    ,               reduce using rule 133 (eq -> eq DISTINTO valoresBool .)
    ]               reduce using rule 133 (eq -> eq DISTINTO valoresBool .)
    }               reduce using rule 133 (eq -> eq DISTINTO valoresBool .)
    :               reduce using rule 133 (eq -> eq DISTINTO valoresBool .)


state 203

    (129) eq -> eq DISTINTO parenBool .

    EQEQ            reduce using rule 129 (eq -> eq DISTINTO parenBool .)
    DISTINTO        reduce using rule 129 (eq -> eq DISTINTO parenBool .)
    AND             reduce using rule 129 (eq -> eq DISTINTO parenBool .)
    ?               reduce using rule 129 (eq -> eq DISTINTO parenBool .)
    OR              reduce using rule 129 (eq -> eq DISTINTO parenBool .)
    )               reduce using rule 129 (eq -> eq DISTINTO parenBool .)
    ;               reduce using rule 129 (eq -> eq DISTINTO parenBool .)
    ,               reduce using rule 129 (eq -> eq DISTINTO parenBool .)
    ]               reduce using rule 129 (eq -> eq DISTINTO parenBool .)
    }               reduce using rule 129 (eq -> eq DISTINTO parenBool .)
    :               reduce using rule 129 (eq -> eq DISTINTO parenBool .)


state 204

    (124) and -> valoresBool AND eq .
    (128) eq -> eq . EQEQ parenBool
    (129) eq -> eq . DISTINTO parenBool
    (132) eq -> eq . EQEQ valoresBool
    (133) eq -> eq . DISTINTO valoresBool

    AND             reduce using rule 124 (and -> valoresBool AND eq .)
    ?               reduce using rule 124 (and -> valoresBool AND eq .)
    OR              reduce using rule 124 (and -> valoresBool AND eq .)
    ;               reduce using rule 124 (and -> valoresBool AND eq .)
    )               reduce using rule 124 (and -> valoresBool AND eq .)
    ,               reduce using rule 124 (and -> valoresBool AND eq .)
    ]               reduce using rule 124 (and -> valoresBool AND eq .)
    }               reduce using rule 124 (and -> valoresBool AND eq .)
    :               reduce using rule 124 (and -> valoresBool AND eq .)
    EQEQ            shift and go to state 135
    DISTINTO        shift and go to state 136


state 205

    (126) and -> valoresBool AND valoresBool .
    (130) eq -> valoresBool . EQEQ parenBool
    (131) eq -> valoresBool . DISTINTO parenBool
    (134) eq -> valoresBool . EQEQ valoresBool
    (135) eq -> valoresBool . DISTINTO valoresBool

    AND             reduce using rule 126 (and -> valoresBool AND valoresBool .)
    ?               reduce using rule 126 (and -> valoresBool AND valoresBool .)
    OR              reduce using rule 126 (and -> valoresBool AND valoresBool .)
    ;               reduce using rule 126 (and -> valoresBool AND valoresBool .)
    )               reduce using rule 126 (and -> valoresBool AND valoresBool .)
    ,               reduce using rule 126 (and -> valoresBool AND valoresBool .)
    ]               reduce using rule 126 (and -> valoresBool AND valoresBool .)
    }               reduce using rule 126 (and -> valoresBool AND valoresBool .)
    :               reduce using rule 126 (and -> valoresBool AND valoresBool .)
    EQEQ            shift and go to state 139
    DISTINTO        shift and go to state 138


state 206

    (131) eq -> valoresBool DISTINTO parenBool .

    EQEQ            reduce using rule 131 (eq -> valoresBool DISTINTO parenBool .)
    DISTINTO        reduce using rule 131 (eq -> valoresBool DISTINTO parenBool .)
    AND             reduce using rule 131 (eq -> valoresBool DISTINTO parenBool .)
    ?               reduce using rule 131 (eq -> valoresBool DISTINTO parenBool .)
    OR              reduce using rule 131 (eq -> valoresBool DISTINTO parenBool .)
    )               reduce using rule 131 (eq -> valoresBool DISTINTO parenBool .)
    ;               reduce using rule 131 (eq -> valoresBool DISTINTO parenBool .)
    ,               reduce using rule 131 (eq -> valoresBool DISTINTO parenBool .)
    ]               reduce using rule 131 (eq -> valoresBool DISTINTO parenBool .)
    }               reduce using rule 131 (eq -> valoresBool DISTINTO parenBool .)
    :               reduce using rule 131 (eq -> valoresBool DISTINTO parenBool .)


state 207

    (135) eq -> valoresBool DISTINTO valoresBool .

    EQEQ            reduce using rule 135 (eq -> valoresBool DISTINTO valoresBool .)
    DISTINTO        reduce using rule 135 (eq -> valoresBool DISTINTO valoresBool .)
    AND             reduce using rule 135 (eq -> valoresBool DISTINTO valoresBool .)
    ?               reduce using rule 135 (eq -> valoresBool DISTINTO valoresBool .)
    OR              reduce using rule 135 (eq -> valoresBool DISTINTO valoresBool .)
    )               reduce using rule 135 (eq -> valoresBool DISTINTO valoresBool .)
    ;               reduce using rule 135 (eq -> valoresBool DISTINTO valoresBool .)
    ,               reduce using rule 135 (eq -> valoresBool DISTINTO valoresBool .)
    ]               reduce using rule 135 (eq -> valoresBool DISTINTO valoresBool .)
    }               reduce using rule 135 (eq -> valoresBool DISTINTO valoresBool .)
    :               reduce using rule 135 (eq -> valoresBool DISTINTO valoresBool .)


state 208

    (130) eq -> valoresBool EQEQ parenBool .

    EQEQ            reduce using rule 130 (eq -> valoresBool EQEQ parenBool .)
    DISTINTO        reduce using rule 130 (eq -> valoresBool EQEQ parenBool .)
    AND             reduce using rule 130 (eq -> valoresBool EQEQ parenBool .)
    ?               reduce using rule 130 (eq -> valoresBool EQEQ parenBool .)
    OR              reduce using rule 130 (eq -> valoresBool EQEQ parenBool .)
    )               reduce using rule 130 (eq -> valoresBool EQEQ parenBool .)
    ;               reduce using rule 130 (eq -> valoresBool EQEQ parenBool .)
    ,               reduce using rule 130 (eq -> valoresBool EQEQ parenBool .)
    ]               reduce using rule 130 (eq -> valoresBool EQEQ parenBool .)
    }               reduce using rule 130 (eq -> valoresBool EQEQ parenBool .)
    :               reduce using rule 130 (eq -> valoresBool EQEQ parenBool .)


state 209

    (134) eq -> valoresBool EQEQ valoresBool .

    EQEQ            reduce using rule 134 (eq -> valoresBool EQEQ valoresBool .)
    DISTINTO        reduce using rule 134 (eq -> valoresBool EQEQ valoresBool .)
    AND             reduce using rule 134 (eq -> valoresBool EQEQ valoresBool .)
    ?               reduce using rule 134 (eq -> valoresBool EQEQ valoresBool .)
    OR              reduce using rule 134 (eq -> valoresBool EQEQ valoresBool .)
    )               reduce using rule 134 (eq -> valoresBool EQEQ valoresBool .)
    ;               reduce using rule 134 (eq -> valoresBool EQEQ valoresBool .)
    ,               reduce using rule 134 (eq -> valoresBool EQEQ valoresBool .)
    ]               reduce using rule 134 (eq -> valoresBool EQEQ valoresBool .)
    }               reduce using rule 134 (eq -> valoresBool EQEQ valoresBool .)
    :               reduce using rule 134 (eq -> valoresBool EQEQ valoresBool .)


state 210

    (119) or -> valoresBool OR and .
    (123) and -> and . AND eq
    (125) and -> and . AND valoresBool

    ?               reduce using rule 119 (or -> valoresBool OR and .)
    OR              reduce using rule 119 (or -> valoresBool OR and .)
    ;               reduce using rule 119 (or -> valoresBool OR and .)
    ,               reduce using rule 119 (or -> valoresBool OR and .)
    ]               reduce using rule 119 (or -> valoresBool OR and .)
    )               reduce using rule 119 (or -> valoresBool OR and .)
    }               reduce using rule 119 (or -> valoresBool OR and .)
    :               reduce using rule 119 (or -> valoresBool OR and .)
    AND             shift and go to state 128


state 211

    (121) or -> valoresBool OR valoresBool .
    (124) and -> valoresBool . AND eq
    (126) and -> valoresBool . AND valoresBool
    (130) eq -> valoresBool . EQEQ parenBool
    (131) eq -> valoresBool . DISTINTO parenBool
    (134) eq -> valoresBool . EQEQ valoresBool
    (135) eq -> valoresBool . DISTINTO valoresBool

    ?               reduce using rule 121 (or -> valoresBool OR valoresBool .)
    OR              reduce using rule 121 (or -> valoresBool OR valoresBool .)
    ;               reduce using rule 121 (or -> valoresBool OR valoresBool .)
    ,               reduce using rule 121 (or -> valoresBool OR valoresBool .)
    ]               reduce using rule 121 (or -> valoresBool OR valoresBool .)
    )               reduce using rule 121 (or -> valoresBool OR valoresBool .)
    }               reduce using rule 121 (or -> valoresBool OR valoresBool .)
    :               reduce using rule 121 (or -> valoresBool OR valoresBool .)
    AND             shift and go to state 137
    EQEQ            shift and go to state 139
    DISTINTO        shift and go to state 138


state 212

    (116) expBool -> valoresBool ? valoresBool . : valoresBool
    (114) expBool -> valoresBool . ? expBool : expBool
    (116) expBool -> valoresBool . ? valoresBool : valoresBool
    (119) or -> valoresBool . OR and
    (121) or -> valoresBool . OR valoresBool
    (124) and -> valoresBool . AND eq
    (126) and -> valoresBool . AND valoresBool
    (130) eq -> valoresBool . EQEQ parenBool
    (131) eq -> valoresBool . DISTINTO parenBool
    (134) eq -> valoresBool . EQEQ valoresBool
    (135) eq -> valoresBool . DISTINTO valoresBool

    :               shift and go to state 253
    ?               shift and go to state 141
    OR              shift and go to state 140
    AND             shift and go to state 137
    EQEQ            shift and go to state 139
    DISTINTO        shift and go to state 138


state 213

    (114) expBool -> valoresBool ? expBool . : expBool

    :               shift and go to state 254


state 214

    (80) eMat -> eMat + valoresMat .
    (88) p -> valoresMat . * exp
    (89) p -> valoresMat . / exp
    (90) p -> valoresMat . % exp
    (94) p -> valoresMat . * valoresMat
    (95) p -> valoresMat . / valoresMat
    (96) p -> valoresMat . % valoresMat
    (99) exp -> valoresMat . ^ iSing
    (101) exp -> valoresMat . ^ valoresMat

    +               reduce using rule 80 (eMat -> eMat + valoresMat .)
    -               reduce using rule 80 (eMat -> eMat + valoresMat .)
    >               reduce using rule 80 (eMat -> eMat + valoresMat .)
    <               reduce using rule 80 (eMat -> eMat + valoresMat .)
    }               reduce using rule 80 (eMat -> eMat + valoresMat .)
    ;               reduce using rule 80 (eMat -> eMat + valoresMat .)
    ,               reduce using rule 80 (eMat -> eMat + valoresMat .)
    EQEQ            reduce using rule 80 (eMat -> eMat + valoresMat .)
    DISTINTO        reduce using rule 80 (eMat -> eMat + valoresMat .)
    AND             reduce using rule 80 (eMat -> eMat + valoresMat .)
    ?               reduce using rule 80 (eMat -> eMat + valoresMat .)
    OR              reduce using rule 80 (eMat -> eMat + valoresMat .)
    )               reduce using rule 80 (eMat -> eMat + valoresMat .)
    ]               reduce using rule 80 (eMat -> eMat + valoresMat .)
    :               reduce using rule 80 (eMat -> eMat + valoresMat .)
    *               shift and go to state 131
    /               shift and go to state 133
    %               shift and go to state 129
    ^               shift and go to state 134


state 215

    (76) eMat -> eMat + p .
    (85) p -> p . * exp
    (86) p -> p . / exp
    (87) p -> p . % exp
    (91) p -> p . * valoresMat
    (92) p -> p . / valoresMat
    (93) p -> p . % valoresMat

    +               reduce using rule 76 (eMat -> eMat + p .)
    -               reduce using rule 76 (eMat -> eMat + p .)
    >               reduce using rule 76 (eMat -> eMat + p .)
    <               reduce using rule 76 (eMat -> eMat + p .)
    }               reduce using rule 76 (eMat -> eMat + p .)
    ;               reduce using rule 76 (eMat -> eMat + p .)
    ,               reduce using rule 76 (eMat -> eMat + p .)
    EQEQ            reduce using rule 76 (eMat -> eMat + p .)
    DISTINTO        reduce using rule 76 (eMat -> eMat + p .)
    AND             reduce using rule 76 (eMat -> eMat + p .)
    ?               reduce using rule 76 (eMat -> eMat + p .)
    OR              reduce using rule 76 (eMat -> eMat + p .)
    )               reduce using rule 76 (eMat -> eMat + p .)
    ]               reduce using rule 76 (eMat -> eMat + p .)
    :               reduce using rule 76 (eMat -> eMat + p .)
    *               shift and go to state 155
    /               shift and go to state 156
    %               shift and go to state 154


state 216

    (81) eMat -> eMat - valoresMat .
    (88) p -> valoresMat . * exp
    (89) p -> valoresMat . / exp
    (90) p -> valoresMat . % exp
    (94) p -> valoresMat . * valoresMat
    (95) p -> valoresMat . / valoresMat
    (96) p -> valoresMat . % valoresMat
    (99) exp -> valoresMat . ^ iSing
    (101) exp -> valoresMat . ^ valoresMat

    +               reduce using rule 81 (eMat -> eMat - valoresMat .)
    -               reduce using rule 81 (eMat -> eMat - valoresMat .)
    >               reduce using rule 81 (eMat -> eMat - valoresMat .)
    <               reduce using rule 81 (eMat -> eMat - valoresMat .)
    }               reduce using rule 81 (eMat -> eMat - valoresMat .)
    ;               reduce using rule 81 (eMat -> eMat - valoresMat .)
    ,               reduce using rule 81 (eMat -> eMat - valoresMat .)
    EQEQ            reduce using rule 81 (eMat -> eMat - valoresMat .)
    DISTINTO        reduce using rule 81 (eMat -> eMat - valoresMat .)
    AND             reduce using rule 81 (eMat -> eMat - valoresMat .)
    ?               reduce using rule 81 (eMat -> eMat - valoresMat .)
    OR              reduce using rule 81 (eMat -> eMat - valoresMat .)
    )               reduce using rule 81 (eMat -> eMat - valoresMat .)
    ]               reduce using rule 81 (eMat -> eMat - valoresMat .)
    :               reduce using rule 81 (eMat -> eMat - valoresMat .)
    *               shift and go to state 131
    /               shift and go to state 133
    %               shift and go to state 129
    ^               shift and go to state 134


state 217

    (77) eMat -> eMat - p .
    (85) p -> p . * exp
    (86) p -> p . / exp
    (87) p -> p . % exp
    (91) p -> p . * valoresMat
    (92) p -> p . / valoresMat
    (93) p -> p . % valoresMat

    +               reduce using rule 77 (eMat -> eMat - p .)
    -               reduce using rule 77 (eMat -> eMat - p .)
    >               reduce using rule 77 (eMat -> eMat - p .)
    <               reduce using rule 77 (eMat -> eMat - p .)
    }               reduce using rule 77 (eMat -> eMat - p .)
    ;               reduce using rule 77 (eMat -> eMat - p .)
    ,               reduce using rule 77 (eMat -> eMat - p .)
    EQEQ            reduce using rule 77 (eMat -> eMat - p .)
    DISTINTO        reduce using rule 77 (eMat -> eMat - p .)
    AND             reduce using rule 77 (eMat -> eMat - p .)
    ?               reduce using rule 77 (eMat -> eMat - p .)
    OR              reduce using rule 77 (eMat -> eMat - p .)
    )               reduce using rule 77 (eMat -> eMat - p .)
    ]               reduce using rule 77 (eMat -> eMat - p .)
    :               reduce using rule 77 (eMat -> eMat - p .)
    *               shift and go to state 155
    /               shift and go to state 156
    %               shift and go to state 154


state 218

    (108) paren -> ( eMat ) .

    ^               reduce using rule 108 (paren -> ( eMat ) .)
    *               reduce using rule 108 (paren -> ( eMat ) .)
    /               reduce using rule 108 (paren -> ( eMat ) .)
    %               reduce using rule 108 (paren -> ( eMat ) .)
    +               reduce using rule 108 (paren -> ( eMat ) .)
    -               reduce using rule 108 (paren -> ( eMat ) .)
    >               reduce using rule 108 (paren -> ( eMat ) .)
    <               reduce using rule 108 (paren -> ( eMat ) .)
    )               reduce using rule 108 (paren -> ( eMat ) .)
    ;               reduce using rule 108 (paren -> ( eMat ) .)
    ,               reduce using rule 108 (paren -> ( eMat ) .)
    ]               reduce using rule 108 (paren -> ( eMat ) .)
    }               reduce using rule 108 (paren -> ( eMat ) .)
    EQEQ            reduce using rule 108 (paren -> ( eMat ) .)
    DISTINTO        reduce using rule 108 (paren -> ( eMat ) .)
    AND             reduce using rule 108 (paren -> ( eMat ) .)
    ?               reduce using rule 108 (paren -> ( eMat ) .)
    OR              reduce using rule 108 (paren -> ( eMat ) .)
    :               reduce using rule 108 (paren -> ( eMat ) .)


state 219

    (147) parenBool -> ( expBool ) .

    EQEQ            reduce using rule 147 (parenBool -> ( expBool ) .)
    DISTINTO        reduce using rule 147 (parenBool -> ( expBool ) .)
    AND             reduce using rule 147 (parenBool -> ( expBool ) .)
    ?               reduce using rule 147 (parenBool -> ( expBool ) .)
    OR              reduce using rule 147 (parenBool -> ( expBool ) .)
    ;               reduce using rule 147 (parenBool -> ( expBool ) .)
    )               reduce using rule 147 (parenBool -> ( expBool ) .)
    ,               reduce using rule 147 (parenBool -> ( expBool ) .)
    ]               reduce using rule 147 (parenBool -> ( expBool ) .)
    }               reduce using rule 147 (parenBool -> ( expBool ) .)
    :               reduce using rule 147 (parenBool -> ( expBool ) .)


state 220

    (142) menor -> tCompare < tCompare .

    EQEQ            reduce using rule 142 (menor -> tCompare < tCompare .)
    DISTINTO        reduce using rule 142 (menor -> tCompare < tCompare .)
    AND             reduce using rule 142 (menor -> tCompare < tCompare .)
    ?               reduce using rule 142 (menor -> tCompare < tCompare .)
    OR              reduce using rule 142 (menor -> tCompare < tCompare .)
    )               reduce using rule 142 (menor -> tCompare < tCompare .)
    ;               reduce using rule 142 (menor -> tCompare < tCompare .)
    ,               reduce using rule 142 (menor -> tCompare < tCompare .)
    ]               reduce using rule 142 (menor -> tCompare < tCompare .)
    }               reduce using rule 142 (menor -> tCompare < tCompare .)
    :               reduce using rule 142 (menor -> tCompare < tCompare .)


state 221

    (138) tCompare -> varsOps .
    (74) valoresMat -> varsOps .

    EQEQ            reduce using rule 138 (tCompare -> varsOps .)
    DISTINTO        reduce using rule 138 (tCompare -> varsOps .)
    AND             reduce using rule 138 (tCompare -> varsOps .)
    ?               reduce using rule 138 (tCompare -> varsOps .)
    OR              reduce using rule 138 (tCompare -> varsOps .)
    )               reduce using rule 138 (tCompare -> varsOps .)
    ;               reduce using rule 138 (tCompare -> varsOps .)
    ,               reduce using rule 138 (tCompare -> varsOps .)
    ]               reduce using rule 138 (tCompare -> varsOps .)
    }               reduce using rule 138 (tCompare -> varsOps .)
    :               reduce using rule 138 (tCompare -> varsOps .)
    +               reduce using rule 74 (valoresMat -> varsOps .)
    -               reduce using rule 74 (valoresMat -> varsOps .)
    *               reduce using rule 74 (valoresMat -> varsOps .)
    /               reduce using rule 74 (valoresMat -> varsOps .)
    %               reduce using rule 74 (valoresMat -> varsOps .)
    ^               reduce using rule 74 (valoresMat -> varsOps .)


state 222

    (139) tCompare -> varYVals .
    (61) varsOps -> varYVals . MASMAS
    (62) varsOps -> varYVals . MENOSMENOS
    (73) valoresMat -> varYVals .

    EQEQ            reduce using rule 139 (tCompare -> varYVals .)
    DISTINTO        reduce using rule 139 (tCompare -> varYVals .)
    AND             reduce using rule 139 (tCompare -> varYVals .)
    ?               reduce using rule 139 (tCompare -> varYVals .)
    OR              reduce using rule 139 (tCompare -> varYVals .)
    )               reduce using rule 139 (tCompare -> varYVals .)
    ;               reduce using rule 139 (tCompare -> varYVals .)
    ,               reduce using rule 139 (tCompare -> varYVals .)
    ]               reduce using rule 139 (tCompare -> varYVals .)
    }               reduce using rule 139 (tCompare -> varYVals .)
    :               reduce using rule 139 (tCompare -> varYVals .)
    MASMAS          shift and go to state 56
    MENOSMENOS      shift and go to state 53
    +               reduce using rule 73 (valoresMat -> varYVals .)
    -               reduce using rule 73 (valoresMat -> varYVals .)
    *               reduce using rule 73 (valoresMat -> varYVals .)
    /               reduce using rule 73 (valoresMat -> varYVals .)
    %               reduce using rule 73 (valoresMat -> varYVals .)
    ^               reduce using rule 73 (valoresMat -> varYVals .)


state 223

    (140) mayor -> tCompare > tCompare .

    EQEQ            reduce using rule 140 (mayor -> tCompare > tCompare .)
    DISTINTO        reduce using rule 140 (mayor -> tCompare > tCompare .)
    AND             reduce using rule 140 (mayor -> tCompare > tCompare .)
    ?               reduce using rule 140 (mayor -> tCompare > tCompare .)
    OR              reduce using rule 140 (mayor -> tCompare > tCompare .)
    )               reduce using rule 140 (mayor -> tCompare > tCompare .)
    ;               reduce using rule 140 (mayor -> tCompare > tCompare .)
    ,               reduce using rule 140 (mayor -> tCompare > tCompare .)
    ]               reduce using rule 140 (mayor -> tCompare > tCompare .)
    }               reduce using rule 140 (mayor -> tCompare > tCompare .)
    :               reduce using rule 140 (mayor -> tCompare > tCompare .)


state 224

    (93) p -> p % valoresMat .
    (99) exp -> valoresMat . ^ iSing
    (101) exp -> valoresMat . ^ valoresMat

    *               reduce using rule 93 (p -> p % valoresMat .)
    /               reduce using rule 93 (p -> p % valoresMat .)
    %               reduce using rule 93 (p -> p % valoresMat .)
    +               reduce using rule 93 (p -> p % valoresMat .)
    -               reduce using rule 93 (p -> p % valoresMat .)
    >               reduce using rule 93 (p -> p % valoresMat .)
    <               reduce using rule 93 (p -> p % valoresMat .)
    ,               reduce using rule 93 (p -> p % valoresMat .)
    ]               reduce using rule 93 (p -> p % valoresMat .)
    )               reduce using rule 93 (p -> p % valoresMat .)
    }               reduce using rule 93 (p -> p % valoresMat .)
    ;               reduce using rule 93 (p -> p % valoresMat .)
    EQEQ            reduce using rule 93 (p -> p % valoresMat .)
    DISTINTO        reduce using rule 93 (p -> p % valoresMat .)
    AND             reduce using rule 93 (p -> p % valoresMat .)
    ?               reduce using rule 93 (p -> p % valoresMat .)
    OR              reduce using rule 93 (p -> p % valoresMat .)
    :               reduce using rule 93 (p -> p % valoresMat .)
    ^               shift and go to state 134


state 225

    (87) p -> p % exp .
    (98) exp -> exp . ^ iSing
    (100) exp -> exp . ^ valoresMat

    *               reduce using rule 87 (p -> p % exp .)
    /               reduce using rule 87 (p -> p % exp .)
    %               reduce using rule 87 (p -> p % exp .)
    +               reduce using rule 87 (p -> p % exp .)
    -               reduce using rule 87 (p -> p % exp .)
    >               reduce using rule 87 (p -> p % exp .)
    <               reduce using rule 87 (p -> p % exp .)
    ,               reduce using rule 87 (p -> p % exp .)
    ]               reduce using rule 87 (p -> p % exp .)
    )               reduce using rule 87 (p -> p % exp .)
    }               reduce using rule 87 (p -> p % exp .)
    ;               reduce using rule 87 (p -> p % exp .)
    EQEQ            reduce using rule 87 (p -> p % exp .)
    DISTINTO        reduce using rule 87 (p -> p % exp .)
    AND             reduce using rule 87 (p -> p % exp .)
    ?               reduce using rule 87 (p -> p % exp .)
    OR              reduce using rule 87 (p -> p % exp .)
    :               reduce using rule 87 (p -> p % exp .)
    ^               shift and go to state 157


state 226

    (91) p -> p * valoresMat .
    (99) exp -> valoresMat . ^ iSing
    (101) exp -> valoresMat . ^ valoresMat

    *               reduce using rule 91 (p -> p * valoresMat .)
    /               reduce using rule 91 (p -> p * valoresMat .)
    %               reduce using rule 91 (p -> p * valoresMat .)
    +               reduce using rule 91 (p -> p * valoresMat .)
    -               reduce using rule 91 (p -> p * valoresMat .)
    >               reduce using rule 91 (p -> p * valoresMat .)
    <               reduce using rule 91 (p -> p * valoresMat .)
    ,               reduce using rule 91 (p -> p * valoresMat .)
    ]               reduce using rule 91 (p -> p * valoresMat .)
    )               reduce using rule 91 (p -> p * valoresMat .)
    }               reduce using rule 91 (p -> p * valoresMat .)
    ;               reduce using rule 91 (p -> p * valoresMat .)
    EQEQ            reduce using rule 91 (p -> p * valoresMat .)
    DISTINTO        reduce using rule 91 (p -> p * valoresMat .)
    AND             reduce using rule 91 (p -> p * valoresMat .)
    ?               reduce using rule 91 (p -> p * valoresMat .)
    OR              reduce using rule 91 (p -> p * valoresMat .)
    :               reduce using rule 91 (p -> p * valoresMat .)
    ^               shift and go to state 134


state 227

    (85) p -> p * exp .
    (98) exp -> exp . ^ iSing
    (100) exp -> exp . ^ valoresMat

    *               reduce using rule 85 (p -> p * exp .)
    /               reduce using rule 85 (p -> p * exp .)
    %               reduce using rule 85 (p -> p * exp .)
    +               reduce using rule 85 (p -> p * exp .)
    -               reduce using rule 85 (p -> p * exp .)
    >               reduce using rule 85 (p -> p * exp .)
    <               reduce using rule 85 (p -> p * exp .)
    ,               reduce using rule 85 (p -> p * exp .)
    ]               reduce using rule 85 (p -> p * exp .)
    )               reduce using rule 85 (p -> p * exp .)
    }               reduce using rule 85 (p -> p * exp .)
    ;               reduce using rule 85 (p -> p * exp .)
    EQEQ            reduce using rule 85 (p -> p * exp .)
    DISTINTO        reduce using rule 85 (p -> p * exp .)
    AND             reduce using rule 85 (p -> p * exp .)
    ?               reduce using rule 85 (p -> p * exp .)
    OR              reduce using rule 85 (p -> p * exp .)
    :               reduce using rule 85 (p -> p * exp .)
    ^               shift and go to state 157


state 228

    (92) p -> p / valoresMat .
    (99) exp -> valoresMat . ^ iSing
    (101) exp -> valoresMat . ^ valoresMat

    *               reduce using rule 92 (p -> p / valoresMat .)
    /               reduce using rule 92 (p -> p / valoresMat .)
    %               reduce using rule 92 (p -> p / valoresMat .)
    +               reduce using rule 92 (p -> p / valoresMat .)
    -               reduce using rule 92 (p -> p / valoresMat .)
    >               reduce using rule 92 (p -> p / valoresMat .)
    <               reduce using rule 92 (p -> p / valoresMat .)
    ,               reduce using rule 92 (p -> p / valoresMat .)
    ]               reduce using rule 92 (p -> p / valoresMat .)
    )               reduce using rule 92 (p -> p / valoresMat .)
    }               reduce using rule 92 (p -> p / valoresMat .)
    ;               reduce using rule 92 (p -> p / valoresMat .)
    EQEQ            reduce using rule 92 (p -> p / valoresMat .)
    DISTINTO        reduce using rule 92 (p -> p / valoresMat .)
    AND             reduce using rule 92 (p -> p / valoresMat .)
    ?               reduce using rule 92 (p -> p / valoresMat .)
    OR              reduce using rule 92 (p -> p / valoresMat .)
    :               reduce using rule 92 (p -> p / valoresMat .)
    ^               shift and go to state 134


state 229

    (86) p -> p / exp .
    (98) exp -> exp . ^ iSing
    (100) exp -> exp . ^ valoresMat

    *               reduce using rule 86 (p -> p / exp .)
    /               reduce using rule 86 (p -> p / exp .)
    %               reduce using rule 86 (p -> p / exp .)
    +               reduce using rule 86 (p -> p / exp .)
    -               reduce using rule 86 (p -> p / exp .)
    >               reduce using rule 86 (p -> p / exp .)
    <               reduce using rule 86 (p -> p / exp .)
    ,               reduce using rule 86 (p -> p / exp .)
    ]               reduce using rule 86 (p -> p / exp .)
    )               reduce using rule 86 (p -> p / exp .)
    }               reduce using rule 86 (p -> p / exp .)
    ;               reduce using rule 86 (p -> p / exp .)
    EQEQ            reduce using rule 86 (p -> p / exp .)
    DISTINTO        reduce using rule 86 (p -> p / exp .)
    AND             reduce using rule 86 (p -> p / exp .)
    ?               reduce using rule 86 (p -> p / exp .)
    OR              reduce using rule 86 (p -> p / exp .)
    :               reduce using rule 86 (p -> p / exp .)
    ^               shift and go to state 157


state 230

    (100) exp -> exp ^ valoresMat .

    ^               reduce using rule 100 (exp -> exp ^ valoresMat .)
    *               reduce using rule 100 (exp -> exp ^ valoresMat .)
    /               reduce using rule 100 (exp -> exp ^ valoresMat .)
    %               reduce using rule 100 (exp -> exp ^ valoresMat .)
    +               reduce using rule 100 (exp -> exp ^ valoresMat .)
    -               reduce using rule 100 (exp -> exp ^ valoresMat .)
    ,               reduce using rule 100 (exp -> exp ^ valoresMat .)
    >               reduce using rule 100 (exp -> exp ^ valoresMat .)
    <               reduce using rule 100 (exp -> exp ^ valoresMat .)
    )               reduce using rule 100 (exp -> exp ^ valoresMat .)
    ;               reduce using rule 100 (exp -> exp ^ valoresMat .)
    ]               reduce using rule 100 (exp -> exp ^ valoresMat .)
    }               reduce using rule 100 (exp -> exp ^ valoresMat .)
    EQEQ            reduce using rule 100 (exp -> exp ^ valoresMat .)
    DISTINTO        reduce using rule 100 (exp -> exp ^ valoresMat .)
    AND             reduce using rule 100 (exp -> exp ^ valoresMat .)
    ?               reduce using rule 100 (exp -> exp ^ valoresMat .)
    OR              reduce using rule 100 (exp -> exp ^ valoresMat .)
    :               reduce using rule 100 (exp -> exp ^ valoresMat .)


state 231

    (98) exp -> exp ^ iSing .

    ^               reduce using rule 98 (exp -> exp ^ iSing .)
    *               reduce using rule 98 (exp -> exp ^ iSing .)
    /               reduce using rule 98 (exp -> exp ^ iSing .)
    %               reduce using rule 98 (exp -> exp ^ iSing .)
    +               reduce using rule 98 (exp -> exp ^ iSing .)
    -               reduce using rule 98 (exp -> exp ^ iSing .)
    ,               reduce using rule 98 (exp -> exp ^ iSing .)
    >               reduce using rule 98 (exp -> exp ^ iSing .)
    <               reduce using rule 98 (exp -> exp ^ iSing .)
    )               reduce using rule 98 (exp -> exp ^ iSing .)
    ;               reduce using rule 98 (exp -> exp ^ iSing .)
    ]               reduce using rule 98 (exp -> exp ^ iSing .)
    }               reduce using rule 98 (exp -> exp ^ iSing .)
    EQEQ            reduce using rule 98 (exp -> exp ^ iSing .)
    DISTINTO        reduce using rule 98 (exp -> exp ^ iSing .)
    AND             reduce using rule 98 (exp -> exp ^ iSing .)
    ?               reduce using rule 98 (exp -> exp ^ iSing .)
    OR              reduce using rule 98 (exp -> exp ^ iSing .)
    :               reduce using rule 98 (exp -> exp ^ iSing .)


state 232

    (115) expBool -> or ? valoresBool . : valoresBool
    (114) expBool -> valoresBool . ? expBool : expBool
    (116) expBool -> valoresBool . ? valoresBool : valoresBool
    (119) or -> valoresBool . OR and
    (121) or -> valoresBool . OR valoresBool
    (124) and -> valoresBool . AND eq
    (126) and -> valoresBool . AND valoresBool
    (130) eq -> valoresBool . EQEQ parenBool
    (131) eq -> valoresBool . DISTINTO parenBool
    (134) eq -> valoresBool . EQEQ valoresBool
    (135) eq -> valoresBool . DISTINTO valoresBool

    :               shift and go to state 255
    ?               shift and go to state 141
    OR              shift and go to state 140
    AND             shift and go to state 137
    EQEQ            shift and go to state 139
    DISTINTO        shift and go to state 138


state 233

    (113) expBool -> or ? expBool . : expBool

    :               shift and go to state 256


state 234

    (118) or -> or OR and .
    (123) and -> and . AND eq
    (125) and -> and . AND valoresBool

    ?               reduce using rule 118 (or -> or OR and .)
    OR              reduce using rule 118 (or -> or OR and .)
    ;               reduce using rule 118 (or -> or OR and .)
    ,               reduce using rule 118 (or -> or OR and .)
    ]               reduce using rule 118 (or -> or OR and .)
    )               reduce using rule 118 (or -> or OR and .)
    }               reduce using rule 118 (or -> or OR and .)
    :               reduce using rule 118 (or -> or OR and .)
    AND             shift and go to state 128


state 235

    (120) or -> or OR valoresBool .
    (124) and -> valoresBool . AND eq
    (126) and -> valoresBool . AND valoresBool
    (130) eq -> valoresBool . EQEQ parenBool
    (131) eq -> valoresBool . DISTINTO parenBool
    (134) eq -> valoresBool . EQEQ valoresBool
    (135) eq -> valoresBool . DISTINTO valoresBool

    ?               reduce using rule 120 (or -> or OR valoresBool .)
    OR              reduce using rule 120 (or -> or OR valoresBool .)
    ;               reduce using rule 120 (or -> or OR valoresBool .)
    ,               reduce using rule 120 (or -> or OR valoresBool .)
    ]               reduce using rule 120 (or -> or OR valoresBool .)
    )               reduce using rule 120 (or -> or OR valoresBool .)
    }               reduce using rule 120 (or -> or OR valoresBool .)
    :               reduce using rule 120 (or -> or OR valoresBool .)
    AND             shift and go to state 137
    EQEQ            shift and go to state 139
    DISTINTO        shift and go to state 138


state 236

    (10) loop -> WHILE ( expBool ) bloque .

    RETURN          reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    MENOSMENOS      reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    MASMAS          reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    ID              reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    IF              reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    WHILE           reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    DO              reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    FOR             reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    PRINT           reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    MULTIESCALAR    reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    LENGTH          reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    CAPITALIZAR     reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    COLINEALES      reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    }               reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    $end            reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)


state 237

    (32) elem -> valores , . elem
    (32) elem -> . valores , elem
    (33) elem -> . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . reg
    (37) valores -> . INT
    (38) valores -> . FLOAT
    (39) valores -> . STRING
    (40) valores -> . BOOL
    (41) valores -> . varYVals
    (42) valores -> . varsOps
    (43) valores -> . vec
    (44) valores -> . ID . valoresCampos
    (45) valores -> . RES
    (76) eMat -> . eMat + p
    (77) eMat -> . eMat - p
    (78) eMat -> . valoresMat + p
    (79) eMat -> . valoresMat - p
    (80) eMat -> . eMat + valoresMat
    (81) eMat -> . eMat - valoresMat
    (82) eMat -> . valoresMat + valoresMat
    (83) eMat -> . valoresMat - valoresMat
    (84) eMat -> . p
    (113) expBool -> . or ? expBool : expBool
    (114) expBool -> . valoresBool ? expBool : expBool
    (115) expBool -> . or ? valoresBool : valoresBool
    (116) expBool -> . valoresBool ? valoresBool : valoresBool
    (117) expBool -> . or
    (56) reg -> . { campos }
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (31) vec -> . [ elem ]
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (85) p -> . p * exp
    (86) p -> . p / exp
    (87) p -> . p % exp
    (88) p -> . valoresMat * exp
    (89) p -> . valoresMat / exp
    (90) p -> . valoresMat % exp
    (91) p -> . p * valoresMat
    (92) p -> . p / valoresMat
    (93) p -> . p % valoresMat
    (94) p -> . valoresMat * valoresMat
    (95) p -> . valoresMat / valoresMat
    (96) p -> . valoresMat % valoresMat
    (97) p -> . exp
    (118) or -> . or OR and
    (119) or -> . valoresBool OR and
    (120) or -> . or OR valoresBool
    (121) or -> . valoresBool OR valoresBool
    (122) or -> . and
    (109) valoresBool -> . BOOL
    (110) valoresBool -> . funcBool
    (111) valoresBool -> . varYVals
    (112) valoresBool -> . varsOps
    (51) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (123) and -> . and AND eq
    (124) and -> . valoresBool AND eq
    (125) and -> . and AND valoresBool
    (126) and -> . valoresBool AND valoresBool
    (127) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (128) eq -> . eq EQEQ parenBool
    (129) eq -> . eq DISTINTO parenBool
    (130) eq -> . valoresBool EQEQ parenBool
    (131) eq -> . valoresBool DISTINTO parenBool
    (132) eq -> . eq EQEQ valoresBool
    (133) eq -> . eq DISTINTO valoresBool
    (134) eq -> . valoresBool EQEQ valoresBool
    (135) eq -> . valoresBool DISTINTO valoresBool
    (136) eq -> . mayor
    (108) paren -> . ( eMat )
    (140) mayor -> . tCompare > tCompare
    (141) mayor -> . menor
    (137) tCompare -> . eMat
    (138) tCompare -> . varsOps
    (139) tCompare -> . varYVals
    (142) menor -> . tCompare < tCompare
    (143) menor -> . not
    (144) not -> . NOT not
    (145) not -> . NOT valoresBool
    (146) not -> . parenBool
    (147) parenBool -> . ( expBool )

    INT             shift and go to state 99
    FLOAT           shift and go to state 100
    STRING          shift and go to state 96
    BOOL            shift and go to state 102
    ID              shift and go to state 98
    RES             shift and go to state 91
    {               shift and go to state 104
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    [               shift and go to state 97
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 93
    NOT             shift and go to state 87

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    elem                           shift and go to state 257
    menor                          shift and go to state 81
    mayor                          shift and go to state 66
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 92
    vecVal                         shift and go to state 9
    vec                            shift and go to state 94
    paren                          shift and go to state 77
    reg                            shift and go to state 95
    varsOps                        shift and go to state 103
    exp                            shift and go to state 85
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    valores                        shift and go to state 168
    parenBool                      shift and go to state 86
    p                              shift and go to state 82
    iSing                          shift and go to state 75
    varYVals                       shift and go to state 105
    or                             shift and go to state 89
    expBool                        shift and go to state 106

state 238

    (31) vec -> [ elem ] .

    )               reduce using rule 31 (vec -> [ elem ] .)
    }               reduce using rule 31 (vec -> [ elem ] .)
    ;               reduce using rule 31 (vec -> [ elem ] .)
    ,               reduce using rule 31 (vec -> [ elem ] .)
    ]               reduce using rule 31 (vec -> [ elem ] .)


state 239

    (48) valoresCampos -> BEGIN .

    )               reduce using rule 48 (valoresCampos -> BEGIN .)
    ;               reduce using rule 48 (valoresCampos -> BEGIN .)
    ,               reduce using rule 48 (valoresCampos -> BEGIN .)
    ]               reduce using rule 48 (valoresCampos -> BEGIN .)
    }               reduce using rule 48 (valoresCampos -> BEGIN .)


state 240

    (47) valoresCampos -> END .

    )               reduce using rule 47 (valoresCampos -> END .)
    ;               reduce using rule 47 (valoresCampos -> END .)
    ,               reduce using rule 47 (valoresCampos -> END .)
    ]               reduce using rule 47 (valoresCampos -> END .)
    }               reduce using rule 47 (valoresCampos -> END .)


state 241

    (46) valoresCampos -> ID .

    )               reduce using rule 46 (valoresCampos -> ID .)
    ;               reduce using rule 46 (valoresCampos -> ID .)
    ,               reduce using rule 46 (valoresCampos -> ID .)
    ]               reduce using rule 46 (valoresCampos -> ID .)
    }               reduce using rule 46 (valoresCampos -> ID .)


state 242

    (44) valores -> ID . valoresCampos .

    ,               reduce using rule 44 (valores -> ID . valoresCampos .)
    ;               reduce using rule 44 (valores -> ID . valoresCampos .)
    ]               reduce using rule 44 (valores -> ID . valoresCampos .)
    }               reduce using rule 44 (valores -> ID . valoresCampos .)
    )               reduce using rule 44 (valores -> ID . valoresCampos .)


state 243

    (56) reg -> { campos } .

    )               reduce using rule 56 (reg -> { campos } .)
    ,               reduce using rule 56 (reg -> { campos } .)
    ;               reduce using rule 56 (reg -> { campos } .)
    }               reduce using rule 56 (reg -> { campos } .)
    ]               reduce using rule 56 (reg -> { campos } .)


state 244

    (57) campos -> ID : . valores , campos
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . reg
    (37) valores -> . INT
    (38) valores -> . FLOAT
    (39) valores -> . STRING
    (40) valores -> . BOOL
    (41) valores -> . varYVals
    (42) valores -> . varsOps
    (43) valores -> . vec
    (44) valores -> . ID . valoresCampos
    (45) valores -> . RES
    (76) eMat -> . eMat + p
    (77) eMat -> . eMat - p
    (78) eMat -> . valoresMat + p
    (79) eMat -> . valoresMat - p
    (80) eMat -> . eMat + valoresMat
    (81) eMat -> . eMat - valoresMat
    (82) eMat -> . valoresMat + valoresMat
    (83) eMat -> . valoresMat - valoresMat
    (84) eMat -> . p
    (113) expBool -> . or ? expBool : expBool
    (114) expBool -> . valoresBool ? expBool : expBool
    (115) expBool -> . or ? valoresBool : valoresBool
    (116) expBool -> . valoresBool ? valoresBool : valoresBool
    (117) expBool -> . or
    (56) reg -> . { campos }
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (31) vec -> . [ elem ]
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (85) p -> . p * exp
    (86) p -> . p / exp
    (87) p -> . p % exp
    (88) p -> . valoresMat * exp
    (89) p -> . valoresMat / exp
    (90) p -> . valoresMat % exp
    (91) p -> . p * valoresMat
    (92) p -> . p / valoresMat
    (93) p -> . p % valoresMat
    (94) p -> . valoresMat * valoresMat
    (95) p -> . valoresMat / valoresMat
    (96) p -> . valoresMat % valoresMat
    (97) p -> . exp
    (118) or -> . or OR and
    (119) or -> . valoresBool OR and
    (120) or -> . or OR valoresBool
    (121) or -> . valoresBool OR valoresBool
    (122) or -> . and
    (109) valoresBool -> . BOOL
    (110) valoresBool -> . funcBool
    (111) valoresBool -> . varYVals
    (112) valoresBool -> . varsOps
    (51) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (123) and -> . and AND eq
    (124) and -> . valoresBool AND eq
    (125) and -> . and AND valoresBool
    (126) and -> . valoresBool AND valoresBool
    (127) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (128) eq -> . eq EQEQ parenBool
    (129) eq -> . eq DISTINTO parenBool
    (130) eq -> . valoresBool EQEQ parenBool
    (131) eq -> . valoresBool DISTINTO parenBool
    (132) eq -> . eq EQEQ valoresBool
    (133) eq -> . eq DISTINTO valoresBool
    (134) eq -> . valoresBool EQEQ valoresBool
    (135) eq -> . valoresBool DISTINTO valoresBool
    (136) eq -> . mayor
    (108) paren -> . ( eMat )
    (140) mayor -> . tCompare > tCompare
    (141) mayor -> . menor
    (137) tCompare -> . eMat
    (138) tCompare -> . varsOps
    (139) tCompare -> . varYVals
    (142) menor -> . tCompare < tCompare
    (143) menor -> . not
    (144) not -> . NOT not
    (145) not -> . NOT valoresBool
    (146) not -> . parenBool
    (147) parenBool -> . ( expBool )

    INT             shift and go to state 99
    FLOAT           shift and go to state 100
    STRING          shift and go to state 96
    BOOL            shift and go to state 102
    ID              shift and go to state 98
    RES             shift and go to state 91
    {               shift and go to state 104
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    [               shift and go to state 97
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 93
    NOT             shift and go to state 87

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    mayor                          shift and go to state 66
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 92
    vecVal                         shift and go to state 9
    vec                            shift and go to state 94
    paren                          shift and go to state 77
    reg                            shift and go to state 95
    varsOps                        shift and go to state 103
    exp                            shift and go to state 85
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    valores                        shift and go to state 258
    parenBool                      shift and go to state 86
    p                              shift and go to state 82
    iSing                          shift and go to state 75
    varYVals                       shift and go to state 105
    or                             shift and go to state 89
    expBool                        shift and go to state 106

state 245

    (26) funcBool -> COLINEALES ( vec , vec . )

    )               shift and go to state 259


state 246

    (12) loop -> FOR ( varAsig ; expBool . ; varsOps ) bloque

    ;               shift and go to state 260


state 247

    (69) varAsig -> ID . ID = valoresAsig .

    ;               reduce using rule 69 (varAsig -> ID . ID = valoresAsig .)


state 248

    (53) m -> [ INT ] m .

    MASMAS          reduce using rule 53 (m -> [ INT ] m .)
    MENOSMENOS      reduce using rule 53 (m -> [ INT ] m .)
    MULEQ           reduce using rule 53 (m -> [ INT ] m .)
    DIVEQ           reduce using rule 53 (m -> [ INT ] m .)
    MASEQ           reduce using rule 53 (m -> [ INT ] m .)
    MENOSEQ         reduce using rule 53 (m -> [ INT ] m .)
    =               reduce using rule 53 (m -> [ INT ] m .)
    ;               reduce using rule 53 (m -> [ INT ] m .)
    ?               reduce using rule 53 (m -> [ INT ] m .)
    OR              reduce using rule 53 (m -> [ INT ] m .)
    AND             reduce using rule 53 (m -> [ INT ] m .)
    EQEQ            reduce using rule 53 (m -> [ INT ] m .)
    DISTINTO        reduce using rule 53 (m -> [ INT ] m .)
    >               reduce using rule 53 (m -> [ INT ] m .)
    <               reduce using rule 53 (m -> [ INT ] m .)
    +               reduce using rule 53 (m -> [ INT ] m .)
    -               reduce using rule 53 (m -> [ INT ] m .)
    *               reduce using rule 53 (m -> [ INT ] m .)
    /               reduce using rule 53 (m -> [ INT ] m .)
    %               reduce using rule 53 (m -> [ INT ] m .)
    ^               reduce using rule 53 (m -> [ INT ] m .)
    )               reduce using rule 53 (m -> [ INT ] m .)
    ,               reduce using rule 53 (m -> [ INT ] m .)
    ]               reduce using rule 53 (m -> [ INT ] m .)
    }               reduce using rule 53 (m -> [ INT ] m .)
    :               reduce using rule 53 (m -> [ INT ] m .)


state 249

    (54) m -> [ varYVals ] m .

    MASMAS          reduce using rule 54 (m -> [ varYVals ] m .)
    MENOSMENOS      reduce using rule 54 (m -> [ varYVals ] m .)
    MULEQ           reduce using rule 54 (m -> [ varYVals ] m .)
    DIVEQ           reduce using rule 54 (m -> [ varYVals ] m .)
    MASEQ           reduce using rule 54 (m -> [ varYVals ] m .)
    MENOSEQ         reduce using rule 54 (m -> [ varYVals ] m .)
    =               reduce using rule 54 (m -> [ varYVals ] m .)
    ;               reduce using rule 54 (m -> [ varYVals ] m .)
    ?               reduce using rule 54 (m -> [ varYVals ] m .)
    OR              reduce using rule 54 (m -> [ varYVals ] m .)
    AND             reduce using rule 54 (m -> [ varYVals ] m .)
    EQEQ            reduce using rule 54 (m -> [ varYVals ] m .)
    DISTINTO        reduce using rule 54 (m -> [ varYVals ] m .)
    >               reduce using rule 54 (m -> [ varYVals ] m .)
    <               reduce using rule 54 (m -> [ varYVals ] m .)
    +               reduce using rule 54 (m -> [ varYVals ] m .)
    -               reduce using rule 54 (m -> [ varYVals ] m .)
    *               reduce using rule 54 (m -> [ varYVals ] m .)
    /               reduce using rule 54 (m -> [ varYVals ] m .)
    %               reduce using rule 54 (m -> [ varYVals ] m .)
    ^               reduce using rule 54 (m -> [ varYVals ] m .)
    )               reduce using rule 54 (m -> [ varYVals ] m .)
    ,               reduce using rule 54 (m -> [ varYVals ] m .)
    ]               reduce using rule 54 (m -> [ varYVals ] m .)
    }               reduce using rule 54 (m -> [ varYVals ] m .)
    :               reduce using rule 54 (m -> [ varYVals ] m .)


state 250

    (13) if -> IF ( expBool ) bloque . else
    (14) else -> . ELSE bloque
    (15) else -> . empty
    (30) empty -> .

    ELSE            shift and go to state 263
    RETURN          reduce using rule 30 (empty -> .)
    MENOSMENOS      reduce using rule 30 (empty -> .)
    MASMAS          reduce using rule 30 (empty -> .)
    ID              reduce using rule 30 (empty -> .)
    IF              reduce using rule 30 (empty -> .)
    WHILE           reduce using rule 30 (empty -> .)
    DO              reduce using rule 30 (empty -> .)
    FOR             reduce using rule 30 (empty -> .)
    PRINT           reduce using rule 30 (empty -> .)
    MULTIESCALAR    reduce using rule 30 (empty -> .)
    LENGTH          reduce using rule 30 (empty -> .)
    CAPITALIZAR     reduce using rule 30 (empty -> .)
    COLINEALES      reduce using rule 30 (empty -> .)
    $end            reduce using rule 30 (empty -> .)
    }               reduce using rule 30 (empty -> .)

    empty                          shift and go to state 262
    else                           shift and go to state 261

state 251

    (23) funcInt -> MULTIESCALAR ( vec , eMat . , param )
    (76) eMat -> eMat . + p
    (77) eMat -> eMat . - p
    (80) eMat -> eMat . + valoresMat
    (81) eMat -> eMat . - valoresMat

    ,               shift and go to state 264
    +               shift and go to state 142
    -               shift and go to state 143


state 252

    (11) loop -> DO bloque WHILE ( expBool ) . ;

    ;               shift and go to state 265


state 253

    (116) expBool -> valoresBool ? valoresBool : . valoresBool
    (109) valoresBool -> . BOOL
    (110) valoresBool -> . funcBool
    (111) valoresBool -> . varYVals
    (112) valoresBool -> . varsOps
    (26) funcBool -> . COLINEALES ( vec , vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (51) vecVal -> . ID m

    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26

    funcBool                       shift and go to state 64
    valoresBool                    shift and go to state 266
    varYVals                       shift and go to state 161
    vecVal                         shift and go to state 9
    varsOps                        shift and go to state 160

state 254

    (114) expBool -> valoresBool ? expBool : . expBool
    (113) expBool -> . or ? expBool : expBool
    (114) expBool -> . valoresBool ? expBool : expBool
    (115) expBool -> . or ? valoresBool : valoresBool
    (116) expBool -> . valoresBool ? valoresBool : valoresBool
    (117) expBool -> . or
    (118) or -> . or OR and
    (119) or -> . valoresBool OR and
    (120) or -> . or OR valoresBool
    (121) or -> . valoresBool OR valoresBool
    (122) or -> . and
    (109) valoresBool -> . BOOL
    (110) valoresBool -> . funcBool
    (111) valoresBool -> . varYVals
    (112) valoresBool -> . varsOps
    (123) and -> . and AND eq
    (124) and -> . valoresBool AND eq
    (125) and -> . and AND valoresBool
    (126) and -> . valoresBool AND valoresBool
    (127) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (128) eq -> . eq EQEQ parenBool
    (129) eq -> . eq DISTINTO parenBool
    (130) eq -> . valoresBool EQEQ parenBool
    (131) eq -> . valoresBool DISTINTO parenBool
    (132) eq -> . eq EQEQ valoresBool
    (133) eq -> . eq DISTINTO valoresBool
    (134) eq -> . valoresBool EQEQ valoresBool
    (135) eq -> . valoresBool DISTINTO valoresBool
    (136) eq -> . mayor
    (51) vecVal -> . ID m
    (140) mayor -> . tCompare > tCompare
    (141) mayor -> . menor
    (137) tCompare -> . eMat
    (138) tCompare -> . varsOps
    (139) tCompare -> . varYVals
    (142) menor -> . tCompare < tCompare
    (143) menor -> . not
    (76) eMat -> . eMat + p
    (77) eMat -> . eMat - p
    (78) eMat -> . valoresMat + p
    (79) eMat -> . valoresMat - p
    (80) eMat -> . eMat + valoresMat
    (81) eMat -> . eMat - valoresMat
    (82) eMat -> . valoresMat + valoresMat
    (83) eMat -> . valoresMat - valoresMat
    (84) eMat -> . p
    (144) not -> . NOT not
    (145) not -> . NOT valoresBool
    (146) not -> . parenBool
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (85) p -> . p * exp
    (86) p -> . p / exp
    (87) p -> . p % exp
    (88) p -> . valoresMat * exp
    (89) p -> . valoresMat / exp
    (90) p -> . valoresMat % exp
    (91) p -> . p * valoresMat
    (92) p -> . p / valoresMat
    (93) p -> . p % valoresMat
    (94) p -> . valoresMat * valoresMat
    (95) p -> . valoresMat / valoresMat
    (96) p -> . valoresMat % valoresMat
    (97) p -> . exp
    (147) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (108) paren -> . ( eMat )

    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 87
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    (               shift and go to state 72
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 74
    +               shift and go to state 73

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    vecVal                         shift and go to state 9
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 71
    mayor                          shift and go to state 66
    paren                          shift and go to state 77
    iSing                          shift and go to state 75
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    parenBool                      shift and go to state 86
    p                              shift and go to state 82
    varsOps                        shift and go to state 84
    exp                            shift and go to state 85
    varYVals                       shift and go to state 88
    or                             shift and go to state 89
    expBool                        shift and go to state 267

state 255

    (115) expBool -> or ? valoresBool : . valoresBool
    (109) valoresBool -> . BOOL
    (110) valoresBool -> . funcBool
    (111) valoresBool -> . varYVals
    (112) valoresBool -> . varsOps
    (26) funcBool -> . COLINEALES ( vec , vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (51) vecVal -> . ID m

    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26

    funcBool                       shift and go to state 64
    valoresBool                    shift and go to state 268
    vecVal                         shift and go to state 9
    varYVals                       shift and go to state 161
    varsOps                        shift and go to state 160

state 256

    (113) expBool -> or ? expBool : . expBool
    (113) expBool -> . or ? expBool : expBool
    (114) expBool -> . valoresBool ? expBool : expBool
    (115) expBool -> . or ? valoresBool : valoresBool
    (116) expBool -> . valoresBool ? valoresBool : valoresBool
    (117) expBool -> . or
    (118) or -> . or OR and
    (119) or -> . valoresBool OR and
    (120) or -> . or OR valoresBool
    (121) or -> . valoresBool OR valoresBool
    (122) or -> . and
    (109) valoresBool -> . BOOL
    (110) valoresBool -> . funcBool
    (111) valoresBool -> . varYVals
    (112) valoresBool -> . varsOps
    (123) and -> . and AND eq
    (124) and -> . valoresBool AND eq
    (125) and -> . and AND valoresBool
    (126) and -> . valoresBool AND valoresBool
    (127) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (128) eq -> . eq EQEQ parenBool
    (129) eq -> . eq DISTINTO parenBool
    (130) eq -> . valoresBool EQEQ parenBool
    (131) eq -> . valoresBool DISTINTO parenBool
    (132) eq -> . eq EQEQ valoresBool
    (133) eq -> . eq DISTINTO valoresBool
    (134) eq -> . valoresBool EQEQ valoresBool
    (135) eq -> . valoresBool DISTINTO valoresBool
    (136) eq -> . mayor
    (51) vecVal -> . ID m
    (140) mayor -> . tCompare > tCompare
    (141) mayor -> . menor
    (137) tCompare -> . eMat
    (138) tCompare -> . varsOps
    (139) tCompare -> . varYVals
    (142) menor -> . tCompare < tCompare
    (143) menor -> . not
    (76) eMat -> . eMat + p
    (77) eMat -> . eMat - p
    (78) eMat -> . valoresMat + p
    (79) eMat -> . valoresMat - p
    (80) eMat -> . eMat + valoresMat
    (81) eMat -> . eMat - valoresMat
    (82) eMat -> . valoresMat + valoresMat
    (83) eMat -> . valoresMat - valoresMat
    (84) eMat -> . p
    (144) not -> . NOT not
    (145) not -> . NOT valoresBool
    (146) not -> . parenBool
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (85) p -> . p * exp
    (86) p -> . p / exp
    (87) p -> . p % exp
    (88) p -> . valoresMat * exp
    (89) p -> . valoresMat / exp
    (90) p -> . valoresMat % exp
    (91) p -> . p * valoresMat
    (92) p -> . p / valoresMat
    (93) p -> . p % valoresMat
    (94) p -> . valoresMat * valoresMat
    (95) p -> . valoresMat / valoresMat
    (96) p -> . valoresMat % valoresMat
    (97) p -> . exp
    (147) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (108) paren -> . ( eMat )

    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 87
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    (               shift and go to state 72
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 74
    +               shift and go to state 73

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 71
    vecVal                         shift and go to state 9
    paren                          shift and go to state 77
    iSing                          shift and go to state 75
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    varYVals                       shift and go to state 88
    or                             shift and go to state 89
    p                              shift and go to state 82
    varsOps                        shift and go to state 84
    exp                            shift and go to state 85
    mayor                          shift and go to state 66
    parenBool                      shift and go to state 86
    expBool                        shift and go to state 269

state 257

    (32) elem -> valores , elem .

    ]               reduce using rule 32 (elem -> valores , elem .)


state 258

    (57) campos -> ID : valores . , campos

    ,               shift and go to state 270


state 259

    (26) funcBool -> COLINEALES ( vec , vec ) .

    EQEQ            reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    DISTINTO        reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    AND             reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    ?               reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    OR              reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    )               reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    ;               reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    ,               reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    ]               reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    }               reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    :               reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)


state 260

    (12) loop -> FOR ( varAsig ; expBool ; . varsOps ) bloque
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (51) vecVal -> . ID m

    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    ID              shift and go to state 50

    varsOps                        shift and go to state 271
    varYVals                       shift and go to state 272
    vecVal                         shift and go to state 9

state 261

    (13) if -> IF ( expBool ) bloque else .

    RETURN          reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    MENOSMENOS      reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    MASMAS          reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    ID              reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    IF              reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    WHILE           reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    DO              reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    FOR             reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    PRINT           reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    MULTIESCALAR    reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    LENGTH          reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    CAPITALIZAR     reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    COLINEALES      reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    }               reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    $end            reduce using rule 13 (if -> IF ( expBool ) bloque else .)


state 262

    (15) else -> empty .

    RETURN          reduce using rule 15 (else -> empty .)
    MENOSMENOS      reduce using rule 15 (else -> empty .)
    MASMAS          reduce using rule 15 (else -> empty .)
    ID              reduce using rule 15 (else -> empty .)
    IF              reduce using rule 15 (else -> empty .)
    WHILE           reduce using rule 15 (else -> empty .)
    DO              reduce using rule 15 (else -> empty .)
    FOR             reduce using rule 15 (else -> empty .)
    PRINT           reduce using rule 15 (else -> empty .)
    MULTIESCALAR    reduce using rule 15 (else -> empty .)
    LENGTH          reduce using rule 15 (else -> empty .)
    CAPITALIZAR     reduce using rule 15 (else -> empty .)
    COLINEALES      reduce using rule 15 (else -> empty .)
    $end            reduce using rule 15 (else -> empty .)
    }               reduce using rule 15 (else -> empty .)


state 263

    (14) else -> ELSE . bloque
    (16) bloque -> . sentencia ;
    (17) bloque -> . { g }
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (64) varAsig -> . varYVals MULEQ valoresAsig
    (65) varAsig -> . varYVals DIVEQ valoresAsig
    (66) varAsig -> . varYVals MASEQ valoresAsig
    (67) varAsig -> . varYVals MENOSEQ valoresAsig
    (68) varAsig -> . varYVals = valoresAsig
    (69) varAsig -> . ID . ID = valoresAsig
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (51) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( eMat )
    (26) funcBool -> . COLINEALES ( vec , vec )

    {               shift and go to state 32
    RETURN          shift and go to state 2
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    ID              shift and go to state 16
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    CAPITALIZAR     shift and go to state 23
    COLINEALES      shift and go to state 13

    varAsig                        shift and go to state 18
    sentencia                      shift and go to state 31
    funcInt                        shift and go to state 5
    funcString                     shift and go to state 20
    funcVoid                       shift and go to state 12
    funcReturn                     shift and go to state 22
    funcBool                       shift and go to state 3
    varsOps                        shift and go to state 27
    func                           shift and go to state 15
    bloque                         shift and go to state 273
    varYVals                       shift and go to state 28
    vecVal                         shift and go to state 9

state 264

    (23) funcInt -> MULTIESCALAR ( vec , eMat , . param )
    (28) param -> . expBool
    (29) param -> . empty
    (113) expBool -> . or ? expBool : expBool
    (114) expBool -> . valoresBool ? expBool : expBool
    (115) expBool -> . or ? valoresBool : valoresBool
    (116) expBool -> . valoresBool ? valoresBool : valoresBool
    (117) expBool -> . or
    (30) empty -> .
    (118) or -> . or OR and
    (119) or -> . valoresBool OR and
    (120) or -> . or OR valoresBool
    (121) or -> . valoresBool OR valoresBool
    (122) or -> . and
    (109) valoresBool -> . BOOL
    (110) valoresBool -> . funcBool
    (111) valoresBool -> . varYVals
    (112) valoresBool -> . varsOps
    (123) and -> . and AND eq
    (124) and -> . valoresBool AND eq
    (125) and -> . and AND valoresBool
    (126) and -> . valoresBool AND valoresBool
    (127) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (128) eq -> . eq EQEQ parenBool
    (129) eq -> . eq DISTINTO parenBool
    (130) eq -> . valoresBool EQEQ parenBool
    (131) eq -> . valoresBool DISTINTO parenBool
    (132) eq -> . eq EQEQ valoresBool
    (133) eq -> . eq DISTINTO valoresBool
    (134) eq -> . valoresBool EQEQ valoresBool
    (135) eq -> . valoresBool DISTINTO valoresBool
    (136) eq -> . mayor
    (51) vecVal -> . ID m
    (140) mayor -> . tCompare > tCompare
    (141) mayor -> . menor
    (137) tCompare -> . eMat
    (138) tCompare -> . varsOps
    (139) tCompare -> . varYVals
    (142) menor -> . tCompare < tCompare
    (143) menor -> . not
    (76) eMat -> . eMat + p
    (77) eMat -> . eMat - p
    (78) eMat -> . valoresMat + p
    (79) eMat -> . valoresMat - p
    (80) eMat -> . eMat + valoresMat
    (81) eMat -> . eMat - valoresMat
    (82) eMat -> . valoresMat + valoresMat
    (83) eMat -> . valoresMat - valoresMat
    (84) eMat -> . p
    (144) not -> . NOT not
    (145) not -> . NOT valoresBool
    (146) not -> . parenBool
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (85) p -> . p * exp
    (86) p -> . p / exp
    (87) p -> . p % exp
    (88) p -> . valoresMat * exp
    (89) p -> . valoresMat / exp
    (90) p -> . valoresMat % exp
    (91) p -> . p * valoresMat
    (92) p -> . p / valoresMat
    (93) p -> . p % valoresMat
    (94) p -> . valoresMat * valoresMat
    (95) p -> . valoresMat / valoresMat
    (96) p -> . valoresMat % valoresMat
    (97) p -> . exp
    (147) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (108) paren -> . ( eMat )

    )               reduce using rule 30 (empty -> .)
    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 50
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 87
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    (               shift and go to state 72
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 74
    +               shift and go to state 73

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    valoresMat                     shift and go to state 67
    vecVal                         shift and go to state 9
    eq                             shift and go to state 68
    mayor                          shift and go to state 66
    eMat                           shift and go to state 71
    param                          shift and go to state 274
    valoresBool                    shift and go to state 69
    paren                          shift and go to state 77
    empty                          shift and go to state 275
    iSing                          shift and go to state 75
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    or                             shift and go to state 89
    p                              shift and go to state 82
    varsOps                        shift and go to state 84
    exp                            shift and go to state 85
    varYVals                       shift and go to state 88
    parenBool                      shift and go to state 86
    expBool                        shift and go to state 276

state 265

    (11) loop -> DO bloque WHILE ( expBool ) ; .

    RETURN          reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    MENOSMENOS      reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    MASMAS          reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    ID              reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    IF              reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    WHILE           reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    DO              reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    FOR             reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    PRINT           reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    MULTIESCALAR    reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    LENGTH          reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    CAPITALIZAR     reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    COLINEALES      reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    }               reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    $end            reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)


state 266

    (116) expBool -> valoresBool ? valoresBool : valoresBool .

    ,               reduce using rule 116 (expBool -> valoresBool ? valoresBool : valoresBool .)
    ]               reduce using rule 116 (expBool -> valoresBool ? valoresBool : valoresBool .)
    ;               reduce using rule 116 (expBool -> valoresBool ? valoresBool : valoresBool .)
    )               reduce using rule 116 (expBool -> valoresBool ? valoresBool : valoresBool .)
    }               reduce using rule 116 (expBool -> valoresBool ? valoresBool : valoresBool .)
    :               reduce using rule 116 (expBool -> valoresBool ? valoresBool : valoresBool .)


state 267

    (114) expBool -> valoresBool ? expBool : expBool .

    ,               reduce using rule 114 (expBool -> valoresBool ? expBool : expBool .)
    ]               reduce using rule 114 (expBool -> valoresBool ? expBool : expBool .)
    ;               reduce using rule 114 (expBool -> valoresBool ? expBool : expBool .)
    )               reduce using rule 114 (expBool -> valoresBool ? expBool : expBool .)
    }               reduce using rule 114 (expBool -> valoresBool ? expBool : expBool .)
    :               reduce using rule 114 (expBool -> valoresBool ? expBool : expBool .)


state 268

    (115) expBool -> or ? valoresBool : valoresBool .

    ,               reduce using rule 115 (expBool -> or ? valoresBool : valoresBool .)
    ]               reduce using rule 115 (expBool -> or ? valoresBool : valoresBool .)
    ;               reduce using rule 115 (expBool -> or ? valoresBool : valoresBool .)
    )               reduce using rule 115 (expBool -> or ? valoresBool : valoresBool .)
    }               reduce using rule 115 (expBool -> or ? valoresBool : valoresBool .)
    :               reduce using rule 115 (expBool -> or ? valoresBool : valoresBool .)


state 269

    (113) expBool -> or ? expBool : expBool .

    ,               reduce using rule 113 (expBool -> or ? expBool : expBool .)
    ]               reduce using rule 113 (expBool -> or ? expBool : expBool .)
    ;               reduce using rule 113 (expBool -> or ? expBool : expBool .)
    )               reduce using rule 113 (expBool -> or ? expBool : expBool .)
    }               reduce using rule 113 (expBool -> or ? expBool : expBool .)
    :               reduce using rule 113 (expBool -> or ? expBool : expBool .)


state 270

    (57) campos -> ID : valores , . campos
    (57) campos -> . ID : valores , campos
    (58) campos -> . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . reg
    (37) valores -> . INT
    (38) valores -> . FLOAT
    (39) valores -> . STRING
    (40) valores -> . BOOL
    (41) valores -> . varYVals
    (42) valores -> . varsOps
    (43) valores -> . vec
    (44) valores -> . ID . valoresCampos
    (45) valores -> . RES
    (76) eMat -> . eMat + p
    (77) eMat -> . eMat - p
    (78) eMat -> . valoresMat + p
    (79) eMat -> . valoresMat - p
    (80) eMat -> . eMat + valoresMat
    (81) eMat -> . eMat - valoresMat
    (82) eMat -> . valoresMat + valoresMat
    (83) eMat -> . valoresMat - valoresMat
    (84) eMat -> . p
    (113) expBool -> . or ? expBool : expBool
    (114) expBool -> . valoresBool ? expBool : expBool
    (115) expBool -> . or ? valoresBool : valoresBool
    (116) expBool -> . valoresBool ? valoresBool : valoresBool
    (117) expBool -> . or
    (56) reg -> . { campos }
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (31) vec -> . [ elem ]
    (70) valoresMat -> . INT
    (71) valoresMat -> . FLOAT
    (72) valoresMat -> . funcInt
    (73) valoresMat -> . varYVals
    (74) valoresMat -> . varsOps
    (75) valoresMat -> . STRING
    (85) p -> . p * exp
    (86) p -> . p / exp
    (87) p -> . p % exp
    (88) p -> . valoresMat * exp
    (89) p -> . valoresMat / exp
    (90) p -> . valoresMat % exp
    (91) p -> . p * valoresMat
    (92) p -> . p / valoresMat
    (93) p -> . p % valoresMat
    (94) p -> . valoresMat * valoresMat
    (95) p -> . valoresMat / valoresMat
    (96) p -> . valoresMat % valoresMat
    (97) p -> . exp
    (118) or -> . or OR and
    (119) or -> . valoresBool OR and
    (120) or -> . or OR valoresBool
    (121) or -> . valoresBool OR valoresBool
    (122) or -> . and
    (109) valoresBool -> . BOOL
    (110) valoresBool -> . funcBool
    (111) valoresBool -> . varYVals
    (112) valoresBool -> . varsOps
    (51) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (98) exp -> . exp ^ iSing
    (99) exp -> . valoresMat ^ iSing
    (100) exp -> . exp ^ valoresMat
    (101) exp -> . valoresMat ^ valoresMat
    (102) exp -> . iSing
    (123) and -> . and AND eq
    (124) and -> . valoresBool AND eq
    (125) and -> . and AND valoresBool
    (126) and -> . valoresBool AND valoresBool
    (127) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (103) iSing -> . - paren
    (104) iSing -> . + paren
    (105) iSing -> . - valoresMat
    (106) iSing -> . + valoresMat
    (107) iSing -> . paren
    (128) eq -> . eq EQEQ parenBool
    (129) eq -> . eq DISTINTO parenBool
    (130) eq -> . valoresBool EQEQ parenBool
    (131) eq -> . valoresBool DISTINTO parenBool
    (132) eq -> . eq EQEQ valoresBool
    (133) eq -> . eq DISTINTO valoresBool
    (134) eq -> . valoresBool EQEQ valoresBool
    (135) eq -> . valoresBool DISTINTO valoresBool
    (136) eq -> . mayor
    (108) paren -> . ( eMat )
    (140) mayor -> . tCompare > tCompare
    (141) mayor -> . menor
    (137) tCompare -> . eMat
    (138) tCompare -> . varsOps
    (139) tCompare -> . varYVals
    (142) menor -> . tCompare < tCompare
    (143) menor -> . not
    (144) not -> . NOT not
    (145) not -> . NOT valoresBool
    (146) not -> . parenBool
    (147) parenBool -> . ( expBool )

    ID              shift and go to state 173
    INT             shift and go to state 99
    FLOAT           shift and go to state 100
    STRING          shift and go to state 96
    BOOL            shift and go to state 102
    RES             shift and go to state 91
    {               shift and go to state 104
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    [               shift and go to state 97
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 93
    NOT             shift and go to state 87

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    mayor                          shift and go to state 66
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 92
    vecVal                         shift and go to state 9
    vec                            shift and go to state 94
    paren                          shift and go to state 77
    reg                            shift and go to state 95
    varsOps                        shift and go to state 103
    exp                            shift and go to state 85
    tCompare                       shift and go to state 76
    campos                         shift and go to state 277
    not                            shift and go to state 78
    valores                        shift and go to state 174
    parenBool                      shift and go to state 86
    p                              shift and go to state 82
    iSing                          shift and go to state 75
    varYVals                       shift and go to state 105
    or                             shift and go to state 89
    expBool                        shift and go to state 106

state 271

    (12) loop -> FOR ( varAsig ; expBool ; varsOps . ) bloque

    )               shift and go to state 278


state 272

    (61) varsOps -> varYVals . MASMAS
    (62) varsOps -> varYVals . MENOSMENOS

    MASMAS          shift and go to state 56
    MENOSMENOS      shift and go to state 53


state 273

    (14) else -> ELSE bloque .

    RETURN          reduce using rule 14 (else -> ELSE bloque .)
    MENOSMENOS      reduce using rule 14 (else -> ELSE bloque .)
    MASMAS          reduce using rule 14 (else -> ELSE bloque .)
    ID              reduce using rule 14 (else -> ELSE bloque .)
    IF              reduce using rule 14 (else -> ELSE bloque .)
    WHILE           reduce using rule 14 (else -> ELSE bloque .)
    DO              reduce using rule 14 (else -> ELSE bloque .)
    FOR             reduce using rule 14 (else -> ELSE bloque .)
    PRINT           reduce using rule 14 (else -> ELSE bloque .)
    MULTIESCALAR    reduce using rule 14 (else -> ELSE bloque .)
    LENGTH          reduce using rule 14 (else -> ELSE bloque .)
    CAPITALIZAR     reduce using rule 14 (else -> ELSE bloque .)
    COLINEALES      reduce using rule 14 (else -> ELSE bloque .)
    $end            reduce using rule 14 (else -> ELSE bloque .)
    }               reduce using rule 14 (else -> ELSE bloque .)


state 274

    (23) funcInt -> MULTIESCALAR ( vec , eMat , param . )

    )               shift and go to state 279


state 275

    (29) param -> empty .

    )               reduce using rule 29 (param -> empty .)


state 276

    (28) param -> expBool .

    )               reduce using rule 28 (param -> expBool .)


state 277

    (57) campos -> ID : valores , campos .

    }               reduce using rule 57 (campos -> ID : valores , campos .)


state 278

    (12) loop -> FOR ( varAsig ; expBool ; varsOps ) . bloque
    (16) bloque -> . sentencia ;
    (17) bloque -> . { g }
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (59) varsOps -> . MENOSMENOS varYVals
    (60) varsOps -> . MASMAS varYVals
    (61) varsOps -> . varYVals MASMAS
    (62) varsOps -> . varYVals MENOSMENOS
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (64) varAsig -> . varYVals MULEQ valoresAsig
    (65) varAsig -> . varYVals DIVEQ valoresAsig
    (66) varAsig -> . varYVals MASEQ valoresAsig
    (67) varAsig -> . varYVals MENOSEQ valoresAsig
    (68) varAsig -> . varYVals = valoresAsig
    (69) varAsig -> . ID . ID = valoresAsig
    (49) varYVals -> . ID
    (50) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (51) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( eMat )
    (26) funcBool -> . COLINEALES ( vec , vec )

    {               shift and go to state 32
    RETURN          shift and go to state 2
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    ID              shift and go to state 16
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    CAPITALIZAR     shift and go to state 23
    COLINEALES      shift and go to state 13

    varAsig                        shift and go to state 18
    sentencia                      shift and go to state 31
    funcInt                        shift and go to state 5
    funcString                     shift and go to state 20
    funcVoid                       shift and go to state 12
    funcReturn                     shift and go to state 22
    funcBool                       shift and go to state 3
    varsOps                        shift and go to state 27
    func                           shift and go to state 15
    bloque                         shift and go to state 280
    varYVals                       shift and go to state 28
    vecVal                         shift and go to state 9

state 279

    (23) funcInt -> MULTIESCALAR ( vec , eMat , param ) .

    ;               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    +               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    -               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    *               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    /               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    %               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    ^               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    >               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    <               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    )               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    ,               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    ]               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    }               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    EQEQ            reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    DISTINTO        reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    AND             reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    ?               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    OR              reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    :               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)


state 280

    (12) loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .

    RETURN          reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    MENOSMENOS      reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    MASMAS          reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    ID              reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    IF              reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    WHILE           reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    DO              reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    FOR             reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    PRINT           reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    MULTIESCALAR    reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    LENGTH          reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    CAPITALIZAR     reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    COLINEALES      reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    }               reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    $end            reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)

