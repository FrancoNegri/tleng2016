Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    RES
    COMMENT
    BEGIN
    MASMAS
    END
    MENOSMENOS

Grammar

Rule 0     S' -> g
Rule 1     g -> sentencia g
Rule 2     g -> ctrl g
Rule 3     g -> empty
Rule 4     sentencia -> varOps ;
Rule 5     sentencia -> func ;
Rule 6     sentencia -> varAsig ;
Rule 7     sentencia -> RETURN ;
Rule 8     ctrl -> if
Rule 9     ctrl -> loop
Rule 10    loop -> WHILE ( varExpresion ) bloque
Rule 11    loop -> DO bloque WHILE ( varExpresion ) ;
Rule 12    loop -> FOR ( varExpresion ; varExpresion ; varOps ) bloque
Rule 13    if -> IF ( varExpresion ) THEN bloque else
Rule 14    else -> ELSE bloque
Rule 15    else -> empty
Rule 16    bloque -> sentencia
Rule 17    bloque -> { g }
Rule 18    varExpresion -> varExpresion + varExpresion
Rule 19    varExpresion -> varExpresion - varExpresion
Rule 20    varExpresion -> varExpresion * varExpresion
Rule 21    varExpresion -> varExpresion / varExpresion
Rule 22    varExpresion -> varExpresion % varExpresion
Rule 23    varExpresion -> varExpresion ^ varExpresion
Rule 24    varExpresion -> ( - ( varExpresion ) )
Rule 25    varExpresion -> ( + ( varExpresion ) )
Rule 26    varExpresion -> varExpresion ? varExpresion : varExpresion
Rule 27    varExpresion -> varExpresion AND varExpresion
Rule 28    varExpresion -> NOT varExpresion
Rule 29    varExpresion -> varExpresion OR varExpresion
Rule 30    varExpresion -> varExpresion EQEQ varExpresion
Rule 31    varExpresion -> varExpresion DISTINTO varExpresion
Rule 32    varExpresion -> varExpresion > varExpresion
Rule 33    varExpresion -> varExpresion < varExpresion
Rule 34    varExpresion -> ( varExpresion )
Rule 35    varExpresion -> tipos
Rule 36    varExpresion -> funcReturn
Rule 37    varExpresion -> varOps
Rule 38    varExpresion -> vec
Rule 39    varExpresion -> ID m
Rule 40    varExpresion -> reg
Rule 41    tipos -> INT
Rule 42    tipos -> FLOAT
Rule 43    tipos -> STRING
Rule 44    tipos -> BOOL
Rule 45    tipos -> ID
Rule 46    vec -> [ elem ]
Rule 47    vec -> ID m
Rule 48    elem -> varExpresion , elem
Rule 49    elem -> varExpresion
Rule 50    m -> [ varExpresion ]
Rule 51    m -> m [ varExpresion ]
Rule 52    reg -> { campos }
Rule 53    reg -> ID . ID
Rule 54    campos -> ID : varExpresion , campos
Rule 55    campos -> ID : varExpresion
Rule 56    varOps -> + + ID
Rule 57    varOps -> - - ID
Rule 58    varOps -> ID + +
Rule 59    varOps -> ID - -
Rule 60    func -> funcReturn
Rule 61    func -> funcVoid
Rule 62    funcReturn -> funcInt
Rule 63    funcReturn -> funcString
Rule 64    funcReturn -> funcBool
Rule 65    funcInt -> MULTIESCALAR ( varExpresion , varExpresion , param )
Rule 66    funcInt -> LENGTH ( varExpresion )
Rule 67    funcString -> CAPITALIZAR ( varExpresion )
Rule 68    funcBool -> COLINEALES ( varExpresion , varExpresion )
Rule 69    funcVoid -> PRINT ( varExpresion )
Rule 70    param -> varExpresion
Rule 71    param -> empty
Rule 72    empty -> <empty>
Rule 73    varAsig -> ID MENOSEQ varAsig
Rule 74    varAsig -> ID MASEQ varAsig
Rule 75    varAsig -> ID MULEQ varAsig
Rule 76    varAsig -> ID DIVEQ varAsig
Rule 77    varAsig -> ID = varAsig
Rule 78    varAsig -> ID MASEQ varExpresion
Rule 79    varAsig -> ID MENOSEQ varExpresion
Rule 80    varAsig -> ID MULEQ varExpresion
Rule 81    varAsig -> ID DIVEQ varExpresion
Rule 82    varAsig -> ID = varExpresion

Terminals, with rules where they appear

%                    : 22
(                    : 10 11 12 13 24 24 25 25 34 65 66 67 68 69
)                    : 10 11 12 13 24 24 25 25 34 65 66 67 68 69
*                    : 20
+                    : 18 25 56 56 58 58
,                    : 48 54 65 65 68
-                    : 19 24 57 57 59 59
.                    : 53
/                    : 21
:                    : 26 54 55
;                    : 4 5 6 7 11 12 12
<                    : 33
=                    : 77 82
>                    : 32
?                    : 26
AND                  : 27
BEGIN                : 
BOOL                 : 44
CAPITALIZAR          : 67
COLINEALES           : 68
COMMENT              : 
DISTINTO             : 31
DIVEQ                : 76 81
DO                   : 11
ELSE                 : 14
END                  : 
EQEQ                 : 30
FLOAT                : 42
FOR                  : 12
ID                   : 39 45 47 53 53 54 55 56 57 58 59 73 74 75 76 77 78 79 80 81 82
IF                   : 13
INT                  : 41
LENGTH               : 66
MASEQ                : 74 78
MASMAS               : 
MENOSEQ              : 73 79
MENOSMENOS           : 
MULEQ                : 75 80
MULTIESCALAR         : 65
NOT                  : 28
OR                   : 29
PRINT                : 69
RES                  : 
RETURN               : 7
STRING               : 43
THEN                 : 13
WHILE                : 10 11
[                    : 46 50 51
]                    : 46 50 51
^                    : 23
error                : 
{                    : 17 52
}                    : 17 52

Nonterminals, with rules where they appear

bloque               : 10 11 12 13 14
campos               : 52 54
ctrl                 : 2
elem                 : 46 48
else                 : 13
empty                : 3 15 71
func                 : 5
funcBool             : 64
funcInt              : 62
funcReturn           : 36 60
funcString           : 63
funcVoid             : 61
g                    : 1 2 17 0
if                   : 8
loop                 : 9
m                    : 39 47 51
param                : 65
reg                  : 40
sentencia            : 1 16
tipos                : 35
varAsig              : 6 73 74 75 76 77
varExpresion         : 10 11 12 12 13 18 18 19 19 20 20 21 21 22 22 23 23 24 25 26 26 26 27 27 28 29 29 30 30 31 31 32 32 33 33 34 48 49 50 51 54 55 65 65 66 67 68 68 69 70 78 79 80 81 82
varOps               : 4 12 37
vec                  : 38

Parsing method: LALR

state 0

    (0) S' -> . g
    (1) g -> . sentencia g
    (2) g -> . ctrl g
    (3) g -> . empty
    (4) sentencia -> . varOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (8) ctrl -> . if
    (9) ctrl -> . loop
    (72) empty -> .
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (60) func -> . funcReturn
    (61) func -> . funcVoid
    (73) varAsig -> . ID MENOSEQ varAsig
    (74) varAsig -> . ID MASEQ varAsig
    (75) varAsig -> . ID MULEQ varAsig
    (76) varAsig -> . ID DIVEQ varAsig
    (77) varAsig -> . ID = varAsig
    (78) varAsig -> . ID MASEQ varExpresion
    (79) varAsig -> . ID MENOSEQ varExpresion
    (80) varAsig -> . ID MULEQ varExpresion
    (81) varAsig -> . ID DIVEQ varExpresion
    (82) varAsig -> . ID = varExpresion
    (13) if -> . IF ( varExpresion ) THEN bloque else
    (10) loop -> . WHILE ( varExpresion ) bloque
    (11) loop -> . DO bloque WHILE ( varExpresion ) ;
    (12) loop -> . FOR ( varExpresion ; varExpresion ; varOps ) bloque
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (69) funcVoid -> . PRINT ( varExpresion )
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    RETURN          shift and go to state 2
    $end            reduce using rule 72 (empty -> .)
    +               shift and go to state 10
    -               shift and go to state 12
    ID              shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 6
    DO              shift and go to state 1
    FOR             shift and go to state 15
    PRINT           shift and go to state 7
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    varAsig                        shift and go to state 19
    sentencia                      shift and go to state 9
    funcString                     shift and go to state 21
    funcBool                       shift and go to state 3
    g                              shift and go to state 20
    ctrl                           shift and go to state 4
    funcVoid                       shift and go to state 13
    funcReturn                     shift and go to state 23
    varOps                         shift and go to state 11
    loop                           shift and go to state 27
    func                           shift and go to state 16
    funcInt                        shift and go to state 5
    empty                          shift and go to state 26
    if                             shift and go to state 8

state 1

    (11) loop -> DO . bloque WHILE ( varExpresion ) ;
    (16) bloque -> . sentencia
    (17) bloque -> . { g }
    (4) sentencia -> . varOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (60) func -> . funcReturn
    (61) func -> . funcVoid
    (73) varAsig -> . ID MENOSEQ varAsig
    (74) varAsig -> . ID MASEQ varAsig
    (75) varAsig -> . ID MULEQ varAsig
    (76) varAsig -> . ID DIVEQ varAsig
    (77) varAsig -> . ID = varAsig
    (78) varAsig -> . ID MASEQ varExpresion
    (79) varAsig -> . ID MENOSEQ varExpresion
    (80) varAsig -> . ID MULEQ varExpresion
    (81) varAsig -> . ID DIVEQ varExpresion
    (82) varAsig -> . ID = varExpresion
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (69) funcVoid -> . PRINT ( varExpresion )
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    {               shift and go to state 30
    RETURN          shift and go to state 2
    +               shift and go to state 10
    -               shift and go to state 12
    ID              shift and go to state 17
    PRINT           shift and go to state 7
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    varAsig                        shift and go to state 19
    sentencia                      shift and go to state 29
    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    funcReturn                     shift and go to state 23
    varOps                         shift and go to state 11
    funcVoid                       shift and go to state 13
    func                           shift and go to state 16
    bloque                         shift and go to state 28
    funcInt                        shift and go to state 5

state 2

    (7) sentencia -> RETURN . ;

    ;               shift and go to state 31


state 3

    (64) funcReturn -> funcBool .

    ]               reduce using rule 64 (funcReturn -> funcBool .)
    +               reduce using rule 64 (funcReturn -> funcBool .)
    -               reduce using rule 64 (funcReturn -> funcBool .)
    *               reduce using rule 64 (funcReturn -> funcBool .)
    /               reduce using rule 64 (funcReturn -> funcBool .)
    %               reduce using rule 64 (funcReturn -> funcBool .)
    ^               reduce using rule 64 (funcReturn -> funcBool .)
    ?               reduce using rule 64 (funcReturn -> funcBool .)
    AND             reduce using rule 64 (funcReturn -> funcBool .)
    OR              reduce using rule 64 (funcReturn -> funcBool .)
    EQEQ            reduce using rule 64 (funcReturn -> funcBool .)
    DISTINTO        reduce using rule 64 (funcReturn -> funcBool .)
    >               reduce using rule 64 (funcReturn -> funcBool .)
    <               reduce using rule 64 (funcReturn -> funcBool .)
    ;               reduce using rule 64 (funcReturn -> funcBool .)
    )               reduce using rule 64 (funcReturn -> funcBool .)
    ,               reduce using rule 64 (funcReturn -> funcBool .)
    :               reduce using rule 64 (funcReturn -> funcBool .)
    }               reduce using rule 64 (funcReturn -> funcBool .)


state 4

    (2) g -> ctrl . g
    (1) g -> . sentencia g
    (2) g -> . ctrl g
    (3) g -> . empty
    (4) sentencia -> . varOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (8) ctrl -> . if
    (9) ctrl -> . loop
    (72) empty -> .
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (60) func -> . funcReturn
    (61) func -> . funcVoid
    (73) varAsig -> . ID MENOSEQ varAsig
    (74) varAsig -> . ID MASEQ varAsig
    (75) varAsig -> . ID MULEQ varAsig
    (76) varAsig -> . ID DIVEQ varAsig
    (77) varAsig -> . ID = varAsig
    (78) varAsig -> . ID MASEQ varExpresion
    (79) varAsig -> . ID MENOSEQ varExpresion
    (80) varAsig -> . ID MULEQ varExpresion
    (81) varAsig -> . ID DIVEQ varExpresion
    (82) varAsig -> . ID = varExpresion
    (13) if -> . IF ( varExpresion ) THEN bloque else
    (10) loop -> . WHILE ( varExpresion ) bloque
    (11) loop -> . DO bloque WHILE ( varExpresion ) ;
    (12) loop -> . FOR ( varExpresion ; varExpresion ; varOps ) bloque
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (69) funcVoid -> . PRINT ( varExpresion )
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    RETURN          shift and go to state 2
    $end            reduce using rule 72 (empty -> .)
    }               reduce using rule 72 (empty -> .)
    +               shift and go to state 10
    -               shift and go to state 12
    ID              shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 6
    DO              shift and go to state 1
    FOR             shift and go to state 15
    PRINT           shift and go to state 7
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    varAsig                        shift and go to state 19
    sentencia                      shift and go to state 9
    funcString                     shift and go to state 21
    funcBool                       shift and go to state 3
    g                              shift and go to state 32
    ctrl                           shift and go to state 4
    funcVoid                       shift and go to state 13
    funcReturn                     shift and go to state 23
    varOps                         shift and go to state 11
    loop                           shift and go to state 27
    func                           shift and go to state 16
    funcInt                        shift and go to state 5
    empty                          shift and go to state 26
    if                             shift and go to state 8

state 5

    (62) funcReturn -> funcInt .

    ]               reduce using rule 62 (funcReturn -> funcInt .)
    +               reduce using rule 62 (funcReturn -> funcInt .)
    -               reduce using rule 62 (funcReturn -> funcInt .)
    *               reduce using rule 62 (funcReturn -> funcInt .)
    /               reduce using rule 62 (funcReturn -> funcInt .)
    %               reduce using rule 62 (funcReturn -> funcInt .)
    ^               reduce using rule 62 (funcReturn -> funcInt .)
    ?               reduce using rule 62 (funcReturn -> funcInt .)
    AND             reduce using rule 62 (funcReturn -> funcInt .)
    OR              reduce using rule 62 (funcReturn -> funcInt .)
    EQEQ            reduce using rule 62 (funcReturn -> funcInt .)
    DISTINTO        reduce using rule 62 (funcReturn -> funcInt .)
    >               reduce using rule 62 (funcReturn -> funcInt .)
    <               reduce using rule 62 (funcReturn -> funcInt .)
    ;               reduce using rule 62 (funcReturn -> funcInt .)
    )               reduce using rule 62 (funcReturn -> funcInt .)
    ,               reduce using rule 62 (funcReturn -> funcInt .)
    :               reduce using rule 62 (funcReturn -> funcInt .)
    }               reduce using rule 62 (funcReturn -> funcInt .)


state 6

    (10) loop -> WHILE . ( varExpresion ) bloque

    (               shift and go to state 33


state 7

    (69) funcVoid -> PRINT . ( varExpresion )

    (               shift and go to state 34


state 8

    (8) ctrl -> if .

    RETURN          reduce using rule 8 (ctrl -> if .)
    +               reduce using rule 8 (ctrl -> if .)
    -               reduce using rule 8 (ctrl -> if .)
    ID              reduce using rule 8 (ctrl -> if .)
    IF              reduce using rule 8 (ctrl -> if .)
    WHILE           reduce using rule 8 (ctrl -> if .)
    DO              reduce using rule 8 (ctrl -> if .)
    FOR             reduce using rule 8 (ctrl -> if .)
    PRINT           reduce using rule 8 (ctrl -> if .)
    MULTIESCALAR    reduce using rule 8 (ctrl -> if .)
    LENGTH          reduce using rule 8 (ctrl -> if .)
    CAPITALIZAR     reduce using rule 8 (ctrl -> if .)
    COLINEALES      reduce using rule 8 (ctrl -> if .)
    $end            reduce using rule 8 (ctrl -> if .)
    }               reduce using rule 8 (ctrl -> if .)


state 9

    (1) g -> sentencia . g
    (1) g -> . sentencia g
    (2) g -> . ctrl g
    (3) g -> . empty
    (4) sentencia -> . varOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (8) ctrl -> . if
    (9) ctrl -> . loop
    (72) empty -> .
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (60) func -> . funcReturn
    (61) func -> . funcVoid
    (73) varAsig -> . ID MENOSEQ varAsig
    (74) varAsig -> . ID MASEQ varAsig
    (75) varAsig -> . ID MULEQ varAsig
    (76) varAsig -> . ID DIVEQ varAsig
    (77) varAsig -> . ID = varAsig
    (78) varAsig -> . ID MASEQ varExpresion
    (79) varAsig -> . ID MENOSEQ varExpresion
    (80) varAsig -> . ID MULEQ varExpresion
    (81) varAsig -> . ID DIVEQ varExpresion
    (82) varAsig -> . ID = varExpresion
    (13) if -> . IF ( varExpresion ) THEN bloque else
    (10) loop -> . WHILE ( varExpresion ) bloque
    (11) loop -> . DO bloque WHILE ( varExpresion ) ;
    (12) loop -> . FOR ( varExpresion ; varExpresion ; varOps ) bloque
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (69) funcVoid -> . PRINT ( varExpresion )
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    RETURN          shift and go to state 2
    $end            reduce using rule 72 (empty -> .)
    }               reduce using rule 72 (empty -> .)
    +               shift and go to state 10
    -               shift and go to state 12
    ID              shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 6
    DO              shift and go to state 1
    FOR             shift and go to state 15
    PRINT           shift and go to state 7
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    varAsig                        shift and go to state 19
    sentencia                      shift and go to state 9
    funcString                     shift and go to state 21
    funcBool                       shift and go to state 3
    g                              shift and go to state 35
    ctrl                           shift and go to state 4
    funcVoid                       shift and go to state 13
    funcReturn                     shift and go to state 23
    varOps                         shift and go to state 11
    loop                           shift and go to state 27
    func                           shift and go to state 16
    funcInt                        shift and go to state 5
    empty                          shift and go to state 26
    if                             shift and go to state 8

state 10

    (56) varOps -> + . + ID

    +               shift and go to state 36


state 11

    (4) sentencia -> varOps . ;

    ;               shift and go to state 37


state 12

    (57) varOps -> - . - ID

    -               shift and go to state 38


state 13

    (61) func -> funcVoid .

    ;               reduce using rule 61 (func -> funcVoid .)


state 14

    (68) funcBool -> COLINEALES . ( varExpresion , varExpresion )

    (               shift and go to state 39


state 15

    (12) loop -> FOR . ( varExpresion ; varExpresion ; varOps ) bloque

    (               shift and go to state 40


state 16

    (5) sentencia -> func . ;

    ;               shift and go to state 41


state 17

    (58) varOps -> ID . + +
    (59) varOps -> ID . - -
    (73) varAsig -> ID . MENOSEQ varAsig
    (74) varAsig -> ID . MASEQ varAsig
    (75) varAsig -> ID . MULEQ varAsig
    (76) varAsig -> ID . DIVEQ varAsig
    (77) varAsig -> ID . = varAsig
    (78) varAsig -> ID . MASEQ varExpresion
    (79) varAsig -> ID . MENOSEQ varExpresion
    (80) varAsig -> ID . MULEQ varExpresion
    (81) varAsig -> ID . DIVEQ varExpresion
    (82) varAsig -> ID . = varExpresion

    +               shift and go to state 44
    -               shift and go to state 45
    MENOSEQ         shift and go to state 42
    MASEQ           shift and go to state 43
    MULEQ           shift and go to state 46
    DIVEQ           shift and go to state 48
    =               shift and go to state 47


state 18

    (13) if -> IF . ( varExpresion ) THEN bloque else

    (               shift and go to state 49


state 19

    (6) sentencia -> varAsig . ;

    ;               shift and go to state 50


state 20

    (0) S' -> g .



state 21

    (63) funcReturn -> funcString .

    ]               reduce using rule 63 (funcReturn -> funcString .)
    +               reduce using rule 63 (funcReturn -> funcString .)
    -               reduce using rule 63 (funcReturn -> funcString .)
    *               reduce using rule 63 (funcReturn -> funcString .)
    /               reduce using rule 63 (funcReturn -> funcString .)
    %               reduce using rule 63 (funcReturn -> funcString .)
    ^               reduce using rule 63 (funcReturn -> funcString .)
    ?               reduce using rule 63 (funcReturn -> funcString .)
    AND             reduce using rule 63 (funcReturn -> funcString .)
    OR              reduce using rule 63 (funcReturn -> funcString .)
    EQEQ            reduce using rule 63 (funcReturn -> funcString .)
    DISTINTO        reduce using rule 63 (funcReturn -> funcString .)
    >               reduce using rule 63 (funcReturn -> funcString .)
    <               reduce using rule 63 (funcReturn -> funcString .)
    ;               reduce using rule 63 (funcReturn -> funcString .)
    )               reduce using rule 63 (funcReturn -> funcString .)
    ,               reduce using rule 63 (funcReturn -> funcString .)
    :               reduce using rule 63 (funcReturn -> funcString .)
    }               reduce using rule 63 (funcReturn -> funcString .)


state 22

    (65) funcInt -> MULTIESCALAR . ( varExpresion , varExpresion , param )

    (               shift and go to state 51


state 23

    (60) func -> funcReturn .

    ;               reduce using rule 60 (func -> funcReturn .)


state 24

    (67) funcString -> CAPITALIZAR . ( varExpresion )

    (               shift and go to state 52


state 25

    (66) funcInt -> LENGTH . ( varExpresion )

    (               shift and go to state 53


state 26

    (3) g -> empty .

    $end            reduce using rule 3 (g -> empty .)
    }               reduce using rule 3 (g -> empty .)


state 27

    (9) ctrl -> loop .

    RETURN          reduce using rule 9 (ctrl -> loop .)
    +               reduce using rule 9 (ctrl -> loop .)
    -               reduce using rule 9 (ctrl -> loop .)
    ID              reduce using rule 9 (ctrl -> loop .)
    IF              reduce using rule 9 (ctrl -> loop .)
    WHILE           reduce using rule 9 (ctrl -> loop .)
    DO              reduce using rule 9 (ctrl -> loop .)
    FOR             reduce using rule 9 (ctrl -> loop .)
    PRINT           reduce using rule 9 (ctrl -> loop .)
    MULTIESCALAR    reduce using rule 9 (ctrl -> loop .)
    LENGTH          reduce using rule 9 (ctrl -> loop .)
    CAPITALIZAR     reduce using rule 9 (ctrl -> loop .)
    COLINEALES      reduce using rule 9 (ctrl -> loop .)
    $end            reduce using rule 9 (ctrl -> loop .)
    }               reduce using rule 9 (ctrl -> loop .)


state 28

    (11) loop -> DO bloque . WHILE ( varExpresion ) ;

    WHILE           shift and go to state 54


state 29

    (16) bloque -> sentencia .

    RETURN          reduce using rule 16 (bloque -> sentencia .)
    +               reduce using rule 16 (bloque -> sentencia .)
    -               reduce using rule 16 (bloque -> sentencia .)
    ID              reduce using rule 16 (bloque -> sentencia .)
    IF              reduce using rule 16 (bloque -> sentencia .)
    WHILE           reduce using rule 16 (bloque -> sentencia .)
    DO              reduce using rule 16 (bloque -> sentencia .)
    FOR             reduce using rule 16 (bloque -> sentencia .)
    PRINT           reduce using rule 16 (bloque -> sentencia .)
    MULTIESCALAR    reduce using rule 16 (bloque -> sentencia .)
    LENGTH          reduce using rule 16 (bloque -> sentencia .)
    CAPITALIZAR     reduce using rule 16 (bloque -> sentencia .)
    COLINEALES      reduce using rule 16 (bloque -> sentencia .)
    $end            reduce using rule 16 (bloque -> sentencia .)
    }               reduce using rule 16 (bloque -> sentencia .)
    ELSE            reduce using rule 16 (bloque -> sentencia .)


state 30

    (17) bloque -> { . g }
    (1) g -> . sentencia g
    (2) g -> . ctrl g
    (3) g -> . empty
    (4) sentencia -> . varOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (8) ctrl -> . if
    (9) ctrl -> . loop
    (72) empty -> .
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (60) func -> . funcReturn
    (61) func -> . funcVoid
    (73) varAsig -> . ID MENOSEQ varAsig
    (74) varAsig -> . ID MASEQ varAsig
    (75) varAsig -> . ID MULEQ varAsig
    (76) varAsig -> . ID DIVEQ varAsig
    (77) varAsig -> . ID = varAsig
    (78) varAsig -> . ID MASEQ varExpresion
    (79) varAsig -> . ID MENOSEQ varExpresion
    (80) varAsig -> . ID MULEQ varExpresion
    (81) varAsig -> . ID DIVEQ varExpresion
    (82) varAsig -> . ID = varExpresion
    (13) if -> . IF ( varExpresion ) THEN bloque else
    (10) loop -> . WHILE ( varExpresion ) bloque
    (11) loop -> . DO bloque WHILE ( varExpresion ) ;
    (12) loop -> . FOR ( varExpresion ; varExpresion ; varOps ) bloque
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (69) funcVoid -> . PRINT ( varExpresion )
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    RETURN          shift and go to state 2
    }               reduce using rule 72 (empty -> .)
    +               shift and go to state 10
    -               shift and go to state 12
    ID              shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 6
    DO              shift and go to state 1
    FOR             shift and go to state 15
    PRINT           shift and go to state 7
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    varAsig                        shift and go to state 19
    sentencia                      shift and go to state 9
    funcString                     shift and go to state 21
    funcBool                       shift and go to state 3
    g                              shift and go to state 55
    ctrl                           shift and go to state 4
    funcVoid                       shift and go to state 13
    funcReturn                     shift and go to state 23
    varOps                         shift and go to state 11
    loop                           shift and go to state 27
    func                           shift and go to state 16
    funcInt                        shift and go to state 5
    empty                          shift and go to state 26
    if                             shift and go to state 8

state 31

    (7) sentencia -> RETURN ; .

    RETURN          reduce using rule 7 (sentencia -> RETURN ; .)
    +               reduce using rule 7 (sentencia -> RETURN ; .)
    -               reduce using rule 7 (sentencia -> RETURN ; .)
    ID              reduce using rule 7 (sentencia -> RETURN ; .)
    IF              reduce using rule 7 (sentencia -> RETURN ; .)
    WHILE           reduce using rule 7 (sentencia -> RETURN ; .)
    DO              reduce using rule 7 (sentencia -> RETURN ; .)
    FOR             reduce using rule 7 (sentencia -> RETURN ; .)
    PRINT           reduce using rule 7 (sentencia -> RETURN ; .)
    MULTIESCALAR    reduce using rule 7 (sentencia -> RETURN ; .)
    LENGTH          reduce using rule 7 (sentencia -> RETURN ; .)
    CAPITALIZAR     reduce using rule 7 (sentencia -> RETURN ; .)
    COLINEALES      reduce using rule 7 (sentencia -> RETURN ; .)
    $end            reduce using rule 7 (sentencia -> RETURN ; .)
    }               reduce using rule 7 (sentencia -> RETURN ; .)
    ELSE            reduce using rule 7 (sentencia -> RETURN ; .)


state 32

    (2) g -> ctrl g .

    $end            reduce using rule 2 (g -> ctrl g .)
    }               reduce using rule 2 (g -> ctrl g .)


state 33

    (10) loop -> WHILE ( . varExpresion ) bloque
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    (               shift and go to state 58
    NOT             shift and go to state 69
    ID              shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 59
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 34

    (69) funcVoid -> PRINT ( . varExpresion )
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    (               shift and go to state 58
    NOT             shift and go to state 69
    ID              shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 71
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 35

    (1) g -> sentencia g .

    $end            reduce using rule 1 (g -> sentencia g .)
    }               reduce using rule 1 (g -> sentencia g .)


state 36

    (56) varOps -> + + . ID

    ID              shift and go to state 72


state 37

    (4) sentencia -> varOps ; .

    RETURN          reduce using rule 4 (sentencia -> varOps ; .)
    +               reduce using rule 4 (sentencia -> varOps ; .)
    -               reduce using rule 4 (sentencia -> varOps ; .)
    ID              reduce using rule 4 (sentencia -> varOps ; .)
    IF              reduce using rule 4 (sentencia -> varOps ; .)
    WHILE           reduce using rule 4 (sentencia -> varOps ; .)
    DO              reduce using rule 4 (sentencia -> varOps ; .)
    FOR             reduce using rule 4 (sentencia -> varOps ; .)
    PRINT           reduce using rule 4 (sentencia -> varOps ; .)
    MULTIESCALAR    reduce using rule 4 (sentencia -> varOps ; .)
    LENGTH          reduce using rule 4 (sentencia -> varOps ; .)
    CAPITALIZAR     reduce using rule 4 (sentencia -> varOps ; .)
    COLINEALES      reduce using rule 4 (sentencia -> varOps ; .)
    $end            reduce using rule 4 (sentencia -> varOps ; .)
    }               reduce using rule 4 (sentencia -> varOps ; .)
    ELSE            reduce using rule 4 (sentencia -> varOps ; .)


state 38

    (57) varOps -> - - . ID

    ID              shift and go to state 73


state 39

    (68) funcBool -> COLINEALES ( . varExpresion , varExpresion )
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    (               shift and go to state 58
    NOT             shift and go to state 69
    ID              shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 74
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 40

    (12) loop -> FOR ( . varExpresion ; varExpresion ; varOps ) bloque
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    (               shift and go to state 58
    NOT             shift and go to state 69
    ID              shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 75
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 41

    (5) sentencia -> func ; .

    RETURN          reduce using rule 5 (sentencia -> func ; .)
    +               reduce using rule 5 (sentencia -> func ; .)
    -               reduce using rule 5 (sentencia -> func ; .)
    ID              reduce using rule 5 (sentencia -> func ; .)
    IF              reduce using rule 5 (sentencia -> func ; .)
    WHILE           reduce using rule 5 (sentencia -> func ; .)
    DO              reduce using rule 5 (sentencia -> func ; .)
    FOR             reduce using rule 5 (sentencia -> func ; .)
    PRINT           reduce using rule 5 (sentencia -> func ; .)
    MULTIESCALAR    reduce using rule 5 (sentencia -> func ; .)
    LENGTH          reduce using rule 5 (sentencia -> func ; .)
    CAPITALIZAR     reduce using rule 5 (sentencia -> func ; .)
    COLINEALES      reduce using rule 5 (sentencia -> func ; .)
    $end            reduce using rule 5 (sentencia -> func ; .)
    }               reduce using rule 5 (sentencia -> func ; .)
    ELSE            reduce using rule 5 (sentencia -> func ; .)


state 42

    (73) varAsig -> ID MENOSEQ . varAsig
    (79) varAsig -> ID MENOSEQ . varExpresion
    (73) varAsig -> . ID MENOSEQ varAsig
    (74) varAsig -> . ID MASEQ varAsig
    (75) varAsig -> . ID MULEQ varAsig
    (76) varAsig -> . ID DIVEQ varAsig
    (77) varAsig -> . ID = varAsig
    (78) varAsig -> . ID MASEQ varExpresion
    (79) varAsig -> . ID MENOSEQ varExpresion
    (80) varAsig -> . ID MULEQ varExpresion
    (81) varAsig -> . ID DIVEQ varExpresion
    (82) varAsig -> . ID = varExpresion
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    ID              shift and go to state 77
    (               shift and go to state 58
    NOT             shift and go to state 69
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    varAsig                        shift and go to state 78
    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 76
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 43

    (74) varAsig -> ID MASEQ . varAsig
    (78) varAsig -> ID MASEQ . varExpresion
    (73) varAsig -> . ID MENOSEQ varAsig
    (74) varAsig -> . ID MASEQ varAsig
    (75) varAsig -> . ID MULEQ varAsig
    (76) varAsig -> . ID DIVEQ varAsig
    (77) varAsig -> . ID = varAsig
    (78) varAsig -> . ID MASEQ varExpresion
    (79) varAsig -> . ID MENOSEQ varExpresion
    (80) varAsig -> . ID MULEQ varExpresion
    (81) varAsig -> . ID DIVEQ varExpresion
    (82) varAsig -> . ID = varExpresion
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    ID              shift and go to state 77
    (               shift and go to state 58
    NOT             shift and go to state 69
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    varAsig                        shift and go to state 80
    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 79
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 44

    (58) varOps -> ID + . +

    +               shift and go to state 81


state 45

    (59) varOps -> ID - . -

    -               shift and go to state 82


state 46

    (75) varAsig -> ID MULEQ . varAsig
    (80) varAsig -> ID MULEQ . varExpresion
    (73) varAsig -> . ID MENOSEQ varAsig
    (74) varAsig -> . ID MASEQ varAsig
    (75) varAsig -> . ID MULEQ varAsig
    (76) varAsig -> . ID DIVEQ varAsig
    (77) varAsig -> . ID = varAsig
    (78) varAsig -> . ID MASEQ varExpresion
    (79) varAsig -> . ID MENOSEQ varExpresion
    (80) varAsig -> . ID MULEQ varExpresion
    (81) varAsig -> . ID DIVEQ varExpresion
    (82) varAsig -> . ID = varExpresion
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    ID              shift and go to state 77
    (               shift and go to state 58
    NOT             shift and go to state 69
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    varAsig                        shift and go to state 84
    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 83
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 47

    (77) varAsig -> ID = . varAsig
    (82) varAsig -> ID = . varExpresion
    (73) varAsig -> . ID MENOSEQ varAsig
    (74) varAsig -> . ID MASEQ varAsig
    (75) varAsig -> . ID MULEQ varAsig
    (76) varAsig -> . ID DIVEQ varAsig
    (77) varAsig -> . ID = varAsig
    (78) varAsig -> . ID MASEQ varExpresion
    (79) varAsig -> . ID MENOSEQ varExpresion
    (80) varAsig -> . ID MULEQ varExpresion
    (81) varAsig -> . ID DIVEQ varExpresion
    (82) varAsig -> . ID = varExpresion
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    ID              shift and go to state 77
    (               shift and go to state 58
    NOT             shift and go to state 69
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    varAsig                        shift and go to state 86
    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 85
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 48

    (76) varAsig -> ID DIVEQ . varAsig
    (81) varAsig -> ID DIVEQ . varExpresion
    (73) varAsig -> . ID MENOSEQ varAsig
    (74) varAsig -> . ID MASEQ varAsig
    (75) varAsig -> . ID MULEQ varAsig
    (76) varAsig -> . ID DIVEQ varAsig
    (77) varAsig -> . ID = varAsig
    (78) varAsig -> . ID MASEQ varExpresion
    (79) varAsig -> . ID MENOSEQ varExpresion
    (80) varAsig -> . ID MULEQ varExpresion
    (81) varAsig -> . ID DIVEQ varExpresion
    (82) varAsig -> . ID = varExpresion
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    ID              shift and go to state 77
    (               shift and go to state 58
    NOT             shift and go to state 69
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    varAsig                        shift and go to state 88
    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 87
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 49

    (13) if -> IF ( . varExpresion ) THEN bloque else
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    (               shift and go to state 58
    NOT             shift and go to state 69
    ID              shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 89
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 50

    (6) sentencia -> varAsig ; .

    RETURN          reduce using rule 6 (sentencia -> varAsig ; .)
    +               reduce using rule 6 (sentencia -> varAsig ; .)
    -               reduce using rule 6 (sentencia -> varAsig ; .)
    ID              reduce using rule 6 (sentencia -> varAsig ; .)
    IF              reduce using rule 6 (sentencia -> varAsig ; .)
    WHILE           reduce using rule 6 (sentencia -> varAsig ; .)
    DO              reduce using rule 6 (sentencia -> varAsig ; .)
    FOR             reduce using rule 6 (sentencia -> varAsig ; .)
    PRINT           reduce using rule 6 (sentencia -> varAsig ; .)
    MULTIESCALAR    reduce using rule 6 (sentencia -> varAsig ; .)
    LENGTH          reduce using rule 6 (sentencia -> varAsig ; .)
    CAPITALIZAR     reduce using rule 6 (sentencia -> varAsig ; .)
    COLINEALES      reduce using rule 6 (sentencia -> varAsig ; .)
    $end            reduce using rule 6 (sentencia -> varAsig ; .)
    }               reduce using rule 6 (sentencia -> varAsig ; .)
    ELSE            reduce using rule 6 (sentencia -> varAsig ; .)


state 51

    (65) funcInt -> MULTIESCALAR ( . varExpresion , varExpresion , param )
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    (               shift and go to state 58
    NOT             shift and go to state 69
    ID              shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 90
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 52

    (67) funcString -> CAPITALIZAR ( . varExpresion )
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    (               shift and go to state 58
    NOT             shift and go to state 69
    ID              shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 91
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 53

    (66) funcInt -> LENGTH ( . varExpresion )
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    (               shift and go to state 58
    NOT             shift and go to state 69
    ID              shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 92
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 54

    (11) loop -> DO bloque WHILE . ( varExpresion ) ;

    (               shift and go to state 93


state 55

    (17) bloque -> { g . }

    }               shift and go to state 94


state 56

    (37) varExpresion -> varOps .

    +               reduce using rule 37 (varExpresion -> varOps .)
    -               reduce using rule 37 (varExpresion -> varOps .)
    *               reduce using rule 37 (varExpresion -> varOps .)
    /               reduce using rule 37 (varExpresion -> varOps .)
    %               reduce using rule 37 (varExpresion -> varOps .)
    ^               reduce using rule 37 (varExpresion -> varOps .)
    ?               reduce using rule 37 (varExpresion -> varOps .)
    AND             reduce using rule 37 (varExpresion -> varOps .)
    OR              reduce using rule 37 (varExpresion -> varOps .)
    EQEQ            reduce using rule 37 (varExpresion -> varOps .)
    DISTINTO        reduce using rule 37 (varExpresion -> varOps .)
    >               reduce using rule 37 (varExpresion -> varOps .)
    <               reduce using rule 37 (varExpresion -> varOps .)
    )               reduce using rule 37 (varExpresion -> varOps .)
    ,               reduce using rule 37 (varExpresion -> varOps .)
    ;               reduce using rule 37 (varExpresion -> varOps .)
    ]               reduce using rule 37 (varExpresion -> varOps .)
    :               reduce using rule 37 (varExpresion -> varOps .)
    }               reduce using rule 37 (varExpresion -> varOps .)


state 57

    (35) varExpresion -> tipos .

    +               reduce using rule 35 (varExpresion -> tipos .)
    -               reduce using rule 35 (varExpresion -> tipos .)
    *               reduce using rule 35 (varExpresion -> tipos .)
    /               reduce using rule 35 (varExpresion -> tipos .)
    %               reduce using rule 35 (varExpresion -> tipos .)
    ^               reduce using rule 35 (varExpresion -> tipos .)
    ?               reduce using rule 35 (varExpresion -> tipos .)
    AND             reduce using rule 35 (varExpresion -> tipos .)
    OR              reduce using rule 35 (varExpresion -> tipos .)
    EQEQ            reduce using rule 35 (varExpresion -> tipos .)
    DISTINTO        reduce using rule 35 (varExpresion -> tipos .)
    >               reduce using rule 35 (varExpresion -> tipos .)
    <               reduce using rule 35 (varExpresion -> tipos .)
    )               reduce using rule 35 (varExpresion -> tipos .)
    ,               reduce using rule 35 (varExpresion -> tipos .)
    ;               reduce using rule 35 (varExpresion -> tipos .)
    ]               reduce using rule 35 (varExpresion -> tipos .)
    :               reduce using rule 35 (varExpresion -> tipos .)
    }               reduce using rule 35 (varExpresion -> tipos .)


state 58

    (24) varExpresion -> ( . - ( varExpresion ) )
    (25) varExpresion -> ( . + ( varExpresion ) )
    (34) varExpresion -> ( . varExpresion )
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    -               shift and go to state 96
    +               shift and go to state 95
    (               shift and go to state 58
    NOT             shift and go to state 69
    ID              shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 97
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 59

    (10) loop -> WHILE ( varExpresion . ) bloque
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

    )               shift and go to state 108
    +               shift and go to state 103
    -               shift and go to state 105
    *               shift and go to state 104
    /               shift and go to state 106
    %               shift and go to state 100
    ^               shift and go to state 111
    ?               shift and go to state 110
    AND             shift and go to state 98
    OR              shift and go to state 109
    EQEQ            shift and go to state 99
    DISTINTO        shift and go to state 101
    >               shift and go to state 102
    <               shift and go to state 107


state 60

    (38) varExpresion -> vec .

    +               reduce using rule 38 (varExpresion -> vec .)
    -               reduce using rule 38 (varExpresion -> vec .)
    *               reduce using rule 38 (varExpresion -> vec .)
    /               reduce using rule 38 (varExpresion -> vec .)
    %               reduce using rule 38 (varExpresion -> vec .)
    ^               reduce using rule 38 (varExpresion -> vec .)
    ?               reduce using rule 38 (varExpresion -> vec .)
    AND             reduce using rule 38 (varExpresion -> vec .)
    OR              reduce using rule 38 (varExpresion -> vec .)
    EQEQ            reduce using rule 38 (varExpresion -> vec .)
    DISTINTO        reduce using rule 38 (varExpresion -> vec .)
    >               reduce using rule 38 (varExpresion -> vec .)
    <               reduce using rule 38 (varExpresion -> vec .)
    )               reduce using rule 38 (varExpresion -> vec .)
    ,               reduce using rule 38 (varExpresion -> vec .)
    ;               reduce using rule 38 (varExpresion -> vec .)
    ]               reduce using rule 38 (varExpresion -> vec .)
    :               reduce using rule 38 (varExpresion -> vec .)
    }               reduce using rule 38 (varExpresion -> vec .)


state 61

    (43) tipos -> STRING .

    +               reduce using rule 43 (tipos -> STRING .)
    -               reduce using rule 43 (tipos -> STRING .)
    *               reduce using rule 43 (tipos -> STRING .)
    /               reduce using rule 43 (tipos -> STRING .)
    %               reduce using rule 43 (tipos -> STRING .)
    ^               reduce using rule 43 (tipos -> STRING .)
    ?               reduce using rule 43 (tipos -> STRING .)
    AND             reduce using rule 43 (tipos -> STRING .)
    OR              reduce using rule 43 (tipos -> STRING .)
    EQEQ            reduce using rule 43 (tipos -> STRING .)
    DISTINTO        reduce using rule 43 (tipos -> STRING .)
    >               reduce using rule 43 (tipos -> STRING .)
    <               reduce using rule 43 (tipos -> STRING .)
    )               reduce using rule 43 (tipos -> STRING .)
    ,               reduce using rule 43 (tipos -> STRING .)
    ;               reduce using rule 43 (tipos -> STRING .)
    ]               reduce using rule 43 (tipos -> STRING .)
    :               reduce using rule 43 (tipos -> STRING .)
    }               reduce using rule 43 (tipos -> STRING .)


state 62

    (46) vec -> [ . elem ]
    (48) elem -> . varExpresion , elem
    (49) elem -> . varExpresion
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    (               shift and go to state 58
    NOT             shift and go to state 69
    ID              shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 112
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    elem                           shift and go to state 113
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 63

    (39) varExpresion -> ID . m
    (45) tipos -> ID .
    (58) varOps -> ID . + +
    (59) varOps -> ID . - -
    (47) vec -> ID . m
    (53) reg -> ID . . ID
    (50) m -> . [ varExpresion ]
    (51) m -> . m [ varExpresion ]

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    *               reduce using rule 45 (tipos -> ID .)
    /               reduce using rule 45 (tipos -> ID .)
    %               reduce using rule 45 (tipos -> ID .)
    ^               reduce using rule 45 (tipos -> ID .)
    ?               reduce using rule 45 (tipos -> ID .)
    AND             reduce using rule 45 (tipos -> ID .)
    OR              reduce using rule 45 (tipos -> ID .)
    EQEQ            reduce using rule 45 (tipos -> ID .)
    DISTINTO        reduce using rule 45 (tipos -> ID .)
    >               reduce using rule 45 (tipos -> ID .)
    <               reduce using rule 45 (tipos -> ID .)
    )               reduce using rule 45 (tipos -> ID .)
    ,               reduce using rule 45 (tipos -> ID .)
    ;               reduce using rule 45 (tipos -> ID .)
    ]               reduce using rule 45 (tipos -> ID .)
    :               reduce using rule 45 (tipos -> ID .)
    }               reduce using rule 45 (tipos -> ID .)
    +               shift and go to state 44
    -               shift and go to state 45
    .               shift and go to state 115
    [               shift and go to state 116

  ! +               [ reduce using rule 45 (tipos -> ID .) ]
  ! -               [ reduce using rule 45 (tipos -> ID .) ]

    m                              shift and go to state 114

state 64

    (41) tipos -> INT .

    +               reduce using rule 41 (tipos -> INT .)
    -               reduce using rule 41 (tipos -> INT .)
    *               reduce using rule 41 (tipos -> INT .)
    /               reduce using rule 41 (tipos -> INT .)
    %               reduce using rule 41 (tipos -> INT .)
    ^               reduce using rule 41 (tipos -> INT .)
    ?               reduce using rule 41 (tipos -> INT .)
    AND             reduce using rule 41 (tipos -> INT .)
    OR              reduce using rule 41 (tipos -> INT .)
    EQEQ            reduce using rule 41 (tipos -> INT .)
    DISTINTO        reduce using rule 41 (tipos -> INT .)
    >               reduce using rule 41 (tipos -> INT .)
    <               reduce using rule 41 (tipos -> INT .)
    )               reduce using rule 41 (tipos -> INT .)
    ,               reduce using rule 41 (tipos -> INT .)
    ;               reduce using rule 41 (tipos -> INT .)
    ]               reduce using rule 41 (tipos -> INT .)
    :               reduce using rule 41 (tipos -> INT .)
    }               reduce using rule 41 (tipos -> INT .)


state 65

    (36) varExpresion -> funcReturn .

    +               reduce using rule 36 (varExpresion -> funcReturn .)
    -               reduce using rule 36 (varExpresion -> funcReturn .)
    *               reduce using rule 36 (varExpresion -> funcReturn .)
    /               reduce using rule 36 (varExpresion -> funcReturn .)
    %               reduce using rule 36 (varExpresion -> funcReturn .)
    ^               reduce using rule 36 (varExpresion -> funcReturn .)
    ?               reduce using rule 36 (varExpresion -> funcReturn .)
    AND             reduce using rule 36 (varExpresion -> funcReturn .)
    OR              reduce using rule 36 (varExpresion -> funcReturn .)
    EQEQ            reduce using rule 36 (varExpresion -> funcReturn .)
    DISTINTO        reduce using rule 36 (varExpresion -> funcReturn .)
    >               reduce using rule 36 (varExpresion -> funcReturn .)
    <               reduce using rule 36 (varExpresion -> funcReturn .)
    )               reduce using rule 36 (varExpresion -> funcReturn .)
    ,               reduce using rule 36 (varExpresion -> funcReturn .)
    ;               reduce using rule 36 (varExpresion -> funcReturn .)
    ]               reduce using rule 36 (varExpresion -> funcReturn .)
    :               reduce using rule 36 (varExpresion -> funcReturn .)
    }               reduce using rule 36 (varExpresion -> funcReturn .)


state 66

    (42) tipos -> FLOAT .

    +               reduce using rule 42 (tipos -> FLOAT .)
    -               reduce using rule 42 (tipos -> FLOAT .)
    *               reduce using rule 42 (tipos -> FLOAT .)
    /               reduce using rule 42 (tipos -> FLOAT .)
    %               reduce using rule 42 (tipos -> FLOAT .)
    ^               reduce using rule 42 (tipos -> FLOAT .)
    ?               reduce using rule 42 (tipos -> FLOAT .)
    AND             reduce using rule 42 (tipos -> FLOAT .)
    OR              reduce using rule 42 (tipos -> FLOAT .)
    EQEQ            reduce using rule 42 (tipos -> FLOAT .)
    DISTINTO        reduce using rule 42 (tipos -> FLOAT .)
    >               reduce using rule 42 (tipos -> FLOAT .)
    <               reduce using rule 42 (tipos -> FLOAT .)
    )               reduce using rule 42 (tipos -> FLOAT .)
    ,               reduce using rule 42 (tipos -> FLOAT .)
    ;               reduce using rule 42 (tipos -> FLOAT .)
    ]               reduce using rule 42 (tipos -> FLOAT .)
    :               reduce using rule 42 (tipos -> FLOAT .)
    }               reduce using rule 42 (tipos -> FLOAT .)


state 67

    (40) varExpresion -> reg .

    +               reduce using rule 40 (varExpresion -> reg .)
    -               reduce using rule 40 (varExpresion -> reg .)
    *               reduce using rule 40 (varExpresion -> reg .)
    /               reduce using rule 40 (varExpresion -> reg .)
    %               reduce using rule 40 (varExpresion -> reg .)
    ^               reduce using rule 40 (varExpresion -> reg .)
    ?               reduce using rule 40 (varExpresion -> reg .)
    AND             reduce using rule 40 (varExpresion -> reg .)
    OR              reduce using rule 40 (varExpresion -> reg .)
    EQEQ            reduce using rule 40 (varExpresion -> reg .)
    DISTINTO        reduce using rule 40 (varExpresion -> reg .)
    >               reduce using rule 40 (varExpresion -> reg .)
    <               reduce using rule 40 (varExpresion -> reg .)
    )               reduce using rule 40 (varExpresion -> reg .)
    ,               reduce using rule 40 (varExpresion -> reg .)
    ;               reduce using rule 40 (varExpresion -> reg .)
    ]               reduce using rule 40 (varExpresion -> reg .)
    :               reduce using rule 40 (varExpresion -> reg .)
    }               reduce using rule 40 (varExpresion -> reg .)


state 68

    (44) tipos -> BOOL .

    +               reduce using rule 44 (tipos -> BOOL .)
    -               reduce using rule 44 (tipos -> BOOL .)
    *               reduce using rule 44 (tipos -> BOOL .)
    /               reduce using rule 44 (tipos -> BOOL .)
    %               reduce using rule 44 (tipos -> BOOL .)
    ^               reduce using rule 44 (tipos -> BOOL .)
    ?               reduce using rule 44 (tipos -> BOOL .)
    AND             reduce using rule 44 (tipos -> BOOL .)
    OR              reduce using rule 44 (tipos -> BOOL .)
    EQEQ            reduce using rule 44 (tipos -> BOOL .)
    DISTINTO        reduce using rule 44 (tipos -> BOOL .)
    >               reduce using rule 44 (tipos -> BOOL .)
    <               reduce using rule 44 (tipos -> BOOL .)
    )               reduce using rule 44 (tipos -> BOOL .)
    ,               reduce using rule 44 (tipos -> BOOL .)
    ;               reduce using rule 44 (tipos -> BOOL .)
    ]               reduce using rule 44 (tipos -> BOOL .)
    :               reduce using rule 44 (tipos -> BOOL .)
    }               reduce using rule 44 (tipos -> BOOL .)


state 69

    (28) varExpresion -> NOT . varExpresion
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    (               shift and go to state 58
    NOT             shift and go to state 69
    ID              shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 117
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 70

    (52) reg -> { . campos }
    (54) campos -> . ID : varExpresion , campos
    (55) campos -> . ID : varExpresion

    ID              shift and go to state 119

    campos                         shift and go to state 118

state 71

    (69) funcVoid -> PRINT ( varExpresion . )
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

    )               shift and go to state 120
    +               shift and go to state 103
    -               shift and go to state 105
    *               shift and go to state 104
    /               shift and go to state 106
    %               shift and go to state 100
    ^               shift and go to state 111
    ?               shift and go to state 110
    AND             shift and go to state 98
    OR              shift and go to state 109
    EQEQ            shift and go to state 99
    DISTINTO        shift and go to state 101
    >               shift and go to state 102
    <               shift and go to state 107


state 72

    (56) varOps -> + + ID .

    +               reduce using rule 56 (varOps -> + + ID .)
    -               reduce using rule 56 (varOps -> + + ID .)
    *               reduce using rule 56 (varOps -> + + ID .)
    /               reduce using rule 56 (varOps -> + + ID .)
    %               reduce using rule 56 (varOps -> + + ID .)
    ^               reduce using rule 56 (varOps -> + + ID .)
    ?               reduce using rule 56 (varOps -> + + ID .)
    AND             reduce using rule 56 (varOps -> + + ID .)
    OR              reduce using rule 56 (varOps -> + + ID .)
    EQEQ            reduce using rule 56 (varOps -> + + ID .)
    DISTINTO        reduce using rule 56 (varOps -> + + ID .)
    >               reduce using rule 56 (varOps -> + + ID .)
    <               reduce using rule 56 (varOps -> + + ID .)
    ;               reduce using rule 56 (varOps -> + + ID .)
    )               reduce using rule 56 (varOps -> + + ID .)
    ,               reduce using rule 56 (varOps -> + + ID .)
    ]               reduce using rule 56 (varOps -> + + ID .)
    :               reduce using rule 56 (varOps -> + + ID .)
    }               reduce using rule 56 (varOps -> + + ID .)


state 73

    (57) varOps -> - - ID .

    +               reduce using rule 57 (varOps -> - - ID .)
    -               reduce using rule 57 (varOps -> - - ID .)
    *               reduce using rule 57 (varOps -> - - ID .)
    /               reduce using rule 57 (varOps -> - - ID .)
    %               reduce using rule 57 (varOps -> - - ID .)
    ^               reduce using rule 57 (varOps -> - - ID .)
    ?               reduce using rule 57 (varOps -> - - ID .)
    AND             reduce using rule 57 (varOps -> - - ID .)
    OR              reduce using rule 57 (varOps -> - - ID .)
    EQEQ            reduce using rule 57 (varOps -> - - ID .)
    DISTINTO        reduce using rule 57 (varOps -> - - ID .)
    >               reduce using rule 57 (varOps -> - - ID .)
    <               reduce using rule 57 (varOps -> - - ID .)
    ;               reduce using rule 57 (varOps -> - - ID .)
    )               reduce using rule 57 (varOps -> - - ID .)
    ,               reduce using rule 57 (varOps -> - - ID .)
    ]               reduce using rule 57 (varOps -> - - ID .)
    :               reduce using rule 57 (varOps -> - - ID .)
    }               reduce using rule 57 (varOps -> - - ID .)


state 74

    (68) funcBool -> COLINEALES ( varExpresion . , varExpresion )
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

    ,               shift and go to state 121
    +               shift and go to state 103
    -               shift and go to state 105
    *               shift and go to state 104
    /               shift and go to state 106
    %               shift and go to state 100
    ^               shift and go to state 111
    ?               shift and go to state 110
    AND             shift and go to state 98
    OR              shift and go to state 109
    EQEQ            shift and go to state 99
    DISTINTO        shift and go to state 101
    >               shift and go to state 102
    <               shift and go to state 107


state 75

    (12) loop -> FOR ( varExpresion . ; varExpresion ; varOps ) bloque
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

    ;               shift and go to state 122
    +               shift and go to state 103
    -               shift and go to state 105
    *               shift and go to state 104
    /               shift and go to state 106
    %               shift and go to state 100
    ^               shift and go to state 111
    ?               shift and go to state 110
    AND             shift and go to state 98
    OR              shift and go to state 109
    EQEQ            shift and go to state 99
    DISTINTO        shift and go to state 101
    >               shift and go to state 102
    <               shift and go to state 107


state 76

    (79) varAsig -> ID MENOSEQ varExpresion .
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

    ;               reduce using rule 79 (varAsig -> ID MENOSEQ varExpresion .)
    +               shift and go to state 103
    -               shift and go to state 105
    *               shift and go to state 104
    /               shift and go to state 106
    %               shift and go to state 100
    ^               shift and go to state 111
    ?               shift and go to state 110
    AND             shift and go to state 98
    OR              shift and go to state 109
    EQEQ            shift and go to state 99
    DISTINTO        shift and go to state 101
    >               shift and go to state 102
    <               shift and go to state 107


state 77

    (73) varAsig -> ID . MENOSEQ varAsig
    (74) varAsig -> ID . MASEQ varAsig
    (75) varAsig -> ID . MULEQ varAsig
    (76) varAsig -> ID . DIVEQ varAsig
    (77) varAsig -> ID . = varAsig
    (78) varAsig -> ID . MASEQ varExpresion
    (79) varAsig -> ID . MENOSEQ varExpresion
    (80) varAsig -> ID . MULEQ varExpresion
    (81) varAsig -> ID . DIVEQ varExpresion
    (82) varAsig -> ID . = varExpresion
    (39) varExpresion -> ID . m
    (45) tipos -> ID .
    (58) varOps -> ID . + +
    (59) varOps -> ID . - -
    (47) vec -> ID . m
    (53) reg -> ID . . ID
    (50) m -> . [ varExpresion ]
    (51) m -> . m [ varExpresion ]

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    MENOSEQ         shift and go to state 42
    MASEQ           shift and go to state 43
    MULEQ           shift and go to state 46
    DIVEQ           shift and go to state 48
    =               shift and go to state 47
    *               reduce using rule 45 (tipos -> ID .)
    /               reduce using rule 45 (tipos -> ID .)
    %               reduce using rule 45 (tipos -> ID .)
    ^               reduce using rule 45 (tipos -> ID .)
    ?               reduce using rule 45 (tipos -> ID .)
    AND             reduce using rule 45 (tipos -> ID .)
    OR              reduce using rule 45 (tipos -> ID .)
    EQEQ            reduce using rule 45 (tipos -> ID .)
    DISTINTO        reduce using rule 45 (tipos -> ID .)
    >               reduce using rule 45 (tipos -> ID .)
    <               reduce using rule 45 (tipos -> ID .)
    ;               reduce using rule 45 (tipos -> ID .)
    +               shift and go to state 44
    -               shift and go to state 45
    .               shift and go to state 115
    [               shift and go to state 116

  ! +               [ reduce using rule 45 (tipos -> ID .) ]
  ! -               [ reduce using rule 45 (tipos -> ID .) ]

    m                              shift and go to state 114

state 78

    (73) varAsig -> ID MENOSEQ varAsig .

    ;               reduce using rule 73 (varAsig -> ID MENOSEQ varAsig .)


state 79

    (78) varAsig -> ID MASEQ varExpresion .
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

    ;               reduce using rule 78 (varAsig -> ID MASEQ varExpresion .)
    +               shift and go to state 103
    -               shift and go to state 105
    *               shift and go to state 104
    /               shift and go to state 106
    %               shift and go to state 100
    ^               shift and go to state 111
    ?               shift and go to state 110
    AND             shift and go to state 98
    OR              shift and go to state 109
    EQEQ            shift and go to state 99
    DISTINTO        shift and go to state 101
    >               shift and go to state 102
    <               shift and go to state 107


state 80

    (74) varAsig -> ID MASEQ varAsig .

    ;               reduce using rule 74 (varAsig -> ID MASEQ varAsig .)


state 81

    (58) varOps -> ID + + .

    +               reduce using rule 58 (varOps -> ID + + .)
    -               reduce using rule 58 (varOps -> ID + + .)
    *               reduce using rule 58 (varOps -> ID + + .)
    /               reduce using rule 58 (varOps -> ID + + .)
    %               reduce using rule 58 (varOps -> ID + + .)
    ^               reduce using rule 58 (varOps -> ID + + .)
    ?               reduce using rule 58 (varOps -> ID + + .)
    AND             reduce using rule 58 (varOps -> ID + + .)
    OR              reduce using rule 58 (varOps -> ID + + .)
    EQEQ            reduce using rule 58 (varOps -> ID + + .)
    DISTINTO        reduce using rule 58 (varOps -> ID + + .)
    >               reduce using rule 58 (varOps -> ID + + .)
    <               reduce using rule 58 (varOps -> ID + + .)
    ;               reduce using rule 58 (varOps -> ID + + .)
    )               reduce using rule 58 (varOps -> ID + + .)
    ,               reduce using rule 58 (varOps -> ID + + .)
    ]               reduce using rule 58 (varOps -> ID + + .)
    :               reduce using rule 58 (varOps -> ID + + .)
    }               reduce using rule 58 (varOps -> ID + + .)


state 82

    (59) varOps -> ID - - .

    +               reduce using rule 59 (varOps -> ID - - .)
    -               reduce using rule 59 (varOps -> ID - - .)
    *               reduce using rule 59 (varOps -> ID - - .)
    /               reduce using rule 59 (varOps -> ID - - .)
    %               reduce using rule 59 (varOps -> ID - - .)
    ^               reduce using rule 59 (varOps -> ID - - .)
    ?               reduce using rule 59 (varOps -> ID - - .)
    AND             reduce using rule 59 (varOps -> ID - - .)
    OR              reduce using rule 59 (varOps -> ID - - .)
    EQEQ            reduce using rule 59 (varOps -> ID - - .)
    DISTINTO        reduce using rule 59 (varOps -> ID - - .)
    >               reduce using rule 59 (varOps -> ID - - .)
    <               reduce using rule 59 (varOps -> ID - - .)
    ;               reduce using rule 59 (varOps -> ID - - .)
    )               reduce using rule 59 (varOps -> ID - - .)
    ,               reduce using rule 59 (varOps -> ID - - .)
    ]               reduce using rule 59 (varOps -> ID - - .)
    :               reduce using rule 59 (varOps -> ID - - .)
    }               reduce using rule 59 (varOps -> ID - - .)


state 83

    (80) varAsig -> ID MULEQ varExpresion .
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

    ;               reduce using rule 80 (varAsig -> ID MULEQ varExpresion .)
    +               shift and go to state 103
    -               shift and go to state 105
    *               shift and go to state 104
    /               shift and go to state 106
    %               shift and go to state 100
    ^               shift and go to state 111
    ?               shift and go to state 110
    AND             shift and go to state 98
    OR              shift and go to state 109
    EQEQ            shift and go to state 99
    DISTINTO        shift and go to state 101
    >               shift and go to state 102
    <               shift and go to state 107


state 84

    (75) varAsig -> ID MULEQ varAsig .

    ;               reduce using rule 75 (varAsig -> ID MULEQ varAsig .)


state 85

    (82) varAsig -> ID = varExpresion .
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

    ;               reduce using rule 82 (varAsig -> ID = varExpresion .)
    +               shift and go to state 103
    -               shift and go to state 105
    *               shift and go to state 104
    /               shift and go to state 106
    %               shift and go to state 100
    ^               shift and go to state 111
    ?               shift and go to state 110
    AND             shift and go to state 98
    OR              shift and go to state 109
    EQEQ            shift and go to state 99
    DISTINTO        shift and go to state 101
    >               shift and go to state 102
    <               shift and go to state 107


state 86

    (77) varAsig -> ID = varAsig .

    ;               reduce using rule 77 (varAsig -> ID = varAsig .)


state 87

    (81) varAsig -> ID DIVEQ varExpresion .
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

    ;               reduce using rule 81 (varAsig -> ID DIVEQ varExpresion .)
    +               shift and go to state 103
    -               shift and go to state 105
    *               shift and go to state 104
    /               shift and go to state 106
    %               shift and go to state 100
    ^               shift and go to state 111
    ?               shift and go to state 110
    AND             shift and go to state 98
    OR              shift and go to state 109
    EQEQ            shift and go to state 99
    DISTINTO        shift and go to state 101
    >               shift and go to state 102
    <               shift and go to state 107


state 88

    (76) varAsig -> ID DIVEQ varAsig .

    ;               reduce using rule 76 (varAsig -> ID DIVEQ varAsig .)


state 89

    (13) if -> IF ( varExpresion . ) THEN bloque else
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

    )               shift and go to state 123
    +               shift and go to state 103
    -               shift and go to state 105
    *               shift and go to state 104
    /               shift and go to state 106
    %               shift and go to state 100
    ^               shift and go to state 111
    ?               shift and go to state 110
    AND             shift and go to state 98
    OR              shift and go to state 109
    EQEQ            shift and go to state 99
    DISTINTO        shift and go to state 101
    >               shift and go to state 102
    <               shift and go to state 107


state 90

    (65) funcInt -> MULTIESCALAR ( varExpresion . , varExpresion , param )
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

    ,               shift and go to state 124
    +               shift and go to state 103
    -               shift and go to state 105
    *               shift and go to state 104
    /               shift and go to state 106
    %               shift and go to state 100
    ^               shift and go to state 111
    ?               shift and go to state 110
    AND             shift and go to state 98
    OR              shift and go to state 109
    EQEQ            shift and go to state 99
    DISTINTO        shift and go to state 101
    >               shift and go to state 102
    <               shift and go to state 107


state 91

    (67) funcString -> CAPITALIZAR ( varExpresion . )
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

    )               shift and go to state 125
    +               shift and go to state 103
    -               shift and go to state 105
    *               shift and go to state 104
    /               shift and go to state 106
    %               shift and go to state 100
    ^               shift and go to state 111
    ?               shift and go to state 110
    AND             shift and go to state 98
    OR              shift and go to state 109
    EQEQ            shift and go to state 99
    DISTINTO        shift and go to state 101
    >               shift and go to state 102
    <               shift and go to state 107


state 92

    (66) funcInt -> LENGTH ( varExpresion . )
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

    )               shift and go to state 126
    +               shift and go to state 103
    -               shift and go to state 105
    *               shift and go to state 104
    /               shift and go to state 106
    %               shift and go to state 100
    ^               shift and go to state 111
    ?               shift and go to state 110
    AND             shift and go to state 98
    OR              shift and go to state 109
    EQEQ            shift and go to state 99
    DISTINTO        shift and go to state 101
    >               shift and go to state 102
    <               shift and go to state 107


state 93

    (11) loop -> DO bloque WHILE ( . varExpresion ) ;
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    (               shift and go to state 58
    NOT             shift and go to state 69
    ID              shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 127
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 94

    (17) bloque -> { g } .

    RETURN          reduce using rule 17 (bloque -> { g } .)
    +               reduce using rule 17 (bloque -> { g } .)
    -               reduce using rule 17 (bloque -> { g } .)
    ID              reduce using rule 17 (bloque -> { g } .)
    IF              reduce using rule 17 (bloque -> { g } .)
    WHILE           reduce using rule 17 (bloque -> { g } .)
    DO              reduce using rule 17 (bloque -> { g } .)
    FOR             reduce using rule 17 (bloque -> { g } .)
    PRINT           reduce using rule 17 (bloque -> { g } .)
    MULTIESCALAR    reduce using rule 17 (bloque -> { g } .)
    LENGTH          reduce using rule 17 (bloque -> { g } .)
    CAPITALIZAR     reduce using rule 17 (bloque -> { g } .)
    COLINEALES      reduce using rule 17 (bloque -> { g } .)
    $end            reduce using rule 17 (bloque -> { g } .)
    }               reduce using rule 17 (bloque -> { g } .)
    ELSE            reduce using rule 17 (bloque -> { g } .)


state 95

    (25) varExpresion -> ( + . ( varExpresion ) )
    (56) varOps -> + . + ID

    (               shift and go to state 128
    +               shift and go to state 36


state 96

    (24) varExpresion -> ( - . ( varExpresion ) )
    (57) varOps -> - . - ID

    (               shift and go to state 129
    -               shift and go to state 38


state 97

    (34) varExpresion -> ( varExpresion . )
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

    )               shift and go to state 130
    +               shift and go to state 103
    -               shift and go to state 105
    *               shift and go to state 104
    /               shift and go to state 106
    %               shift and go to state 100
    ^               shift and go to state 111
    ?               shift and go to state 110
    AND             shift and go to state 98
    OR              shift and go to state 109
    EQEQ            shift and go to state 99
    DISTINTO        shift and go to state 101
    >               shift and go to state 102
    <               shift and go to state 107


state 98

    (27) varExpresion -> varExpresion AND . varExpresion
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    (               shift and go to state 58
    NOT             shift and go to state 69
    ID              shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 131
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 99

    (30) varExpresion -> varExpresion EQEQ . varExpresion
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    (               shift and go to state 58
    NOT             shift and go to state 69
    ID              shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 132
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 100

    (22) varExpresion -> varExpresion % . varExpresion
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    (               shift and go to state 58
    NOT             shift and go to state 69
    ID              shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 133
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 101

    (31) varExpresion -> varExpresion DISTINTO . varExpresion
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    (               shift and go to state 58
    NOT             shift and go to state 69
    ID              shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 134
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 102

    (32) varExpresion -> varExpresion > . varExpresion
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    (               shift and go to state 58
    NOT             shift and go to state 69
    ID              shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 135
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 103

    (18) varExpresion -> varExpresion + . varExpresion
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    (               shift and go to state 58
    NOT             shift and go to state 69
    ID              shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 136
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 104

    (20) varExpresion -> varExpresion * . varExpresion
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    (               shift and go to state 58
    NOT             shift and go to state 69
    ID              shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 137
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 105

    (19) varExpresion -> varExpresion - . varExpresion
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    (               shift and go to state 58
    NOT             shift and go to state 69
    ID              shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 138
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 106

    (21) varExpresion -> varExpresion / . varExpresion
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    (               shift and go to state 58
    NOT             shift and go to state 69
    ID              shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 139
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 107

    (33) varExpresion -> varExpresion < . varExpresion
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    (               shift and go to state 58
    NOT             shift and go to state 69
    ID              shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 140
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 108

    (10) loop -> WHILE ( varExpresion ) . bloque
    (16) bloque -> . sentencia
    (17) bloque -> . { g }
    (4) sentencia -> . varOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (60) func -> . funcReturn
    (61) func -> . funcVoid
    (73) varAsig -> . ID MENOSEQ varAsig
    (74) varAsig -> . ID MASEQ varAsig
    (75) varAsig -> . ID MULEQ varAsig
    (76) varAsig -> . ID DIVEQ varAsig
    (77) varAsig -> . ID = varAsig
    (78) varAsig -> . ID MASEQ varExpresion
    (79) varAsig -> . ID MENOSEQ varExpresion
    (80) varAsig -> . ID MULEQ varExpresion
    (81) varAsig -> . ID DIVEQ varExpresion
    (82) varAsig -> . ID = varExpresion
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (69) funcVoid -> . PRINT ( varExpresion )
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    {               shift and go to state 30
    RETURN          shift and go to state 2
    +               shift and go to state 10
    -               shift and go to state 12
    ID              shift and go to state 17
    PRINT           shift and go to state 7
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    varAsig                        shift and go to state 19
    sentencia                      shift and go to state 29
    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    funcReturn                     shift and go to state 23
    varOps                         shift and go to state 11
    funcVoid                       shift and go to state 13
    func                           shift and go to state 16
    bloque                         shift and go to state 141
    funcInt                        shift and go to state 5

state 109

    (29) varExpresion -> varExpresion OR . varExpresion
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    (               shift and go to state 58
    NOT             shift and go to state 69
    ID              shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 142
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 110

    (26) varExpresion -> varExpresion ? . varExpresion : varExpresion
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    (               shift and go to state 58
    NOT             shift and go to state 69
    ID              shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 143
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 111

    (23) varExpresion -> varExpresion ^ . varExpresion
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    (               shift and go to state 58
    NOT             shift and go to state 69
    ID              shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 144
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 112

    (48) elem -> varExpresion . , elem
    (49) elem -> varExpresion .
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

    ,               shift and go to state 145
    ]               reduce using rule 49 (elem -> varExpresion .)
    +               shift and go to state 103
    -               shift and go to state 105
    *               shift and go to state 104
    /               shift and go to state 106
    %               shift and go to state 100
    ^               shift and go to state 111
    ?               shift and go to state 110
    AND             shift and go to state 98
    OR              shift and go to state 109
    EQEQ            shift and go to state 99
    DISTINTO        shift and go to state 101
    >               shift and go to state 102
    <               shift and go to state 107


state 113

    (46) vec -> [ elem . ]

    ]               shift and go to state 146


state 114

    (39) varExpresion -> ID m .
    (47) vec -> ID m .
    (51) m -> m . [ varExpresion ]

  ! reduce/reduce conflict for ) resolved using rule 39 (varExpresion -> ID m .)
  ! reduce/reduce conflict for + resolved using rule 39 (varExpresion -> ID m .)
  ! reduce/reduce conflict for - resolved using rule 39 (varExpresion -> ID m .)
  ! reduce/reduce conflict for * resolved using rule 39 (varExpresion -> ID m .)
  ! reduce/reduce conflict for / resolved using rule 39 (varExpresion -> ID m .)
  ! reduce/reduce conflict for % resolved using rule 39 (varExpresion -> ID m .)
  ! reduce/reduce conflict for ^ resolved using rule 39 (varExpresion -> ID m .)
  ! reduce/reduce conflict for ? resolved using rule 39 (varExpresion -> ID m .)
  ! reduce/reduce conflict for AND resolved using rule 39 (varExpresion -> ID m .)
  ! reduce/reduce conflict for OR resolved using rule 39 (varExpresion -> ID m .)
  ! reduce/reduce conflict for EQEQ resolved using rule 39 (varExpresion -> ID m .)
  ! reduce/reduce conflict for DISTINTO resolved using rule 39 (varExpresion -> ID m .)
  ! reduce/reduce conflict for > resolved using rule 39 (varExpresion -> ID m .)
  ! reduce/reduce conflict for < resolved using rule 39 (varExpresion -> ID m .)
  ! reduce/reduce conflict for , resolved using rule 39 (varExpresion -> ID m .)
  ! reduce/reduce conflict for ] resolved using rule 39 (varExpresion -> ID m .)
  ! reduce/reduce conflict for ; resolved using rule 39 (varExpresion -> ID m .)
  ! reduce/reduce conflict for : resolved using rule 39 (varExpresion -> ID m .)
  ! reduce/reduce conflict for } resolved using rule 39 (varExpresion -> ID m .)
    +               reduce using rule 39 (varExpresion -> ID m .)
    -               reduce using rule 39 (varExpresion -> ID m .)
    *               reduce using rule 39 (varExpresion -> ID m .)
    /               reduce using rule 39 (varExpresion -> ID m .)
    %               reduce using rule 39 (varExpresion -> ID m .)
    ^               reduce using rule 39 (varExpresion -> ID m .)
    ?               reduce using rule 39 (varExpresion -> ID m .)
    AND             reduce using rule 39 (varExpresion -> ID m .)
    OR              reduce using rule 39 (varExpresion -> ID m .)
    EQEQ            reduce using rule 39 (varExpresion -> ID m .)
    DISTINTO        reduce using rule 39 (varExpresion -> ID m .)
    >               reduce using rule 39 (varExpresion -> ID m .)
    <               reduce using rule 39 (varExpresion -> ID m .)
    )               reduce using rule 39 (varExpresion -> ID m .)
    ,               reduce using rule 39 (varExpresion -> ID m .)
    ;               reduce using rule 39 (varExpresion -> ID m .)
    ]               reduce using rule 39 (varExpresion -> ID m .)
    :               reduce using rule 39 (varExpresion -> ID m .)
    }               reduce using rule 39 (varExpresion -> ID m .)
    [               shift and go to state 147

  ! )               [ reduce using rule 47 (vec -> ID m .) ]
  ! +               [ reduce using rule 47 (vec -> ID m .) ]
  ! -               [ reduce using rule 47 (vec -> ID m .) ]
  ! *               [ reduce using rule 47 (vec -> ID m .) ]
  ! /               [ reduce using rule 47 (vec -> ID m .) ]
  ! %               [ reduce using rule 47 (vec -> ID m .) ]
  ! ^               [ reduce using rule 47 (vec -> ID m .) ]
  ! ?               [ reduce using rule 47 (vec -> ID m .) ]
  ! AND             [ reduce using rule 47 (vec -> ID m .) ]
  ! OR              [ reduce using rule 47 (vec -> ID m .) ]
  ! EQEQ            [ reduce using rule 47 (vec -> ID m .) ]
  ! DISTINTO        [ reduce using rule 47 (vec -> ID m .) ]
  ! >               [ reduce using rule 47 (vec -> ID m .) ]
  ! <               [ reduce using rule 47 (vec -> ID m .) ]
  ! ,               [ reduce using rule 47 (vec -> ID m .) ]
  ! ]               [ reduce using rule 47 (vec -> ID m .) ]
  ! ;               [ reduce using rule 47 (vec -> ID m .) ]
  ! :               [ reduce using rule 47 (vec -> ID m .) ]
  ! }               [ reduce using rule 47 (vec -> ID m .) ]


state 115

    (53) reg -> ID . . ID

    ID              shift and go to state 148


state 116

    (50) m -> [ . varExpresion ]
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    (               shift and go to state 58
    NOT             shift and go to state 69
    ID              shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 149
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 117

    (28) varExpresion -> NOT varExpresion .
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

    +               reduce using rule 28 (varExpresion -> NOT varExpresion .)
    -               reduce using rule 28 (varExpresion -> NOT varExpresion .)
    *               reduce using rule 28 (varExpresion -> NOT varExpresion .)
    /               reduce using rule 28 (varExpresion -> NOT varExpresion .)
    %               reduce using rule 28 (varExpresion -> NOT varExpresion .)
    ^               reduce using rule 28 (varExpresion -> NOT varExpresion .)
    ?               reduce using rule 28 (varExpresion -> NOT varExpresion .)
    AND             reduce using rule 28 (varExpresion -> NOT varExpresion .)
    OR              reduce using rule 28 (varExpresion -> NOT varExpresion .)
    EQEQ            reduce using rule 28 (varExpresion -> NOT varExpresion .)
    DISTINTO        reduce using rule 28 (varExpresion -> NOT varExpresion .)
    >               reduce using rule 28 (varExpresion -> NOT varExpresion .)
    <               reduce using rule 28 (varExpresion -> NOT varExpresion .)
    )               reduce using rule 28 (varExpresion -> NOT varExpresion .)
    ,               reduce using rule 28 (varExpresion -> NOT varExpresion .)
    ;               reduce using rule 28 (varExpresion -> NOT varExpresion .)
    ]               reduce using rule 28 (varExpresion -> NOT varExpresion .)
    :               reduce using rule 28 (varExpresion -> NOT varExpresion .)
    }               reduce using rule 28 (varExpresion -> NOT varExpresion .)

  ! +               [ shift and go to state 103 ]
  ! -               [ shift and go to state 105 ]
  ! *               [ shift and go to state 104 ]
  ! /               [ shift and go to state 106 ]
  ! %               [ shift and go to state 100 ]
  ! ^               [ shift and go to state 111 ]
  ! ?               [ shift and go to state 110 ]
  ! AND             [ shift and go to state 98 ]
  ! OR              [ shift and go to state 109 ]
  ! EQEQ            [ shift and go to state 99 ]
  ! DISTINTO        [ shift and go to state 101 ]
  ! >               [ shift and go to state 102 ]
  ! <               [ shift and go to state 107 ]


state 118

    (52) reg -> { campos . }

    }               shift and go to state 150


state 119

    (54) campos -> ID . : varExpresion , campos
    (55) campos -> ID . : varExpresion

    :               shift and go to state 151


state 120

    (69) funcVoid -> PRINT ( varExpresion ) .

    ;               reduce using rule 69 (funcVoid -> PRINT ( varExpresion ) .)


state 121

    (68) funcBool -> COLINEALES ( varExpresion , . varExpresion )
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    (               shift and go to state 58
    NOT             shift and go to state 69
    ID              shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 152
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 122

    (12) loop -> FOR ( varExpresion ; . varExpresion ; varOps ) bloque
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    (               shift and go to state 58
    NOT             shift and go to state 69
    ID              shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 153
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 123

    (13) if -> IF ( varExpresion ) . THEN bloque else

    THEN            shift and go to state 154


state 124

    (65) funcInt -> MULTIESCALAR ( varExpresion , . varExpresion , param )
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    (               shift and go to state 58
    NOT             shift and go to state 69
    ID              shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 155
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 125

    (67) funcString -> CAPITALIZAR ( varExpresion ) .

    ,               reduce using rule 67 (funcString -> CAPITALIZAR ( varExpresion ) .)
    +               reduce using rule 67 (funcString -> CAPITALIZAR ( varExpresion ) .)
    -               reduce using rule 67 (funcString -> CAPITALIZAR ( varExpresion ) .)
    *               reduce using rule 67 (funcString -> CAPITALIZAR ( varExpresion ) .)
    /               reduce using rule 67 (funcString -> CAPITALIZAR ( varExpresion ) .)
    %               reduce using rule 67 (funcString -> CAPITALIZAR ( varExpresion ) .)
    ^               reduce using rule 67 (funcString -> CAPITALIZAR ( varExpresion ) .)
    ?               reduce using rule 67 (funcString -> CAPITALIZAR ( varExpresion ) .)
    AND             reduce using rule 67 (funcString -> CAPITALIZAR ( varExpresion ) .)
    OR              reduce using rule 67 (funcString -> CAPITALIZAR ( varExpresion ) .)
    EQEQ            reduce using rule 67 (funcString -> CAPITALIZAR ( varExpresion ) .)
    DISTINTO        reduce using rule 67 (funcString -> CAPITALIZAR ( varExpresion ) .)
    >               reduce using rule 67 (funcString -> CAPITALIZAR ( varExpresion ) .)
    <               reduce using rule 67 (funcString -> CAPITALIZAR ( varExpresion ) .)
    ;               reduce using rule 67 (funcString -> CAPITALIZAR ( varExpresion ) .)
    )               reduce using rule 67 (funcString -> CAPITALIZAR ( varExpresion ) .)
    ]               reduce using rule 67 (funcString -> CAPITALIZAR ( varExpresion ) .)
    :               reduce using rule 67 (funcString -> CAPITALIZAR ( varExpresion ) .)
    }               reduce using rule 67 (funcString -> CAPITALIZAR ( varExpresion ) .)


state 126

    (66) funcInt -> LENGTH ( varExpresion ) .

    ;               reduce using rule 66 (funcInt -> LENGTH ( varExpresion ) .)
    +               reduce using rule 66 (funcInt -> LENGTH ( varExpresion ) .)
    -               reduce using rule 66 (funcInt -> LENGTH ( varExpresion ) .)
    *               reduce using rule 66 (funcInt -> LENGTH ( varExpresion ) .)
    /               reduce using rule 66 (funcInt -> LENGTH ( varExpresion ) .)
    %               reduce using rule 66 (funcInt -> LENGTH ( varExpresion ) .)
    ^               reduce using rule 66 (funcInt -> LENGTH ( varExpresion ) .)
    ?               reduce using rule 66 (funcInt -> LENGTH ( varExpresion ) .)
    AND             reduce using rule 66 (funcInt -> LENGTH ( varExpresion ) .)
    OR              reduce using rule 66 (funcInt -> LENGTH ( varExpresion ) .)
    EQEQ            reduce using rule 66 (funcInt -> LENGTH ( varExpresion ) .)
    DISTINTO        reduce using rule 66 (funcInt -> LENGTH ( varExpresion ) .)
    >               reduce using rule 66 (funcInt -> LENGTH ( varExpresion ) .)
    <               reduce using rule 66 (funcInt -> LENGTH ( varExpresion ) .)
    )               reduce using rule 66 (funcInt -> LENGTH ( varExpresion ) .)
    ,               reduce using rule 66 (funcInt -> LENGTH ( varExpresion ) .)
    ]               reduce using rule 66 (funcInt -> LENGTH ( varExpresion ) .)
    :               reduce using rule 66 (funcInt -> LENGTH ( varExpresion ) .)
    }               reduce using rule 66 (funcInt -> LENGTH ( varExpresion ) .)


state 127

    (11) loop -> DO bloque WHILE ( varExpresion . ) ;
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

    )               shift and go to state 156
    +               shift and go to state 103
    -               shift and go to state 105
    *               shift and go to state 104
    /               shift and go to state 106
    %               shift and go to state 100
    ^               shift and go to state 111
    ?               shift and go to state 110
    AND             shift and go to state 98
    OR              shift and go to state 109
    EQEQ            shift and go to state 99
    DISTINTO        shift and go to state 101
    >               shift and go to state 102
    <               shift and go to state 107


state 128

    (25) varExpresion -> ( + ( . varExpresion ) )
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    (               shift and go to state 58
    NOT             shift and go to state 69
    ID              shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 157
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 129

    (24) varExpresion -> ( - ( . varExpresion ) )
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    (               shift and go to state 58
    NOT             shift and go to state 69
    ID              shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 158
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 130

    (34) varExpresion -> ( varExpresion ) .

    +               reduce using rule 34 (varExpresion -> ( varExpresion ) .)
    -               reduce using rule 34 (varExpresion -> ( varExpresion ) .)
    *               reduce using rule 34 (varExpresion -> ( varExpresion ) .)
    /               reduce using rule 34 (varExpresion -> ( varExpresion ) .)
    %               reduce using rule 34 (varExpresion -> ( varExpresion ) .)
    ^               reduce using rule 34 (varExpresion -> ( varExpresion ) .)
    ?               reduce using rule 34 (varExpresion -> ( varExpresion ) .)
    AND             reduce using rule 34 (varExpresion -> ( varExpresion ) .)
    OR              reduce using rule 34 (varExpresion -> ( varExpresion ) .)
    EQEQ            reduce using rule 34 (varExpresion -> ( varExpresion ) .)
    DISTINTO        reduce using rule 34 (varExpresion -> ( varExpresion ) .)
    >               reduce using rule 34 (varExpresion -> ( varExpresion ) .)
    <               reduce using rule 34 (varExpresion -> ( varExpresion ) .)
    )               reduce using rule 34 (varExpresion -> ( varExpresion ) .)
    ,               reduce using rule 34 (varExpresion -> ( varExpresion ) .)
    ;               reduce using rule 34 (varExpresion -> ( varExpresion ) .)
    ]               reduce using rule 34 (varExpresion -> ( varExpresion ) .)
    :               reduce using rule 34 (varExpresion -> ( varExpresion ) .)
    }               reduce using rule 34 (varExpresion -> ( varExpresion ) .)


state 131

    (27) varExpresion -> varExpresion AND varExpresion .
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

    ?               reduce using rule 27 (varExpresion -> varExpresion AND varExpresion .)
    AND             reduce using rule 27 (varExpresion -> varExpresion AND varExpresion .)
    OR              reduce using rule 27 (varExpresion -> varExpresion AND varExpresion .)
    >               reduce using rule 27 (varExpresion -> varExpresion AND varExpresion .)
    <               reduce using rule 27 (varExpresion -> varExpresion AND varExpresion .)
    )               reduce using rule 27 (varExpresion -> varExpresion AND varExpresion .)
    ,               reduce using rule 27 (varExpresion -> varExpresion AND varExpresion .)
    ;               reduce using rule 27 (varExpresion -> varExpresion AND varExpresion .)
    ]               reduce using rule 27 (varExpresion -> varExpresion AND varExpresion .)
    :               reduce using rule 27 (varExpresion -> varExpresion AND varExpresion .)
    }               reduce using rule 27 (varExpresion -> varExpresion AND varExpresion .)
    +               shift and go to state 103
    -               shift and go to state 105
    *               shift and go to state 104
    /               shift and go to state 106
    %               shift and go to state 100
    ^               shift and go to state 111
    EQEQ            shift and go to state 99
    DISTINTO        shift and go to state 101

  ! +               [ reduce using rule 27 (varExpresion -> varExpresion AND varExpresion .) ]
  ! -               [ reduce using rule 27 (varExpresion -> varExpresion AND varExpresion .) ]
  ! *               [ reduce using rule 27 (varExpresion -> varExpresion AND varExpresion .) ]
  ! /               [ reduce using rule 27 (varExpresion -> varExpresion AND varExpresion .) ]
  ! %               [ reduce using rule 27 (varExpresion -> varExpresion AND varExpresion .) ]
  ! ^               [ reduce using rule 27 (varExpresion -> varExpresion AND varExpresion .) ]
  ! EQEQ            [ reduce using rule 27 (varExpresion -> varExpresion AND varExpresion .) ]
  ! DISTINTO        [ reduce using rule 27 (varExpresion -> varExpresion AND varExpresion .) ]
  ! ?               [ shift and go to state 110 ]
  ! AND             [ shift and go to state 98 ]
  ! OR              [ shift and go to state 109 ]
  ! >               [ shift and go to state 102 ]
  ! <               [ shift and go to state 107 ]


state 132

    (30) varExpresion -> varExpresion EQEQ varExpresion .
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

    ?               reduce using rule 30 (varExpresion -> varExpresion EQEQ varExpresion .)
    AND             reduce using rule 30 (varExpresion -> varExpresion EQEQ varExpresion .)
    OR              reduce using rule 30 (varExpresion -> varExpresion EQEQ varExpresion .)
    EQEQ            reduce using rule 30 (varExpresion -> varExpresion EQEQ varExpresion .)
    DISTINTO        reduce using rule 30 (varExpresion -> varExpresion EQEQ varExpresion .)
    >               reduce using rule 30 (varExpresion -> varExpresion EQEQ varExpresion .)
    <               reduce using rule 30 (varExpresion -> varExpresion EQEQ varExpresion .)
    )               reduce using rule 30 (varExpresion -> varExpresion EQEQ varExpresion .)
    ,               reduce using rule 30 (varExpresion -> varExpresion EQEQ varExpresion .)
    ;               reduce using rule 30 (varExpresion -> varExpresion EQEQ varExpresion .)
    ]               reduce using rule 30 (varExpresion -> varExpresion EQEQ varExpresion .)
    :               reduce using rule 30 (varExpresion -> varExpresion EQEQ varExpresion .)
    }               reduce using rule 30 (varExpresion -> varExpresion EQEQ varExpresion .)
    +               shift and go to state 103
    -               shift and go to state 105
    *               shift and go to state 104
    /               shift and go to state 106
    %               shift and go to state 100
    ^               shift and go to state 111

  ! +               [ reduce using rule 30 (varExpresion -> varExpresion EQEQ varExpresion .) ]
  ! -               [ reduce using rule 30 (varExpresion -> varExpresion EQEQ varExpresion .) ]
  ! *               [ reduce using rule 30 (varExpresion -> varExpresion EQEQ varExpresion .) ]
  ! /               [ reduce using rule 30 (varExpresion -> varExpresion EQEQ varExpresion .) ]
  ! %               [ reduce using rule 30 (varExpresion -> varExpresion EQEQ varExpresion .) ]
  ! ^               [ reduce using rule 30 (varExpresion -> varExpresion EQEQ varExpresion .) ]
  ! ?               [ shift and go to state 110 ]
  ! AND             [ shift and go to state 98 ]
  ! OR              [ shift and go to state 109 ]
  ! EQEQ            [ shift and go to state 99 ]
  ! DISTINTO        [ shift and go to state 101 ]
  ! >               [ shift and go to state 102 ]
  ! <               [ shift and go to state 107 ]


state 133

    (22) varExpresion -> varExpresion % varExpresion .
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

    +               reduce using rule 22 (varExpresion -> varExpresion % varExpresion .)
    -               reduce using rule 22 (varExpresion -> varExpresion % varExpresion .)
    *               reduce using rule 22 (varExpresion -> varExpresion % varExpresion .)
    /               reduce using rule 22 (varExpresion -> varExpresion % varExpresion .)
    %               reduce using rule 22 (varExpresion -> varExpresion % varExpresion .)
    ?               reduce using rule 22 (varExpresion -> varExpresion % varExpresion .)
    AND             reduce using rule 22 (varExpresion -> varExpresion % varExpresion .)
    OR              reduce using rule 22 (varExpresion -> varExpresion % varExpresion .)
    EQEQ            reduce using rule 22 (varExpresion -> varExpresion % varExpresion .)
    DISTINTO        reduce using rule 22 (varExpresion -> varExpresion % varExpresion .)
    >               reduce using rule 22 (varExpresion -> varExpresion % varExpresion .)
    <               reduce using rule 22 (varExpresion -> varExpresion % varExpresion .)
    )               reduce using rule 22 (varExpresion -> varExpresion % varExpresion .)
    ,               reduce using rule 22 (varExpresion -> varExpresion % varExpresion .)
    ;               reduce using rule 22 (varExpresion -> varExpresion % varExpresion .)
    ]               reduce using rule 22 (varExpresion -> varExpresion % varExpresion .)
    :               reduce using rule 22 (varExpresion -> varExpresion % varExpresion .)
    }               reduce using rule 22 (varExpresion -> varExpresion % varExpresion .)
    ^               shift and go to state 111

  ! ^               [ reduce using rule 22 (varExpresion -> varExpresion % varExpresion .) ]
  ! +               [ shift and go to state 103 ]
  ! -               [ shift and go to state 105 ]
  ! *               [ shift and go to state 104 ]
  ! /               [ shift and go to state 106 ]
  ! %               [ shift and go to state 100 ]
  ! ?               [ shift and go to state 110 ]
  ! AND             [ shift and go to state 98 ]
  ! OR              [ shift and go to state 109 ]
  ! EQEQ            [ shift and go to state 99 ]
  ! DISTINTO        [ shift and go to state 101 ]
  ! >               [ shift and go to state 102 ]
  ! <               [ shift and go to state 107 ]


state 134

    (31) varExpresion -> varExpresion DISTINTO varExpresion .
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

    ?               reduce using rule 31 (varExpresion -> varExpresion DISTINTO varExpresion .)
    AND             reduce using rule 31 (varExpresion -> varExpresion DISTINTO varExpresion .)
    OR              reduce using rule 31 (varExpresion -> varExpresion DISTINTO varExpresion .)
    EQEQ            reduce using rule 31 (varExpresion -> varExpresion DISTINTO varExpresion .)
    DISTINTO        reduce using rule 31 (varExpresion -> varExpresion DISTINTO varExpresion .)
    >               reduce using rule 31 (varExpresion -> varExpresion DISTINTO varExpresion .)
    <               reduce using rule 31 (varExpresion -> varExpresion DISTINTO varExpresion .)
    )               reduce using rule 31 (varExpresion -> varExpresion DISTINTO varExpresion .)
    ,               reduce using rule 31 (varExpresion -> varExpresion DISTINTO varExpresion .)
    ;               reduce using rule 31 (varExpresion -> varExpresion DISTINTO varExpresion .)
    ]               reduce using rule 31 (varExpresion -> varExpresion DISTINTO varExpresion .)
    :               reduce using rule 31 (varExpresion -> varExpresion DISTINTO varExpresion .)
    }               reduce using rule 31 (varExpresion -> varExpresion DISTINTO varExpresion .)
    +               shift and go to state 103
    -               shift and go to state 105
    *               shift and go to state 104
    /               shift and go to state 106
    %               shift and go to state 100
    ^               shift and go to state 111

  ! +               [ reduce using rule 31 (varExpresion -> varExpresion DISTINTO varExpresion .) ]
  ! -               [ reduce using rule 31 (varExpresion -> varExpresion DISTINTO varExpresion .) ]
  ! *               [ reduce using rule 31 (varExpresion -> varExpresion DISTINTO varExpresion .) ]
  ! /               [ reduce using rule 31 (varExpresion -> varExpresion DISTINTO varExpresion .) ]
  ! %               [ reduce using rule 31 (varExpresion -> varExpresion DISTINTO varExpresion .) ]
  ! ^               [ reduce using rule 31 (varExpresion -> varExpresion DISTINTO varExpresion .) ]
  ! ?               [ shift and go to state 110 ]
  ! AND             [ shift and go to state 98 ]
  ! OR              [ shift and go to state 109 ]
  ! EQEQ            [ shift and go to state 99 ]
  ! DISTINTO        [ shift and go to state 101 ]
  ! >               [ shift and go to state 102 ]
  ! <               [ shift and go to state 107 ]


state 135

    (32) varExpresion -> varExpresion > varExpresion .
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for ? resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for DISTINTO resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
    )               reduce using rule 32 (varExpresion -> varExpresion > varExpresion .)
    ,               reduce using rule 32 (varExpresion -> varExpresion > varExpresion .)
    ;               reduce using rule 32 (varExpresion -> varExpresion > varExpresion .)
    ]               reduce using rule 32 (varExpresion -> varExpresion > varExpresion .)
    :               reduce using rule 32 (varExpresion -> varExpresion > varExpresion .)
    }               reduce using rule 32 (varExpresion -> varExpresion > varExpresion .)
    +               shift and go to state 103
    -               shift and go to state 105
    *               shift and go to state 104
    /               shift and go to state 106
    %               shift and go to state 100
    ^               shift and go to state 111
    ?               shift and go to state 110
    AND             shift and go to state 98
    OR              shift and go to state 109
    EQEQ            shift and go to state 99
    DISTINTO        shift and go to state 101
    >               shift and go to state 102
    <               shift and go to state 107

  ! +               [ reduce using rule 32 (varExpresion -> varExpresion > varExpresion .) ]
  ! -               [ reduce using rule 32 (varExpresion -> varExpresion > varExpresion .) ]
  ! *               [ reduce using rule 32 (varExpresion -> varExpresion > varExpresion .) ]
  ! /               [ reduce using rule 32 (varExpresion -> varExpresion > varExpresion .) ]
  ! %               [ reduce using rule 32 (varExpresion -> varExpresion > varExpresion .) ]
  ! ^               [ reduce using rule 32 (varExpresion -> varExpresion > varExpresion .) ]
  ! ?               [ reduce using rule 32 (varExpresion -> varExpresion > varExpresion .) ]
  ! AND             [ reduce using rule 32 (varExpresion -> varExpresion > varExpresion .) ]
  ! OR              [ reduce using rule 32 (varExpresion -> varExpresion > varExpresion .) ]
  ! EQEQ            [ reduce using rule 32 (varExpresion -> varExpresion > varExpresion .) ]
  ! DISTINTO        [ reduce using rule 32 (varExpresion -> varExpresion > varExpresion .) ]
  ! >               [ reduce using rule 32 (varExpresion -> varExpresion > varExpresion .) ]
  ! <               [ reduce using rule 32 (varExpresion -> varExpresion > varExpresion .) ]


state 136

    (18) varExpresion -> varExpresion + varExpresion .
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

    +               reduce using rule 18 (varExpresion -> varExpresion + varExpresion .)
    -               reduce using rule 18 (varExpresion -> varExpresion + varExpresion .)
    ?               reduce using rule 18 (varExpresion -> varExpresion + varExpresion .)
    AND             reduce using rule 18 (varExpresion -> varExpresion + varExpresion .)
    OR              reduce using rule 18 (varExpresion -> varExpresion + varExpresion .)
    EQEQ            reduce using rule 18 (varExpresion -> varExpresion + varExpresion .)
    DISTINTO        reduce using rule 18 (varExpresion -> varExpresion + varExpresion .)
    >               reduce using rule 18 (varExpresion -> varExpresion + varExpresion .)
    <               reduce using rule 18 (varExpresion -> varExpresion + varExpresion .)
    )               reduce using rule 18 (varExpresion -> varExpresion + varExpresion .)
    ,               reduce using rule 18 (varExpresion -> varExpresion + varExpresion .)
    ;               reduce using rule 18 (varExpresion -> varExpresion + varExpresion .)
    ]               reduce using rule 18 (varExpresion -> varExpresion + varExpresion .)
    :               reduce using rule 18 (varExpresion -> varExpresion + varExpresion .)
    }               reduce using rule 18 (varExpresion -> varExpresion + varExpresion .)
    *               shift and go to state 104
    /               shift and go to state 106
    %               shift and go to state 100
    ^               shift and go to state 111

  ! *               [ reduce using rule 18 (varExpresion -> varExpresion + varExpresion .) ]
  ! /               [ reduce using rule 18 (varExpresion -> varExpresion + varExpresion .) ]
  ! %               [ reduce using rule 18 (varExpresion -> varExpresion + varExpresion .) ]
  ! ^               [ reduce using rule 18 (varExpresion -> varExpresion + varExpresion .) ]
  ! +               [ shift and go to state 103 ]
  ! -               [ shift and go to state 105 ]
  ! ?               [ shift and go to state 110 ]
  ! AND             [ shift and go to state 98 ]
  ! OR              [ shift and go to state 109 ]
  ! EQEQ            [ shift and go to state 99 ]
  ! DISTINTO        [ shift and go to state 101 ]
  ! >               [ shift and go to state 102 ]
  ! <               [ shift and go to state 107 ]


state 137

    (20) varExpresion -> varExpresion * varExpresion .
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

    +               reduce using rule 20 (varExpresion -> varExpresion * varExpresion .)
    -               reduce using rule 20 (varExpresion -> varExpresion * varExpresion .)
    *               reduce using rule 20 (varExpresion -> varExpresion * varExpresion .)
    /               reduce using rule 20 (varExpresion -> varExpresion * varExpresion .)
    %               reduce using rule 20 (varExpresion -> varExpresion * varExpresion .)
    ?               reduce using rule 20 (varExpresion -> varExpresion * varExpresion .)
    AND             reduce using rule 20 (varExpresion -> varExpresion * varExpresion .)
    OR              reduce using rule 20 (varExpresion -> varExpresion * varExpresion .)
    EQEQ            reduce using rule 20 (varExpresion -> varExpresion * varExpresion .)
    DISTINTO        reduce using rule 20 (varExpresion -> varExpresion * varExpresion .)
    >               reduce using rule 20 (varExpresion -> varExpresion * varExpresion .)
    <               reduce using rule 20 (varExpresion -> varExpresion * varExpresion .)
    )               reduce using rule 20 (varExpresion -> varExpresion * varExpresion .)
    ,               reduce using rule 20 (varExpresion -> varExpresion * varExpresion .)
    ;               reduce using rule 20 (varExpresion -> varExpresion * varExpresion .)
    ]               reduce using rule 20 (varExpresion -> varExpresion * varExpresion .)
    :               reduce using rule 20 (varExpresion -> varExpresion * varExpresion .)
    }               reduce using rule 20 (varExpresion -> varExpresion * varExpresion .)
    ^               shift and go to state 111

  ! ^               [ reduce using rule 20 (varExpresion -> varExpresion * varExpresion .) ]
  ! +               [ shift and go to state 103 ]
  ! -               [ shift and go to state 105 ]
  ! *               [ shift and go to state 104 ]
  ! /               [ shift and go to state 106 ]
  ! %               [ shift and go to state 100 ]
  ! ?               [ shift and go to state 110 ]
  ! AND             [ shift and go to state 98 ]
  ! OR              [ shift and go to state 109 ]
  ! EQEQ            [ shift and go to state 99 ]
  ! DISTINTO        [ shift and go to state 101 ]
  ! >               [ shift and go to state 102 ]
  ! <               [ shift and go to state 107 ]


state 138

    (19) varExpresion -> varExpresion - varExpresion .
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

    +               reduce using rule 19 (varExpresion -> varExpresion - varExpresion .)
    -               reduce using rule 19 (varExpresion -> varExpresion - varExpresion .)
    ?               reduce using rule 19 (varExpresion -> varExpresion - varExpresion .)
    AND             reduce using rule 19 (varExpresion -> varExpresion - varExpresion .)
    OR              reduce using rule 19 (varExpresion -> varExpresion - varExpresion .)
    EQEQ            reduce using rule 19 (varExpresion -> varExpresion - varExpresion .)
    DISTINTO        reduce using rule 19 (varExpresion -> varExpresion - varExpresion .)
    >               reduce using rule 19 (varExpresion -> varExpresion - varExpresion .)
    <               reduce using rule 19 (varExpresion -> varExpresion - varExpresion .)
    )               reduce using rule 19 (varExpresion -> varExpresion - varExpresion .)
    ,               reduce using rule 19 (varExpresion -> varExpresion - varExpresion .)
    ;               reduce using rule 19 (varExpresion -> varExpresion - varExpresion .)
    ]               reduce using rule 19 (varExpresion -> varExpresion - varExpresion .)
    :               reduce using rule 19 (varExpresion -> varExpresion - varExpresion .)
    }               reduce using rule 19 (varExpresion -> varExpresion - varExpresion .)
    *               shift and go to state 104
    /               shift and go to state 106
    %               shift and go to state 100
    ^               shift and go to state 111

  ! *               [ reduce using rule 19 (varExpresion -> varExpresion - varExpresion .) ]
  ! /               [ reduce using rule 19 (varExpresion -> varExpresion - varExpresion .) ]
  ! %               [ reduce using rule 19 (varExpresion -> varExpresion - varExpresion .) ]
  ! ^               [ reduce using rule 19 (varExpresion -> varExpresion - varExpresion .) ]
  ! +               [ shift and go to state 103 ]
  ! -               [ shift and go to state 105 ]
  ! ?               [ shift and go to state 110 ]
  ! AND             [ shift and go to state 98 ]
  ! OR              [ shift and go to state 109 ]
  ! EQEQ            [ shift and go to state 99 ]
  ! DISTINTO        [ shift and go to state 101 ]
  ! >               [ shift and go to state 102 ]
  ! <               [ shift and go to state 107 ]


state 139

    (21) varExpresion -> varExpresion / varExpresion .
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

    +               reduce using rule 21 (varExpresion -> varExpresion / varExpresion .)
    -               reduce using rule 21 (varExpresion -> varExpresion / varExpresion .)
    *               reduce using rule 21 (varExpresion -> varExpresion / varExpresion .)
    /               reduce using rule 21 (varExpresion -> varExpresion / varExpresion .)
    %               reduce using rule 21 (varExpresion -> varExpresion / varExpresion .)
    ?               reduce using rule 21 (varExpresion -> varExpresion / varExpresion .)
    AND             reduce using rule 21 (varExpresion -> varExpresion / varExpresion .)
    OR              reduce using rule 21 (varExpresion -> varExpresion / varExpresion .)
    EQEQ            reduce using rule 21 (varExpresion -> varExpresion / varExpresion .)
    DISTINTO        reduce using rule 21 (varExpresion -> varExpresion / varExpresion .)
    >               reduce using rule 21 (varExpresion -> varExpresion / varExpresion .)
    <               reduce using rule 21 (varExpresion -> varExpresion / varExpresion .)
    )               reduce using rule 21 (varExpresion -> varExpresion / varExpresion .)
    ,               reduce using rule 21 (varExpresion -> varExpresion / varExpresion .)
    ;               reduce using rule 21 (varExpresion -> varExpresion / varExpresion .)
    ]               reduce using rule 21 (varExpresion -> varExpresion / varExpresion .)
    :               reduce using rule 21 (varExpresion -> varExpresion / varExpresion .)
    }               reduce using rule 21 (varExpresion -> varExpresion / varExpresion .)
    ^               shift and go to state 111

  ! ^               [ reduce using rule 21 (varExpresion -> varExpresion / varExpresion .) ]
  ! +               [ shift and go to state 103 ]
  ! -               [ shift and go to state 105 ]
  ! *               [ shift and go to state 104 ]
  ! /               [ shift and go to state 106 ]
  ! %               [ shift and go to state 100 ]
  ! ?               [ shift and go to state 110 ]
  ! AND             [ shift and go to state 98 ]
  ! OR              [ shift and go to state 109 ]
  ! EQEQ            [ shift and go to state 99 ]
  ! DISTINTO        [ shift and go to state 101 ]
  ! >               [ shift and go to state 102 ]
  ! <               [ shift and go to state 107 ]


state 140

    (33) varExpresion -> varExpresion < varExpresion .
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for ? resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for DISTINTO resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
    )               reduce using rule 33 (varExpresion -> varExpresion < varExpresion .)
    ,               reduce using rule 33 (varExpresion -> varExpresion < varExpresion .)
    ;               reduce using rule 33 (varExpresion -> varExpresion < varExpresion .)
    ]               reduce using rule 33 (varExpresion -> varExpresion < varExpresion .)
    :               reduce using rule 33 (varExpresion -> varExpresion < varExpresion .)
    }               reduce using rule 33 (varExpresion -> varExpresion < varExpresion .)
    +               shift and go to state 103
    -               shift and go to state 105
    *               shift and go to state 104
    /               shift and go to state 106
    %               shift and go to state 100
    ^               shift and go to state 111
    ?               shift and go to state 110
    AND             shift and go to state 98
    OR              shift and go to state 109
    EQEQ            shift and go to state 99
    DISTINTO        shift and go to state 101
    >               shift and go to state 102
    <               shift and go to state 107

  ! +               [ reduce using rule 33 (varExpresion -> varExpresion < varExpresion .) ]
  ! -               [ reduce using rule 33 (varExpresion -> varExpresion < varExpresion .) ]
  ! *               [ reduce using rule 33 (varExpresion -> varExpresion < varExpresion .) ]
  ! /               [ reduce using rule 33 (varExpresion -> varExpresion < varExpresion .) ]
  ! %               [ reduce using rule 33 (varExpresion -> varExpresion < varExpresion .) ]
  ! ^               [ reduce using rule 33 (varExpresion -> varExpresion < varExpresion .) ]
  ! ?               [ reduce using rule 33 (varExpresion -> varExpresion < varExpresion .) ]
  ! AND             [ reduce using rule 33 (varExpresion -> varExpresion < varExpresion .) ]
  ! OR              [ reduce using rule 33 (varExpresion -> varExpresion < varExpresion .) ]
  ! EQEQ            [ reduce using rule 33 (varExpresion -> varExpresion < varExpresion .) ]
  ! DISTINTO        [ reduce using rule 33 (varExpresion -> varExpresion < varExpresion .) ]
  ! >               [ reduce using rule 33 (varExpresion -> varExpresion < varExpresion .) ]
  ! <               [ reduce using rule 33 (varExpresion -> varExpresion < varExpresion .) ]


state 141

    (10) loop -> WHILE ( varExpresion ) bloque .

    RETURN          reduce using rule 10 (loop -> WHILE ( varExpresion ) bloque .)
    +               reduce using rule 10 (loop -> WHILE ( varExpresion ) bloque .)
    -               reduce using rule 10 (loop -> WHILE ( varExpresion ) bloque .)
    ID              reduce using rule 10 (loop -> WHILE ( varExpresion ) bloque .)
    IF              reduce using rule 10 (loop -> WHILE ( varExpresion ) bloque .)
    WHILE           reduce using rule 10 (loop -> WHILE ( varExpresion ) bloque .)
    DO              reduce using rule 10 (loop -> WHILE ( varExpresion ) bloque .)
    FOR             reduce using rule 10 (loop -> WHILE ( varExpresion ) bloque .)
    PRINT           reduce using rule 10 (loop -> WHILE ( varExpresion ) bloque .)
    MULTIESCALAR    reduce using rule 10 (loop -> WHILE ( varExpresion ) bloque .)
    LENGTH          reduce using rule 10 (loop -> WHILE ( varExpresion ) bloque .)
    CAPITALIZAR     reduce using rule 10 (loop -> WHILE ( varExpresion ) bloque .)
    COLINEALES      reduce using rule 10 (loop -> WHILE ( varExpresion ) bloque .)
    }               reduce using rule 10 (loop -> WHILE ( varExpresion ) bloque .)
    $end            reduce using rule 10 (loop -> WHILE ( varExpresion ) bloque .)


state 142

    (29) varExpresion -> varExpresion OR varExpresion .
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

    ?               reduce using rule 29 (varExpresion -> varExpresion OR varExpresion .)
    OR              reduce using rule 29 (varExpresion -> varExpresion OR varExpresion .)
    >               reduce using rule 29 (varExpresion -> varExpresion OR varExpresion .)
    <               reduce using rule 29 (varExpresion -> varExpresion OR varExpresion .)
    )               reduce using rule 29 (varExpresion -> varExpresion OR varExpresion .)
    ,               reduce using rule 29 (varExpresion -> varExpresion OR varExpresion .)
    ;               reduce using rule 29 (varExpresion -> varExpresion OR varExpresion .)
    ]               reduce using rule 29 (varExpresion -> varExpresion OR varExpresion .)
    :               reduce using rule 29 (varExpresion -> varExpresion OR varExpresion .)
    }               reduce using rule 29 (varExpresion -> varExpresion OR varExpresion .)
    +               shift and go to state 103
    -               shift and go to state 105
    *               shift and go to state 104
    /               shift and go to state 106
    %               shift and go to state 100
    ^               shift and go to state 111
    AND             shift and go to state 98
    EQEQ            shift and go to state 99
    DISTINTO        shift and go to state 101

  ! +               [ reduce using rule 29 (varExpresion -> varExpresion OR varExpresion .) ]
  ! -               [ reduce using rule 29 (varExpresion -> varExpresion OR varExpresion .) ]
  ! *               [ reduce using rule 29 (varExpresion -> varExpresion OR varExpresion .) ]
  ! /               [ reduce using rule 29 (varExpresion -> varExpresion OR varExpresion .) ]
  ! %               [ reduce using rule 29 (varExpresion -> varExpresion OR varExpresion .) ]
  ! ^               [ reduce using rule 29 (varExpresion -> varExpresion OR varExpresion .) ]
  ! AND             [ reduce using rule 29 (varExpresion -> varExpresion OR varExpresion .) ]
  ! EQEQ            [ reduce using rule 29 (varExpresion -> varExpresion OR varExpresion .) ]
  ! DISTINTO        [ reduce using rule 29 (varExpresion -> varExpresion OR varExpresion .) ]
  ! ?               [ shift and go to state 110 ]
  ! OR              [ shift and go to state 109 ]
  ! >               [ shift and go to state 102 ]
  ! <               [ shift and go to state 107 ]


state 143

    (26) varExpresion -> varExpresion ? varExpresion . : varExpresion
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

    :               shift and go to state 159
    +               shift and go to state 103
    -               shift and go to state 105
    *               shift and go to state 104
    /               shift and go to state 106
    %               shift and go to state 100
    ^               shift and go to state 111
    ?               shift and go to state 110
    AND             shift and go to state 98
    OR              shift and go to state 109
    EQEQ            shift and go to state 99
    DISTINTO        shift and go to state 101
    >               shift and go to state 102
    <               shift and go to state 107


state 144

    (23) varExpresion -> varExpresion ^ varExpresion .
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

    +               reduce using rule 23 (varExpresion -> varExpresion ^ varExpresion .)
    -               reduce using rule 23 (varExpresion -> varExpresion ^ varExpresion .)
    *               reduce using rule 23 (varExpresion -> varExpresion ^ varExpresion .)
    /               reduce using rule 23 (varExpresion -> varExpresion ^ varExpresion .)
    %               reduce using rule 23 (varExpresion -> varExpresion ^ varExpresion .)
    ^               reduce using rule 23 (varExpresion -> varExpresion ^ varExpresion .)
    ?               reduce using rule 23 (varExpresion -> varExpresion ^ varExpresion .)
    AND             reduce using rule 23 (varExpresion -> varExpresion ^ varExpresion .)
    OR              reduce using rule 23 (varExpresion -> varExpresion ^ varExpresion .)
    EQEQ            reduce using rule 23 (varExpresion -> varExpresion ^ varExpresion .)
    DISTINTO        reduce using rule 23 (varExpresion -> varExpresion ^ varExpresion .)
    >               reduce using rule 23 (varExpresion -> varExpresion ^ varExpresion .)
    <               reduce using rule 23 (varExpresion -> varExpresion ^ varExpresion .)
    )               reduce using rule 23 (varExpresion -> varExpresion ^ varExpresion .)
    ,               reduce using rule 23 (varExpresion -> varExpresion ^ varExpresion .)
    ;               reduce using rule 23 (varExpresion -> varExpresion ^ varExpresion .)
    ]               reduce using rule 23 (varExpresion -> varExpresion ^ varExpresion .)
    :               reduce using rule 23 (varExpresion -> varExpresion ^ varExpresion .)
    }               reduce using rule 23 (varExpresion -> varExpresion ^ varExpresion .)

  ! +               [ shift and go to state 103 ]
  ! -               [ shift and go to state 105 ]
  ! *               [ shift and go to state 104 ]
  ! /               [ shift and go to state 106 ]
  ! %               [ shift and go to state 100 ]
  ! ^               [ shift and go to state 111 ]
  ! ?               [ shift and go to state 110 ]
  ! AND             [ shift and go to state 98 ]
  ! OR              [ shift and go to state 109 ]
  ! EQEQ            [ shift and go to state 99 ]
  ! DISTINTO        [ shift and go to state 101 ]
  ! >               [ shift and go to state 102 ]
  ! <               [ shift and go to state 107 ]


state 145

    (48) elem -> varExpresion , . elem
    (48) elem -> . varExpresion , elem
    (49) elem -> . varExpresion
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    (               shift and go to state 58
    NOT             shift and go to state 69
    ID              shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 112
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    elem                           shift and go to state 160
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 146

    (46) vec -> [ elem ] .

    )               reduce using rule 46 (vec -> [ elem ] .)
    +               reduce using rule 46 (vec -> [ elem ] .)
    -               reduce using rule 46 (vec -> [ elem ] .)
    *               reduce using rule 46 (vec -> [ elem ] .)
    /               reduce using rule 46 (vec -> [ elem ] .)
    %               reduce using rule 46 (vec -> [ elem ] .)
    ^               reduce using rule 46 (vec -> [ elem ] .)
    ?               reduce using rule 46 (vec -> [ elem ] .)
    AND             reduce using rule 46 (vec -> [ elem ] .)
    OR              reduce using rule 46 (vec -> [ elem ] .)
    EQEQ            reduce using rule 46 (vec -> [ elem ] .)
    DISTINTO        reduce using rule 46 (vec -> [ elem ] .)
    >               reduce using rule 46 (vec -> [ elem ] .)
    <               reduce using rule 46 (vec -> [ elem ] .)
    ,               reduce using rule 46 (vec -> [ elem ] .)
    ]               reduce using rule 46 (vec -> [ elem ] .)
    ;               reduce using rule 46 (vec -> [ elem ] .)
    :               reduce using rule 46 (vec -> [ elem ] .)
    }               reduce using rule 46 (vec -> [ elem ] .)


state 147

    (51) m -> m [ . varExpresion ]
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    (               shift and go to state 58
    NOT             shift and go to state 69
    ID              shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 161
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 148

    (53) reg -> ID . ID .

    )               reduce using rule 53 (reg -> ID . ID .)
    +               reduce using rule 53 (reg -> ID . ID .)
    -               reduce using rule 53 (reg -> ID . ID .)
    *               reduce using rule 53 (reg -> ID . ID .)
    /               reduce using rule 53 (reg -> ID . ID .)
    %               reduce using rule 53 (reg -> ID . ID .)
    ^               reduce using rule 53 (reg -> ID . ID .)
    ?               reduce using rule 53 (reg -> ID . ID .)
    AND             reduce using rule 53 (reg -> ID . ID .)
    OR              reduce using rule 53 (reg -> ID . ID .)
    EQEQ            reduce using rule 53 (reg -> ID . ID .)
    DISTINTO        reduce using rule 53 (reg -> ID . ID .)
    >               reduce using rule 53 (reg -> ID . ID .)
    <               reduce using rule 53 (reg -> ID . ID .)
    ,               reduce using rule 53 (reg -> ID . ID .)
    ;               reduce using rule 53 (reg -> ID . ID .)
    ]               reduce using rule 53 (reg -> ID . ID .)
    :               reduce using rule 53 (reg -> ID . ID .)
    }               reduce using rule 53 (reg -> ID . ID .)


state 149

    (50) m -> [ varExpresion . ]
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

    ]               shift and go to state 162
    +               shift and go to state 103
    -               shift and go to state 105
    *               shift and go to state 104
    /               shift and go to state 106
    %               shift and go to state 100
    ^               shift and go to state 111
    ?               shift and go to state 110
    AND             shift and go to state 98
    OR              shift and go to state 109
    EQEQ            shift and go to state 99
    DISTINTO        shift and go to state 101
    >               shift and go to state 102
    <               shift and go to state 107


state 150

    (52) reg -> { campos } .

    )               reduce using rule 52 (reg -> { campos } .)
    +               reduce using rule 52 (reg -> { campos } .)
    -               reduce using rule 52 (reg -> { campos } .)
    *               reduce using rule 52 (reg -> { campos } .)
    /               reduce using rule 52 (reg -> { campos } .)
    %               reduce using rule 52 (reg -> { campos } .)
    ^               reduce using rule 52 (reg -> { campos } .)
    ?               reduce using rule 52 (reg -> { campos } .)
    AND             reduce using rule 52 (reg -> { campos } .)
    OR              reduce using rule 52 (reg -> { campos } .)
    EQEQ            reduce using rule 52 (reg -> { campos } .)
    DISTINTO        reduce using rule 52 (reg -> { campos } .)
    >               reduce using rule 52 (reg -> { campos } .)
    <               reduce using rule 52 (reg -> { campos } .)
    ,               reduce using rule 52 (reg -> { campos } .)
    ;               reduce using rule 52 (reg -> { campos } .)
    ]               reduce using rule 52 (reg -> { campos } .)
    :               reduce using rule 52 (reg -> { campos } .)
    }               reduce using rule 52 (reg -> { campos } .)


state 151

    (54) campos -> ID : . varExpresion , campos
    (55) campos -> ID : . varExpresion
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    (               shift and go to state 58
    NOT             shift and go to state 69
    ID              shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 163
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 152

    (68) funcBool -> COLINEALES ( varExpresion , varExpresion . )
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

    )               shift and go to state 164
    +               shift and go to state 103
    -               shift and go to state 105
    *               shift and go to state 104
    /               shift and go to state 106
    %               shift and go to state 100
    ^               shift and go to state 111
    ?               shift and go to state 110
    AND             shift and go to state 98
    OR              shift and go to state 109
    EQEQ            shift and go to state 99
    DISTINTO        shift and go to state 101
    >               shift and go to state 102
    <               shift and go to state 107


state 153

    (12) loop -> FOR ( varExpresion ; varExpresion . ; varOps ) bloque
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

    ;               shift and go to state 165
    +               shift and go to state 103
    -               shift and go to state 105
    *               shift and go to state 104
    /               shift and go to state 106
    %               shift and go to state 100
    ^               shift and go to state 111
    ?               shift and go to state 110
    AND             shift and go to state 98
    OR              shift and go to state 109
    EQEQ            shift and go to state 99
    DISTINTO        shift and go to state 101
    >               shift and go to state 102
    <               shift and go to state 107


state 154

    (13) if -> IF ( varExpresion ) THEN . bloque else
    (16) bloque -> . sentencia
    (17) bloque -> . { g }
    (4) sentencia -> . varOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (60) func -> . funcReturn
    (61) func -> . funcVoid
    (73) varAsig -> . ID MENOSEQ varAsig
    (74) varAsig -> . ID MASEQ varAsig
    (75) varAsig -> . ID MULEQ varAsig
    (76) varAsig -> . ID DIVEQ varAsig
    (77) varAsig -> . ID = varAsig
    (78) varAsig -> . ID MASEQ varExpresion
    (79) varAsig -> . ID MENOSEQ varExpresion
    (80) varAsig -> . ID MULEQ varExpresion
    (81) varAsig -> . ID DIVEQ varExpresion
    (82) varAsig -> . ID = varExpresion
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (69) funcVoid -> . PRINT ( varExpresion )
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    {               shift and go to state 30
    RETURN          shift and go to state 2
    +               shift and go to state 10
    -               shift and go to state 12
    ID              shift and go to state 17
    PRINT           shift and go to state 7
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    varAsig                        shift and go to state 19
    sentencia                      shift and go to state 29
    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    funcReturn                     shift and go to state 23
    varOps                         shift and go to state 11
    funcVoid                       shift and go to state 13
    func                           shift and go to state 16
    bloque                         shift and go to state 166
    funcInt                        shift and go to state 5

state 155

    (65) funcInt -> MULTIESCALAR ( varExpresion , varExpresion . , param )
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

    ,               shift and go to state 167
    +               shift and go to state 103
    -               shift and go to state 105
    *               shift and go to state 104
    /               shift and go to state 106
    %               shift and go to state 100
    ^               shift and go to state 111
    ?               shift and go to state 110
    AND             shift and go to state 98
    OR              shift and go to state 109
    EQEQ            shift and go to state 99
    DISTINTO        shift and go to state 101
    >               shift and go to state 102
    <               shift and go to state 107


state 156

    (11) loop -> DO bloque WHILE ( varExpresion ) . ;

    ;               shift and go to state 168


state 157

    (25) varExpresion -> ( + ( varExpresion . ) )
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

    )               shift and go to state 169
    +               shift and go to state 103
    -               shift and go to state 105
    *               shift and go to state 104
    /               shift and go to state 106
    %               shift and go to state 100
    ^               shift and go to state 111
    ?               shift and go to state 110
    AND             shift and go to state 98
    OR              shift and go to state 109
    EQEQ            shift and go to state 99
    DISTINTO        shift and go to state 101
    >               shift and go to state 102
    <               shift and go to state 107


state 158

    (24) varExpresion -> ( - ( varExpresion . ) )
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

    )               shift and go to state 170
    +               shift and go to state 103
    -               shift and go to state 105
    *               shift and go to state 104
    /               shift and go to state 106
    %               shift and go to state 100
    ^               shift and go to state 111
    ?               shift and go to state 110
    AND             shift and go to state 98
    OR              shift and go to state 109
    EQEQ            shift and go to state 99
    DISTINTO        shift and go to state 101
    >               shift and go to state 102
    <               shift and go to state 107


state 159

    (26) varExpresion -> varExpresion ? varExpresion : . varExpresion
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    (               shift and go to state 58
    NOT             shift and go to state 69
    ID              shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 171
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67

state 160

    (48) elem -> varExpresion , elem .

    ]               reduce using rule 48 (elem -> varExpresion , elem .)


state 161

    (51) m -> m [ varExpresion . ]
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

    ]               shift and go to state 172
    +               shift and go to state 103
    -               shift and go to state 105
    *               shift and go to state 104
    /               shift and go to state 106
    %               shift and go to state 100
    ^               shift and go to state 111
    ?               shift and go to state 110
    AND             shift and go to state 98
    OR              shift and go to state 109
    EQEQ            shift and go to state 99
    DISTINTO        shift and go to state 101
    >               shift and go to state 102
    <               shift and go to state 107


state 162

    (50) m -> [ varExpresion ] .

    [               reduce using rule 50 (m -> [ varExpresion ] .)
    )               reduce using rule 50 (m -> [ varExpresion ] .)
    +               reduce using rule 50 (m -> [ varExpresion ] .)
    -               reduce using rule 50 (m -> [ varExpresion ] .)
    *               reduce using rule 50 (m -> [ varExpresion ] .)
    /               reduce using rule 50 (m -> [ varExpresion ] .)
    %               reduce using rule 50 (m -> [ varExpresion ] .)
    ^               reduce using rule 50 (m -> [ varExpresion ] .)
    ?               reduce using rule 50 (m -> [ varExpresion ] .)
    AND             reduce using rule 50 (m -> [ varExpresion ] .)
    OR              reduce using rule 50 (m -> [ varExpresion ] .)
    EQEQ            reduce using rule 50 (m -> [ varExpresion ] .)
    DISTINTO        reduce using rule 50 (m -> [ varExpresion ] .)
    >               reduce using rule 50 (m -> [ varExpresion ] .)
    <               reduce using rule 50 (m -> [ varExpresion ] .)
    ,               reduce using rule 50 (m -> [ varExpresion ] .)
    ;               reduce using rule 50 (m -> [ varExpresion ] .)
    ]               reduce using rule 50 (m -> [ varExpresion ] .)
    :               reduce using rule 50 (m -> [ varExpresion ] .)
    }               reduce using rule 50 (m -> [ varExpresion ] .)


state 163

    (54) campos -> ID : varExpresion . , campos
    (55) campos -> ID : varExpresion .
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

    ,               shift and go to state 173
    }               reduce using rule 55 (campos -> ID : varExpresion .)
    +               shift and go to state 103
    -               shift and go to state 105
    *               shift and go to state 104
    /               shift and go to state 106
    %               shift and go to state 100
    ^               shift and go to state 111
    ?               shift and go to state 110
    AND             shift and go to state 98
    OR              shift and go to state 109
    EQEQ            shift and go to state 99
    DISTINTO        shift and go to state 101
    >               shift and go to state 102
    <               shift and go to state 107


state 164

    (68) funcBool -> COLINEALES ( varExpresion , varExpresion ) .

    +               reduce using rule 68 (funcBool -> COLINEALES ( varExpresion , varExpresion ) .)
    -               reduce using rule 68 (funcBool -> COLINEALES ( varExpresion , varExpresion ) .)
    *               reduce using rule 68 (funcBool -> COLINEALES ( varExpresion , varExpresion ) .)
    /               reduce using rule 68 (funcBool -> COLINEALES ( varExpresion , varExpresion ) .)
    %               reduce using rule 68 (funcBool -> COLINEALES ( varExpresion , varExpresion ) .)
    ^               reduce using rule 68 (funcBool -> COLINEALES ( varExpresion , varExpresion ) .)
    ?               reduce using rule 68 (funcBool -> COLINEALES ( varExpresion , varExpresion ) .)
    AND             reduce using rule 68 (funcBool -> COLINEALES ( varExpresion , varExpresion ) .)
    OR              reduce using rule 68 (funcBool -> COLINEALES ( varExpresion , varExpresion ) .)
    EQEQ            reduce using rule 68 (funcBool -> COLINEALES ( varExpresion , varExpresion ) .)
    DISTINTO        reduce using rule 68 (funcBool -> COLINEALES ( varExpresion , varExpresion ) .)
    >               reduce using rule 68 (funcBool -> COLINEALES ( varExpresion , varExpresion ) .)
    <               reduce using rule 68 (funcBool -> COLINEALES ( varExpresion , varExpresion ) .)
    )               reduce using rule 68 (funcBool -> COLINEALES ( varExpresion , varExpresion ) .)
    ,               reduce using rule 68 (funcBool -> COLINEALES ( varExpresion , varExpresion ) .)
    ;               reduce using rule 68 (funcBool -> COLINEALES ( varExpresion , varExpresion ) .)
    ]               reduce using rule 68 (funcBool -> COLINEALES ( varExpresion , varExpresion ) .)
    :               reduce using rule 68 (funcBool -> COLINEALES ( varExpresion , varExpresion ) .)
    }               reduce using rule 68 (funcBool -> COLINEALES ( varExpresion , varExpresion ) .)


state 165

    (12) loop -> FOR ( varExpresion ; varExpresion ; . varOps ) bloque
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -

    +               shift and go to state 10
    -               shift and go to state 12
    ID              shift and go to state 175

    varOps                         shift and go to state 174

state 166

    (13) if -> IF ( varExpresion ) THEN bloque . else
    (14) else -> . ELSE bloque
    (15) else -> . empty
    (72) empty -> .

    ELSE            shift and go to state 177
    RETURN          reduce using rule 72 (empty -> .)
    +               reduce using rule 72 (empty -> .)
    -               reduce using rule 72 (empty -> .)
    ID              reduce using rule 72 (empty -> .)
    IF              reduce using rule 72 (empty -> .)
    WHILE           reduce using rule 72 (empty -> .)
    DO              reduce using rule 72 (empty -> .)
    FOR             reduce using rule 72 (empty -> .)
    PRINT           reduce using rule 72 (empty -> .)
    MULTIESCALAR    reduce using rule 72 (empty -> .)
    LENGTH          reduce using rule 72 (empty -> .)
    CAPITALIZAR     reduce using rule 72 (empty -> .)
    COLINEALES      reduce using rule 72 (empty -> .)
    $end            reduce using rule 72 (empty -> .)
    }               reduce using rule 72 (empty -> .)

    empty                          shift and go to state 178
    else                           shift and go to state 176

state 167

    (65) funcInt -> MULTIESCALAR ( varExpresion , varExpresion , . param )
    (70) param -> . varExpresion
    (71) param -> . empty
    (18) varExpresion -> . varExpresion + varExpresion
    (19) varExpresion -> . varExpresion - varExpresion
    (20) varExpresion -> . varExpresion * varExpresion
    (21) varExpresion -> . varExpresion / varExpresion
    (22) varExpresion -> . varExpresion % varExpresion
    (23) varExpresion -> . varExpresion ^ varExpresion
    (24) varExpresion -> . ( - ( varExpresion ) )
    (25) varExpresion -> . ( + ( varExpresion ) )
    (26) varExpresion -> . varExpresion ? varExpresion : varExpresion
    (27) varExpresion -> . varExpresion AND varExpresion
    (28) varExpresion -> . NOT varExpresion
    (29) varExpresion -> . varExpresion OR varExpresion
    (30) varExpresion -> . varExpresion EQEQ varExpresion
    (31) varExpresion -> . varExpresion DISTINTO varExpresion
    (32) varExpresion -> . varExpresion > varExpresion
    (33) varExpresion -> . varExpresion < varExpresion
    (34) varExpresion -> . ( varExpresion )
    (35) varExpresion -> . tipos
    (36) varExpresion -> . funcReturn
    (37) varExpresion -> . varOps
    (38) varExpresion -> . vec
    (39) varExpresion -> . ID m
    (40) varExpresion -> . reg
    (72) empty -> .
    (41) tipos -> . INT
    (42) tipos -> . FLOAT
    (43) tipos -> . STRING
    (44) tipos -> . BOOL
    (45) tipos -> . ID
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (46) vec -> . [ elem ]
    (47) vec -> . ID m
    (52) reg -> . { campos }
    (53) reg -> . ID . ID
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    (               shift and go to state 58
    NOT             shift and go to state 69
    ID              shift and go to state 63
    )               reduce using rule 72 (empty -> .)
    INT             shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 61
    BOOL            shift and go to state 68
    +               shift and go to state 10
    -               shift and go to state 12
    [               shift and go to state 62
    {               shift and go to state 70
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    varExpresion                   shift and go to state 180
    funcReturn                     shift and go to state 65
    varOps                         shift and go to state 56
    param                          shift and go to state 179
    tipos                          shift and go to state 57
    vec                            shift and go to state 60
    funcInt                        shift and go to state 5
    reg                            shift and go to state 67
    empty                          shift and go to state 181

state 168

    (11) loop -> DO bloque WHILE ( varExpresion ) ; .

    RETURN          reduce using rule 11 (loop -> DO bloque WHILE ( varExpresion ) ; .)
    +               reduce using rule 11 (loop -> DO bloque WHILE ( varExpresion ) ; .)
    -               reduce using rule 11 (loop -> DO bloque WHILE ( varExpresion ) ; .)
    ID              reduce using rule 11 (loop -> DO bloque WHILE ( varExpresion ) ; .)
    IF              reduce using rule 11 (loop -> DO bloque WHILE ( varExpresion ) ; .)
    WHILE           reduce using rule 11 (loop -> DO bloque WHILE ( varExpresion ) ; .)
    DO              reduce using rule 11 (loop -> DO bloque WHILE ( varExpresion ) ; .)
    FOR             reduce using rule 11 (loop -> DO bloque WHILE ( varExpresion ) ; .)
    PRINT           reduce using rule 11 (loop -> DO bloque WHILE ( varExpresion ) ; .)
    MULTIESCALAR    reduce using rule 11 (loop -> DO bloque WHILE ( varExpresion ) ; .)
    LENGTH          reduce using rule 11 (loop -> DO bloque WHILE ( varExpresion ) ; .)
    CAPITALIZAR     reduce using rule 11 (loop -> DO bloque WHILE ( varExpresion ) ; .)
    COLINEALES      reduce using rule 11 (loop -> DO bloque WHILE ( varExpresion ) ; .)
    }               reduce using rule 11 (loop -> DO bloque WHILE ( varExpresion ) ; .)
    $end            reduce using rule 11 (loop -> DO bloque WHILE ( varExpresion ) ; .)


state 169

    (25) varExpresion -> ( + ( varExpresion ) . )

    )               shift and go to state 182


state 170

    (24) varExpresion -> ( - ( varExpresion ) . )

    )               shift and go to state 183


state 171

    (26) varExpresion -> varExpresion ? varExpresion : varExpresion .
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for ? resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for DISTINTO resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
    )               reduce using rule 26 (varExpresion -> varExpresion ? varExpresion : varExpresion .)
    ,               reduce using rule 26 (varExpresion -> varExpresion ? varExpresion : varExpresion .)
    ;               reduce using rule 26 (varExpresion -> varExpresion ? varExpresion : varExpresion .)
    ]               reduce using rule 26 (varExpresion -> varExpresion ? varExpresion : varExpresion .)
    :               reduce using rule 26 (varExpresion -> varExpresion ? varExpresion : varExpresion .)
    }               reduce using rule 26 (varExpresion -> varExpresion ? varExpresion : varExpresion .)
    +               shift and go to state 103
    -               shift and go to state 105
    *               shift and go to state 104
    /               shift and go to state 106
    %               shift and go to state 100
    ^               shift and go to state 111
    ?               shift and go to state 110
    AND             shift and go to state 98
    OR              shift and go to state 109
    EQEQ            shift and go to state 99
    DISTINTO        shift and go to state 101
    >               shift and go to state 102
    <               shift and go to state 107

  ! +               [ reduce using rule 26 (varExpresion -> varExpresion ? varExpresion : varExpresion .) ]
  ! -               [ reduce using rule 26 (varExpresion -> varExpresion ? varExpresion : varExpresion .) ]
  ! *               [ reduce using rule 26 (varExpresion -> varExpresion ? varExpresion : varExpresion .) ]
  ! /               [ reduce using rule 26 (varExpresion -> varExpresion ? varExpresion : varExpresion .) ]
  ! %               [ reduce using rule 26 (varExpresion -> varExpresion ? varExpresion : varExpresion .) ]
  ! ^               [ reduce using rule 26 (varExpresion -> varExpresion ? varExpresion : varExpresion .) ]
  ! ?               [ reduce using rule 26 (varExpresion -> varExpresion ? varExpresion : varExpresion .) ]
  ! AND             [ reduce using rule 26 (varExpresion -> varExpresion ? varExpresion : varExpresion .) ]
  ! OR              [ reduce using rule 26 (varExpresion -> varExpresion ? varExpresion : varExpresion .) ]
  ! EQEQ            [ reduce using rule 26 (varExpresion -> varExpresion ? varExpresion : varExpresion .) ]
  ! DISTINTO        [ reduce using rule 26 (varExpresion -> varExpresion ? varExpresion : varExpresion .) ]
  ! >               [ reduce using rule 26 (varExpresion -> varExpresion ? varExpresion : varExpresion .) ]
  ! <               [ reduce using rule 26 (varExpresion -> varExpresion ? varExpresion : varExpresion .) ]


state 172

    (51) m -> m [ varExpresion ] .

    [               reduce using rule 51 (m -> m [ varExpresion ] .)
    )               reduce using rule 51 (m -> m [ varExpresion ] .)
    +               reduce using rule 51 (m -> m [ varExpresion ] .)
    -               reduce using rule 51 (m -> m [ varExpresion ] .)
    *               reduce using rule 51 (m -> m [ varExpresion ] .)
    /               reduce using rule 51 (m -> m [ varExpresion ] .)
    %               reduce using rule 51 (m -> m [ varExpresion ] .)
    ^               reduce using rule 51 (m -> m [ varExpresion ] .)
    ?               reduce using rule 51 (m -> m [ varExpresion ] .)
    AND             reduce using rule 51 (m -> m [ varExpresion ] .)
    OR              reduce using rule 51 (m -> m [ varExpresion ] .)
    EQEQ            reduce using rule 51 (m -> m [ varExpresion ] .)
    DISTINTO        reduce using rule 51 (m -> m [ varExpresion ] .)
    >               reduce using rule 51 (m -> m [ varExpresion ] .)
    <               reduce using rule 51 (m -> m [ varExpresion ] .)
    ,               reduce using rule 51 (m -> m [ varExpresion ] .)
    ;               reduce using rule 51 (m -> m [ varExpresion ] .)
    ]               reduce using rule 51 (m -> m [ varExpresion ] .)
    :               reduce using rule 51 (m -> m [ varExpresion ] .)
    }               reduce using rule 51 (m -> m [ varExpresion ] .)


state 173

    (54) campos -> ID : varExpresion , . campos
    (54) campos -> . ID : varExpresion , campos
    (55) campos -> . ID : varExpresion

    ID              shift and go to state 119

    campos                         shift and go to state 184

state 174

    (12) loop -> FOR ( varExpresion ; varExpresion ; varOps . ) bloque

    )               shift and go to state 185


state 175

    (58) varOps -> ID . + +
    (59) varOps -> ID . - -

    +               shift and go to state 44
    -               shift and go to state 45


state 176

    (13) if -> IF ( varExpresion ) THEN bloque else .

    RETURN          reduce using rule 13 (if -> IF ( varExpresion ) THEN bloque else .)
    +               reduce using rule 13 (if -> IF ( varExpresion ) THEN bloque else .)
    -               reduce using rule 13 (if -> IF ( varExpresion ) THEN bloque else .)
    ID              reduce using rule 13 (if -> IF ( varExpresion ) THEN bloque else .)
    IF              reduce using rule 13 (if -> IF ( varExpresion ) THEN bloque else .)
    WHILE           reduce using rule 13 (if -> IF ( varExpresion ) THEN bloque else .)
    DO              reduce using rule 13 (if -> IF ( varExpresion ) THEN bloque else .)
    FOR             reduce using rule 13 (if -> IF ( varExpresion ) THEN bloque else .)
    PRINT           reduce using rule 13 (if -> IF ( varExpresion ) THEN bloque else .)
    MULTIESCALAR    reduce using rule 13 (if -> IF ( varExpresion ) THEN bloque else .)
    LENGTH          reduce using rule 13 (if -> IF ( varExpresion ) THEN bloque else .)
    CAPITALIZAR     reduce using rule 13 (if -> IF ( varExpresion ) THEN bloque else .)
    COLINEALES      reduce using rule 13 (if -> IF ( varExpresion ) THEN bloque else .)
    $end            reduce using rule 13 (if -> IF ( varExpresion ) THEN bloque else .)
    }               reduce using rule 13 (if -> IF ( varExpresion ) THEN bloque else .)


state 177

    (14) else -> ELSE . bloque
    (16) bloque -> . sentencia
    (17) bloque -> . { g }
    (4) sentencia -> . varOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (60) func -> . funcReturn
    (61) func -> . funcVoid
    (73) varAsig -> . ID MENOSEQ varAsig
    (74) varAsig -> . ID MASEQ varAsig
    (75) varAsig -> . ID MULEQ varAsig
    (76) varAsig -> . ID DIVEQ varAsig
    (77) varAsig -> . ID = varAsig
    (78) varAsig -> . ID MASEQ varExpresion
    (79) varAsig -> . ID MENOSEQ varExpresion
    (80) varAsig -> . ID MULEQ varExpresion
    (81) varAsig -> . ID DIVEQ varExpresion
    (82) varAsig -> . ID = varExpresion
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (69) funcVoid -> . PRINT ( varExpresion )
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    {               shift and go to state 30
    RETURN          shift and go to state 2
    +               shift and go to state 10
    -               shift and go to state 12
    ID              shift and go to state 17
    PRINT           shift and go to state 7
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    varAsig                        shift and go to state 19
    sentencia                      shift and go to state 29
    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    funcReturn                     shift and go to state 23
    varOps                         shift and go to state 11
    funcVoid                       shift and go to state 13
    func                           shift and go to state 16
    bloque                         shift and go to state 186
    funcInt                        shift and go to state 5

state 178

    (15) else -> empty .

    RETURN          reduce using rule 15 (else -> empty .)
    +               reduce using rule 15 (else -> empty .)
    -               reduce using rule 15 (else -> empty .)
    ID              reduce using rule 15 (else -> empty .)
    IF              reduce using rule 15 (else -> empty .)
    WHILE           reduce using rule 15 (else -> empty .)
    DO              reduce using rule 15 (else -> empty .)
    FOR             reduce using rule 15 (else -> empty .)
    PRINT           reduce using rule 15 (else -> empty .)
    MULTIESCALAR    reduce using rule 15 (else -> empty .)
    LENGTH          reduce using rule 15 (else -> empty .)
    CAPITALIZAR     reduce using rule 15 (else -> empty .)
    COLINEALES      reduce using rule 15 (else -> empty .)
    $end            reduce using rule 15 (else -> empty .)
    }               reduce using rule 15 (else -> empty .)


state 179

    (65) funcInt -> MULTIESCALAR ( varExpresion , varExpresion , param . )

    )               shift and go to state 187


state 180

    (70) param -> varExpresion .
    (18) varExpresion -> varExpresion . + varExpresion
    (19) varExpresion -> varExpresion . - varExpresion
    (20) varExpresion -> varExpresion . * varExpresion
    (21) varExpresion -> varExpresion . / varExpresion
    (22) varExpresion -> varExpresion . % varExpresion
    (23) varExpresion -> varExpresion . ^ varExpresion
    (26) varExpresion -> varExpresion . ? varExpresion : varExpresion
    (27) varExpresion -> varExpresion . AND varExpresion
    (29) varExpresion -> varExpresion . OR varExpresion
    (30) varExpresion -> varExpresion . EQEQ varExpresion
    (31) varExpresion -> varExpresion . DISTINTO varExpresion
    (32) varExpresion -> varExpresion . > varExpresion
    (33) varExpresion -> varExpresion . < varExpresion

    )               reduce using rule 70 (param -> varExpresion .)
    +               shift and go to state 103
    -               shift and go to state 105
    *               shift and go to state 104
    /               shift and go to state 106
    %               shift and go to state 100
    ^               shift and go to state 111
    ?               shift and go to state 110
    AND             shift and go to state 98
    OR              shift and go to state 109
    EQEQ            shift and go to state 99
    DISTINTO        shift and go to state 101
    >               shift and go to state 102
    <               shift and go to state 107


state 181

    (71) param -> empty .

    )               reduce using rule 71 (param -> empty .)


state 182

    (25) varExpresion -> ( + ( varExpresion ) ) .

    +               reduce using rule 25 (varExpresion -> ( + ( varExpresion ) ) .)
    -               reduce using rule 25 (varExpresion -> ( + ( varExpresion ) ) .)
    *               reduce using rule 25 (varExpresion -> ( + ( varExpresion ) ) .)
    /               reduce using rule 25 (varExpresion -> ( + ( varExpresion ) ) .)
    %               reduce using rule 25 (varExpresion -> ( + ( varExpresion ) ) .)
    ^               reduce using rule 25 (varExpresion -> ( + ( varExpresion ) ) .)
    ?               reduce using rule 25 (varExpresion -> ( + ( varExpresion ) ) .)
    AND             reduce using rule 25 (varExpresion -> ( + ( varExpresion ) ) .)
    OR              reduce using rule 25 (varExpresion -> ( + ( varExpresion ) ) .)
    EQEQ            reduce using rule 25 (varExpresion -> ( + ( varExpresion ) ) .)
    DISTINTO        reduce using rule 25 (varExpresion -> ( + ( varExpresion ) ) .)
    >               reduce using rule 25 (varExpresion -> ( + ( varExpresion ) ) .)
    <               reduce using rule 25 (varExpresion -> ( + ( varExpresion ) ) .)
    )               reduce using rule 25 (varExpresion -> ( + ( varExpresion ) ) .)
    ,               reduce using rule 25 (varExpresion -> ( + ( varExpresion ) ) .)
    ;               reduce using rule 25 (varExpresion -> ( + ( varExpresion ) ) .)
    ]               reduce using rule 25 (varExpresion -> ( + ( varExpresion ) ) .)
    :               reduce using rule 25 (varExpresion -> ( + ( varExpresion ) ) .)
    }               reduce using rule 25 (varExpresion -> ( + ( varExpresion ) ) .)


state 183

    (24) varExpresion -> ( - ( varExpresion ) ) .

    +               reduce using rule 24 (varExpresion -> ( - ( varExpresion ) ) .)
    -               reduce using rule 24 (varExpresion -> ( - ( varExpresion ) ) .)
    *               reduce using rule 24 (varExpresion -> ( - ( varExpresion ) ) .)
    /               reduce using rule 24 (varExpresion -> ( - ( varExpresion ) ) .)
    %               reduce using rule 24 (varExpresion -> ( - ( varExpresion ) ) .)
    ^               reduce using rule 24 (varExpresion -> ( - ( varExpresion ) ) .)
    ?               reduce using rule 24 (varExpresion -> ( - ( varExpresion ) ) .)
    AND             reduce using rule 24 (varExpresion -> ( - ( varExpresion ) ) .)
    OR              reduce using rule 24 (varExpresion -> ( - ( varExpresion ) ) .)
    EQEQ            reduce using rule 24 (varExpresion -> ( - ( varExpresion ) ) .)
    DISTINTO        reduce using rule 24 (varExpresion -> ( - ( varExpresion ) ) .)
    >               reduce using rule 24 (varExpresion -> ( - ( varExpresion ) ) .)
    <               reduce using rule 24 (varExpresion -> ( - ( varExpresion ) ) .)
    )               reduce using rule 24 (varExpresion -> ( - ( varExpresion ) ) .)
    ,               reduce using rule 24 (varExpresion -> ( - ( varExpresion ) ) .)
    ;               reduce using rule 24 (varExpresion -> ( - ( varExpresion ) ) .)
    ]               reduce using rule 24 (varExpresion -> ( - ( varExpresion ) ) .)
    :               reduce using rule 24 (varExpresion -> ( - ( varExpresion ) ) .)
    }               reduce using rule 24 (varExpresion -> ( - ( varExpresion ) ) .)


state 184

    (54) campos -> ID : varExpresion , campos .

    }               reduce using rule 54 (campos -> ID : varExpresion , campos .)


state 185

    (12) loop -> FOR ( varExpresion ; varExpresion ; varOps ) . bloque
    (16) bloque -> . sentencia
    (17) bloque -> . { g }
    (4) sentencia -> . varOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (56) varOps -> . + + ID
    (57) varOps -> . - - ID
    (58) varOps -> . ID + +
    (59) varOps -> . ID - -
    (60) func -> . funcReturn
    (61) func -> . funcVoid
    (73) varAsig -> . ID MENOSEQ varAsig
    (74) varAsig -> . ID MASEQ varAsig
    (75) varAsig -> . ID MULEQ varAsig
    (76) varAsig -> . ID DIVEQ varAsig
    (77) varAsig -> . ID = varAsig
    (78) varAsig -> . ID MASEQ varExpresion
    (79) varAsig -> . ID MENOSEQ varExpresion
    (80) varAsig -> . ID MULEQ varExpresion
    (81) varAsig -> . ID DIVEQ varExpresion
    (82) varAsig -> . ID = varExpresion
    (62) funcReturn -> . funcInt
    (63) funcReturn -> . funcString
    (64) funcReturn -> . funcBool
    (69) funcVoid -> . PRINT ( varExpresion )
    (65) funcInt -> . MULTIESCALAR ( varExpresion , varExpresion , param )
    (66) funcInt -> . LENGTH ( varExpresion )
    (67) funcString -> . CAPITALIZAR ( varExpresion )
    (68) funcBool -> . COLINEALES ( varExpresion , varExpresion )

    {               shift and go to state 30
    RETURN          shift and go to state 2
    +               shift and go to state 10
    -               shift and go to state 12
    ID              shift and go to state 17
    PRINT           shift and go to state 7
    MULTIESCALAR    shift and go to state 22
    LENGTH          shift and go to state 25
    CAPITALIZAR     shift and go to state 24
    COLINEALES      shift and go to state 14

    varAsig                        shift and go to state 19
    sentencia                      shift and go to state 29
    funcBool                       shift and go to state 3
    funcString                     shift and go to state 21
    funcReturn                     shift and go to state 23
    varOps                         shift and go to state 11
    funcVoid                       shift and go to state 13
    func                           shift and go to state 16
    bloque                         shift and go to state 188
    funcInt                        shift and go to state 5

state 186

    (14) else -> ELSE bloque .

    RETURN          reduce using rule 14 (else -> ELSE bloque .)
    +               reduce using rule 14 (else -> ELSE bloque .)
    -               reduce using rule 14 (else -> ELSE bloque .)
    ID              reduce using rule 14 (else -> ELSE bloque .)
    IF              reduce using rule 14 (else -> ELSE bloque .)
    WHILE           reduce using rule 14 (else -> ELSE bloque .)
    DO              reduce using rule 14 (else -> ELSE bloque .)
    FOR             reduce using rule 14 (else -> ELSE bloque .)
    PRINT           reduce using rule 14 (else -> ELSE bloque .)
    MULTIESCALAR    reduce using rule 14 (else -> ELSE bloque .)
    LENGTH          reduce using rule 14 (else -> ELSE bloque .)
    CAPITALIZAR     reduce using rule 14 (else -> ELSE bloque .)
    COLINEALES      reduce using rule 14 (else -> ELSE bloque .)
    $end            reduce using rule 14 (else -> ELSE bloque .)
    }               reduce using rule 14 (else -> ELSE bloque .)


state 187

    (65) funcInt -> MULTIESCALAR ( varExpresion , varExpresion , param ) .

    ;               reduce using rule 65 (funcInt -> MULTIESCALAR ( varExpresion , varExpresion , param ) .)
    +               reduce using rule 65 (funcInt -> MULTIESCALAR ( varExpresion , varExpresion , param ) .)
    -               reduce using rule 65 (funcInt -> MULTIESCALAR ( varExpresion , varExpresion , param ) .)
    *               reduce using rule 65 (funcInt -> MULTIESCALAR ( varExpresion , varExpresion , param ) .)
    /               reduce using rule 65 (funcInt -> MULTIESCALAR ( varExpresion , varExpresion , param ) .)
    %               reduce using rule 65 (funcInt -> MULTIESCALAR ( varExpresion , varExpresion , param ) .)
    ^               reduce using rule 65 (funcInt -> MULTIESCALAR ( varExpresion , varExpresion , param ) .)
    ?               reduce using rule 65 (funcInt -> MULTIESCALAR ( varExpresion , varExpresion , param ) .)
    AND             reduce using rule 65 (funcInt -> MULTIESCALAR ( varExpresion , varExpresion , param ) .)
    OR              reduce using rule 65 (funcInt -> MULTIESCALAR ( varExpresion , varExpresion , param ) .)
    EQEQ            reduce using rule 65 (funcInt -> MULTIESCALAR ( varExpresion , varExpresion , param ) .)
    DISTINTO        reduce using rule 65 (funcInt -> MULTIESCALAR ( varExpresion , varExpresion , param ) .)
    >               reduce using rule 65 (funcInt -> MULTIESCALAR ( varExpresion , varExpresion , param ) .)
    <               reduce using rule 65 (funcInt -> MULTIESCALAR ( varExpresion , varExpresion , param ) .)
    )               reduce using rule 65 (funcInt -> MULTIESCALAR ( varExpresion , varExpresion , param ) .)
    ,               reduce using rule 65 (funcInt -> MULTIESCALAR ( varExpresion , varExpresion , param ) .)
    ]               reduce using rule 65 (funcInt -> MULTIESCALAR ( varExpresion , varExpresion , param ) .)
    :               reduce using rule 65 (funcInt -> MULTIESCALAR ( varExpresion , varExpresion , param ) .)
    }               reduce using rule 65 (funcInt -> MULTIESCALAR ( varExpresion , varExpresion , param ) .)


state 188

    (12) loop -> FOR ( varExpresion ; varExpresion ; varOps ) bloque .

    RETURN          reduce using rule 12 (loop -> FOR ( varExpresion ; varExpresion ; varOps ) bloque .)
    +               reduce using rule 12 (loop -> FOR ( varExpresion ; varExpresion ; varOps ) bloque .)
    -               reduce using rule 12 (loop -> FOR ( varExpresion ; varExpresion ; varOps ) bloque .)
    ID              reduce using rule 12 (loop -> FOR ( varExpresion ; varExpresion ; varOps ) bloque .)
    IF              reduce using rule 12 (loop -> FOR ( varExpresion ; varExpresion ; varOps ) bloque .)
    WHILE           reduce using rule 12 (loop -> FOR ( varExpresion ; varExpresion ; varOps ) bloque .)
    DO              reduce using rule 12 (loop -> FOR ( varExpresion ; varExpresion ; varOps ) bloque .)
    FOR             reduce using rule 12 (loop -> FOR ( varExpresion ; varExpresion ; varOps ) bloque .)
    PRINT           reduce using rule 12 (loop -> FOR ( varExpresion ; varExpresion ; varOps ) bloque .)
    MULTIESCALAR    reduce using rule 12 (loop -> FOR ( varExpresion ; varExpresion ; varOps ) bloque .)
    LENGTH          reduce using rule 12 (loop -> FOR ( varExpresion ; varExpresion ; varOps ) bloque .)
    CAPITALIZAR     reduce using rule 12 (loop -> FOR ( varExpresion ; varExpresion ; varOps ) bloque .)
    COLINEALES      reduce using rule 12 (loop -> FOR ( varExpresion ; varExpresion ; varOps ) bloque .)
    }               reduce using rule 12 (loop -> FOR ( varExpresion ; varExpresion ; varOps ) bloque .)
    $end            reduce using rule 12 (loop -> FOR ( varExpresion ; varExpresion ; varOps ) bloque .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for + in state 63 resolved as shift
WARNING: shift/reduce conflict for - in state 63 resolved as shift
WARNING: shift/reduce conflict for + in state 77 resolved as shift
WARNING: shift/reduce conflict for - in state 77 resolved as shift
WARNING: shift/reduce conflict for + in state 135 resolved as shift
WARNING: shift/reduce conflict for - in state 135 resolved as shift
WARNING: shift/reduce conflict for * in state 135 resolved as shift
WARNING: shift/reduce conflict for / in state 135 resolved as shift
WARNING: shift/reduce conflict for % in state 135 resolved as shift
WARNING: shift/reduce conflict for ^ in state 135 resolved as shift
WARNING: shift/reduce conflict for ? in state 135 resolved as shift
WARNING: shift/reduce conflict for AND in state 135 resolved as shift
WARNING: shift/reduce conflict for OR in state 135 resolved as shift
WARNING: shift/reduce conflict for EQEQ in state 135 resolved as shift
WARNING: shift/reduce conflict for DISTINTO in state 135 resolved as shift
WARNING: shift/reduce conflict for > in state 135 resolved as shift
WARNING: shift/reduce conflict for < in state 135 resolved as shift
WARNING: shift/reduce conflict for + in state 140 resolved as shift
WARNING: shift/reduce conflict for - in state 140 resolved as shift
WARNING: shift/reduce conflict for * in state 140 resolved as shift
WARNING: shift/reduce conflict for / in state 140 resolved as shift
WARNING: shift/reduce conflict for % in state 140 resolved as shift
WARNING: shift/reduce conflict for ^ in state 140 resolved as shift
WARNING: shift/reduce conflict for ? in state 140 resolved as shift
WARNING: shift/reduce conflict for AND in state 140 resolved as shift
WARNING: shift/reduce conflict for OR in state 140 resolved as shift
WARNING: shift/reduce conflict for EQEQ in state 140 resolved as shift
WARNING: shift/reduce conflict for DISTINTO in state 140 resolved as shift
WARNING: shift/reduce conflict for > in state 140 resolved as shift
WARNING: shift/reduce conflict for < in state 140 resolved as shift
WARNING: shift/reduce conflict for + in state 171 resolved as shift
WARNING: shift/reduce conflict for - in state 171 resolved as shift
WARNING: shift/reduce conflict for * in state 171 resolved as shift
WARNING: shift/reduce conflict for / in state 171 resolved as shift
WARNING: shift/reduce conflict for % in state 171 resolved as shift
WARNING: shift/reduce conflict for ^ in state 171 resolved as shift
WARNING: shift/reduce conflict for ? in state 171 resolved as shift
WARNING: shift/reduce conflict for AND in state 171 resolved as shift
WARNING: shift/reduce conflict for OR in state 171 resolved as shift
WARNING: shift/reduce conflict for EQEQ in state 171 resolved as shift
WARNING: shift/reduce conflict for DISTINTO in state 171 resolved as shift
WARNING: shift/reduce conflict for > in state 171 resolved as shift
WARNING: shift/reduce conflict for < in state 171 resolved as shift
WARNING: reduce/reduce conflict in state 114 resolved using rule (varExpresion -> ID m)
WARNING: rejected rule (vec -> ID m) in state 114
WARNING: Rule (vec -> ID m) is never reduced
