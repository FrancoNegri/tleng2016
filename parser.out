Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    RES
    COMMENT
    BEGIN
    END

Grammar

Rule 0     S' -> g
Rule 1     g -> sentencia g
Rule 2     g -> ctrl g
Rule 3     g -> empty
Rule 4     sentencia -> varsOps ;
Rule 5     sentencia -> func ;
Rule 6     sentencia -> varAsig ;
Rule 7     sentencia -> RETURN ;
Rule 8     ctrl -> if
Rule 9     ctrl -> loop
Rule 10    loop -> WHILE ( expBool ) bloque
Rule 11    loop -> DO bloque WHILE ( expBool ) ;
Rule 12    loop -> FOR ( varAsig ; expBool ; varsOps ) bloque
Rule 13    if -> IF ( expBool ) THEN bloque else
Rule 14    else -> ELSE bloque
Rule 15    else -> empty
Rule 16    bloque -> sentencia
Rule 17    bloque -> { g }
Rule 18    func -> funcReturn
Rule 19    func -> funcVoid
Rule 20    funcReturn -> funcInt
Rule 21    funcReturn -> funcString
Rule 22    funcReturn -> funcBool
Rule 23    funcInt -> MULTIESCALAR ( vec , eMat , param )
Rule 24    funcInt -> LENGTH ( vec )
Rule 25    funcString -> CAPITALIZAR ( expString )
Rule 26    funcBool -> COLINEALES ( vec , vec )
Rule 27    funcVoid -> PRINT ( valores )
Rule 28    param -> expBool
Rule 29    param -> empty
Rule 30    empty -> <empty>
Rule 31    vec -> ID = [ elem ]
Rule 32    elem -> valores , elem
Rule 33    elem -> valores
Rule 34    valores -> eMat
Rule 35    valores -> expBool
Rule 36    valores -> expString
Rule 37    valores -> varYVals
Rule 38    valores -> funcReturn
Rule 39    valores -> reg
Rule 40    valores -> ID . ID
Rule 41    varYVals -> ID
Rule 42    varYVals -> vecVal
Rule 43    vecVal -> ID m
Rule 44    m -> [ INT ]
Rule 45    m -> [ INT ] m
Rule 46    reg -> { campos }
Rule 47    campos -> ID : valores , campos
Rule 48    campos -> valores
Rule 49    varsOps -> MENOSMENOS sMM
Rule 50    varsOps -> MASMAS sMM
Rule 51    varsOps -> sMM
Rule 52    sMM -> ID MASMAS
Rule 53    sMM -> ID MENOSMENOS
Rule 54    sMM -> ID
Rule 55    varAsig -> ID MENOSEQ varAsig
Rule 56    varAsig -> ID MASEQ varAsig
Rule 57    varAsig -> ID MULEQ varAsig
Rule 58    varAsig -> ID DIVEQ varAsig
Rule 59    varAsig -> ID = varAsig
Rule 60    varAsig -> ID MASEQ valores
Rule 61    varAsig -> ID MENOSEQ valores
Rule 62    varAsig -> ID MULEQ valores
Rule 63    varAsig -> ID DIVEQ valores
Rule 64    varAsig -> ID = valores
Rule 65    eMat -> eMat + p
Rule 66    eMat -> eMat - p
Rule 67    eMat -> p
Rule 68    p -> p * exp
Rule 69    p -> p / exp
Rule 70    p -> p % exp
Rule 71    p -> exp
Rule 72    exp -> exp ^ iSing
Rule 73    exp -> iSing
Rule 74    iSing -> - paren
Rule 75    iSing -> + paren
Rule 76    iSing -> paren
Rule 77    paren -> ( eMat )
Rule 78    paren -> INT
Rule 79    paren -> varYVals
Rule 80    paren -> FLOAT
Rule 81    paren -> varsOps
Rule 82    paren -> funcInt
Rule 83    expString -> expString + STRING
Rule 84    expString -> STRING
Rule 85    expString -> varYVals
Rule 86    expString -> funcString
Rule 87    expBool -> or ? expBool : expBool
Rule 88    expBool -> or
Rule 89    or -> or OR and
Rule 90    or -> and
Rule 91    and -> and AND eq
Rule 92    and -> eq
Rule 93    eq -> eq EQEQ tBool
Rule 94    eq -> eq DISTINTO tBool
Rule 95    eq -> mayor
Rule 96    mayor -> tCompare > tCompare
Rule 97    mayor -> menor
Rule 98    menor -> tCompare < tCompare
Rule 99    menor -> not
Rule 100   not -> NOT not
Rule 101   not -> tBool
Rule 102   tBool -> ( expBool )
Rule 103   tBool -> BOOL
Rule 104   tBool -> varYVals
Rule 105   tBool -> funcBool
Rule 106   tCompare -> eMat
Rule 107   tCompare -> varsOps
Rule 108   tCompare -> varYVals

Terminals, with rules where they appear

%                    : 70
(                    : 10 11 12 13 23 24 25 26 27 77 102
)                    : 10 11 12 13 23 24 25 26 27 77 102
*                    : 68
+                    : 65 75 83
,                    : 23 23 26 32 47
-                    : 66 74
.                    : 40
/                    : 69
:                    : 47 87
;                    : 4 5 6 7 11 12 12
<                    : 98
=                    : 31 59 64
>                    : 96
?                    : 87
AND                  : 91
BEGIN                : 
BOOL                 : 103
CAPITALIZAR          : 25
COLINEALES           : 26
COMMENT              : 
DISTINTO             : 94
DIVEQ                : 58 63
DO                   : 11
ELSE                 : 14
END                  : 
EQEQ                 : 93
FLOAT                : 80
FOR                  : 12
ID                   : 31 40 40 41 43 47 52 53 54 55 56 57 58 59 60 61 62 63 64
IF                   : 13
INT                  : 44 45 78
LENGTH               : 24
MASEQ                : 56 60
MASMAS               : 50 52
MENOSEQ              : 55 61
MENOSMENOS           : 49 53
MULEQ                : 57 62
MULTIESCALAR         : 23
NOT                  : 100
OR                   : 89
PRINT                : 27
RES                  : 
RETURN               : 7
STRING               : 83 84
THEN                 : 13
WHILE                : 10 11
[                    : 31 44 45
]                    : 31 44 45
^                    : 72
error                : 
{                    : 17 46
}                    : 17 46

Nonterminals, with rules where they appear

and                  : 89 90 91
bloque               : 10 11 12 13 14
campos               : 46 47
ctrl                 : 2
eMat                 : 23 34 65 66 77 106
elem                 : 31 32
else                 : 13
empty                : 3 15 29
eq                   : 91 92 93 94
exp                  : 68 69 70 71 72
expBool              : 10 11 12 13 28 35 87 87 102
expString            : 25 36 83
func                 : 5
funcBool             : 22 105
funcInt              : 20 82
funcReturn           : 18 38
funcString           : 21 86
funcVoid             : 19
g                    : 1 2 17 0
iSing                : 72 73
if                   : 8
loop                 : 9
m                    : 43 45
mayor                : 95
menor                : 97
not                  : 99 100
or                   : 87 88 89
p                    : 65 66 67 68 69 70
param                : 23
paren                : 74 75 76
reg                  : 39
sMM                  : 49 50 51
sentencia            : 1 16
tBool                : 93 94 101
tCompare             : 96 96 98 98
valores              : 27 32 33 47 48 60 61 62 63 64
varAsig              : 6 12 55 56 57 58 59
varYVals             : 37 79 85 104 108
varsOps              : 4 12 81 107
vec                  : 23 24 26 26
vecVal               : 42

Parsing method: LALR

state 0

    (0) S' -> . g
    (1) g -> . sentencia g
    (2) g -> . ctrl g
    (3) g -> . empty
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (8) ctrl -> . if
    (9) ctrl -> . loop
    (30) empty -> .
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (55) varAsig -> . ID MENOSEQ varAsig
    (56) varAsig -> . ID MASEQ varAsig
    (57) varAsig -> . ID MULEQ varAsig
    (58) varAsig -> . ID DIVEQ varAsig
    (59) varAsig -> . ID = varAsig
    (60) varAsig -> . ID MASEQ valores
    (61) varAsig -> . ID MENOSEQ valores
    (62) varAsig -> . ID MULEQ valores
    (63) varAsig -> . ID DIVEQ valores
    (64) varAsig -> . ID = valores
    (13) if -> . IF ( expBool ) THEN bloque else
    (10) loop -> . WHILE ( expBool ) bloque
    (11) loop -> . DO bloque WHILE ( expBool ) ;
    (12) loop -> . FOR ( varAsig ; expBool ; varsOps ) bloque
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( expString )
    (26) funcBool -> . COLINEALES ( vec , vec )

    RETURN          shift and go to state 2
    $end            reduce using rule 30 (empty -> .)
    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 6
    DO              shift and go to state 1
    FOR             shift and go to state 14
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    CAPITALIZAR     shift and go to state 23
    COLINEALES      shift and go to state 13

    funcBool                       shift and go to state 3
    ctrl                           shift and go to state 4
    funcInt                        shift and go to state 5
    loop                           shift and go to state 7
    if                             shift and go to state 9
    sentencia                      shift and go to state 10
    sMM                            shift and go to state 11
    empty                          shift and go to state 25
    funcVoid                       shift and go to state 12
    func                           shift and go to state 15
    varAsig                        shift and go to state 18
    g                              shift and go to state 19
    funcString                     shift and go to state 20
    funcReturn                     shift and go to state 22
    varsOps                        shift and go to state 27

state 1

    (11) loop -> DO . bloque WHILE ( expBool ) ;
    (16) bloque -> . sentencia
    (17) bloque -> . { g }
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (55) varAsig -> . ID MENOSEQ varAsig
    (56) varAsig -> . ID MASEQ varAsig
    (57) varAsig -> . ID MULEQ varAsig
    (58) varAsig -> . ID DIVEQ varAsig
    (59) varAsig -> . ID = varAsig
    (60) varAsig -> . ID MASEQ valores
    (61) varAsig -> . ID MENOSEQ valores
    (62) varAsig -> . ID MULEQ valores
    (63) varAsig -> . ID DIVEQ valores
    (64) varAsig -> . ID = valores
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( expString )
    (26) funcBool -> . COLINEALES ( vec , vec )

    {               shift and go to state 31
    RETURN          shift and go to state 2
    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    ID              shift and go to state 16
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    CAPITALIZAR     shift and go to state 23
    COLINEALES      shift and go to state 13

    varAsig                        shift and go to state 18
    sentencia                      shift and go to state 30
    funcBool                       shift and go to state 3
    funcString                     shift and go to state 20
    funcVoid                       shift and go to state 12
    funcReturn                     shift and go to state 22
    sMM                            shift and go to state 11
    varsOps                        shift and go to state 27
    func                           shift and go to state 15
    bloque                         shift and go to state 29
    funcInt                        shift and go to state 5

state 2

    (7) sentencia -> RETURN . ;

    ;               shift and go to state 32


state 3

    (22) funcReturn -> funcBool .

    ;               reduce using rule 22 (funcReturn -> funcBool .)


state 4

    (2) g -> ctrl . g
    (1) g -> . sentencia g
    (2) g -> . ctrl g
    (3) g -> . empty
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (8) ctrl -> . if
    (9) ctrl -> . loop
    (30) empty -> .
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (55) varAsig -> . ID MENOSEQ varAsig
    (56) varAsig -> . ID MASEQ varAsig
    (57) varAsig -> . ID MULEQ varAsig
    (58) varAsig -> . ID DIVEQ varAsig
    (59) varAsig -> . ID = varAsig
    (60) varAsig -> . ID MASEQ valores
    (61) varAsig -> . ID MENOSEQ valores
    (62) varAsig -> . ID MULEQ valores
    (63) varAsig -> . ID DIVEQ valores
    (64) varAsig -> . ID = valores
    (13) if -> . IF ( expBool ) THEN bloque else
    (10) loop -> . WHILE ( expBool ) bloque
    (11) loop -> . DO bloque WHILE ( expBool ) ;
    (12) loop -> . FOR ( varAsig ; expBool ; varsOps ) bloque
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( expString )
    (26) funcBool -> . COLINEALES ( vec , vec )

    RETURN          shift and go to state 2
    $end            reduce using rule 30 (empty -> .)
    }               reduce using rule 30 (empty -> .)
    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 6
    DO              shift and go to state 1
    FOR             shift and go to state 14
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    CAPITALIZAR     shift and go to state 23
    COLINEALES      shift and go to state 13

    funcBool                       shift and go to state 3
    ctrl                           shift and go to state 4
    funcInt                        shift and go to state 5
    loop                           shift and go to state 7
    if                             shift and go to state 9
    sentencia                      shift and go to state 10
    sMM                            shift and go to state 11
    empty                          shift and go to state 25
    funcVoid                       shift and go to state 12
    func                           shift and go to state 15
    varAsig                        shift and go to state 18
    g                              shift and go to state 33
    funcString                     shift and go to state 20
    funcReturn                     shift and go to state 22
    varsOps                        shift and go to state 27

state 5

    (20) funcReturn -> funcInt .

    ;               reduce using rule 20 (funcReturn -> funcInt .)


state 6

    (10) loop -> WHILE . ( expBool ) bloque

    (               shift and go to state 34


state 7

    (9) ctrl -> loop .

    RETURN          reduce using rule 9 (ctrl -> loop .)
    MENOSMENOS      reduce using rule 9 (ctrl -> loop .)
    MASMAS          reduce using rule 9 (ctrl -> loop .)
    ID              reduce using rule 9 (ctrl -> loop .)
    IF              reduce using rule 9 (ctrl -> loop .)
    WHILE           reduce using rule 9 (ctrl -> loop .)
    DO              reduce using rule 9 (ctrl -> loop .)
    FOR             reduce using rule 9 (ctrl -> loop .)
    PRINT           reduce using rule 9 (ctrl -> loop .)
    MULTIESCALAR    reduce using rule 9 (ctrl -> loop .)
    LENGTH          reduce using rule 9 (ctrl -> loop .)
    CAPITALIZAR     reduce using rule 9 (ctrl -> loop .)
    COLINEALES      reduce using rule 9 (ctrl -> loop .)
    $end            reduce using rule 9 (ctrl -> loop .)
    }               reduce using rule 9 (ctrl -> loop .)


state 8

    (27) funcVoid -> PRINT . ( valores )

    (               shift and go to state 35


state 9

    (8) ctrl -> if .

    RETURN          reduce using rule 8 (ctrl -> if .)
    MENOSMENOS      reduce using rule 8 (ctrl -> if .)
    MASMAS          reduce using rule 8 (ctrl -> if .)
    ID              reduce using rule 8 (ctrl -> if .)
    IF              reduce using rule 8 (ctrl -> if .)
    WHILE           reduce using rule 8 (ctrl -> if .)
    DO              reduce using rule 8 (ctrl -> if .)
    FOR             reduce using rule 8 (ctrl -> if .)
    PRINT           reduce using rule 8 (ctrl -> if .)
    MULTIESCALAR    reduce using rule 8 (ctrl -> if .)
    LENGTH          reduce using rule 8 (ctrl -> if .)
    CAPITALIZAR     reduce using rule 8 (ctrl -> if .)
    COLINEALES      reduce using rule 8 (ctrl -> if .)
    $end            reduce using rule 8 (ctrl -> if .)
    }               reduce using rule 8 (ctrl -> if .)


state 10

    (1) g -> sentencia . g
    (1) g -> . sentencia g
    (2) g -> . ctrl g
    (3) g -> . empty
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (8) ctrl -> . if
    (9) ctrl -> . loop
    (30) empty -> .
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (55) varAsig -> . ID MENOSEQ varAsig
    (56) varAsig -> . ID MASEQ varAsig
    (57) varAsig -> . ID MULEQ varAsig
    (58) varAsig -> . ID DIVEQ varAsig
    (59) varAsig -> . ID = varAsig
    (60) varAsig -> . ID MASEQ valores
    (61) varAsig -> . ID MENOSEQ valores
    (62) varAsig -> . ID MULEQ valores
    (63) varAsig -> . ID DIVEQ valores
    (64) varAsig -> . ID = valores
    (13) if -> . IF ( expBool ) THEN bloque else
    (10) loop -> . WHILE ( expBool ) bloque
    (11) loop -> . DO bloque WHILE ( expBool ) ;
    (12) loop -> . FOR ( varAsig ; expBool ; varsOps ) bloque
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( expString )
    (26) funcBool -> . COLINEALES ( vec , vec )

    RETURN          shift and go to state 2
    $end            reduce using rule 30 (empty -> .)
    }               reduce using rule 30 (empty -> .)
    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 6
    DO              shift and go to state 1
    FOR             shift and go to state 14
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    CAPITALIZAR     shift and go to state 23
    COLINEALES      shift and go to state 13

    funcBool                       shift and go to state 3
    ctrl                           shift and go to state 4
    funcInt                        shift and go to state 5
    loop                           shift and go to state 7
    if                             shift and go to state 9
    sentencia                      shift and go to state 10
    sMM                            shift and go to state 11
    empty                          shift and go to state 25
    funcVoid                       shift and go to state 12
    func                           shift and go to state 15
    varAsig                        shift and go to state 18
    g                              shift and go to state 36
    funcString                     shift and go to state 20
    funcReturn                     shift and go to state 22
    varsOps                        shift and go to state 27

state 11

    (51) varsOps -> sMM .

    ;               reduce using rule 51 (varsOps -> sMM .)
    ^               reduce using rule 51 (varsOps -> sMM .)
    *               reduce using rule 51 (varsOps -> sMM .)
    /               reduce using rule 51 (varsOps -> sMM .)
    %               reduce using rule 51 (varsOps -> sMM .)
    )               reduce using rule 51 (varsOps -> sMM .)
    +               reduce using rule 51 (varsOps -> sMM .)
    -               reduce using rule 51 (varsOps -> sMM .)
    >               reduce using rule 51 (varsOps -> sMM .)
    <               reduce using rule 51 (varsOps -> sMM .)
    }               reduce using rule 51 (varsOps -> sMM .)
    EQEQ            reduce using rule 51 (varsOps -> sMM .)
    DISTINTO        reduce using rule 51 (varsOps -> sMM .)
    AND             reduce using rule 51 (varsOps -> sMM .)
    ?               reduce using rule 51 (varsOps -> sMM .)
    OR              reduce using rule 51 (varsOps -> sMM .)
    :               reduce using rule 51 (varsOps -> sMM .)
    ,               reduce using rule 51 (varsOps -> sMM .)
    ]               reduce using rule 51 (varsOps -> sMM .)


state 12

    (19) func -> funcVoid .

    ;               reduce using rule 19 (func -> funcVoid .)


state 13

    (26) funcBool -> COLINEALES . ( vec , vec )

    (               shift and go to state 37


state 14

    (12) loop -> FOR . ( varAsig ; expBool ; varsOps ) bloque

    (               shift and go to state 38


state 15

    (5) sentencia -> func . ;

    ;               shift and go to state 39


state 16

    (55) varAsig -> ID . MENOSEQ varAsig
    (56) varAsig -> ID . MASEQ varAsig
    (57) varAsig -> ID . MULEQ varAsig
    (58) varAsig -> ID . DIVEQ varAsig
    (59) varAsig -> ID . = varAsig
    (60) varAsig -> ID . MASEQ valores
    (61) varAsig -> ID . MENOSEQ valores
    (62) varAsig -> ID . MULEQ valores
    (63) varAsig -> ID . DIVEQ valores
    (64) varAsig -> ID . = valores
    (52) sMM -> ID . MASMAS
    (53) sMM -> ID . MENOSMENOS
    (54) sMM -> ID .

    MENOSEQ         shift and go to state 40
    MASEQ           shift and go to state 42
    MULEQ           shift and go to state 44
    DIVEQ           shift and go to state 46
    =               shift and go to state 45
    MASMAS          shift and go to state 43
    MENOSMENOS      shift and go to state 41
    ;               reduce using rule 54 (sMM -> ID .)


state 17

    (13) if -> IF . ( expBool ) THEN bloque else

    (               shift and go to state 47


state 18

    (6) sentencia -> varAsig . ;

    ;               shift and go to state 48


state 19

    (0) S' -> g .



state 20

    (21) funcReturn -> funcString .

    ;               reduce using rule 21 (funcReturn -> funcString .)


state 21

    (23) funcInt -> MULTIESCALAR . ( vec , eMat , param )

    (               shift and go to state 49


state 22

    (18) func -> funcReturn .

    ;               reduce using rule 18 (func -> funcReturn .)


state 23

    (25) funcString -> CAPITALIZAR . ( expString )

    (               shift and go to state 50


state 24

    (24) funcInt -> LENGTH . ( vec )

    (               shift and go to state 51


state 25

    (3) g -> empty .

    $end            reduce using rule 3 (g -> empty .)
    }               reduce using rule 3 (g -> empty .)


state 26

    (50) varsOps -> MASMAS . sMM
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID

    ID              shift and go to state 53

    sMM                            shift and go to state 52

state 27

    (4) sentencia -> varsOps . ;

    ;               shift and go to state 54


state 28

    (49) varsOps -> MENOSMENOS . sMM
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID

    ID              shift and go to state 53

    sMM                            shift and go to state 55

state 29

    (11) loop -> DO bloque . WHILE ( expBool ) ;

    WHILE           shift and go to state 56


state 30

    (16) bloque -> sentencia .

    RETURN          reduce using rule 16 (bloque -> sentencia .)
    MENOSMENOS      reduce using rule 16 (bloque -> sentencia .)
    MASMAS          reduce using rule 16 (bloque -> sentencia .)
    ID              reduce using rule 16 (bloque -> sentencia .)
    IF              reduce using rule 16 (bloque -> sentencia .)
    WHILE           reduce using rule 16 (bloque -> sentencia .)
    DO              reduce using rule 16 (bloque -> sentencia .)
    FOR             reduce using rule 16 (bloque -> sentencia .)
    PRINT           reduce using rule 16 (bloque -> sentencia .)
    MULTIESCALAR    reduce using rule 16 (bloque -> sentencia .)
    LENGTH          reduce using rule 16 (bloque -> sentencia .)
    CAPITALIZAR     reduce using rule 16 (bloque -> sentencia .)
    COLINEALES      reduce using rule 16 (bloque -> sentencia .)
    $end            reduce using rule 16 (bloque -> sentencia .)
    }               reduce using rule 16 (bloque -> sentencia .)
    ELSE            reduce using rule 16 (bloque -> sentencia .)


state 31

    (17) bloque -> { . g }
    (1) g -> . sentencia g
    (2) g -> . ctrl g
    (3) g -> . empty
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (8) ctrl -> . if
    (9) ctrl -> . loop
    (30) empty -> .
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (55) varAsig -> . ID MENOSEQ varAsig
    (56) varAsig -> . ID MASEQ varAsig
    (57) varAsig -> . ID MULEQ varAsig
    (58) varAsig -> . ID DIVEQ varAsig
    (59) varAsig -> . ID = varAsig
    (60) varAsig -> . ID MASEQ valores
    (61) varAsig -> . ID MENOSEQ valores
    (62) varAsig -> . ID MULEQ valores
    (63) varAsig -> . ID DIVEQ valores
    (64) varAsig -> . ID = valores
    (13) if -> . IF ( expBool ) THEN bloque else
    (10) loop -> . WHILE ( expBool ) bloque
    (11) loop -> . DO bloque WHILE ( expBool ) ;
    (12) loop -> . FOR ( varAsig ; expBool ; varsOps ) bloque
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( expString )
    (26) funcBool -> . COLINEALES ( vec , vec )

    RETURN          shift and go to state 2
    }               reduce using rule 30 (empty -> .)
    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 6
    DO              shift and go to state 1
    FOR             shift and go to state 14
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    CAPITALIZAR     shift and go to state 23
    COLINEALES      shift and go to state 13

    funcBool                       shift and go to state 3
    ctrl                           shift and go to state 4
    funcInt                        shift and go to state 5
    loop                           shift and go to state 7
    if                             shift and go to state 9
    sentencia                      shift and go to state 10
    sMM                            shift and go to state 11
    empty                          shift and go to state 25
    funcVoid                       shift and go to state 12
    func                           shift and go to state 15
    varAsig                        shift and go to state 18
    g                              shift and go to state 57
    funcString                     shift and go to state 20
    funcReturn                     shift and go to state 22
    varsOps                        shift and go to state 27

state 32

    (7) sentencia -> RETURN ; .

    RETURN          reduce using rule 7 (sentencia -> RETURN ; .)
    MENOSMENOS      reduce using rule 7 (sentencia -> RETURN ; .)
    MASMAS          reduce using rule 7 (sentencia -> RETURN ; .)
    ID              reduce using rule 7 (sentencia -> RETURN ; .)
    IF              reduce using rule 7 (sentencia -> RETURN ; .)
    WHILE           reduce using rule 7 (sentencia -> RETURN ; .)
    DO              reduce using rule 7 (sentencia -> RETURN ; .)
    FOR             reduce using rule 7 (sentencia -> RETURN ; .)
    PRINT           reduce using rule 7 (sentencia -> RETURN ; .)
    MULTIESCALAR    reduce using rule 7 (sentencia -> RETURN ; .)
    LENGTH          reduce using rule 7 (sentencia -> RETURN ; .)
    CAPITALIZAR     reduce using rule 7 (sentencia -> RETURN ; .)
    COLINEALES      reduce using rule 7 (sentencia -> RETURN ; .)
    $end            reduce using rule 7 (sentencia -> RETURN ; .)
    }               reduce using rule 7 (sentencia -> RETURN ; .)
    ELSE            reduce using rule 7 (sentencia -> RETURN ; .)


state 33

    (2) g -> ctrl g .

    $end            reduce using rule 2 (g -> ctrl g .)
    }               reduce using rule 2 (g -> ctrl g .)


state 34

    (10) loop -> WHILE ( . expBool ) bloque
    (87) expBool -> . or ? expBool : expBool
    (88) expBool -> . or
    (89) or -> . or OR and
    (90) or -> . and
    (91) and -> . and AND eq
    (92) and -> . eq
    (93) eq -> . eq EQEQ tBool
    (94) eq -> . eq DISTINTO tBool
    (95) eq -> . mayor
    (96) mayor -> . tCompare > tCompare
    (97) mayor -> . menor
    (106) tCompare -> . eMat
    (107) tCompare -> . varsOps
    (108) tCompare -> . varYVals
    (98) menor -> . tCompare < tCompare
    (99) menor -> . not
    (65) eMat -> . eMat + p
    (66) eMat -> . eMat - p
    (67) eMat -> . p
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (100) not -> . NOT not
    (101) not -> . tBool
    (68) p -> . p * exp
    (69) p -> . p / exp
    (70) p -> . p % exp
    (71) p -> . exp
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID
    (43) vecVal -> . ID m
    (102) tBool -> . ( expBool )
    (103) tBool -> . BOOL
    (104) tBool -> . varYVals
    (105) tBool -> . funcBool
    (72) exp -> . exp ^ iSing
    (73) exp -> . iSing
    (26) funcBool -> . COLINEALES ( vec , vec )
    (74) iSing -> . - paren
    (75) iSing -> . + paren
    (76) iSing -> . paren
    (77) paren -> . ( eMat )
    (78) paren -> . INT
    (79) paren -> . varYVals
    (80) paren -> . FLOAT
    (81) paren -> . varsOps
    (82) paren -> . funcInt
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )

    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    ID              shift and go to state 74
    NOT             shift and go to state 81
    (               shift and go to state 65
    BOOL            shift and go to state 69
    COLINEALES      shift and go to state 13
    -               shift and go to state 67
    +               shift and go to state 66
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24

    and                            shift and go to state 58
    funcBool                       shift and go to state 59
    funcInt                        shift and go to state 60
    menor                          shift and go to state 61
    eq                             shift and go to state 62
    mayor                          shift and go to state 63
    eMat                           shift and go to state 64
    vecVal                         shift and go to state 68
    sMM                            shift and go to state 11
    paren                          shift and go to state 72
    iSing                          shift and go to state 70
    tCompare                       shift and go to state 71
    not                            shift and go to state 73
    p                              shift and go to state 78
    varsOps                        shift and go to state 79
    exp                            shift and go to state 80
    tBool                          shift and go to state 82
    varYVals                       shift and go to state 83
    or                             shift and go to state 77
    expBool                        shift and go to state 84

state 35

    (27) funcVoid -> PRINT ( . valores )
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . expString
    (37) valores -> . varYVals
    (38) valores -> . funcReturn
    (39) valores -> . reg
    (40) valores -> . ID . ID
    (65) eMat -> . eMat + p
    (66) eMat -> . eMat - p
    (67) eMat -> . p
    (87) expBool -> . or ? expBool : expBool
    (88) expBool -> . or
    (83) expString -> . expString + STRING
    (84) expString -> . STRING
    (85) expString -> . varYVals
    (86) expString -> . funcString
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (46) reg -> . { campos }
    (68) p -> . p * exp
    (69) p -> . p / exp
    (70) p -> . p % exp
    (71) p -> . exp
    (89) or -> . or OR and
    (90) or -> . and
    (25) funcString -> . CAPITALIZAR ( expString )
    (43) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (26) funcBool -> . COLINEALES ( vec , vec )
    (72) exp -> . exp ^ iSing
    (73) exp -> . iSing
    (91) and -> . and AND eq
    (92) and -> . eq
    (74) iSing -> . - paren
    (75) iSing -> . + paren
    (76) iSing -> . paren
    (93) eq -> . eq EQEQ tBool
    (94) eq -> . eq DISTINTO tBool
    (95) eq -> . mayor
    (77) paren -> . ( eMat )
    (78) paren -> . INT
    (79) paren -> . varYVals
    (80) paren -> . FLOAT
    (81) paren -> . varsOps
    (82) paren -> . funcInt
    (96) mayor -> . tCompare > tCompare
    (97) mayor -> . menor
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (106) tCompare -> . eMat
    (107) tCompare -> . varsOps
    (108) tCompare -> . varYVals
    (98) menor -> . tCompare < tCompare
    (99) menor -> . not
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID
    (100) not -> . NOT not
    (101) not -> . tBool
    (102) tBool -> . ( expBool )
    (103) tBool -> . BOOL
    (104) tBool -> . varYVals
    (105) tBool -> . funcBool

    ID              shift and go to state 93
    STRING          shift and go to state 91
    {               shift and go to state 97
    CAPITALIZAR     shift and go to state 23
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 67
    +               shift and go to state 66
    (               shift and go to state 88
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    NOT             shift and go to state 81
    BOOL            shift and go to state 69

    and                            shift and go to state 58
    funcBool                       shift and go to state 85
    funcInt                        shift and go to state 86
    menor                          shift and go to state 61
    eq                             shift and go to state 62
    vecVal                         shift and go to state 68
    eMat                           shift and go to state 87
    mayor                          shift and go to state 63
    sMM                            shift and go to state 11
    paren                          shift and go to state 72
    reg                            shift and go to state 89
    varsOps                        shift and go to state 90
    expString                      shift and go to state 92
    tCompare                       shift and go to state 71
    not                            shift and go to state 73
    funcString                     shift and go to state 94
    funcReturn                     shift and go to state 95
    valores                        shift and go to state 96
    p                              shift and go to state 78
    iSing                          shift and go to state 70
    exp                            shift and go to state 80
    tBool                          shift and go to state 82
    varYVals                       shift and go to state 98
    or                             shift and go to state 77
    expBool                        shift and go to state 99

state 36

    (1) g -> sentencia g .

    $end            reduce using rule 1 (g -> sentencia g .)
    }               reduce using rule 1 (g -> sentencia g .)


state 37

    (26) funcBool -> COLINEALES ( . vec , vec )
    (31) vec -> . ID = [ elem ]

    ID              shift and go to state 101

    vec                            shift and go to state 100

state 38

    (12) loop -> FOR ( . varAsig ; expBool ; varsOps ) bloque
    (55) varAsig -> . ID MENOSEQ varAsig
    (56) varAsig -> . ID MASEQ varAsig
    (57) varAsig -> . ID MULEQ varAsig
    (58) varAsig -> . ID DIVEQ varAsig
    (59) varAsig -> . ID = varAsig
    (60) varAsig -> . ID MASEQ valores
    (61) varAsig -> . ID MENOSEQ valores
    (62) varAsig -> . ID MULEQ valores
    (63) varAsig -> . ID DIVEQ valores
    (64) varAsig -> . ID = valores

    ID              shift and go to state 103

    varAsig                        shift and go to state 102

state 39

    (5) sentencia -> func ; .

    RETURN          reduce using rule 5 (sentencia -> func ; .)
    MENOSMENOS      reduce using rule 5 (sentencia -> func ; .)
    MASMAS          reduce using rule 5 (sentencia -> func ; .)
    ID              reduce using rule 5 (sentencia -> func ; .)
    IF              reduce using rule 5 (sentencia -> func ; .)
    WHILE           reduce using rule 5 (sentencia -> func ; .)
    DO              reduce using rule 5 (sentencia -> func ; .)
    FOR             reduce using rule 5 (sentencia -> func ; .)
    PRINT           reduce using rule 5 (sentencia -> func ; .)
    MULTIESCALAR    reduce using rule 5 (sentencia -> func ; .)
    LENGTH          reduce using rule 5 (sentencia -> func ; .)
    CAPITALIZAR     reduce using rule 5 (sentencia -> func ; .)
    COLINEALES      reduce using rule 5 (sentencia -> func ; .)
    $end            reduce using rule 5 (sentencia -> func ; .)
    }               reduce using rule 5 (sentencia -> func ; .)
    ELSE            reduce using rule 5 (sentencia -> func ; .)


state 40

    (55) varAsig -> ID MENOSEQ . varAsig
    (61) varAsig -> ID MENOSEQ . valores
    (55) varAsig -> . ID MENOSEQ varAsig
    (56) varAsig -> . ID MASEQ varAsig
    (57) varAsig -> . ID MULEQ varAsig
    (58) varAsig -> . ID DIVEQ varAsig
    (59) varAsig -> . ID = varAsig
    (60) varAsig -> . ID MASEQ valores
    (61) varAsig -> . ID MENOSEQ valores
    (62) varAsig -> . ID MULEQ valores
    (63) varAsig -> . ID DIVEQ valores
    (64) varAsig -> . ID = valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . expString
    (37) valores -> . varYVals
    (38) valores -> . funcReturn
    (39) valores -> . reg
    (40) valores -> . ID . ID
    (65) eMat -> . eMat + p
    (66) eMat -> . eMat - p
    (67) eMat -> . p
    (87) expBool -> . or ? expBool : expBool
    (88) expBool -> . or
    (83) expString -> . expString + STRING
    (84) expString -> . STRING
    (85) expString -> . varYVals
    (86) expString -> . funcString
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (46) reg -> . { campos }
    (68) p -> . p * exp
    (69) p -> . p / exp
    (70) p -> . p % exp
    (71) p -> . exp
    (89) or -> . or OR and
    (90) or -> . and
    (25) funcString -> . CAPITALIZAR ( expString )
    (43) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (26) funcBool -> . COLINEALES ( vec , vec )
    (72) exp -> . exp ^ iSing
    (73) exp -> . iSing
    (91) and -> . and AND eq
    (92) and -> . eq
    (74) iSing -> . - paren
    (75) iSing -> . + paren
    (76) iSing -> . paren
    (93) eq -> . eq EQEQ tBool
    (94) eq -> . eq DISTINTO tBool
    (95) eq -> . mayor
    (77) paren -> . ( eMat )
    (78) paren -> . INT
    (79) paren -> . varYVals
    (80) paren -> . FLOAT
    (81) paren -> . varsOps
    (82) paren -> . funcInt
    (96) mayor -> . tCompare > tCompare
    (97) mayor -> . menor
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (106) tCompare -> . eMat
    (107) tCompare -> . varsOps
    (108) tCompare -> . varYVals
    (98) menor -> . tCompare < tCompare
    (99) menor -> . not
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID
    (100) not -> . NOT not
    (101) not -> . tBool
    (102) tBool -> . ( expBool )
    (103) tBool -> . BOOL
    (104) tBool -> . varYVals
    (105) tBool -> . funcBool

    ID              shift and go to state 104
    STRING          shift and go to state 91
    {               shift and go to state 97
    CAPITALIZAR     shift and go to state 23
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 67
    +               shift and go to state 66
    (               shift and go to state 88
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    NOT             shift and go to state 81
    BOOL            shift and go to state 69

    and                            shift and go to state 58
    funcBool                       shift and go to state 85
    funcInt                        shift and go to state 86
    menor                          shift and go to state 61
    eq                             shift and go to state 62
    vecVal                         shift and go to state 68
    eMat                           shift and go to state 87
    mayor                          shift and go to state 63
    sMM                            shift and go to state 11
    paren                          shift and go to state 72
    reg                            shift and go to state 89
    varsOps                        shift and go to state 90
    expString                      shift and go to state 92
    tCompare                       shift and go to state 71
    not                            shift and go to state 73
    varAsig                        shift and go to state 105
    funcString                     shift and go to state 94
    funcReturn                     shift and go to state 95
    valores                        shift and go to state 106
    p                              shift and go to state 78
    iSing                          shift and go to state 70
    exp                            shift and go to state 80
    tBool                          shift and go to state 82
    varYVals                       shift and go to state 98
    or                             shift and go to state 77
    expBool                        shift and go to state 99

state 41

    (53) sMM -> ID MENOSMENOS .

    >               reduce using rule 53 (sMM -> ID MENOSMENOS .)
    <               reduce using rule 53 (sMM -> ID MENOSMENOS .)
    ^               reduce using rule 53 (sMM -> ID MENOSMENOS .)
    *               reduce using rule 53 (sMM -> ID MENOSMENOS .)
    /               reduce using rule 53 (sMM -> ID MENOSMENOS .)
    %               reduce using rule 53 (sMM -> ID MENOSMENOS .)
    +               reduce using rule 53 (sMM -> ID MENOSMENOS .)
    -               reduce using rule 53 (sMM -> ID MENOSMENOS .)
    )               reduce using rule 53 (sMM -> ID MENOSMENOS .)
    ;               reduce using rule 53 (sMM -> ID MENOSMENOS .)
    }               reduce using rule 53 (sMM -> ID MENOSMENOS .)
    EQEQ            reduce using rule 53 (sMM -> ID MENOSMENOS .)
    DISTINTO        reduce using rule 53 (sMM -> ID MENOSMENOS .)
    AND             reduce using rule 53 (sMM -> ID MENOSMENOS .)
    ?               reduce using rule 53 (sMM -> ID MENOSMENOS .)
    OR              reduce using rule 53 (sMM -> ID MENOSMENOS .)
    :               reduce using rule 53 (sMM -> ID MENOSMENOS .)
    ,               reduce using rule 53 (sMM -> ID MENOSMENOS .)
    ]               reduce using rule 53 (sMM -> ID MENOSMENOS .)


state 42

    (56) varAsig -> ID MASEQ . varAsig
    (60) varAsig -> ID MASEQ . valores
    (55) varAsig -> . ID MENOSEQ varAsig
    (56) varAsig -> . ID MASEQ varAsig
    (57) varAsig -> . ID MULEQ varAsig
    (58) varAsig -> . ID DIVEQ varAsig
    (59) varAsig -> . ID = varAsig
    (60) varAsig -> . ID MASEQ valores
    (61) varAsig -> . ID MENOSEQ valores
    (62) varAsig -> . ID MULEQ valores
    (63) varAsig -> . ID DIVEQ valores
    (64) varAsig -> . ID = valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . expString
    (37) valores -> . varYVals
    (38) valores -> . funcReturn
    (39) valores -> . reg
    (40) valores -> . ID . ID
    (65) eMat -> . eMat + p
    (66) eMat -> . eMat - p
    (67) eMat -> . p
    (87) expBool -> . or ? expBool : expBool
    (88) expBool -> . or
    (83) expString -> . expString + STRING
    (84) expString -> . STRING
    (85) expString -> . varYVals
    (86) expString -> . funcString
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (46) reg -> . { campos }
    (68) p -> . p * exp
    (69) p -> . p / exp
    (70) p -> . p % exp
    (71) p -> . exp
    (89) or -> . or OR and
    (90) or -> . and
    (25) funcString -> . CAPITALIZAR ( expString )
    (43) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (26) funcBool -> . COLINEALES ( vec , vec )
    (72) exp -> . exp ^ iSing
    (73) exp -> . iSing
    (91) and -> . and AND eq
    (92) and -> . eq
    (74) iSing -> . - paren
    (75) iSing -> . + paren
    (76) iSing -> . paren
    (93) eq -> . eq EQEQ tBool
    (94) eq -> . eq DISTINTO tBool
    (95) eq -> . mayor
    (77) paren -> . ( eMat )
    (78) paren -> . INT
    (79) paren -> . varYVals
    (80) paren -> . FLOAT
    (81) paren -> . varsOps
    (82) paren -> . funcInt
    (96) mayor -> . tCompare > tCompare
    (97) mayor -> . menor
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (106) tCompare -> . eMat
    (107) tCompare -> . varsOps
    (108) tCompare -> . varYVals
    (98) menor -> . tCompare < tCompare
    (99) menor -> . not
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID
    (100) not -> . NOT not
    (101) not -> . tBool
    (102) tBool -> . ( expBool )
    (103) tBool -> . BOOL
    (104) tBool -> . varYVals
    (105) tBool -> . funcBool

    ID              shift and go to state 104
    STRING          shift and go to state 91
    {               shift and go to state 97
    CAPITALIZAR     shift and go to state 23
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 67
    +               shift and go to state 66
    (               shift and go to state 88
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    NOT             shift and go to state 81
    BOOL            shift and go to state 69

    and                            shift and go to state 58
    funcBool                       shift and go to state 85
    funcInt                        shift and go to state 86
    menor                          shift and go to state 61
    eq                             shift and go to state 62
    vecVal                         shift and go to state 68
    eMat                           shift and go to state 87
    mayor                          shift and go to state 63
    sMM                            shift and go to state 11
    paren                          shift and go to state 72
    reg                            shift and go to state 89
    varsOps                        shift and go to state 90
    expString                      shift and go to state 92
    tCompare                       shift and go to state 71
    not                            shift and go to state 73
    varAsig                        shift and go to state 107
    funcString                     shift and go to state 94
    funcReturn                     shift and go to state 95
    valores                        shift and go to state 108
    p                              shift and go to state 78
    iSing                          shift and go to state 70
    exp                            shift and go to state 80
    tBool                          shift and go to state 82
    varYVals                       shift and go to state 98
    or                             shift and go to state 77
    expBool                        shift and go to state 99

state 43

    (52) sMM -> ID MASMAS .

    >               reduce using rule 52 (sMM -> ID MASMAS .)
    <               reduce using rule 52 (sMM -> ID MASMAS .)
    ^               reduce using rule 52 (sMM -> ID MASMAS .)
    *               reduce using rule 52 (sMM -> ID MASMAS .)
    /               reduce using rule 52 (sMM -> ID MASMAS .)
    %               reduce using rule 52 (sMM -> ID MASMAS .)
    +               reduce using rule 52 (sMM -> ID MASMAS .)
    -               reduce using rule 52 (sMM -> ID MASMAS .)
    )               reduce using rule 52 (sMM -> ID MASMAS .)
    ;               reduce using rule 52 (sMM -> ID MASMAS .)
    }               reduce using rule 52 (sMM -> ID MASMAS .)
    EQEQ            reduce using rule 52 (sMM -> ID MASMAS .)
    DISTINTO        reduce using rule 52 (sMM -> ID MASMAS .)
    AND             reduce using rule 52 (sMM -> ID MASMAS .)
    ?               reduce using rule 52 (sMM -> ID MASMAS .)
    OR              reduce using rule 52 (sMM -> ID MASMAS .)
    :               reduce using rule 52 (sMM -> ID MASMAS .)
    ,               reduce using rule 52 (sMM -> ID MASMAS .)
    ]               reduce using rule 52 (sMM -> ID MASMAS .)


state 44

    (57) varAsig -> ID MULEQ . varAsig
    (62) varAsig -> ID MULEQ . valores
    (55) varAsig -> . ID MENOSEQ varAsig
    (56) varAsig -> . ID MASEQ varAsig
    (57) varAsig -> . ID MULEQ varAsig
    (58) varAsig -> . ID DIVEQ varAsig
    (59) varAsig -> . ID = varAsig
    (60) varAsig -> . ID MASEQ valores
    (61) varAsig -> . ID MENOSEQ valores
    (62) varAsig -> . ID MULEQ valores
    (63) varAsig -> . ID DIVEQ valores
    (64) varAsig -> . ID = valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . expString
    (37) valores -> . varYVals
    (38) valores -> . funcReturn
    (39) valores -> . reg
    (40) valores -> . ID . ID
    (65) eMat -> . eMat + p
    (66) eMat -> . eMat - p
    (67) eMat -> . p
    (87) expBool -> . or ? expBool : expBool
    (88) expBool -> . or
    (83) expString -> . expString + STRING
    (84) expString -> . STRING
    (85) expString -> . varYVals
    (86) expString -> . funcString
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (46) reg -> . { campos }
    (68) p -> . p * exp
    (69) p -> . p / exp
    (70) p -> . p % exp
    (71) p -> . exp
    (89) or -> . or OR and
    (90) or -> . and
    (25) funcString -> . CAPITALIZAR ( expString )
    (43) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (26) funcBool -> . COLINEALES ( vec , vec )
    (72) exp -> . exp ^ iSing
    (73) exp -> . iSing
    (91) and -> . and AND eq
    (92) and -> . eq
    (74) iSing -> . - paren
    (75) iSing -> . + paren
    (76) iSing -> . paren
    (93) eq -> . eq EQEQ tBool
    (94) eq -> . eq DISTINTO tBool
    (95) eq -> . mayor
    (77) paren -> . ( eMat )
    (78) paren -> . INT
    (79) paren -> . varYVals
    (80) paren -> . FLOAT
    (81) paren -> . varsOps
    (82) paren -> . funcInt
    (96) mayor -> . tCompare > tCompare
    (97) mayor -> . menor
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (106) tCompare -> . eMat
    (107) tCompare -> . varsOps
    (108) tCompare -> . varYVals
    (98) menor -> . tCompare < tCompare
    (99) menor -> . not
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID
    (100) not -> . NOT not
    (101) not -> . tBool
    (102) tBool -> . ( expBool )
    (103) tBool -> . BOOL
    (104) tBool -> . varYVals
    (105) tBool -> . funcBool

    ID              shift and go to state 104
    STRING          shift and go to state 91
    {               shift and go to state 97
    CAPITALIZAR     shift and go to state 23
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 67
    +               shift and go to state 66
    (               shift and go to state 88
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    NOT             shift and go to state 81
    BOOL            shift and go to state 69

    and                            shift and go to state 58
    funcBool                       shift and go to state 85
    funcInt                        shift and go to state 86
    menor                          shift and go to state 61
    eq                             shift and go to state 62
    vecVal                         shift and go to state 68
    eMat                           shift and go to state 87
    mayor                          shift and go to state 63
    sMM                            shift and go to state 11
    paren                          shift and go to state 72
    reg                            shift and go to state 89
    varsOps                        shift and go to state 90
    expString                      shift and go to state 92
    tCompare                       shift and go to state 71
    not                            shift and go to state 73
    varAsig                        shift and go to state 109
    funcString                     shift and go to state 94
    funcReturn                     shift and go to state 95
    valores                        shift and go to state 110
    p                              shift and go to state 78
    iSing                          shift and go to state 70
    exp                            shift and go to state 80
    tBool                          shift and go to state 82
    varYVals                       shift and go to state 98
    or                             shift and go to state 77
    expBool                        shift and go to state 99

state 45

    (59) varAsig -> ID = . varAsig
    (64) varAsig -> ID = . valores
    (55) varAsig -> . ID MENOSEQ varAsig
    (56) varAsig -> . ID MASEQ varAsig
    (57) varAsig -> . ID MULEQ varAsig
    (58) varAsig -> . ID DIVEQ varAsig
    (59) varAsig -> . ID = varAsig
    (60) varAsig -> . ID MASEQ valores
    (61) varAsig -> . ID MENOSEQ valores
    (62) varAsig -> . ID MULEQ valores
    (63) varAsig -> . ID DIVEQ valores
    (64) varAsig -> . ID = valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . expString
    (37) valores -> . varYVals
    (38) valores -> . funcReturn
    (39) valores -> . reg
    (40) valores -> . ID . ID
    (65) eMat -> . eMat + p
    (66) eMat -> . eMat - p
    (67) eMat -> . p
    (87) expBool -> . or ? expBool : expBool
    (88) expBool -> . or
    (83) expString -> . expString + STRING
    (84) expString -> . STRING
    (85) expString -> . varYVals
    (86) expString -> . funcString
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (46) reg -> . { campos }
    (68) p -> . p * exp
    (69) p -> . p / exp
    (70) p -> . p % exp
    (71) p -> . exp
    (89) or -> . or OR and
    (90) or -> . and
    (25) funcString -> . CAPITALIZAR ( expString )
    (43) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (26) funcBool -> . COLINEALES ( vec , vec )
    (72) exp -> . exp ^ iSing
    (73) exp -> . iSing
    (91) and -> . and AND eq
    (92) and -> . eq
    (74) iSing -> . - paren
    (75) iSing -> . + paren
    (76) iSing -> . paren
    (93) eq -> . eq EQEQ tBool
    (94) eq -> . eq DISTINTO tBool
    (95) eq -> . mayor
    (77) paren -> . ( eMat )
    (78) paren -> . INT
    (79) paren -> . varYVals
    (80) paren -> . FLOAT
    (81) paren -> . varsOps
    (82) paren -> . funcInt
    (96) mayor -> . tCompare > tCompare
    (97) mayor -> . menor
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (106) tCompare -> . eMat
    (107) tCompare -> . varsOps
    (108) tCompare -> . varYVals
    (98) menor -> . tCompare < tCompare
    (99) menor -> . not
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID
    (100) not -> . NOT not
    (101) not -> . tBool
    (102) tBool -> . ( expBool )
    (103) tBool -> . BOOL
    (104) tBool -> . varYVals
    (105) tBool -> . funcBool

    ID              shift and go to state 104
    STRING          shift and go to state 91
    {               shift and go to state 97
    CAPITALIZAR     shift and go to state 23
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 67
    +               shift and go to state 66
    (               shift and go to state 88
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    NOT             shift and go to state 81
    BOOL            shift and go to state 69

    and                            shift and go to state 58
    funcBool                       shift and go to state 85
    funcInt                        shift and go to state 86
    menor                          shift and go to state 61
    eq                             shift and go to state 62
    vecVal                         shift and go to state 68
    eMat                           shift and go to state 87
    mayor                          shift and go to state 63
    sMM                            shift and go to state 11
    paren                          shift and go to state 72
    reg                            shift and go to state 89
    varsOps                        shift and go to state 90
    expString                      shift and go to state 92
    tCompare                       shift and go to state 71
    not                            shift and go to state 73
    varAsig                        shift and go to state 111
    funcString                     shift and go to state 94
    funcReturn                     shift and go to state 95
    valores                        shift and go to state 112
    p                              shift and go to state 78
    iSing                          shift and go to state 70
    exp                            shift and go to state 80
    tBool                          shift and go to state 82
    varYVals                       shift and go to state 98
    or                             shift and go to state 77
    expBool                        shift and go to state 99

state 46

    (58) varAsig -> ID DIVEQ . varAsig
    (63) varAsig -> ID DIVEQ . valores
    (55) varAsig -> . ID MENOSEQ varAsig
    (56) varAsig -> . ID MASEQ varAsig
    (57) varAsig -> . ID MULEQ varAsig
    (58) varAsig -> . ID DIVEQ varAsig
    (59) varAsig -> . ID = varAsig
    (60) varAsig -> . ID MASEQ valores
    (61) varAsig -> . ID MENOSEQ valores
    (62) varAsig -> . ID MULEQ valores
    (63) varAsig -> . ID DIVEQ valores
    (64) varAsig -> . ID = valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . expString
    (37) valores -> . varYVals
    (38) valores -> . funcReturn
    (39) valores -> . reg
    (40) valores -> . ID . ID
    (65) eMat -> . eMat + p
    (66) eMat -> . eMat - p
    (67) eMat -> . p
    (87) expBool -> . or ? expBool : expBool
    (88) expBool -> . or
    (83) expString -> . expString + STRING
    (84) expString -> . STRING
    (85) expString -> . varYVals
    (86) expString -> . funcString
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (46) reg -> . { campos }
    (68) p -> . p * exp
    (69) p -> . p / exp
    (70) p -> . p % exp
    (71) p -> . exp
    (89) or -> . or OR and
    (90) or -> . and
    (25) funcString -> . CAPITALIZAR ( expString )
    (43) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (26) funcBool -> . COLINEALES ( vec , vec )
    (72) exp -> . exp ^ iSing
    (73) exp -> . iSing
    (91) and -> . and AND eq
    (92) and -> . eq
    (74) iSing -> . - paren
    (75) iSing -> . + paren
    (76) iSing -> . paren
    (93) eq -> . eq EQEQ tBool
    (94) eq -> . eq DISTINTO tBool
    (95) eq -> . mayor
    (77) paren -> . ( eMat )
    (78) paren -> . INT
    (79) paren -> . varYVals
    (80) paren -> . FLOAT
    (81) paren -> . varsOps
    (82) paren -> . funcInt
    (96) mayor -> . tCompare > tCompare
    (97) mayor -> . menor
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (106) tCompare -> . eMat
    (107) tCompare -> . varsOps
    (108) tCompare -> . varYVals
    (98) menor -> . tCompare < tCompare
    (99) menor -> . not
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID
    (100) not -> . NOT not
    (101) not -> . tBool
    (102) tBool -> . ( expBool )
    (103) tBool -> . BOOL
    (104) tBool -> . varYVals
    (105) tBool -> . funcBool

    ID              shift and go to state 104
    STRING          shift and go to state 91
    {               shift and go to state 97
    CAPITALIZAR     shift and go to state 23
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 67
    +               shift and go to state 66
    (               shift and go to state 88
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    NOT             shift and go to state 81
    BOOL            shift and go to state 69

    and                            shift and go to state 58
    funcBool                       shift and go to state 85
    funcInt                        shift and go to state 86
    menor                          shift and go to state 61
    eq                             shift and go to state 62
    vecVal                         shift and go to state 68
    eMat                           shift and go to state 87
    mayor                          shift and go to state 63
    sMM                            shift and go to state 11
    paren                          shift and go to state 72
    reg                            shift and go to state 89
    varsOps                        shift and go to state 90
    expString                      shift and go to state 92
    tCompare                       shift and go to state 71
    not                            shift and go to state 73
    varAsig                        shift and go to state 113
    funcString                     shift and go to state 94
    funcReturn                     shift and go to state 95
    valores                        shift and go to state 114
    p                              shift and go to state 78
    iSing                          shift and go to state 70
    exp                            shift and go to state 80
    tBool                          shift and go to state 82
    varYVals                       shift and go to state 98
    or                             shift and go to state 77
    expBool                        shift and go to state 99

state 47

    (13) if -> IF ( . expBool ) THEN bloque else
    (87) expBool -> . or ? expBool : expBool
    (88) expBool -> . or
    (89) or -> . or OR and
    (90) or -> . and
    (91) and -> . and AND eq
    (92) and -> . eq
    (93) eq -> . eq EQEQ tBool
    (94) eq -> . eq DISTINTO tBool
    (95) eq -> . mayor
    (96) mayor -> . tCompare > tCompare
    (97) mayor -> . menor
    (106) tCompare -> . eMat
    (107) tCompare -> . varsOps
    (108) tCompare -> . varYVals
    (98) menor -> . tCompare < tCompare
    (99) menor -> . not
    (65) eMat -> . eMat + p
    (66) eMat -> . eMat - p
    (67) eMat -> . p
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (100) not -> . NOT not
    (101) not -> . tBool
    (68) p -> . p * exp
    (69) p -> . p / exp
    (70) p -> . p % exp
    (71) p -> . exp
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID
    (43) vecVal -> . ID m
    (102) tBool -> . ( expBool )
    (103) tBool -> . BOOL
    (104) tBool -> . varYVals
    (105) tBool -> . funcBool
    (72) exp -> . exp ^ iSing
    (73) exp -> . iSing
    (26) funcBool -> . COLINEALES ( vec , vec )
    (74) iSing -> . - paren
    (75) iSing -> . + paren
    (76) iSing -> . paren
    (77) paren -> . ( eMat )
    (78) paren -> . INT
    (79) paren -> . varYVals
    (80) paren -> . FLOAT
    (81) paren -> . varsOps
    (82) paren -> . funcInt
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )

    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    ID              shift and go to state 74
    NOT             shift and go to state 81
    (               shift and go to state 65
    BOOL            shift and go to state 69
    COLINEALES      shift and go to state 13
    -               shift and go to state 67
    +               shift and go to state 66
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24

    and                            shift and go to state 58
    funcBool                       shift and go to state 59
    funcInt                        shift and go to state 60
    menor                          shift and go to state 61
    eq                             shift and go to state 62
    mayor                          shift and go to state 63
    eMat                           shift and go to state 64
    vecVal                         shift and go to state 68
    sMM                            shift and go to state 11
    paren                          shift and go to state 72
    varsOps                        shift and go to state 79
    tCompare                       shift and go to state 71
    not                            shift and go to state 73
    p                              shift and go to state 78
    iSing                          shift and go to state 70
    exp                            shift and go to state 80
    tBool                          shift and go to state 82
    varYVals                       shift and go to state 83
    or                             shift and go to state 77
    expBool                        shift and go to state 115

state 48

    (6) sentencia -> varAsig ; .

    RETURN          reduce using rule 6 (sentencia -> varAsig ; .)
    MENOSMENOS      reduce using rule 6 (sentencia -> varAsig ; .)
    MASMAS          reduce using rule 6 (sentencia -> varAsig ; .)
    ID              reduce using rule 6 (sentencia -> varAsig ; .)
    IF              reduce using rule 6 (sentencia -> varAsig ; .)
    WHILE           reduce using rule 6 (sentencia -> varAsig ; .)
    DO              reduce using rule 6 (sentencia -> varAsig ; .)
    FOR             reduce using rule 6 (sentencia -> varAsig ; .)
    PRINT           reduce using rule 6 (sentencia -> varAsig ; .)
    MULTIESCALAR    reduce using rule 6 (sentencia -> varAsig ; .)
    LENGTH          reduce using rule 6 (sentencia -> varAsig ; .)
    CAPITALIZAR     reduce using rule 6 (sentencia -> varAsig ; .)
    COLINEALES      reduce using rule 6 (sentencia -> varAsig ; .)
    $end            reduce using rule 6 (sentencia -> varAsig ; .)
    }               reduce using rule 6 (sentencia -> varAsig ; .)
    ELSE            reduce using rule 6 (sentencia -> varAsig ; .)


state 49

    (23) funcInt -> MULTIESCALAR ( . vec , eMat , param )
    (31) vec -> . ID = [ elem ]

    ID              shift and go to state 101

    vec                            shift and go to state 116

state 50

    (25) funcString -> CAPITALIZAR ( . expString )
    (83) expString -> . expString + STRING
    (84) expString -> . STRING
    (85) expString -> . varYVals
    (86) expString -> . funcString
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (25) funcString -> . CAPITALIZAR ( expString )
    (43) vecVal -> . ID m

    STRING          shift and go to state 91
    ID              shift and go to state 120
    CAPITALIZAR     shift and go to state 23

    funcString                     shift and go to state 118
    varYVals                       shift and go to state 119
    vecVal                         shift and go to state 68
    expString                      shift and go to state 117

state 51

    (24) funcInt -> LENGTH ( . vec )
    (31) vec -> . ID = [ elem ]

    ID              shift and go to state 101

    vec                            shift and go to state 121

state 52

    (50) varsOps -> MASMAS sMM .

    ;               reduce using rule 50 (varsOps -> MASMAS sMM .)
    ^               reduce using rule 50 (varsOps -> MASMAS sMM .)
    *               reduce using rule 50 (varsOps -> MASMAS sMM .)
    /               reduce using rule 50 (varsOps -> MASMAS sMM .)
    %               reduce using rule 50 (varsOps -> MASMAS sMM .)
    )               reduce using rule 50 (varsOps -> MASMAS sMM .)
    +               reduce using rule 50 (varsOps -> MASMAS sMM .)
    -               reduce using rule 50 (varsOps -> MASMAS sMM .)
    >               reduce using rule 50 (varsOps -> MASMAS sMM .)
    <               reduce using rule 50 (varsOps -> MASMAS sMM .)
    }               reduce using rule 50 (varsOps -> MASMAS sMM .)
    EQEQ            reduce using rule 50 (varsOps -> MASMAS sMM .)
    DISTINTO        reduce using rule 50 (varsOps -> MASMAS sMM .)
    AND             reduce using rule 50 (varsOps -> MASMAS sMM .)
    ?               reduce using rule 50 (varsOps -> MASMAS sMM .)
    OR              reduce using rule 50 (varsOps -> MASMAS sMM .)
    :               reduce using rule 50 (varsOps -> MASMAS sMM .)
    ,               reduce using rule 50 (varsOps -> MASMAS sMM .)
    ]               reduce using rule 50 (varsOps -> MASMAS sMM .)


state 53

    (52) sMM -> ID . MASMAS
    (53) sMM -> ID . MENOSMENOS
    (54) sMM -> ID .

    MASMAS          shift and go to state 43
    MENOSMENOS      shift and go to state 41
    ;               reduce using rule 54 (sMM -> ID .)
    >               reduce using rule 54 (sMM -> ID .)
    <               reduce using rule 54 (sMM -> ID .)
    ^               reduce using rule 54 (sMM -> ID .)
    *               reduce using rule 54 (sMM -> ID .)
    /               reduce using rule 54 (sMM -> ID .)
    %               reduce using rule 54 (sMM -> ID .)
    +               reduce using rule 54 (sMM -> ID .)
    -               reduce using rule 54 (sMM -> ID .)
    )               reduce using rule 54 (sMM -> ID .)
    }               reduce using rule 54 (sMM -> ID .)
    EQEQ            reduce using rule 54 (sMM -> ID .)
    DISTINTO        reduce using rule 54 (sMM -> ID .)
    AND             reduce using rule 54 (sMM -> ID .)
    ?               reduce using rule 54 (sMM -> ID .)
    OR              reduce using rule 54 (sMM -> ID .)
    :               reduce using rule 54 (sMM -> ID .)
    ,               reduce using rule 54 (sMM -> ID .)
    ]               reduce using rule 54 (sMM -> ID .)


state 54

    (4) sentencia -> varsOps ; .

    RETURN          reduce using rule 4 (sentencia -> varsOps ; .)
    MENOSMENOS      reduce using rule 4 (sentencia -> varsOps ; .)
    MASMAS          reduce using rule 4 (sentencia -> varsOps ; .)
    ID              reduce using rule 4 (sentencia -> varsOps ; .)
    IF              reduce using rule 4 (sentencia -> varsOps ; .)
    WHILE           reduce using rule 4 (sentencia -> varsOps ; .)
    DO              reduce using rule 4 (sentencia -> varsOps ; .)
    FOR             reduce using rule 4 (sentencia -> varsOps ; .)
    PRINT           reduce using rule 4 (sentencia -> varsOps ; .)
    MULTIESCALAR    reduce using rule 4 (sentencia -> varsOps ; .)
    LENGTH          reduce using rule 4 (sentencia -> varsOps ; .)
    CAPITALIZAR     reduce using rule 4 (sentencia -> varsOps ; .)
    COLINEALES      reduce using rule 4 (sentencia -> varsOps ; .)
    $end            reduce using rule 4 (sentencia -> varsOps ; .)
    }               reduce using rule 4 (sentencia -> varsOps ; .)
    ELSE            reduce using rule 4 (sentencia -> varsOps ; .)


state 55

    (49) varsOps -> MENOSMENOS sMM .

    ;               reduce using rule 49 (varsOps -> MENOSMENOS sMM .)
    ^               reduce using rule 49 (varsOps -> MENOSMENOS sMM .)
    *               reduce using rule 49 (varsOps -> MENOSMENOS sMM .)
    /               reduce using rule 49 (varsOps -> MENOSMENOS sMM .)
    %               reduce using rule 49 (varsOps -> MENOSMENOS sMM .)
    )               reduce using rule 49 (varsOps -> MENOSMENOS sMM .)
    +               reduce using rule 49 (varsOps -> MENOSMENOS sMM .)
    -               reduce using rule 49 (varsOps -> MENOSMENOS sMM .)
    >               reduce using rule 49 (varsOps -> MENOSMENOS sMM .)
    <               reduce using rule 49 (varsOps -> MENOSMENOS sMM .)
    }               reduce using rule 49 (varsOps -> MENOSMENOS sMM .)
    EQEQ            reduce using rule 49 (varsOps -> MENOSMENOS sMM .)
    DISTINTO        reduce using rule 49 (varsOps -> MENOSMENOS sMM .)
    AND             reduce using rule 49 (varsOps -> MENOSMENOS sMM .)
    ?               reduce using rule 49 (varsOps -> MENOSMENOS sMM .)
    OR              reduce using rule 49 (varsOps -> MENOSMENOS sMM .)
    :               reduce using rule 49 (varsOps -> MENOSMENOS sMM .)
    ,               reduce using rule 49 (varsOps -> MENOSMENOS sMM .)
    ]               reduce using rule 49 (varsOps -> MENOSMENOS sMM .)


state 56

    (11) loop -> DO bloque WHILE . ( expBool ) ;

    (               shift and go to state 122


state 57

    (17) bloque -> { g . }

    }               shift and go to state 123


state 58

    (90) or -> and .
    (91) and -> and . AND eq

    ?               reduce using rule 90 (or -> and .)
    OR              reduce using rule 90 (or -> and .)
    ,               reduce using rule 90 (or -> and .)
    ]               reduce using rule 90 (or -> and .)
    ;               reduce using rule 90 (or -> and .)
    )               reduce using rule 90 (or -> and .)
    :               reduce using rule 90 (or -> and .)
    }               reduce using rule 90 (or -> and .)
    AND             shift and go to state 124


state 59

    (105) tBool -> funcBool .

    EQEQ            reduce using rule 105 (tBool -> funcBool .)
    DISTINTO        reduce using rule 105 (tBool -> funcBool .)
    AND             reduce using rule 105 (tBool -> funcBool .)
    ?               reduce using rule 105 (tBool -> funcBool .)
    OR              reduce using rule 105 (tBool -> funcBool .)
    )               reduce using rule 105 (tBool -> funcBool .)
    ;               reduce using rule 105 (tBool -> funcBool .)
    }               reduce using rule 105 (tBool -> funcBool .)
    :               reduce using rule 105 (tBool -> funcBool .)
    ,               reduce using rule 105 (tBool -> funcBool .)
    ]               reduce using rule 105 (tBool -> funcBool .)


state 60

    (82) paren -> funcInt .

    ^               reduce using rule 82 (paren -> funcInt .)
    *               reduce using rule 82 (paren -> funcInt .)
    /               reduce using rule 82 (paren -> funcInt .)
    %               reduce using rule 82 (paren -> funcInt .)
    )               reduce using rule 82 (paren -> funcInt .)
    +               reduce using rule 82 (paren -> funcInt .)
    -               reduce using rule 82 (paren -> funcInt .)
    >               reduce using rule 82 (paren -> funcInt .)
    <               reduce using rule 82 (paren -> funcInt .)
    ;               reduce using rule 82 (paren -> funcInt .)
    }               reduce using rule 82 (paren -> funcInt .)
    EQEQ            reduce using rule 82 (paren -> funcInt .)
    DISTINTO        reduce using rule 82 (paren -> funcInt .)
    AND             reduce using rule 82 (paren -> funcInt .)
    ?               reduce using rule 82 (paren -> funcInt .)
    OR              reduce using rule 82 (paren -> funcInt .)
    :               reduce using rule 82 (paren -> funcInt .)
    ,               reduce using rule 82 (paren -> funcInt .)
    ]               reduce using rule 82 (paren -> funcInt .)


state 61

    (97) mayor -> menor .

    EQEQ            reduce using rule 97 (mayor -> menor .)
    DISTINTO        reduce using rule 97 (mayor -> menor .)
    AND             reduce using rule 97 (mayor -> menor .)
    ?               reduce using rule 97 (mayor -> menor .)
    OR              reduce using rule 97 (mayor -> menor .)
    )               reduce using rule 97 (mayor -> menor .)
    ;               reduce using rule 97 (mayor -> menor .)
    }               reduce using rule 97 (mayor -> menor .)
    :               reduce using rule 97 (mayor -> menor .)
    ,               reduce using rule 97 (mayor -> menor .)
    ]               reduce using rule 97 (mayor -> menor .)


state 62

    (92) and -> eq .
    (93) eq -> eq . EQEQ tBool
    (94) eq -> eq . DISTINTO tBool

    AND             reduce using rule 92 (and -> eq .)
    ?               reduce using rule 92 (and -> eq .)
    OR              reduce using rule 92 (and -> eq .)
    ,               reduce using rule 92 (and -> eq .)
    )               reduce using rule 92 (and -> eq .)
    ]               reduce using rule 92 (and -> eq .)
    ;               reduce using rule 92 (and -> eq .)
    }               reduce using rule 92 (and -> eq .)
    :               reduce using rule 92 (and -> eq .)
    EQEQ            shift and go to state 125
    DISTINTO        shift and go to state 126


state 63

    (95) eq -> mayor .

    EQEQ            reduce using rule 95 (eq -> mayor .)
    DISTINTO        reduce using rule 95 (eq -> mayor .)
    AND             reduce using rule 95 (eq -> mayor .)
    ?               reduce using rule 95 (eq -> mayor .)
    OR              reduce using rule 95 (eq -> mayor .)
    ;               reduce using rule 95 (eq -> mayor .)
    )               reduce using rule 95 (eq -> mayor .)
    }               reduce using rule 95 (eq -> mayor .)
    :               reduce using rule 95 (eq -> mayor .)
    ,               reduce using rule 95 (eq -> mayor .)
    ]               reduce using rule 95 (eq -> mayor .)


state 64

    (106) tCompare -> eMat .
    (65) eMat -> eMat . + p
    (66) eMat -> eMat . - p

    >               reduce using rule 106 (tCompare -> eMat .)
    <               reduce using rule 106 (tCompare -> eMat .)
    EQEQ            reduce using rule 106 (tCompare -> eMat .)
    DISTINTO        reduce using rule 106 (tCompare -> eMat .)
    AND             reduce using rule 106 (tCompare -> eMat .)
    ?               reduce using rule 106 (tCompare -> eMat .)
    OR              reduce using rule 106 (tCompare -> eMat .)
    )               reduce using rule 106 (tCompare -> eMat .)
    ;               reduce using rule 106 (tCompare -> eMat .)
    }               reduce using rule 106 (tCompare -> eMat .)
    :               reduce using rule 106 (tCompare -> eMat .)
    ,               reduce using rule 106 (tCompare -> eMat .)
    ]               reduce using rule 106 (tCompare -> eMat .)
    +               shift and go to state 127
    -               shift and go to state 128


state 65

    (102) tBool -> ( . expBool )
    (77) paren -> ( . eMat )
    (87) expBool -> . or ? expBool : expBool
    (88) expBool -> . or
    (65) eMat -> . eMat + p
    (66) eMat -> . eMat - p
    (67) eMat -> . p
    (89) or -> . or OR and
    (90) or -> . and
    (68) p -> . p * exp
    (69) p -> . p / exp
    (70) p -> . p % exp
    (71) p -> . exp
    (91) and -> . and AND eq
    (92) and -> . eq
    (72) exp -> . exp ^ iSing
    (73) exp -> . iSing
    (93) eq -> . eq EQEQ tBool
    (94) eq -> . eq DISTINTO tBool
    (95) eq -> . mayor
    (74) iSing -> . - paren
    (75) iSing -> . + paren
    (76) iSing -> . paren
    (96) mayor -> . tCompare > tCompare
    (97) mayor -> . menor
    (77) paren -> . ( eMat )
    (78) paren -> . INT
    (79) paren -> . varYVals
    (80) paren -> . FLOAT
    (81) paren -> . varsOps
    (82) paren -> . funcInt
    (106) tCompare -> . eMat
    (107) tCompare -> . varsOps
    (108) tCompare -> . varYVals
    (98) menor -> . tCompare < tCompare
    (99) menor -> . not
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (100) not -> . NOT not
    (101) not -> . tBool
    (43) vecVal -> . ID m
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID
    (102) tBool -> . ( expBool )
    (103) tBool -> . BOOL
    (104) tBool -> . varYVals
    (105) tBool -> . funcBool
    (26) funcBool -> . COLINEALES ( vec , vec )

    -               shift and go to state 67
    +               shift and go to state 66
    (               shift and go to state 88
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    ID              shift and go to state 130
    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    NOT             shift and go to state 81
    BOOL            shift and go to state 69
    COLINEALES      shift and go to state 13

    and                            shift and go to state 58
    funcBool                       shift and go to state 59
    funcInt                        shift and go to state 60
    menor                          shift and go to state 61
    eq                             shift and go to state 62
    mayor                          shift and go to state 63
    eMat                           shift and go to state 129
    vecVal                         shift and go to state 68
    sMM                            shift and go to state 11
    paren                          shift and go to state 72
    varsOps                        shift and go to state 90
    tCompare                       shift and go to state 71
    not                            shift and go to state 73
    p                              shift and go to state 78
    iSing                          shift and go to state 70
    exp                            shift and go to state 80
    tBool                          shift and go to state 82
    varYVals                       shift and go to state 131
    or                             shift and go to state 77
    expBool                        shift and go to state 132

state 66

    (75) iSing -> + . paren
    (77) paren -> . ( eMat )
    (78) paren -> . INT
    (79) paren -> . varYVals
    (80) paren -> . FLOAT
    (81) paren -> . varsOps
    (82) paren -> . funcInt
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (43) vecVal -> . ID m
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID

    (               shift and go to state 133
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    ID              shift and go to state 130
    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24

    funcInt                        shift and go to state 60
    sMM                            shift and go to state 11
    varsOps                        shift and go to state 134
    paren                          shift and go to state 135
    varYVals                       shift and go to state 136
    vecVal                         shift and go to state 68

state 67

    (74) iSing -> - . paren
    (77) paren -> . ( eMat )
    (78) paren -> . INT
    (79) paren -> . varYVals
    (80) paren -> . FLOAT
    (81) paren -> . varsOps
    (82) paren -> . funcInt
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (43) vecVal -> . ID m
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID

    (               shift and go to state 133
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    ID              shift and go to state 130
    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24

    funcInt                        shift and go to state 60
    sMM                            shift and go to state 11
    varsOps                        shift and go to state 134
    paren                          shift and go to state 137
    varYVals                       shift and go to state 136
    vecVal                         shift and go to state 68

state 68

    (42) varYVals -> vecVal .

    ^               reduce using rule 42 (varYVals -> vecVal .)
    *               reduce using rule 42 (varYVals -> vecVal .)
    /               reduce using rule 42 (varYVals -> vecVal .)
    %               reduce using rule 42 (varYVals -> vecVal .)
    ,               reduce using rule 42 (varYVals -> vecVal .)
    +               reduce using rule 42 (varYVals -> vecVal .)
    -               reduce using rule 42 (varYVals -> vecVal .)
    >               reduce using rule 42 (varYVals -> vecVal .)
    <               reduce using rule 42 (varYVals -> vecVal .)
    )               reduce using rule 42 (varYVals -> vecVal .)
    ;               reduce using rule 42 (varYVals -> vecVal .)
    }               reduce using rule 42 (varYVals -> vecVal .)
    EQEQ            reduce using rule 42 (varYVals -> vecVal .)
    DISTINTO        reduce using rule 42 (varYVals -> vecVal .)
    AND             reduce using rule 42 (varYVals -> vecVal .)
    ?               reduce using rule 42 (varYVals -> vecVal .)
    OR              reduce using rule 42 (varYVals -> vecVal .)
    :               reduce using rule 42 (varYVals -> vecVal .)
    ]               reduce using rule 42 (varYVals -> vecVal .)


state 69

    (103) tBool -> BOOL .

    EQEQ            reduce using rule 103 (tBool -> BOOL .)
    DISTINTO        reduce using rule 103 (tBool -> BOOL .)
    AND             reduce using rule 103 (tBool -> BOOL .)
    ?               reduce using rule 103 (tBool -> BOOL .)
    OR              reduce using rule 103 (tBool -> BOOL .)
    )               reduce using rule 103 (tBool -> BOOL .)
    ;               reduce using rule 103 (tBool -> BOOL .)
    }               reduce using rule 103 (tBool -> BOOL .)
    :               reduce using rule 103 (tBool -> BOOL .)
    ,               reduce using rule 103 (tBool -> BOOL .)
    ]               reduce using rule 103 (tBool -> BOOL .)


state 70

    (73) exp -> iSing .

    ^               reduce using rule 73 (exp -> iSing .)
    *               reduce using rule 73 (exp -> iSing .)
    /               reduce using rule 73 (exp -> iSing .)
    %               reduce using rule 73 (exp -> iSing .)
    +               reduce using rule 73 (exp -> iSing .)
    -               reduce using rule 73 (exp -> iSing .)
    >               reduce using rule 73 (exp -> iSing .)
    <               reduce using rule 73 (exp -> iSing .)
    )               reduce using rule 73 (exp -> iSing .)
    ;               reduce using rule 73 (exp -> iSing .)
    }               reduce using rule 73 (exp -> iSing .)
    EQEQ            reduce using rule 73 (exp -> iSing .)
    DISTINTO        reduce using rule 73 (exp -> iSing .)
    AND             reduce using rule 73 (exp -> iSing .)
    ?               reduce using rule 73 (exp -> iSing .)
    OR              reduce using rule 73 (exp -> iSing .)
    :               reduce using rule 73 (exp -> iSing .)
    ,               reduce using rule 73 (exp -> iSing .)
    ]               reduce using rule 73 (exp -> iSing .)


state 71

    (96) mayor -> tCompare . > tCompare
    (98) menor -> tCompare . < tCompare

    >               shift and go to state 139
    <               shift and go to state 138


state 72

    (76) iSing -> paren .

    ^               reduce using rule 76 (iSing -> paren .)
    *               reduce using rule 76 (iSing -> paren .)
    /               reduce using rule 76 (iSing -> paren .)
    %               reduce using rule 76 (iSing -> paren .)
    )               reduce using rule 76 (iSing -> paren .)
    +               reduce using rule 76 (iSing -> paren .)
    -               reduce using rule 76 (iSing -> paren .)
    >               reduce using rule 76 (iSing -> paren .)
    <               reduce using rule 76 (iSing -> paren .)
    }               reduce using rule 76 (iSing -> paren .)
    ;               reduce using rule 76 (iSing -> paren .)
    EQEQ            reduce using rule 76 (iSing -> paren .)
    DISTINTO        reduce using rule 76 (iSing -> paren .)
    AND             reduce using rule 76 (iSing -> paren .)
    ?               reduce using rule 76 (iSing -> paren .)
    OR              reduce using rule 76 (iSing -> paren .)
    :               reduce using rule 76 (iSing -> paren .)
    ,               reduce using rule 76 (iSing -> paren .)
    ]               reduce using rule 76 (iSing -> paren .)


state 73

    (99) menor -> not .

    EQEQ            reduce using rule 99 (menor -> not .)
    DISTINTO        reduce using rule 99 (menor -> not .)
    AND             reduce using rule 99 (menor -> not .)
    ?               reduce using rule 99 (menor -> not .)
    OR              reduce using rule 99 (menor -> not .)
    ;               reduce using rule 99 (menor -> not .)
    }               reduce using rule 99 (menor -> not .)
    :               reduce using rule 99 (menor -> not .)
    ,               reduce using rule 99 (menor -> not .)
    ]               reduce using rule 99 (menor -> not .)
    )               reduce using rule 99 (menor -> not .)


state 74

    (41) varYVals -> ID .
    (52) sMM -> ID . MASMAS
    (53) sMM -> ID . MENOSMENOS
    (54) sMM -> ID .
    (43) vecVal -> ID . m
    (44) m -> . [ INT ]
    (45) m -> . [ INT ] m

  ! reduce/reduce conflict for > resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for < resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for ^ resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for * resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for / resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for % resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for + resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for - resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for EQEQ resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for DISTINTO resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for AND resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for ? resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for ) resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for ; resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for } resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for : resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for , resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for ] resolved using rule 41 (varYVals -> ID .)
    >               reduce using rule 41 (varYVals -> ID .)
    <               reduce using rule 41 (varYVals -> ID .)
    EQEQ            reduce using rule 41 (varYVals -> ID .)
    DISTINTO        reduce using rule 41 (varYVals -> ID .)
    AND             reduce using rule 41 (varYVals -> ID .)
    ?               reduce using rule 41 (varYVals -> ID .)
    OR              reduce using rule 41 (varYVals -> ID .)
    )               reduce using rule 41 (varYVals -> ID .)
    ^               reduce using rule 41 (varYVals -> ID .)
    *               reduce using rule 41 (varYVals -> ID .)
    /               reduce using rule 41 (varYVals -> ID .)
    %               reduce using rule 41 (varYVals -> ID .)
    +               reduce using rule 41 (varYVals -> ID .)
    -               reduce using rule 41 (varYVals -> ID .)
    ;               reduce using rule 41 (varYVals -> ID .)
    }               reduce using rule 41 (varYVals -> ID .)
    :               reduce using rule 41 (varYVals -> ID .)
    ,               reduce using rule 41 (varYVals -> ID .)
    ]               reduce using rule 41 (varYVals -> ID .)
    MASMAS          shift and go to state 43
    MENOSMENOS      shift and go to state 41
    [               shift and go to state 141

  ! >               [ reduce using rule 54 (sMM -> ID .) ]
  ! <               [ reduce using rule 54 (sMM -> ID .) ]
  ! ^               [ reduce using rule 54 (sMM -> ID .) ]
  ! *               [ reduce using rule 54 (sMM -> ID .) ]
  ! /               [ reduce using rule 54 (sMM -> ID .) ]
  ! %               [ reduce using rule 54 (sMM -> ID .) ]
  ! +               [ reduce using rule 54 (sMM -> ID .) ]
  ! -               [ reduce using rule 54 (sMM -> ID .) ]
  ! EQEQ            [ reduce using rule 54 (sMM -> ID .) ]
  ! DISTINTO        [ reduce using rule 54 (sMM -> ID .) ]
  ! AND             [ reduce using rule 54 (sMM -> ID .) ]
  ! ?               [ reduce using rule 54 (sMM -> ID .) ]
  ! OR              [ reduce using rule 54 (sMM -> ID .) ]
  ! )               [ reduce using rule 54 (sMM -> ID .) ]
  ! ;               [ reduce using rule 54 (sMM -> ID .) ]
  ! }               [ reduce using rule 54 (sMM -> ID .) ]
  ! :               [ reduce using rule 54 (sMM -> ID .) ]
  ! ,               [ reduce using rule 54 (sMM -> ID .) ]
  ! ]               [ reduce using rule 54 (sMM -> ID .) ]

    m                              shift and go to state 140

state 75

    (78) paren -> INT .

    ^               reduce using rule 78 (paren -> INT .)
    *               reduce using rule 78 (paren -> INT .)
    /               reduce using rule 78 (paren -> INT .)
    %               reduce using rule 78 (paren -> INT .)
    )               reduce using rule 78 (paren -> INT .)
    +               reduce using rule 78 (paren -> INT .)
    -               reduce using rule 78 (paren -> INT .)
    >               reduce using rule 78 (paren -> INT .)
    <               reduce using rule 78 (paren -> INT .)
    ;               reduce using rule 78 (paren -> INT .)
    }               reduce using rule 78 (paren -> INT .)
    EQEQ            reduce using rule 78 (paren -> INT .)
    DISTINTO        reduce using rule 78 (paren -> INT .)
    AND             reduce using rule 78 (paren -> INT .)
    ?               reduce using rule 78 (paren -> INT .)
    OR              reduce using rule 78 (paren -> INT .)
    :               reduce using rule 78 (paren -> INT .)
    ,               reduce using rule 78 (paren -> INT .)
    ]               reduce using rule 78 (paren -> INT .)


state 76

    (80) paren -> FLOAT .

    ^               reduce using rule 80 (paren -> FLOAT .)
    *               reduce using rule 80 (paren -> FLOAT .)
    /               reduce using rule 80 (paren -> FLOAT .)
    %               reduce using rule 80 (paren -> FLOAT .)
    )               reduce using rule 80 (paren -> FLOAT .)
    +               reduce using rule 80 (paren -> FLOAT .)
    -               reduce using rule 80 (paren -> FLOAT .)
    >               reduce using rule 80 (paren -> FLOAT .)
    <               reduce using rule 80 (paren -> FLOAT .)
    ;               reduce using rule 80 (paren -> FLOAT .)
    }               reduce using rule 80 (paren -> FLOAT .)
    EQEQ            reduce using rule 80 (paren -> FLOAT .)
    DISTINTO        reduce using rule 80 (paren -> FLOAT .)
    AND             reduce using rule 80 (paren -> FLOAT .)
    ?               reduce using rule 80 (paren -> FLOAT .)
    OR              reduce using rule 80 (paren -> FLOAT .)
    :               reduce using rule 80 (paren -> FLOAT .)
    ,               reduce using rule 80 (paren -> FLOAT .)
    ]               reduce using rule 80 (paren -> FLOAT .)


state 77

    (87) expBool -> or . ? expBool : expBool
    (88) expBool -> or .
    (89) or -> or . OR and

    ?               shift and go to state 143
    }               reduce using rule 88 (expBool -> or .)
    )               reduce using rule 88 (expBool -> or .)
    ;               reduce using rule 88 (expBool -> or .)
    ,               reduce using rule 88 (expBool -> or .)
    :               reduce using rule 88 (expBool -> or .)
    ]               reduce using rule 88 (expBool -> or .)
    OR              shift and go to state 142


state 78

    (67) eMat -> p .
    (68) p -> p . * exp
    (69) p -> p . / exp
    (70) p -> p . % exp

    +               reduce using rule 67 (eMat -> p .)
    -               reduce using rule 67 (eMat -> p .)
    )               reduce using rule 67 (eMat -> p .)
    >               reduce using rule 67 (eMat -> p .)
    <               reduce using rule 67 (eMat -> p .)
    }               reduce using rule 67 (eMat -> p .)
    ;               reduce using rule 67 (eMat -> p .)
    ,               reduce using rule 67 (eMat -> p .)
    ]               reduce using rule 67 (eMat -> p .)
    EQEQ            reduce using rule 67 (eMat -> p .)
    DISTINTO        reduce using rule 67 (eMat -> p .)
    AND             reduce using rule 67 (eMat -> p .)
    ?               reduce using rule 67 (eMat -> p .)
    OR              reduce using rule 67 (eMat -> p .)
    :               reduce using rule 67 (eMat -> p .)
    *               shift and go to state 144
    /               shift and go to state 146
    %               shift and go to state 145


state 79

    (107) tCompare -> varsOps .
    (81) paren -> varsOps .

  ! reduce/reduce conflict for > resolved using rule 81 (paren -> varsOps .)
  ! reduce/reduce conflict for < resolved using rule 81 (paren -> varsOps .)
  ! reduce/reduce conflict for EQEQ resolved using rule 81 (paren -> varsOps .)
  ! reduce/reduce conflict for DISTINTO resolved using rule 81 (paren -> varsOps .)
  ! reduce/reduce conflict for AND resolved using rule 81 (paren -> varsOps .)
  ! reduce/reduce conflict for ? resolved using rule 81 (paren -> varsOps .)
  ! reduce/reduce conflict for OR resolved using rule 81 (paren -> varsOps .)
  ! reduce/reduce conflict for ) resolved using rule 81 (paren -> varsOps .)
  ! reduce/reduce conflict for ; resolved using rule 81 (paren -> varsOps .)
  ! reduce/reduce conflict for } resolved using rule 81 (paren -> varsOps .)
  ! reduce/reduce conflict for : resolved using rule 81 (paren -> varsOps .)
  ! reduce/reduce conflict for , resolved using rule 81 (paren -> varsOps .)
  ! reduce/reduce conflict for ] resolved using rule 81 (paren -> varsOps .)
    ^               reduce using rule 81 (paren -> varsOps .)
    *               reduce using rule 81 (paren -> varsOps .)
    /               reduce using rule 81 (paren -> varsOps .)
    %               reduce using rule 81 (paren -> varsOps .)
    +               reduce using rule 81 (paren -> varsOps .)
    -               reduce using rule 81 (paren -> varsOps .)
    >               reduce using rule 81 (paren -> varsOps .)
    <               reduce using rule 81 (paren -> varsOps .)
    EQEQ            reduce using rule 81 (paren -> varsOps .)
    DISTINTO        reduce using rule 81 (paren -> varsOps .)
    AND             reduce using rule 81 (paren -> varsOps .)
    ?               reduce using rule 81 (paren -> varsOps .)
    OR              reduce using rule 81 (paren -> varsOps .)
    )               reduce using rule 81 (paren -> varsOps .)
    ;               reduce using rule 81 (paren -> varsOps .)
    }               reduce using rule 81 (paren -> varsOps .)
    :               reduce using rule 81 (paren -> varsOps .)
    ,               reduce using rule 81 (paren -> varsOps .)
    ]               reduce using rule 81 (paren -> varsOps .)

  ! >               [ reduce using rule 107 (tCompare -> varsOps .) ]
  ! <               [ reduce using rule 107 (tCompare -> varsOps .) ]
  ! EQEQ            [ reduce using rule 107 (tCompare -> varsOps .) ]
  ! DISTINTO        [ reduce using rule 107 (tCompare -> varsOps .) ]
  ! AND             [ reduce using rule 107 (tCompare -> varsOps .) ]
  ! ?               [ reduce using rule 107 (tCompare -> varsOps .) ]
  ! OR              [ reduce using rule 107 (tCompare -> varsOps .) ]
  ! )               [ reduce using rule 107 (tCompare -> varsOps .) ]
  ! ;               [ reduce using rule 107 (tCompare -> varsOps .) ]
  ! }               [ reduce using rule 107 (tCompare -> varsOps .) ]
  ! :               [ reduce using rule 107 (tCompare -> varsOps .) ]
  ! ,               [ reduce using rule 107 (tCompare -> varsOps .) ]
  ! ]               [ reduce using rule 107 (tCompare -> varsOps .) ]


state 80

    (71) p -> exp .
    (72) exp -> exp . ^ iSing

    *               reduce using rule 71 (p -> exp .)
    /               reduce using rule 71 (p -> exp .)
    %               reduce using rule 71 (p -> exp .)
    +               reduce using rule 71 (p -> exp .)
    -               reduce using rule 71 (p -> exp .)
    }               reduce using rule 71 (p -> exp .)
    >               reduce using rule 71 (p -> exp .)
    <               reduce using rule 71 (p -> exp .)
    )               reduce using rule 71 (p -> exp .)
    ;               reduce using rule 71 (p -> exp .)
    EQEQ            reduce using rule 71 (p -> exp .)
    DISTINTO        reduce using rule 71 (p -> exp .)
    AND             reduce using rule 71 (p -> exp .)
    ?               reduce using rule 71 (p -> exp .)
    OR              reduce using rule 71 (p -> exp .)
    :               reduce using rule 71 (p -> exp .)
    ,               reduce using rule 71 (p -> exp .)
    ]               reduce using rule 71 (p -> exp .)
    ^               shift and go to state 147


state 81

    (100) not -> NOT . not
    (100) not -> . NOT not
    (101) not -> . tBool
    (102) tBool -> . ( expBool )
    (103) tBool -> . BOOL
    (104) tBool -> . varYVals
    (105) tBool -> . funcBool
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (26) funcBool -> . COLINEALES ( vec , vec )
    (43) vecVal -> . ID m

    NOT             shift and go to state 81
    (               shift and go to state 148
    BOOL            shift and go to state 69
    ID              shift and go to state 120
    COLINEALES      shift and go to state 13

    funcBool                       shift and go to state 59
    not                            shift and go to state 149
    tBool                          shift and go to state 82
    varYVals                       shift and go to state 150
    vecVal                         shift and go to state 68

state 82

    (101) not -> tBool .

    EQEQ            reduce using rule 101 (not -> tBool .)
    DISTINTO        reduce using rule 101 (not -> tBool .)
    AND             reduce using rule 101 (not -> tBool .)
    ?               reduce using rule 101 (not -> tBool .)
    OR              reduce using rule 101 (not -> tBool .)
    ;               reduce using rule 101 (not -> tBool .)
    )               reduce using rule 101 (not -> tBool .)
    }               reduce using rule 101 (not -> tBool .)
    :               reduce using rule 101 (not -> tBool .)
    ,               reduce using rule 101 (not -> tBool .)
    ]               reduce using rule 101 (not -> tBool .)


state 83

    (108) tCompare -> varYVals .
    (104) tBool -> varYVals .
    (79) paren -> varYVals .

  ! reduce/reduce conflict for > resolved using rule 79 (paren -> varYVals .)
  ! reduce/reduce conflict for < resolved using rule 79 (paren -> varYVals .)
    EQEQ            reduce using rule 104 (tBool -> varYVals .)
    DISTINTO        reduce using rule 104 (tBool -> varYVals .)
    AND             reduce using rule 104 (tBool -> varYVals .)
    ?               reduce using rule 104 (tBool -> varYVals .)
    OR              reduce using rule 104 (tBool -> varYVals .)
    )               reduce using rule 104 (tBool -> varYVals .)
    ;               reduce using rule 104 (tBool -> varYVals .)
    }               reduce using rule 104 (tBool -> varYVals .)
    :               reduce using rule 104 (tBool -> varYVals .)
    ,               reduce using rule 104 (tBool -> varYVals .)
    ]               reduce using rule 104 (tBool -> varYVals .)
    ^               reduce using rule 79 (paren -> varYVals .)
    *               reduce using rule 79 (paren -> varYVals .)
    /               reduce using rule 79 (paren -> varYVals .)
    %               reduce using rule 79 (paren -> varYVals .)
    +               reduce using rule 79 (paren -> varYVals .)
    -               reduce using rule 79 (paren -> varYVals .)
    >               reduce using rule 79 (paren -> varYVals .)
    <               reduce using rule 79 (paren -> varYVals .)

  ! >               [ reduce using rule 108 (tCompare -> varYVals .) ]
  ! <               [ reduce using rule 108 (tCompare -> varYVals .) ]


state 84

    (10) loop -> WHILE ( expBool . ) bloque

    )               shift and go to state 151


state 85

    (22) funcReturn -> funcBool .
    (105) tBool -> funcBool .

  ! reduce/reduce conflict for , resolved using rule 22 (funcReturn -> funcBool .)
  ! reduce/reduce conflict for ] resolved using rule 22 (funcReturn -> funcBool .)
  ! reduce/reduce conflict for ; resolved using rule 22 (funcReturn -> funcBool .)
  ! reduce/reduce conflict for } resolved using rule 22 (funcReturn -> funcBool .)
  ! reduce/reduce conflict for ) resolved using rule 22 (funcReturn -> funcBool .)
    }               reduce using rule 22 (funcReturn -> funcBool .)
    ,               reduce using rule 22 (funcReturn -> funcBool .)
    ]               reduce using rule 22 (funcReturn -> funcBool .)
    ;               reduce using rule 22 (funcReturn -> funcBool .)
    )               reduce using rule 22 (funcReturn -> funcBool .)
    EQEQ            reduce using rule 105 (tBool -> funcBool .)
    DISTINTO        reduce using rule 105 (tBool -> funcBool .)
    AND             reduce using rule 105 (tBool -> funcBool .)
    ?               reduce using rule 105 (tBool -> funcBool .)
    OR              reduce using rule 105 (tBool -> funcBool .)

  ! ,               [ reduce using rule 105 (tBool -> funcBool .) ]
  ! ]               [ reduce using rule 105 (tBool -> funcBool .) ]
  ! ;               [ reduce using rule 105 (tBool -> funcBool .) ]
  ! }               [ reduce using rule 105 (tBool -> funcBool .) ]
  ! )               [ reduce using rule 105 (tBool -> funcBool .) ]


state 86

    (20) funcReturn -> funcInt .
    (82) paren -> funcInt .

  ! reduce/reduce conflict for ; resolved using rule 20 (funcReturn -> funcInt .)
  ! reduce/reduce conflict for , resolved using rule 20 (funcReturn -> funcInt .)
  ! reduce/reduce conflict for ] resolved using rule 20 (funcReturn -> funcInt .)
  ! reduce/reduce conflict for } resolved using rule 20 (funcReturn -> funcInt .)
  ! reduce/reduce conflict for ) resolved using rule 20 (funcReturn -> funcInt .)
    }               reduce using rule 20 (funcReturn -> funcInt .)
    ,               reduce using rule 20 (funcReturn -> funcInt .)
    ]               reduce using rule 20 (funcReturn -> funcInt .)
    ;               reduce using rule 20 (funcReturn -> funcInt .)
    )               reduce using rule 20 (funcReturn -> funcInt .)
    ^               reduce using rule 82 (paren -> funcInt .)
    *               reduce using rule 82 (paren -> funcInt .)
    /               reduce using rule 82 (paren -> funcInt .)
    %               reduce using rule 82 (paren -> funcInt .)
    +               reduce using rule 82 (paren -> funcInt .)
    -               reduce using rule 82 (paren -> funcInt .)
    >               reduce using rule 82 (paren -> funcInt .)
    <               reduce using rule 82 (paren -> funcInt .)

  ! ;               [ reduce using rule 82 (paren -> funcInt .) ]
  ! ,               [ reduce using rule 82 (paren -> funcInt .) ]
  ! ]               [ reduce using rule 82 (paren -> funcInt .) ]
  ! }               [ reduce using rule 82 (paren -> funcInt .) ]
  ! )               [ reduce using rule 82 (paren -> funcInt .) ]


state 87

    (34) valores -> eMat .
    (65) eMat -> eMat . + p
    (66) eMat -> eMat . - p
    (106) tCompare -> eMat .

    }               reduce using rule 34 (valores -> eMat .)
    ,               reduce using rule 34 (valores -> eMat .)
    ;               reduce using rule 34 (valores -> eMat .)
    ]               reduce using rule 34 (valores -> eMat .)
    )               reduce using rule 34 (valores -> eMat .)
    +               shift and go to state 127
    -               shift and go to state 128
    >               reduce using rule 106 (tCompare -> eMat .)
    <               reduce using rule 106 (tCompare -> eMat .)


state 88

    (77) paren -> ( . eMat )
    (102) tBool -> ( . expBool )
    (65) eMat -> . eMat + p
    (66) eMat -> . eMat - p
    (67) eMat -> . p
    (87) expBool -> . or ? expBool : expBool
    (88) expBool -> . or
    (68) p -> . p * exp
    (69) p -> . p / exp
    (70) p -> . p % exp
    (71) p -> . exp
    (89) or -> . or OR and
    (90) or -> . and
    (72) exp -> . exp ^ iSing
    (73) exp -> . iSing
    (91) and -> . and AND eq
    (92) and -> . eq
    (74) iSing -> . - paren
    (75) iSing -> . + paren
    (76) iSing -> . paren
    (93) eq -> . eq EQEQ tBool
    (94) eq -> . eq DISTINTO tBool
    (95) eq -> . mayor
    (77) paren -> . ( eMat )
    (78) paren -> . INT
    (79) paren -> . varYVals
    (80) paren -> . FLOAT
    (81) paren -> . varsOps
    (82) paren -> . funcInt
    (96) mayor -> . tCompare > tCompare
    (97) mayor -> . menor
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (106) tCompare -> . eMat
    (107) tCompare -> . varsOps
    (108) tCompare -> . varYVals
    (98) menor -> . tCompare < tCompare
    (99) menor -> . not
    (43) vecVal -> . ID m
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID
    (100) not -> . NOT not
    (101) not -> . tBool
    (102) tBool -> . ( expBool )
    (103) tBool -> . BOOL
    (104) tBool -> . varYVals
    (105) tBool -> . funcBool
    (26) funcBool -> . COLINEALES ( vec , vec )

    -               shift and go to state 67
    +               shift and go to state 66
    (               shift and go to state 88
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    ID              shift and go to state 130
    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    NOT             shift and go to state 81
    BOOL            shift and go to state 69
    COLINEALES      shift and go to state 13

    and                            shift and go to state 58
    funcBool                       shift and go to state 59
    funcInt                        shift and go to state 60
    menor                          shift and go to state 61
    eq                             shift and go to state 62
    mayor                          shift and go to state 63
    eMat                           shift and go to state 129
    vecVal                         shift and go to state 68
    sMM                            shift and go to state 11
    paren                          shift and go to state 72
    varsOps                        shift and go to state 90
    tCompare                       shift and go to state 71
    not                            shift and go to state 73
    p                              shift and go to state 78
    iSing                          shift and go to state 70
    exp                            shift and go to state 80
    tBool                          shift and go to state 82
    varYVals                       shift and go to state 131
    or                             shift and go to state 77
    expBool                        shift and go to state 132

state 89

    (39) valores -> reg .

    }               reduce using rule 39 (valores -> reg .)
    ,               reduce using rule 39 (valores -> reg .)
    ;               reduce using rule 39 (valores -> reg .)
    ]               reduce using rule 39 (valores -> reg .)
    )               reduce using rule 39 (valores -> reg .)


state 90

    (81) paren -> varsOps .
    (107) tCompare -> varsOps .

  ! reduce/reduce conflict for > resolved using rule 81 (paren -> varsOps .)
  ! reduce/reduce conflict for < resolved using rule 81 (paren -> varsOps .)
    ^               reduce using rule 81 (paren -> varsOps .)
    *               reduce using rule 81 (paren -> varsOps .)
    /               reduce using rule 81 (paren -> varsOps .)
    %               reduce using rule 81 (paren -> varsOps .)
    )               reduce using rule 81 (paren -> varsOps .)
    +               reduce using rule 81 (paren -> varsOps .)
    -               reduce using rule 81 (paren -> varsOps .)
    >               reduce using rule 81 (paren -> varsOps .)
    <               reduce using rule 81 (paren -> varsOps .)
    ;               reduce using rule 81 (paren -> varsOps .)
    ,               reduce using rule 81 (paren -> varsOps .)
    ]               reduce using rule 81 (paren -> varsOps .)
    }               reduce using rule 81 (paren -> varsOps .)

  ! >               [ reduce using rule 107 (tCompare -> varsOps .) ]
  ! <               [ reduce using rule 107 (tCompare -> varsOps .) ]


state 91

    (84) expString -> STRING .

    +               reduce using rule 84 (expString -> STRING .)
    ;               reduce using rule 84 (expString -> STRING .)
    ,               reduce using rule 84 (expString -> STRING .)
    ]               reduce using rule 84 (expString -> STRING .)
    }               reduce using rule 84 (expString -> STRING .)
    )               reduce using rule 84 (expString -> STRING .)


state 92

    (36) valores -> expString .
    (83) expString -> expString . + STRING

    }               reduce using rule 36 (valores -> expString .)
    ,               reduce using rule 36 (valores -> expString .)
    ;               reduce using rule 36 (valores -> expString .)
    ]               reduce using rule 36 (valores -> expString .)
    )               reduce using rule 36 (valores -> expString .)
    +               shift and go to state 152


state 93

    (40) valores -> ID . . ID
    (41) varYVals -> ID .
    (43) vecVal -> ID . m
    (52) sMM -> ID . MASMAS
    (53) sMM -> ID . MENOSMENOS
    (54) sMM -> ID .
    (44) m -> . [ INT ]
    (45) m -> . [ INT ] m

  ! reduce/reduce conflict for ^ resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for * resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for / resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for % resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for + resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for - resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for , resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for ] resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for > resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for < resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for ) resolved using rule 41 (varYVals -> ID .)
    .               shift and go to state 153
    ,               reduce using rule 41 (varYVals -> ID .)
    ]               reduce using rule 41 (varYVals -> ID .)
    +               reduce using rule 41 (varYVals -> ID .)
    ^               reduce using rule 41 (varYVals -> ID .)
    *               reduce using rule 41 (varYVals -> ID .)
    /               reduce using rule 41 (varYVals -> ID .)
    %               reduce using rule 41 (varYVals -> ID .)
    -               reduce using rule 41 (varYVals -> ID .)
    >               reduce using rule 41 (varYVals -> ID .)
    <               reduce using rule 41 (varYVals -> ID .)
    EQEQ            reduce using rule 41 (varYVals -> ID .)
    DISTINTO        reduce using rule 41 (varYVals -> ID .)
    AND             reduce using rule 41 (varYVals -> ID .)
    ?               reduce using rule 41 (varYVals -> ID .)
    OR              reduce using rule 41 (varYVals -> ID .)
    )               reduce using rule 41 (varYVals -> ID .)
    MASMAS          shift and go to state 43
    MENOSMENOS      shift and go to state 41
    [               shift and go to state 141

  ! ^               [ reduce using rule 54 (sMM -> ID .) ]
  ! *               [ reduce using rule 54 (sMM -> ID .) ]
  ! /               [ reduce using rule 54 (sMM -> ID .) ]
  ! %               [ reduce using rule 54 (sMM -> ID .) ]
  ! +               [ reduce using rule 54 (sMM -> ID .) ]
  ! -               [ reduce using rule 54 (sMM -> ID .) ]
  ! ,               [ reduce using rule 54 (sMM -> ID .) ]
  ! ]               [ reduce using rule 54 (sMM -> ID .) ]
  ! >               [ reduce using rule 54 (sMM -> ID .) ]
  ! <               [ reduce using rule 54 (sMM -> ID .) ]
  ! )               [ reduce using rule 54 (sMM -> ID .) ]

    m                              shift and go to state 140

state 94

    (86) expString -> funcString .
    (21) funcReturn -> funcString .

  ! reduce/reduce conflict for } resolved using rule 21 (funcReturn -> funcString .)
  ! reduce/reduce conflict for , resolved using rule 21 (funcReturn -> funcString .)
  ! reduce/reduce conflict for ] resolved using rule 21 (funcReturn -> funcString .)
  ! reduce/reduce conflict for ; resolved using rule 21 (funcReturn -> funcString .)
  ! reduce/reduce conflict for ) resolved using rule 21 (funcReturn -> funcString .)
    +               reduce using rule 86 (expString -> funcString .)
    }               reduce using rule 21 (funcReturn -> funcString .)
    ,               reduce using rule 21 (funcReturn -> funcString .)
    ]               reduce using rule 21 (funcReturn -> funcString .)
    ;               reduce using rule 21 (funcReturn -> funcString .)
    )               reduce using rule 21 (funcReturn -> funcString .)

  ! ;               [ reduce using rule 86 (expString -> funcString .) ]
  ! ,               [ reduce using rule 86 (expString -> funcString .) ]
  ! ]               [ reduce using rule 86 (expString -> funcString .) ]
  ! }               [ reduce using rule 86 (expString -> funcString .) ]
  ! )               [ reduce using rule 86 (expString -> funcString .) ]


state 95

    (38) valores -> funcReturn .

    }               reduce using rule 38 (valores -> funcReturn .)
    ,               reduce using rule 38 (valores -> funcReturn .)
    ;               reduce using rule 38 (valores -> funcReturn .)
    ]               reduce using rule 38 (valores -> funcReturn .)
    )               reduce using rule 38 (valores -> funcReturn .)


state 96

    (27) funcVoid -> PRINT ( valores . )

    )               shift and go to state 154


state 97

    (46) reg -> { . campos }
    (47) campos -> . ID : valores , campos
    (48) campos -> . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . expString
    (37) valores -> . varYVals
    (38) valores -> . funcReturn
    (39) valores -> . reg
    (40) valores -> . ID . ID
    (65) eMat -> . eMat + p
    (66) eMat -> . eMat - p
    (67) eMat -> . p
    (87) expBool -> . or ? expBool : expBool
    (88) expBool -> . or
    (83) expString -> . expString + STRING
    (84) expString -> . STRING
    (85) expString -> . varYVals
    (86) expString -> . funcString
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (46) reg -> . { campos }
    (68) p -> . p * exp
    (69) p -> . p / exp
    (70) p -> . p % exp
    (71) p -> . exp
    (89) or -> . or OR and
    (90) or -> . and
    (25) funcString -> . CAPITALIZAR ( expString )
    (43) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (26) funcBool -> . COLINEALES ( vec , vec )
    (72) exp -> . exp ^ iSing
    (73) exp -> . iSing
    (91) and -> . and AND eq
    (92) and -> . eq
    (74) iSing -> . - paren
    (75) iSing -> . + paren
    (76) iSing -> . paren
    (93) eq -> . eq EQEQ tBool
    (94) eq -> . eq DISTINTO tBool
    (95) eq -> . mayor
    (77) paren -> . ( eMat )
    (78) paren -> . INT
    (79) paren -> . varYVals
    (80) paren -> . FLOAT
    (81) paren -> . varsOps
    (82) paren -> . funcInt
    (96) mayor -> . tCompare > tCompare
    (97) mayor -> . menor
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (106) tCompare -> . eMat
    (107) tCompare -> . varsOps
    (108) tCompare -> . varYVals
    (98) menor -> . tCompare < tCompare
    (99) menor -> . not
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID
    (100) not -> . NOT not
    (101) not -> . tBool
    (102) tBool -> . ( expBool )
    (103) tBool -> . BOOL
    (104) tBool -> . varYVals
    (105) tBool -> . funcBool

    ID              shift and go to state 156
    STRING          shift and go to state 91
    {               shift and go to state 97
    CAPITALIZAR     shift and go to state 23
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 67
    +               shift and go to state 66
    (               shift and go to state 88
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    NOT             shift and go to state 81
    BOOL            shift and go to state 69

    and                            shift and go to state 58
    funcBool                       shift and go to state 85
    funcInt                        shift and go to state 86
    menor                          shift and go to state 61
    eq                             shift and go to state 62
    vecVal                         shift and go to state 68
    eMat                           shift and go to state 87
    mayor                          shift and go to state 63
    sMM                            shift and go to state 11
    paren                          shift and go to state 72
    reg                            shift and go to state 89
    varsOps                        shift and go to state 90
    expString                      shift and go to state 92
    tCompare                       shift and go to state 71
    campos                         shift and go to state 155
    not                            shift and go to state 73
    funcString                     shift and go to state 94
    funcReturn                     shift and go to state 95
    valores                        shift and go to state 157
    p                              shift and go to state 78
    iSing                          shift and go to state 70
    exp                            shift and go to state 80
    tBool                          shift and go to state 82
    varYVals                       shift and go to state 98
    or                             shift and go to state 77
    expBool                        shift and go to state 99

state 98

    (37) valores -> varYVals .
    (85) expString -> varYVals .
    (79) paren -> varYVals .
    (108) tCompare -> varYVals .
    (104) tBool -> varYVals .

  ! reduce/reduce conflict for ; resolved using rule 37 (valores -> varYVals .)
  ! reduce/reduce conflict for , resolved using rule 37 (valores -> varYVals .)
  ! reduce/reduce conflict for ] resolved using rule 37 (valores -> varYVals .)
  ! reduce/reduce conflict for } resolved using rule 37 (valores -> varYVals .)
  ! reduce/reduce conflict for ) resolved using rule 37 (valores -> varYVals .)
  ! reduce/reduce conflict for + resolved using rule 79 (paren -> varYVals .)
  ! reduce/reduce conflict for ; resolved using rule 37 (valores -> varYVals .)
  ! reduce/reduce conflict for , resolved using rule 37 (valores -> varYVals .)
  ! reduce/reduce conflict for ] resolved using rule 37 (valores -> varYVals .)
  ! reduce/reduce conflict for } resolved using rule 37 (valores -> varYVals .)
  ! reduce/reduce conflict for ) resolved using rule 37 (valores -> varYVals .)
  ! reduce/reduce conflict for > resolved using rule 79 (paren -> varYVals .)
  ! reduce/reduce conflict for < resolved using rule 79 (paren -> varYVals .)
  ! reduce/reduce conflict for , resolved using rule 37 (valores -> varYVals .)
  ! reduce/reduce conflict for ] resolved using rule 37 (valores -> varYVals .)
  ! reduce/reduce conflict for ; resolved using rule 37 (valores -> varYVals .)
  ! reduce/reduce conflict for } resolved using rule 37 (valores -> varYVals .)
  ! reduce/reduce conflict for ) resolved using rule 37 (valores -> varYVals .)
    }               reduce using rule 37 (valores -> varYVals .)
    ,               reduce using rule 37 (valores -> varYVals .)
    ;               reduce using rule 37 (valores -> varYVals .)
    ]               reduce using rule 37 (valores -> varYVals .)
    )               reduce using rule 37 (valores -> varYVals .)
    ^               reduce using rule 79 (paren -> varYVals .)
    *               reduce using rule 79 (paren -> varYVals .)
    /               reduce using rule 79 (paren -> varYVals .)
    %               reduce using rule 79 (paren -> varYVals .)
    +               reduce using rule 79 (paren -> varYVals .)
    -               reduce using rule 79 (paren -> varYVals .)
    >               reduce using rule 79 (paren -> varYVals .)
    <               reduce using rule 79 (paren -> varYVals .)
    EQEQ            reduce using rule 104 (tBool -> varYVals .)
    DISTINTO        reduce using rule 104 (tBool -> varYVals .)
    AND             reduce using rule 104 (tBool -> varYVals .)
    ?               reduce using rule 104 (tBool -> varYVals .)
    OR              reduce using rule 104 (tBool -> varYVals .)

  ! +               [ reduce using rule 85 (expString -> varYVals .) ]
  ! ;               [ reduce using rule 85 (expString -> varYVals .) ]
  ! ,               [ reduce using rule 85 (expString -> varYVals .) ]
  ! ]               [ reduce using rule 85 (expString -> varYVals .) ]
  ! }               [ reduce using rule 85 (expString -> varYVals .) ]
  ! )               [ reduce using rule 85 (expString -> varYVals .) ]
  ! ;               [ reduce using rule 79 (paren -> varYVals .) ]
  ! ,               [ reduce using rule 79 (paren -> varYVals .) ]
  ! ]               [ reduce using rule 79 (paren -> varYVals .) ]
  ! }               [ reduce using rule 79 (paren -> varYVals .) ]
  ! )               [ reduce using rule 79 (paren -> varYVals .) ]
  ! >               [ reduce using rule 108 (tCompare -> varYVals .) ]
  ! <               [ reduce using rule 108 (tCompare -> varYVals .) ]
  ! ,               [ reduce using rule 104 (tBool -> varYVals .) ]
  ! ]               [ reduce using rule 104 (tBool -> varYVals .) ]
  ! ;               [ reduce using rule 104 (tBool -> varYVals .) ]
  ! }               [ reduce using rule 104 (tBool -> varYVals .) ]
  ! )               [ reduce using rule 104 (tBool -> varYVals .) ]


state 99

    (35) valores -> expBool .

    }               reduce using rule 35 (valores -> expBool .)
    ,               reduce using rule 35 (valores -> expBool .)
    ;               reduce using rule 35 (valores -> expBool .)
    ]               reduce using rule 35 (valores -> expBool .)
    )               reduce using rule 35 (valores -> expBool .)


state 100

    (26) funcBool -> COLINEALES ( vec . , vec )

    ,               shift and go to state 158


state 101

    (31) vec -> ID . = [ elem ]

    =               shift and go to state 159


state 102

    (12) loop -> FOR ( varAsig . ; expBool ; varsOps ) bloque

    ;               shift and go to state 160


state 103

    (55) varAsig -> ID . MENOSEQ varAsig
    (56) varAsig -> ID . MASEQ varAsig
    (57) varAsig -> ID . MULEQ varAsig
    (58) varAsig -> ID . DIVEQ varAsig
    (59) varAsig -> ID . = varAsig
    (60) varAsig -> ID . MASEQ valores
    (61) varAsig -> ID . MENOSEQ valores
    (62) varAsig -> ID . MULEQ valores
    (63) varAsig -> ID . DIVEQ valores
    (64) varAsig -> ID . = valores

    MENOSEQ         shift and go to state 40
    MASEQ           shift and go to state 42
    MULEQ           shift and go to state 44
    DIVEQ           shift and go to state 46
    =               shift and go to state 45


state 104

    (55) varAsig -> ID . MENOSEQ varAsig
    (56) varAsig -> ID . MASEQ varAsig
    (57) varAsig -> ID . MULEQ varAsig
    (58) varAsig -> ID . DIVEQ varAsig
    (59) varAsig -> ID . = varAsig
    (60) varAsig -> ID . MASEQ valores
    (61) varAsig -> ID . MENOSEQ valores
    (62) varAsig -> ID . MULEQ valores
    (63) varAsig -> ID . DIVEQ valores
    (64) varAsig -> ID . = valores
    (40) valores -> ID . . ID
    (41) varYVals -> ID .
    (43) vecVal -> ID . m
    (52) sMM -> ID . MASMAS
    (53) sMM -> ID . MENOSMENOS
    (54) sMM -> ID .
    (44) m -> . [ INT ]
    (45) m -> . [ INT ] m

  ! reduce/reduce conflict for ^ resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for * resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for / resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for % resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for + resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for - resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for ; resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for > resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for < resolved using rule 41 (varYVals -> ID .)
    MENOSEQ         shift and go to state 40
    MASEQ           shift and go to state 42
    MULEQ           shift and go to state 44
    DIVEQ           shift and go to state 46
    =               shift and go to state 45
    .               shift and go to state 153
    ;               reduce using rule 41 (varYVals -> ID .)
    +               reduce using rule 41 (varYVals -> ID .)
    ^               reduce using rule 41 (varYVals -> ID .)
    *               reduce using rule 41 (varYVals -> ID .)
    /               reduce using rule 41 (varYVals -> ID .)
    %               reduce using rule 41 (varYVals -> ID .)
    -               reduce using rule 41 (varYVals -> ID .)
    >               reduce using rule 41 (varYVals -> ID .)
    <               reduce using rule 41 (varYVals -> ID .)
    EQEQ            reduce using rule 41 (varYVals -> ID .)
    DISTINTO        reduce using rule 41 (varYVals -> ID .)
    AND             reduce using rule 41 (varYVals -> ID .)
    ?               reduce using rule 41 (varYVals -> ID .)
    OR              reduce using rule 41 (varYVals -> ID .)
    MASMAS          shift and go to state 43
    MENOSMENOS      shift and go to state 41
    [               shift and go to state 141

  ! ^               [ reduce using rule 54 (sMM -> ID .) ]
  ! *               [ reduce using rule 54 (sMM -> ID .) ]
  ! /               [ reduce using rule 54 (sMM -> ID .) ]
  ! %               [ reduce using rule 54 (sMM -> ID .) ]
  ! +               [ reduce using rule 54 (sMM -> ID .) ]
  ! -               [ reduce using rule 54 (sMM -> ID .) ]
  ! ;               [ reduce using rule 54 (sMM -> ID .) ]
  ! >               [ reduce using rule 54 (sMM -> ID .) ]
  ! <               [ reduce using rule 54 (sMM -> ID .) ]

    m                              shift and go to state 140

state 105

    (55) varAsig -> ID MENOSEQ varAsig .

    ;               reduce using rule 55 (varAsig -> ID MENOSEQ varAsig .)


state 106

    (61) varAsig -> ID MENOSEQ valores .

    ;               reduce using rule 61 (varAsig -> ID MENOSEQ valores .)


state 107

    (56) varAsig -> ID MASEQ varAsig .

    ;               reduce using rule 56 (varAsig -> ID MASEQ varAsig .)


state 108

    (60) varAsig -> ID MASEQ valores .

    ;               reduce using rule 60 (varAsig -> ID MASEQ valores .)


state 109

    (57) varAsig -> ID MULEQ varAsig .

    ;               reduce using rule 57 (varAsig -> ID MULEQ varAsig .)


state 110

    (62) varAsig -> ID MULEQ valores .

    ;               reduce using rule 62 (varAsig -> ID MULEQ valores .)


state 111

    (59) varAsig -> ID = varAsig .

    ;               reduce using rule 59 (varAsig -> ID = varAsig .)


state 112

    (64) varAsig -> ID = valores .

    ;               reduce using rule 64 (varAsig -> ID = valores .)


state 113

    (58) varAsig -> ID DIVEQ varAsig .

    ;               reduce using rule 58 (varAsig -> ID DIVEQ varAsig .)


state 114

    (63) varAsig -> ID DIVEQ valores .

    ;               reduce using rule 63 (varAsig -> ID DIVEQ valores .)


state 115

    (13) if -> IF ( expBool . ) THEN bloque else

    )               shift and go to state 161


state 116

    (23) funcInt -> MULTIESCALAR ( vec . , eMat , param )

    ,               shift and go to state 162


state 117

    (25) funcString -> CAPITALIZAR ( expString . )
    (83) expString -> expString . + STRING

    )               shift and go to state 163
    +               shift and go to state 152


state 118

    (86) expString -> funcString .

    )               reduce using rule 86 (expString -> funcString .)
    +               reduce using rule 86 (expString -> funcString .)


state 119

    (85) expString -> varYVals .

    )               reduce using rule 85 (expString -> varYVals .)
    +               reduce using rule 85 (expString -> varYVals .)


state 120

    (41) varYVals -> ID .
    (43) vecVal -> ID . m
    (44) m -> . [ INT ]
    (45) m -> . [ INT ] m

    )               reduce using rule 41 (varYVals -> ID .)
    +               reduce using rule 41 (varYVals -> ID .)
    EQEQ            reduce using rule 41 (varYVals -> ID .)
    DISTINTO        reduce using rule 41 (varYVals -> ID .)
    AND             reduce using rule 41 (varYVals -> ID .)
    ?               reduce using rule 41 (varYVals -> ID .)
    OR              reduce using rule 41 (varYVals -> ID .)
    ;               reduce using rule 41 (varYVals -> ID .)
    }               reduce using rule 41 (varYVals -> ID .)
    :               reduce using rule 41 (varYVals -> ID .)
    ,               reduce using rule 41 (varYVals -> ID .)
    ]               reduce using rule 41 (varYVals -> ID .)
    [               shift and go to state 141

    m                              shift and go to state 140

state 121

    (24) funcInt -> LENGTH ( vec . )

    )               shift and go to state 164


state 122

    (11) loop -> DO bloque WHILE ( . expBool ) ;
    (87) expBool -> . or ? expBool : expBool
    (88) expBool -> . or
    (89) or -> . or OR and
    (90) or -> . and
    (91) and -> . and AND eq
    (92) and -> . eq
    (93) eq -> . eq EQEQ tBool
    (94) eq -> . eq DISTINTO tBool
    (95) eq -> . mayor
    (96) mayor -> . tCompare > tCompare
    (97) mayor -> . menor
    (106) tCompare -> . eMat
    (107) tCompare -> . varsOps
    (108) tCompare -> . varYVals
    (98) menor -> . tCompare < tCompare
    (99) menor -> . not
    (65) eMat -> . eMat + p
    (66) eMat -> . eMat - p
    (67) eMat -> . p
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (100) not -> . NOT not
    (101) not -> . tBool
    (68) p -> . p * exp
    (69) p -> . p / exp
    (70) p -> . p % exp
    (71) p -> . exp
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID
    (43) vecVal -> . ID m
    (102) tBool -> . ( expBool )
    (103) tBool -> . BOOL
    (104) tBool -> . varYVals
    (105) tBool -> . funcBool
    (72) exp -> . exp ^ iSing
    (73) exp -> . iSing
    (26) funcBool -> . COLINEALES ( vec , vec )
    (74) iSing -> . - paren
    (75) iSing -> . + paren
    (76) iSing -> . paren
    (77) paren -> . ( eMat )
    (78) paren -> . INT
    (79) paren -> . varYVals
    (80) paren -> . FLOAT
    (81) paren -> . varsOps
    (82) paren -> . funcInt
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )

    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    ID              shift and go to state 74
    NOT             shift and go to state 81
    (               shift and go to state 65
    BOOL            shift and go to state 69
    COLINEALES      shift and go to state 13
    -               shift and go to state 67
    +               shift and go to state 66
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24

    and                            shift and go to state 58
    funcBool                       shift and go to state 59
    funcInt                        shift and go to state 60
    menor                          shift and go to state 61
    eq                             shift and go to state 62
    mayor                          shift and go to state 63
    eMat                           shift and go to state 64
    vecVal                         shift and go to state 68
    sMM                            shift and go to state 11
    paren                          shift and go to state 72
    iSing                          shift and go to state 70
    tCompare                       shift and go to state 71
    not                            shift and go to state 73
    p                              shift and go to state 78
    varsOps                        shift and go to state 79
    exp                            shift and go to state 80
    tBool                          shift and go to state 82
    varYVals                       shift and go to state 83
    or                             shift and go to state 77
    expBool                        shift and go to state 165

state 123

    (17) bloque -> { g } .

    RETURN          reduce using rule 17 (bloque -> { g } .)
    MENOSMENOS      reduce using rule 17 (bloque -> { g } .)
    MASMAS          reduce using rule 17 (bloque -> { g } .)
    ID              reduce using rule 17 (bloque -> { g } .)
    IF              reduce using rule 17 (bloque -> { g } .)
    WHILE           reduce using rule 17 (bloque -> { g } .)
    DO              reduce using rule 17 (bloque -> { g } .)
    FOR             reduce using rule 17 (bloque -> { g } .)
    PRINT           reduce using rule 17 (bloque -> { g } .)
    MULTIESCALAR    reduce using rule 17 (bloque -> { g } .)
    LENGTH          reduce using rule 17 (bloque -> { g } .)
    CAPITALIZAR     reduce using rule 17 (bloque -> { g } .)
    COLINEALES      reduce using rule 17 (bloque -> { g } .)
    $end            reduce using rule 17 (bloque -> { g } .)
    }               reduce using rule 17 (bloque -> { g } .)
    ELSE            reduce using rule 17 (bloque -> { g } .)


state 124

    (91) and -> and AND . eq
    (93) eq -> . eq EQEQ tBool
    (94) eq -> . eq DISTINTO tBool
    (95) eq -> . mayor
    (96) mayor -> . tCompare > tCompare
    (97) mayor -> . menor
    (106) tCompare -> . eMat
    (107) tCompare -> . varsOps
    (108) tCompare -> . varYVals
    (98) menor -> . tCompare < tCompare
    (99) menor -> . not
    (65) eMat -> . eMat + p
    (66) eMat -> . eMat - p
    (67) eMat -> . p
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (100) not -> . NOT not
    (101) not -> . tBool
    (68) p -> . p * exp
    (69) p -> . p / exp
    (70) p -> . p % exp
    (71) p -> . exp
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID
    (43) vecVal -> . ID m
    (102) tBool -> . ( expBool )
    (103) tBool -> . BOOL
    (104) tBool -> . varYVals
    (105) tBool -> . funcBool
    (72) exp -> . exp ^ iSing
    (73) exp -> . iSing
    (26) funcBool -> . COLINEALES ( vec , vec )
    (74) iSing -> . - paren
    (75) iSing -> . + paren
    (76) iSing -> . paren
    (77) paren -> . ( eMat )
    (78) paren -> . INT
    (79) paren -> . varYVals
    (80) paren -> . FLOAT
    (81) paren -> . varsOps
    (82) paren -> . funcInt
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )

    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    ID              shift and go to state 74
    NOT             shift and go to state 81
    (               shift and go to state 65
    BOOL            shift and go to state 69
    COLINEALES      shift and go to state 13
    -               shift and go to state 67
    +               shift and go to state 66
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24

    funcBool                       shift and go to state 59
    funcInt                        shift and go to state 60
    menor                          shift and go to state 61
    eq                             shift and go to state 166
    vecVal                         shift and go to state 68
    eMat                           shift and go to state 64
    mayor                          shift and go to state 63
    sMM                            shift and go to state 11
    paren                          shift and go to state 72
    iSing                          shift and go to state 70
    tCompare                       shift and go to state 71
    not                            shift and go to state 73
    p                              shift and go to state 78
    varsOps                        shift and go to state 79
    exp                            shift and go to state 80
    tBool                          shift and go to state 82
    varYVals                       shift and go to state 83

state 125

    (93) eq -> eq EQEQ . tBool
    (102) tBool -> . ( expBool )
    (103) tBool -> . BOOL
    (104) tBool -> . varYVals
    (105) tBool -> . funcBool
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (26) funcBool -> . COLINEALES ( vec , vec )
    (43) vecVal -> . ID m

    (               shift and go to state 148
    BOOL            shift and go to state 69
    ID              shift and go to state 120
    COLINEALES      shift and go to state 13

    funcBool                       shift and go to state 59
    varYVals                       shift and go to state 150
    tBool                          shift and go to state 167
    vecVal                         shift and go to state 68

state 126

    (94) eq -> eq DISTINTO . tBool
    (102) tBool -> . ( expBool )
    (103) tBool -> . BOOL
    (104) tBool -> . varYVals
    (105) tBool -> . funcBool
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (26) funcBool -> . COLINEALES ( vec , vec )
    (43) vecVal -> . ID m

    (               shift and go to state 148
    BOOL            shift and go to state 69
    ID              shift and go to state 120
    COLINEALES      shift and go to state 13

    funcBool                       shift and go to state 59
    varYVals                       shift and go to state 150
    tBool                          shift and go to state 168
    vecVal                         shift and go to state 68

state 127

    (65) eMat -> eMat + . p
    (68) p -> . p * exp
    (69) p -> . p / exp
    (70) p -> . p % exp
    (71) p -> . exp
    (72) exp -> . exp ^ iSing
    (73) exp -> . iSing
    (74) iSing -> . - paren
    (75) iSing -> . + paren
    (76) iSing -> . paren
    (77) paren -> . ( eMat )
    (78) paren -> . INT
    (79) paren -> . varYVals
    (80) paren -> . FLOAT
    (81) paren -> . varsOps
    (82) paren -> . funcInt
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (43) vecVal -> . ID m
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID

    -               shift and go to state 67
    +               shift and go to state 66
    (               shift and go to state 133
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    ID              shift and go to state 130
    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24

    funcInt                        shift and go to state 60
    p                              shift and go to state 169
    sMM                            shift and go to state 11
    iSing                          shift and go to state 70
    exp                            shift and go to state 80
    paren                          shift and go to state 72
    varYVals                       shift and go to state 136
    vecVal                         shift and go to state 68
    varsOps                        shift and go to state 134

state 128

    (66) eMat -> eMat - . p
    (68) p -> . p * exp
    (69) p -> . p / exp
    (70) p -> . p % exp
    (71) p -> . exp
    (72) exp -> . exp ^ iSing
    (73) exp -> . iSing
    (74) iSing -> . - paren
    (75) iSing -> . + paren
    (76) iSing -> . paren
    (77) paren -> . ( eMat )
    (78) paren -> . INT
    (79) paren -> . varYVals
    (80) paren -> . FLOAT
    (81) paren -> . varsOps
    (82) paren -> . funcInt
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (43) vecVal -> . ID m
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID

    -               shift and go to state 67
    +               shift and go to state 66
    (               shift and go to state 133
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    ID              shift and go to state 130
    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24

    funcInt                        shift and go to state 60
    p                              shift and go to state 170
    sMM                            shift and go to state 11
    iSing                          shift and go to state 70
    exp                            shift and go to state 80
    paren                          shift and go to state 72
    varYVals                       shift and go to state 136
    vecVal                         shift and go to state 68
    varsOps                        shift and go to state 134

state 129

    (77) paren -> ( eMat . )
    (65) eMat -> eMat . + p
    (66) eMat -> eMat . - p
    (106) tCompare -> eMat .

    )               shift and go to state 171
    +               shift and go to state 127
    -               shift and go to state 128
    >               reduce using rule 106 (tCompare -> eMat .)
    <               reduce using rule 106 (tCompare -> eMat .)


state 130

    (41) varYVals -> ID .
    (43) vecVal -> ID . m
    (52) sMM -> ID . MASMAS
    (53) sMM -> ID . MENOSMENOS
    (54) sMM -> ID .
    (44) m -> . [ INT ]
    (45) m -> . [ INT ] m

  ! reduce/reduce conflict for ^ resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for * resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for / resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for % resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for ) resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for + resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for - resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for > resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for < resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for ; resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for } resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for EQEQ resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for DISTINTO resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for AND resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for ? resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for : resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for , resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for ] resolved using rule 41 (varYVals -> ID .)
    ^               reduce using rule 41 (varYVals -> ID .)
    *               reduce using rule 41 (varYVals -> ID .)
    /               reduce using rule 41 (varYVals -> ID .)
    %               reduce using rule 41 (varYVals -> ID .)
    ,               reduce using rule 41 (varYVals -> ID .)
    +               reduce using rule 41 (varYVals -> ID .)
    -               reduce using rule 41 (varYVals -> ID .)
    >               reduce using rule 41 (varYVals -> ID .)
    <               reduce using rule 41 (varYVals -> ID .)
    )               reduce using rule 41 (varYVals -> ID .)
    ;               reduce using rule 41 (varYVals -> ID .)
    }               reduce using rule 41 (varYVals -> ID .)
    EQEQ            reduce using rule 41 (varYVals -> ID .)
    DISTINTO        reduce using rule 41 (varYVals -> ID .)
    AND             reduce using rule 41 (varYVals -> ID .)
    ?               reduce using rule 41 (varYVals -> ID .)
    OR              reduce using rule 41 (varYVals -> ID .)
    :               reduce using rule 41 (varYVals -> ID .)
    ]               reduce using rule 41 (varYVals -> ID .)
    MASMAS          shift and go to state 43
    MENOSMENOS      shift and go to state 41
    [               shift and go to state 141

  ! ^               [ reduce using rule 54 (sMM -> ID .) ]
  ! *               [ reduce using rule 54 (sMM -> ID .) ]
  ! /               [ reduce using rule 54 (sMM -> ID .) ]
  ! %               [ reduce using rule 54 (sMM -> ID .) ]
  ! )               [ reduce using rule 54 (sMM -> ID .) ]
  ! +               [ reduce using rule 54 (sMM -> ID .) ]
  ! -               [ reduce using rule 54 (sMM -> ID .) ]
  ! >               [ reduce using rule 54 (sMM -> ID .) ]
  ! <               [ reduce using rule 54 (sMM -> ID .) ]
  ! ;               [ reduce using rule 54 (sMM -> ID .) ]
  ! }               [ reduce using rule 54 (sMM -> ID .) ]
  ! EQEQ            [ reduce using rule 54 (sMM -> ID .) ]
  ! DISTINTO        [ reduce using rule 54 (sMM -> ID .) ]
  ! AND             [ reduce using rule 54 (sMM -> ID .) ]
  ! ?               [ reduce using rule 54 (sMM -> ID .) ]
  ! OR              [ reduce using rule 54 (sMM -> ID .) ]
  ! :               [ reduce using rule 54 (sMM -> ID .) ]
  ! ,               [ reduce using rule 54 (sMM -> ID .) ]
  ! ]               [ reduce using rule 54 (sMM -> ID .) ]

    m                              shift and go to state 140

state 131

    (79) paren -> varYVals .
    (108) tCompare -> varYVals .
    (104) tBool -> varYVals .

  ! reduce/reduce conflict for > resolved using rule 79 (paren -> varYVals .)
  ! reduce/reduce conflict for < resolved using rule 79 (paren -> varYVals .)
  ! reduce/reduce conflict for ) resolved using rule 79 (paren -> varYVals .)
    ^               reduce using rule 79 (paren -> varYVals .)
    *               reduce using rule 79 (paren -> varYVals .)
    /               reduce using rule 79 (paren -> varYVals .)
    %               reduce using rule 79 (paren -> varYVals .)
    )               reduce using rule 79 (paren -> varYVals .)
    +               reduce using rule 79 (paren -> varYVals .)
    -               reduce using rule 79 (paren -> varYVals .)
    >               reduce using rule 79 (paren -> varYVals .)
    <               reduce using rule 79 (paren -> varYVals .)
    EQEQ            reduce using rule 104 (tBool -> varYVals .)
    DISTINTO        reduce using rule 104 (tBool -> varYVals .)
    AND             reduce using rule 104 (tBool -> varYVals .)
    ?               reduce using rule 104 (tBool -> varYVals .)
    OR              reduce using rule 104 (tBool -> varYVals .)

  ! >               [ reduce using rule 108 (tCompare -> varYVals .) ]
  ! <               [ reduce using rule 108 (tCompare -> varYVals .) ]
  ! )               [ reduce using rule 104 (tBool -> varYVals .) ]


state 132

    (102) tBool -> ( expBool . )

    )               shift and go to state 172


state 133

    (77) paren -> ( . eMat )
    (65) eMat -> . eMat + p
    (66) eMat -> . eMat - p
    (67) eMat -> . p
    (68) p -> . p * exp
    (69) p -> . p / exp
    (70) p -> . p % exp
    (71) p -> . exp
    (72) exp -> . exp ^ iSing
    (73) exp -> . iSing
    (74) iSing -> . - paren
    (75) iSing -> . + paren
    (76) iSing -> . paren
    (77) paren -> . ( eMat )
    (78) paren -> . INT
    (79) paren -> . varYVals
    (80) paren -> . FLOAT
    (81) paren -> . varsOps
    (82) paren -> . funcInt
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (43) vecVal -> . ID m
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID

    -               shift and go to state 67
    +               shift and go to state 66
    (               shift and go to state 133
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    ID              shift and go to state 130
    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24

    eMat                           shift and go to state 173
    funcInt                        shift and go to state 60
    p                              shift and go to state 78
    sMM                            shift and go to state 11
    iSing                          shift and go to state 70
    exp                            shift and go to state 80
    paren                          shift and go to state 72
    varYVals                       shift and go to state 136
    vecVal                         shift and go to state 68
    varsOps                        shift and go to state 134

state 134

    (81) paren -> varsOps .

    ^               reduce using rule 81 (paren -> varsOps .)
    *               reduce using rule 81 (paren -> varsOps .)
    /               reduce using rule 81 (paren -> varsOps .)
    %               reduce using rule 81 (paren -> varsOps .)
    +               reduce using rule 81 (paren -> varsOps .)
    -               reduce using rule 81 (paren -> varsOps .)
    >               reduce using rule 81 (paren -> varsOps .)
    <               reduce using rule 81 (paren -> varsOps .)
    )               reduce using rule 81 (paren -> varsOps .)
    ;               reduce using rule 81 (paren -> varsOps .)
    }               reduce using rule 81 (paren -> varsOps .)
    EQEQ            reduce using rule 81 (paren -> varsOps .)
    DISTINTO        reduce using rule 81 (paren -> varsOps .)
    AND             reduce using rule 81 (paren -> varsOps .)
    ?               reduce using rule 81 (paren -> varsOps .)
    OR              reduce using rule 81 (paren -> varsOps .)
    :               reduce using rule 81 (paren -> varsOps .)
    ,               reduce using rule 81 (paren -> varsOps .)
    ]               reduce using rule 81 (paren -> varsOps .)


state 135

    (75) iSing -> + paren .

    ^               reduce using rule 75 (iSing -> + paren .)
    *               reduce using rule 75 (iSing -> + paren .)
    /               reduce using rule 75 (iSing -> + paren .)
    %               reduce using rule 75 (iSing -> + paren .)
    )               reduce using rule 75 (iSing -> + paren .)
    +               reduce using rule 75 (iSing -> + paren .)
    -               reduce using rule 75 (iSing -> + paren .)
    >               reduce using rule 75 (iSing -> + paren .)
    <               reduce using rule 75 (iSing -> + paren .)
    }               reduce using rule 75 (iSing -> + paren .)
    ;               reduce using rule 75 (iSing -> + paren .)
    EQEQ            reduce using rule 75 (iSing -> + paren .)
    DISTINTO        reduce using rule 75 (iSing -> + paren .)
    AND             reduce using rule 75 (iSing -> + paren .)
    ?               reduce using rule 75 (iSing -> + paren .)
    OR              reduce using rule 75 (iSing -> + paren .)
    :               reduce using rule 75 (iSing -> + paren .)
    ,               reduce using rule 75 (iSing -> + paren .)
    ]               reduce using rule 75 (iSing -> + paren .)


state 136

    (79) paren -> varYVals .

    ^               reduce using rule 79 (paren -> varYVals .)
    *               reduce using rule 79 (paren -> varYVals .)
    /               reduce using rule 79 (paren -> varYVals .)
    %               reduce using rule 79 (paren -> varYVals .)
    +               reduce using rule 79 (paren -> varYVals .)
    -               reduce using rule 79 (paren -> varYVals .)
    >               reduce using rule 79 (paren -> varYVals .)
    <               reduce using rule 79 (paren -> varYVals .)
    )               reduce using rule 79 (paren -> varYVals .)
    ;               reduce using rule 79 (paren -> varYVals .)
    }               reduce using rule 79 (paren -> varYVals .)
    EQEQ            reduce using rule 79 (paren -> varYVals .)
    DISTINTO        reduce using rule 79 (paren -> varYVals .)
    AND             reduce using rule 79 (paren -> varYVals .)
    ?               reduce using rule 79 (paren -> varYVals .)
    OR              reduce using rule 79 (paren -> varYVals .)
    :               reduce using rule 79 (paren -> varYVals .)
    ,               reduce using rule 79 (paren -> varYVals .)
    ]               reduce using rule 79 (paren -> varYVals .)


state 137

    (74) iSing -> - paren .

    ^               reduce using rule 74 (iSing -> - paren .)
    *               reduce using rule 74 (iSing -> - paren .)
    /               reduce using rule 74 (iSing -> - paren .)
    %               reduce using rule 74 (iSing -> - paren .)
    )               reduce using rule 74 (iSing -> - paren .)
    +               reduce using rule 74 (iSing -> - paren .)
    -               reduce using rule 74 (iSing -> - paren .)
    >               reduce using rule 74 (iSing -> - paren .)
    <               reduce using rule 74 (iSing -> - paren .)
    }               reduce using rule 74 (iSing -> - paren .)
    ;               reduce using rule 74 (iSing -> - paren .)
    EQEQ            reduce using rule 74 (iSing -> - paren .)
    DISTINTO        reduce using rule 74 (iSing -> - paren .)
    AND             reduce using rule 74 (iSing -> - paren .)
    ?               reduce using rule 74 (iSing -> - paren .)
    OR              reduce using rule 74 (iSing -> - paren .)
    :               reduce using rule 74 (iSing -> - paren .)
    ,               reduce using rule 74 (iSing -> - paren .)
    ]               reduce using rule 74 (iSing -> - paren .)


state 138

    (98) menor -> tCompare < . tCompare
    (106) tCompare -> . eMat
    (107) tCompare -> . varsOps
    (108) tCompare -> . varYVals
    (65) eMat -> . eMat + p
    (66) eMat -> . eMat - p
    (67) eMat -> . p
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (68) p -> . p * exp
    (69) p -> . p / exp
    (70) p -> . p % exp
    (71) p -> . exp
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID
    (43) vecVal -> . ID m
    (72) exp -> . exp ^ iSing
    (73) exp -> . iSing
    (74) iSing -> . - paren
    (75) iSing -> . + paren
    (76) iSing -> . paren
    (77) paren -> . ( eMat )
    (78) paren -> . INT
    (79) paren -> . varYVals
    (80) paren -> . FLOAT
    (81) paren -> . varsOps
    (82) paren -> . funcInt
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )

    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    ID              shift and go to state 74
    -               shift and go to state 67
    +               shift and go to state 66
    (               shift and go to state 133
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24

    eMat                           shift and go to state 64
    p                              shift and go to state 78
    funcInt                        shift and go to state 60
    tCompare                       shift and go to state 174
    sMM                            shift and go to state 11
    varsOps                        shift and go to state 79
    exp                            shift and go to state 80
    paren                          shift and go to state 72
    varYVals                       shift and go to state 175
    vecVal                         shift and go to state 68
    iSing                          shift and go to state 70

state 139

    (96) mayor -> tCompare > . tCompare
    (106) tCompare -> . eMat
    (107) tCompare -> . varsOps
    (108) tCompare -> . varYVals
    (65) eMat -> . eMat + p
    (66) eMat -> . eMat - p
    (67) eMat -> . p
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (68) p -> . p * exp
    (69) p -> . p / exp
    (70) p -> . p % exp
    (71) p -> . exp
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID
    (43) vecVal -> . ID m
    (72) exp -> . exp ^ iSing
    (73) exp -> . iSing
    (74) iSing -> . - paren
    (75) iSing -> . + paren
    (76) iSing -> . paren
    (77) paren -> . ( eMat )
    (78) paren -> . INT
    (79) paren -> . varYVals
    (80) paren -> . FLOAT
    (81) paren -> . varsOps
    (82) paren -> . funcInt
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )

    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    ID              shift and go to state 74
    -               shift and go to state 67
    +               shift and go to state 66
    (               shift and go to state 133
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24

    eMat                           shift and go to state 64
    p                              shift and go to state 78
    funcInt                        shift and go to state 60
    tCompare                       shift and go to state 176
    sMM                            shift and go to state 11
    varsOps                        shift and go to state 79
    exp                            shift and go to state 80
    paren                          shift and go to state 72
    varYVals                       shift and go to state 175
    vecVal                         shift and go to state 68
    iSing                          shift and go to state 70

state 140

    (43) vecVal -> ID m .

    ^               reduce using rule 43 (vecVal -> ID m .)
    *               reduce using rule 43 (vecVal -> ID m .)
    /               reduce using rule 43 (vecVal -> ID m .)
    %               reduce using rule 43 (vecVal -> ID m .)
    +               reduce using rule 43 (vecVal -> ID m .)
    -               reduce using rule 43 (vecVal -> ID m .)
    >               reduce using rule 43 (vecVal -> ID m .)
    <               reduce using rule 43 (vecVal -> ID m .)
    )               reduce using rule 43 (vecVal -> ID m .)
    ;               reduce using rule 43 (vecVal -> ID m .)
    }               reduce using rule 43 (vecVal -> ID m .)
    EQEQ            reduce using rule 43 (vecVal -> ID m .)
    DISTINTO        reduce using rule 43 (vecVal -> ID m .)
    AND             reduce using rule 43 (vecVal -> ID m .)
    ?               reduce using rule 43 (vecVal -> ID m .)
    OR              reduce using rule 43 (vecVal -> ID m .)
    :               reduce using rule 43 (vecVal -> ID m .)
    ,               reduce using rule 43 (vecVal -> ID m .)
    ]               reduce using rule 43 (vecVal -> ID m .)


state 141

    (44) m -> [ . INT ]
    (45) m -> [ . INT ] m

    INT             shift and go to state 177


state 142

    (89) or -> or OR . and
    (91) and -> . and AND eq
    (92) and -> . eq
    (93) eq -> . eq EQEQ tBool
    (94) eq -> . eq DISTINTO tBool
    (95) eq -> . mayor
    (96) mayor -> . tCompare > tCompare
    (97) mayor -> . menor
    (106) tCompare -> . eMat
    (107) tCompare -> . varsOps
    (108) tCompare -> . varYVals
    (98) menor -> . tCompare < tCompare
    (99) menor -> . not
    (65) eMat -> . eMat + p
    (66) eMat -> . eMat - p
    (67) eMat -> . p
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (100) not -> . NOT not
    (101) not -> . tBool
    (68) p -> . p * exp
    (69) p -> . p / exp
    (70) p -> . p % exp
    (71) p -> . exp
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID
    (43) vecVal -> . ID m
    (102) tBool -> . ( expBool )
    (103) tBool -> . BOOL
    (104) tBool -> . varYVals
    (105) tBool -> . funcBool
    (72) exp -> . exp ^ iSing
    (73) exp -> . iSing
    (26) funcBool -> . COLINEALES ( vec , vec )
    (74) iSing -> . - paren
    (75) iSing -> . + paren
    (76) iSing -> . paren
    (77) paren -> . ( eMat )
    (78) paren -> . INT
    (79) paren -> . varYVals
    (80) paren -> . FLOAT
    (81) paren -> . varsOps
    (82) paren -> . funcInt
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )

    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    ID              shift and go to state 74
    NOT             shift and go to state 81
    (               shift and go to state 65
    BOOL            shift and go to state 69
    COLINEALES      shift and go to state 13
    -               shift and go to state 67
    +               shift and go to state 66
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24

    and                            shift and go to state 178
    funcBool                       shift and go to state 59
    funcInt                        shift and go to state 60
    menor                          shift and go to state 61
    eq                             shift and go to state 62
    mayor                          shift and go to state 63
    eMat                           shift and go to state 64
    vecVal                         shift and go to state 68
    sMM                            shift and go to state 11
    paren                          shift and go to state 72
    iSing                          shift and go to state 70
    tCompare                       shift and go to state 71
    not                            shift and go to state 73
    p                              shift and go to state 78
    varsOps                        shift and go to state 79
    exp                            shift and go to state 80
    tBool                          shift and go to state 82
    varYVals                       shift and go to state 83

state 143

    (87) expBool -> or ? . expBool : expBool
    (87) expBool -> . or ? expBool : expBool
    (88) expBool -> . or
    (89) or -> . or OR and
    (90) or -> . and
    (91) and -> . and AND eq
    (92) and -> . eq
    (93) eq -> . eq EQEQ tBool
    (94) eq -> . eq DISTINTO tBool
    (95) eq -> . mayor
    (96) mayor -> . tCompare > tCompare
    (97) mayor -> . menor
    (106) tCompare -> . eMat
    (107) tCompare -> . varsOps
    (108) tCompare -> . varYVals
    (98) menor -> . tCompare < tCompare
    (99) menor -> . not
    (65) eMat -> . eMat + p
    (66) eMat -> . eMat - p
    (67) eMat -> . p
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (100) not -> . NOT not
    (101) not -> . tBool
    (68) p -> . p * exp
    (69) p -> . p / exp
    (70) p -> . p % exp
    (71) p -> . exp
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID
    (43) vecVal -> . ID m
    (102) tBool -> . ( expBool )
    (103) tBool -> . BOOL
    (104) tBool -> . varYVals
    (105) tBool -> . funcBool
    (72) exp -> . exp ^ iSing
    (73) exp -> . iSing
    (26) funcBool -> . COLINEALES ( vec , vec )
    (74) iSing -> . - paren
    (75) iSing -> . + paren
    (76) iSing -> . paren
    (77) paren -> . ( eMat )
    (78) paren -> . INT
    (79) paren -> . varYVals
    (80) paren -> . FLOAT
    (81) paren -> . varsOps
    (82) paren -> . funcInt
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )

    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    ID              shift and go to state 74
    NOT             shift and go to state 81
    (               shift and go to state 65
    BOOL            shift and go to state 69
    COLINEALES      shift and go to state 13
    -               shift and go to state 67
    +               shift and go to state 66
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24

    and                            shift and go to state 58
    funcBool                       shift and go to state 59
    funcInt                        shift and go to state 60
    menor                          shift and go to state 61
    eq                             shift and go to state 62
    mayor                          shift and go to state 63
    eMat                           shift and go to state 64
    vecVal                         shift and go to state 68
    sMM                            shift and go to state 11
    paren                          shift and go to state 72
    iSing                          shift and go to state 70
    tCompare                       shift and go to state 71
    not                            shift and go to state 73
    p                              shift and go to state 78
    varsOps                        shift and go to state 79
    exp                            shift and go to state 80
    tBool                          shift and go to state 82
    varYVals                       shift and go to state 83
    or                             shift and go to state 77
    expBool                        shift and go to state 179

state 144

    (68) p -> p * . exp
    (72) exp -> . exp ^ iSing
    (73) exp -> . iSing
    (74) iSing -> . - paren
    (75) iSing -> . + paren
    (76) iSing -> . paren
    (77) paren -> . ( eMat )
    (78) paren -> . INT
    (79) paren -> . varYVals
    (80) paren -> . FLOAT
    (81) paren -> . varsOps
    (82) paren -> . funcInt
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (43) vecVal -> . ID m
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID

    -               shift and go to state 67
    +               shift and go to state 66
    (               shift and go to state 133
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    ID              shift and go to state 130
    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24

    funcInt                        shift and go to state 60
    sMM                            shift and go to state 11
    iSing                          shift and go to state 70
    exp                            shift and go to state 180
    paren                          shift and go to state 72
    varYVals                       shift and go to state 136
    vecVal                         shift and go to state 68
    varsOps                        shift and go to state 134

state 145

    (70) p -> p % . exp
    (72) exp -> . exp ^ iSing
    (73) exp -> . iSing
    (74) iSing -> . - paren
    (75) iSing -> . + paren
    (76) iSing -> . paren
    (77) paren -> . ( eMat )
    (78) paren -> . INT
    (79) paren -> . varYVals
    (80) paren -> . FLOAT
    (81) paren -> . varsOps
    (82) paren -> . funcInt
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (43) vecVal -> . ID m
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID

    -               shift and go to state 67
    +               shift and go to state 66
    (               shift and go to state 133
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    ID              shift and go to state 130
    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24

    funcInt                        shift and go to state 60
    sMM                            shift and go to state 11
    iSing                          shift and go to state 70
    exp                            shift and go to state 181
    paren                          shift and go to state 72
    varYVals                       shift and go to state 136
    vecVal                         shift and go to state 68
    varsOps                        shift and go to state 134

state 146

    (69) p -> p / . exp
    (72) exp -> . exp ^ iSing
    (73) exp -> . iSing
    (74) iSing -> . - paren
    (75) iSing -> . + paren
    (76) iSing -> . paren
    (77) paren -> . ( eMat )
    (78) paren -> . INT
    (79) paren -> . varYVals
    (80) paren -> . FLOAT
    (81) paren -> . varsOps
    (82) paren -> . funcInt
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (43) vecVal -> . ID m
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID

    -               shift and go to state 67
    +               shift and go to state 66
    (               shift and go to state 133
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    ID              shift and go to state 130
    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24

    funcInt                        shift and go to state 60
    sMM                            shift and go to state 11
    iSing                          shift and go to state 70
    exp                            shift and go to state 182
    paren                          shift and go to state 72
    varYVals                       shift and go to state 136
    vecVal                         shift and go to state 68
    varsOps                        shift and go to state 134

state 147

    (72) exp -> exp ^ . iSing
    (74) iSing -> . - paren
    (75) iSing -> . + paren
    (76) iSing -> . paren
    (77) paren -> . ( eMat )
    (78) paren -> . INT
    (79) paren -> . varYVals
    (80) paren -> . FLOAT
    (81) paren -> . varsOps
    (82) paren -> . funcInt
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (43) vecVal -> . ID m
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID

    -               shift and go to state 67
    +               shift and go to state 66
    (               shift and go to state 133
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    ID              shift and go to state 130
    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24

    funcInt                        shift and go to state 60
    sMM                            shift and go to state 11
    varsOps                        shift and go to state 134
    paren                          shift and go to state 72
    varYVals                       shift and go to state 136
    vecVal                         shift and go to state 68
    iSing                          shift and go to state 183

state 148

    (102) tBool -> ( . expBool )
    (87) expBool -> . or ? expBool : expBool
    (88) expBool -> . or
    (89) or -> . or OR and
    (90) or -> . and
    (91) and -> . and AND eq
    (92) and -> . eq
    (93) eq -> . eq EQEQ tBool
    (94) eq -> . eq DISTINTO tBool
    (95) eq -> . mayor
    (96) mayor -> . tCompare > tCompare
    (97) mayor -> . menor
    (106) tCompare -> . eMat
    (107) tCompare -> . varsOps
    (108) tCompare -> . varYVals
    (98) menor -> . tCompare < tCompare
    (99) menor -> . not
    (65) eMat -> . eMat + p
    (66) eMat -> . eMat - p
    (67) eMat -> . p
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (100) not -> . NOT not
    (101) not -> . tBool
    (68) p -> . p * exp
    (69) p -> . p / exp
    (70) p -> . p % exp
    (71) p -> . exp
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID
    (43) vecVal -> . ID m
    (102) tBool -> . ( expBool )
    (103) tBool -> . BOOL
    (104) tBool -> . varYVals
    (105) tBool -> . funcBool
    (72) exp -> . exp ^ iSing
    (73) exp -> . iSing
    (26) funcBool -> . COLINEALES ( vec , vec )
    (74) iSing -> . - paren
    (75) iSing -> . + paren
    (76) iSing -> . paren
    (77) paren -> . ( eMat )
    (78) paren -> . INT
    (79) paren -> . varYVals
    (80) paren -> . FLOAT
    (81) paren -> . varsOps
    (82) paren -> . funcInt
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )

    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    ID              shift and go to state 74
    NOT             shift and go to state 81
    (               shift and go to state 65
    BOOL            shift and go to state 69
    COLINEALES      shift and go to state 13
    -               shift and go to state 67
    +               shift and go to state 66
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24

    and                            shift and go to state 58
    funcBool                       shift and go to state 59
    funcInt                        shift and go to state 60
    menor                          shift and go to state 61
    eq                             shift and go to state 62
    mayor                          shift and go to state 63
    eMat                           shift and go to state 64
    vecVal                         shift and go to state 68
    sMM                            shift and go to state 11
    paren                          shift and go to state 72
    iSing                          shift and go to state 70
    tCompare                       shift and go to state 71
    not                            shift and go to state 73
    p                              shift and go to state 78
    varsOps                        shift and go to state 79
    exp                            shift and go to state 80
    tBool                          shift and go to state 82
    varYVals                       shift and go to state 83
    or                             shift and go to state 77
    expBool                        shift and go to state 132

state 149

    (100) not -> NOT not .

    EQEQ            reduce using rule 100 (not -> NOT not .)
    DISTINTO        reduce using rule 100 (not -> NOT not .)
    AND             reduce using rule 100 (not -> NOT not .)
    ?               reduce using rule 100 (not -> NOT not .)
    OR              reduce using rule 100 (not -> NOT not .)
    ;               reduce using rule 100 (not -> NOT not .)
    )               reduce using rule 100 (not -> NOT not .)
    }               reduce using rule 100 (not -> NOT not .)
    :               reduce using rule 100 (not -> NOT not .)
    ,               reduce using rule 100 (not -> NOT not .)
    ]               reduce using rule 100 (not -> NOT not .)


state 150

    (104) tBool -> varYVals .

    EQEQ            reduce using rule 104 (tBool -> varYVals .)
    DISTINTO        reduce using rule 104 (tBool -> varYVals .)
    AND             reduce using rule 104 (tBool -> varYVals .)
    ?               reduce using rule 104 (tBool -> varYVals .)
    OR              reduce using rule 104 (tBool -> varYVals .)
    )               reduce using rule 104 (tBool -> varYVals .)
    ;               reduce using rule 104 (tBool -> varYVals .)
    }               reduce using rule 104 (tBool -> varYVals .)
    :               reduce using rule 104 (tBool -> varYVals .)
    ,               reduce using rule 104 (tBool -> varYVals .)
    ]               reduce using rule 104 (tBool -> varYVals .)


state 151

    (10) loop -> WHILE ( expBool ) . bloque
    (16) bloque -> . sentencia
    (17) bloque -> . { g }
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (55) varAsig -> . ID MENOSEQ varAsig
    (56) varAsig -> . ID MASEQ varAsig
    (57) varAsig -> . ID MULEQ varAsig
    (58) varAsig -> . ID DIVEQ varAsig
    (59) varAsig -> . ID = varAsig
    (60) varAsig -> . ID MASEQ valores
    (61) varAsig -> . ID MENOSEQ valores
    (62) varAsig -> . ID MULEQ valores
    (63) varAsig -> . ID DIVEQ valores
    (64) varAsig -> . ID = valores
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( expString )
    (26) funcBool -> . COLINEALES ( vec , vec )

    {               shift and go to state 31
    RETURN          shift and go to state 2
    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    ID              shift and go to state 16
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    CAPITALIZAR     shift and go to state 23
    COLINEALES      shift and go to state 13

    varAsig                        shift and go to state 18
    sentencia                      shift and go to state 30
    funcBool                       shift and go to state 3
    funcString                     shift and go to state 20
    funcVoid                       shift and go to state 12
    funcReturn                     shift and go to state 22
    sMM                            shift and go to state 11
    varsOps                        shift and go to state 27
    func                           shift and go to state 15
    bloque                         shift and go to state 184
    funcInt                        shift and go to state 5

state 152

    (83) expString -> expString + . STRING

    STRING          shift and go to state 185


state 153

    (40) valores -> ID . . ID

    ID              shift and go to state 186


state 154

    (27) funcVoid -> PRINT ( valores ) .

    ;               reduce using rule 27 (funcVoid -> PRINT ( valores ) .)


state 155

    (46) reg -> { campos . }

    }               shift and go to state 187


state 156

    (47) campos -> ID . : valores , campos
    (40) valores -> ID . . ID
    (41) varYVals -> ID .
    (43) vecVal -> ID . m
    (52) sMM -> ID . MASMAS
    (53) sMM -> ID . MENOSMENOS
    (54) sMM -> ID .
    (44) m -> . [ INT ]
    (45) m -> . [ INT ] m

  ! reduce/reduce conflict for ^ resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for * resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for / resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for % resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for + resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for - resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for } resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for > resolved using rule 41 (varYVals -> ID .)
  ! reduce/reduce conflict for < resolved using rule 41 (varYVals -> ID .)
    :               shift and go to state 188
    .               shift and go to state 153
    }               reduce using rule 41 (varYVals -> ID .)
    +               reduce using rule 41 (varYVals -> ID .)
    ^               reduce using rule 41 (varYVals -> ID .)
    *               reduce using rule 41 (varYVals -> ID .)
    /               reduce using rule 41 (varYVals -> ID .)
    %               reduce using rule 41 (varYVals -> ID .)
    -               reduce using rule 41 (varYVals -> ID .)
    >               reduce using rule 41 (varYVals -> ID .)
    <               reduce using rule 41 (varYVals -> ID .)
    EQEQ            reduce using rule 41 (varYVals -> ID .)
    DISTINTO        reduce using rule 41 (varYVals -> ID .)
    AND             reduce using rule 41 (varYVals -> ID .)
    ?               reduce using rule 41 (varYVals -> ID .)
    OR              reduce using rule 41 (varYVals -> ID .)
    MASMAS          shift and go to state 43
    MENOSMENOS      shift and go to state 41
    [               shift and go to state 141

  ! ^               [ reduce using rule 54 (sMM -> ID .) ]
  ! *               [ reduce using rule 54 (sMM -> ID .) ]
  ! /               [ reduce using rule 54 (sMM -> ID .) ]
  ! %               [ reduce using rule 54 (sMM -> ID .) ]
  ! +               [ reduce using rule 54 (sMM -> ID .) ]
  ! -               [ reduce using rule 54 (sMM -> ID .) ]
  ! }               [ reduce using rule 54 (sMM -> ID .) ]
  ! >               [ reduce using rule 54 (sMM -> ID .) ]
  ! <               [ reduce using rule 54 (sMM -> ID .) ]

    m                              shift and go to state 140

state 157

    (48) campos -> valores .

    }               reduce using rule 48 (campos -> valores .)


state 158

    (26) funcBool -> COLINEALES ( vec , . vec )
    (31) vec -> . ID = [ elem ]

    ID              shift and go to state 101

    vec                            shift and go to state 189

state 159

    (31) vec -> ID = . [ elem ]

    [               shift and go to state 190


state 160

    (12) loop -> FOR ( varAsig ; . expBool ; varsOps ) bloque
    (87) expBool -> . or ? expBool : expBool
    (88) expBool -> . or
    (89) or -> . or OR and
    (90) or -> . and
    (91) and -> . and AND eq
    (92) and -> . eq
    (93) eq -> . eq EQEQ tBool
    (94) eq -> . eq DISTINTO tBool
    (95) eq -> . mayor
    (96) mayor -> . tCompare > tCompare
    (97) mayor -> . menor
    (106) tCompare -> . eMat
    (107) tCompare -> . varsOps
    (108) tCompare -> . varYVals
    (98) menor -> . tCompare < tCompare
    (99) menor -> . not
    (65) eMat -> . eMat + p
    (66) eMat -> . eMat - p
    (67) eMat -> . p
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (100) not -> . NOT not
    (101) not -> . tBool
    (68) p -> . p * exp
    (69) p -> . p / exp
    (70) p -> . p % exp
    (71) p -> . exp
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID
    (43) vecVal -> . ID m
    (102) tBool -> . ( expBool )
    (103) tBool -> . BOOL
    (104) tBool -> . varYVals
    (105) tBool -> . funcBool
    (72) exp -> . exp ^ iSing
    (73) exp -> . iSing
    (26) funcBool -> . COLINEALES ( vec , vec )
    (74) iSing -> . - paren
    (75) iSing -> . + paren
    (76) iSing -> . paren
    (77) paren -> . ( eMat )
    (78) paren -> . INT
    (79) paren -> . varYVals
    (80) paren -> . FLOAT
    (81) paren -> . varsOps
    (82) paren -> . funcInt
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )

    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    ID              shift and go to state 74
    NOT             shift and go to state 81
    (               shift and go to state 65
    BOOL            shift and go to state 69
    COLINEALES      shift and go to state 13
    -               shift and go to state 67
    +               shift and go to state 66
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24

    and                            shift and go to state 58
    funcBool                       shift and go to state 59
    funcInt                        shift and go to state 60
    menor                          shift and go to state 61
    eq                             shift and go to state 62
    mayor                          shift and go to state 63
    eMat                           shift and go to state 64
    vecVal                         shift and go to state 68
    sMM                            shift and go to state 11
    paren                          shift and go to state 72
    iSing                          shift and go to state 70
    tCompare                       shift and go to state 71
    not                            shift and go to state 73
    p                              shift and go to state 78
    varsOps                        shift and go to state 79
    exp                            shift and go to state 80
    tBool                          shift and go to state 82
    varYVals                       shift and go to state 83
    or                             shift and go to state 77
    expBool                        shift and go to state 191

state 161

    (13) if -> IF ( expBool ) . THEN bloque else

    THEN            shift and go to state 192


state 162

    (23) funcInt -> MULTIESCALAR ( vec , . eMat , param )
    (65) eMat -> . eMat + p
    (66) eMat -> . eMat - p
    (67) eMat -> . p
    (68) p -> . p * exp
    (69) p -> . p / exp
    (70) p -> . p % exp
    (71) p -> . exp
    (72) exp -> . exp ^ iSing
    (73) exp -> . iSing
    (74) iSing -> . - paren
    (75) iSing -> . + paren
    (76) iSing -> . paren
    (77) paren -> . ( eMat )
    (78) paren -> . INT
    (79) paren -> . varYVals
    (80) paren -> . FLOAT
    (81) paren -> . varsOps
    (82) paren -> . funcInt
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (43) vecVal -> . ID m
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID

    -               shift and go to state 67
    +               shift and go to state 66
    (               shift and go to state 133
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    ID              shift and go to state 130
    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24

    eMat                           shift and go to state 193
    funcInt                        shift and go to state 60
    p                              shift and go to state 78
    sMM                            shift and go to state 11
    iSing                          shift and go to state 70
    exp                            shift and go to state 80
    paren                          shift and go to state 72
    varsOps                        shift and go to state 134
    varYVals                       shift and go to state 136
    vecVal                         shift and go to state 68

state 163

    (25) funcString -> CAPITALIZAR ( expString ) .

    +               reduce using rule 25 (funcString -> CAPITALIZAR ( expString ) .)
    ;               reduce using rule 25 (funcString -> CAPITALIZAR ( expString ) .)
    )               reduce using rule 25 (funcString -> CAPITALIZAR ( expString ) .)
    ,               reduce using rule 25 (funcString -> CAPITALIZAR ( expString ) .)
    }               reduce using rule 25 (funcString -> CAPITALIZAR ( expString ) .)
    ]               reduce using rule 25 (funcString -> CAPITALIZAR ( expString ) .)


state 164

    (24) funcInt -> LENGTH ( vec ) .

    ;               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    }               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    ^               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    *               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    /               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    %               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    +               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    -               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    >               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    <               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    EQEQ            reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    DISTINTO        reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    AND             reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    ?               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    OR              reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    )               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    :               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    ,               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    ]               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)


state 165

    (11) loop -> DO bloque WHILE ( expBool . ) ;

    )               shift and go to state 194


state 166

    (91) and -> and AND eq .
    (93) eq -> eq . EQEQ tBool
    (94) eq -> eq . DISTINTO tBool

    AND             reduce using rule 91 (and -> and AND eq .)
    ?               reduce using rule 91 (and -> and AND eq .)
    OR              reduce using rule 91 (and -> and AND eq .)
    ,               reduce using rule 91 (and -> and AND eq .)
    )               reduce using rule 91 (and -> and AND eq .)
    ]               reduce using rule 91 (and -> and AND eq .)
    ;               reduce using rule 91 (and -> and AND eq .)
    }               reduce using rule 91 (and -> and AND eq .)
    :               reduce using rule 91 (and -> and AND eq .)
    EQEQ            shift and go to state 125
    DISTINTO        shift and go to state 126


state 167

    (93) eq -> eq EQEQ tBool .

    EQEQ            reduce using rule 93 (eq -> eq EQEQ tBool .)
    DISTINTO        reduce using rule 93 (eq -> eq EQEQ tBool .)
    AND             reduce using rule 93 (eq -> eq EQEQ tBool .)
    ?               reduce using rule 93 (eq -> eq EQEQ tBool .)
    OR              reduce using rule 93 (eq -> eq EQEQ tBool .)
    ;               reduce using rule 93 (eq -> eq EQEQ tBool .)
    )               reduce using rule 93 (eq -> eq EQEQ tBool .)
    }               reduce using rule 93 (eq -> eq EQEQ tBool .)
    :               reduce using rule 93 (eq -> eq EQEQ tBool .)
    ,               reduce using rule 93 (eq -> eq EQEQ tBool .)
    ]               reduce using rule 93 (eq -> eq EQEQ tBool .)


state 168

    (94) eq -> eq DISTINTO tBool .

    EQEQ            reduce using rule 94 (eq -> eq DISTINTO tBool .)
    DISTINTO        reduce using rule 94 (eq -> eq DISTINTO tBool .)
    AND             reduce using rule 94 (eq -> eq DISTINTO tBool .)
    ?               reduce using rule 94 (eq -> eq DISTINTO tBool .)
    OR              reduce using rule 94 (eq -> eq DISTINTO tBool .)
    ;               reduce using rule 94 (eq -> eq DISTINTO tBool .)
    )               reduce using rule 94 (eq -> eq DISTINTO tBool .)
    }               reduce using rule 94 (eq -> eq DISTINTO tBool .)
    :               reduce using rule 94 (eq -> eq DISTINTO tBool .)
    ,               reduce using rule 94 (eq -> eq DISTINTO tBool .)
    ]               reduce using rule 94 (eq -> eq DISTINTO tBool .)


state 169

    (65) eMat -> eMat + p .
    (68) p -> p . * exp
    (69) p -> p . / exp
    (70) p -> p . % exp

    +               reduce using rule 65 (eMat -> eMat + p .)
    -               reduce using rule 65 (eMat -> eMat + p .)
    )               reduce using rule 65 (eMat -> eMat + p .)
    >               reduce using rule 65 (eMat -> eMat + p .)
    <               reduce using rule 65 (eMat -> eMat + p .)
    }               reduce using rule 65 (eMat -> eMat + p .)
    ;               reduce using rule 65 (eMat -> eMat + p .)
    ,               reduce using rule 65 (eMat -> eMat + p .)
    ]               reduce using rule 65 (eMat -> eMat + p .)
    EQEQ            reduce using rule 65 (eMat -> eMat + p .)
    DISTINTO        reduce using rule 65 (eMat -> eMat + p .)
    AND             reduce using rule 65 (eMat -> eMat + p .)
    ?               reduce using rule 65 (eMat -> eMat + p .)
    OR              reduce using rule 65 (eMat -> eMat + p .)
    :               reduce using rule 65 (eMat -> eMat + p .)
    *               shift and go to state 144
    /               shift and go to state 146
    %               shift and go to state 145


state 170

    (66) eMat -> eMat - p .
    (68) p -> p . * exp
    (69) p -> p . / exp
    (70) p -> p . % exp

    +               reduce using rule 66 (eMat -> eMat - p .)
    -               reduce using rule 66 (eMat -> eMat - p .)
    )               reduce using rule 66 (eMat -> eMat - p .)
    >               reduce using rule 66 (eMat -> eMat - p .)
    <               reduce using rule 66 (eMat -> eMat - p .)
    }               reduce using rule 66 (eMat -> eMat - p .)
    ;               reduce using rule 66 (eMat -> eMat - p .)
    ,               reduce using rule 66 (eMat -> eMat - p .)
    ]               reduce using rule 66 (eMat -> eMat - p .)
    EQEQ            reduce using rule 66 (eMat -> eMat - p .)
    DISTINTO        reduce using rule 66 (eMat -> eMat - p .)
    AND             reduce using rule 66 (eMat -> eMat - p .)
    ?               reduce using rule 66 (eMat -> eMat - p .)
    OR              reduce using rule 66 (eMat -> eMat - p .)
    :               reduce using rule 66 (eMat -> eMat - p .)
    *               shift and go to state 144
    /               shift and go to state 146
    %               shift and go to state 145


state 171

    (77) paren -> ( eMat ) .

    ^               reduce using rule 77 (paren -> ( eMat ) .)
    *               reduce using rule 77 (paren -> ( eMat ) .)
    /               reduce using rule 77 (paren -> ( eMat ) .)
    %               reduce using rule 77 (paren -> ( eMat ) .)
    )               reduce using rule 77 (paren -> ( eMat ) .)
    +               reduce using rule 77 (paren -> ( eMat ) .)
    -               reduce using rule 77 (paren -> ( eMat ) .)
    >               reduce using rule 77 (paren -> ( eMat ) .)
    <               reduce using rule 77 (paren -> ( eMat ) .)
    ;               reduce using rule 77 (paren -> ( eMat ) .)
    }               reduce using rule 77 (paren -> ( eMat ) .)
    EQEQ            reduce using rule 77 (paren -> ( eMat ) .)
    DISTINTO        reduce using rule 77 (paren -> ( eMat ) .)
    AND             reduce using rule 77 (paren -> ( eMat ) .)
    ?               reduce using rule 77 (paren -> ( eMat ) .)
    OR              reduce using rule 77 (paren -> ( eMat ) .)
    :               reduce using rule 77 (paren -> ( eMat ) .)
    ,               reduce using rule 77 (paren -> ( eMat ) .)
    ]               reduce using rule 77 (paren -> ( eMat ) .)


state 172

    (102) tBool -> ( expBool ) .

    EQEQ            reduce using rule 102 (tBool -> ( expBool ) .)
    DISTINTO        reduce using rule 102 (tBool -> ( expBool ) .)
    AND             reduce using rule 102 (tBool -> ( expBool ) .)
    ?               reduce using rule 102 (tBool -> ( expBool ) .)
    OR              reduce using rule 102 (tBool -> ( expBool ) .)
    )               reduce using rule 102 (tBool -> ( expBool ) .)
    ;               reduce using rule 102 (tBool -> ( expBool ) .)
    }               reduce using rule 102 (tBool -> ( expBool ) .)
    :               reduce using rule 102 (tBool -> ( expBool ) .)
    ,               reduce using rule 102 (tBool -> ( expBool ) .)
    ]               reduce using rule 102 (tBool -> ( expBool ) .)


state 173

    (77) paren -> ( eMat . )
    (65) eMat -> eMat . + p
    (66) eMat -> eMat . - p

    )               shift and go to state 171
    +               shift and go to state 127
    -               shift and go to state 128


state 174

    (98) menor -> tCompare < tCompare .

    EQEQ            reduce using rule 98 (menor -> tCompare < tCompare .)
    DISTINTO        reduce using rule 98 (menor -> tCompare < tCompare .)
    AND             reduce using rule 98 (menor -> tCompare < tCompare .)
    ?               reduce using rule 98 (menor -> tCompare < tCompare .)
    OR              reduce using rule 98 (menor -> tCompare < tCompare .)
    ;               reduce using rule 98 (menor -> tCompare < tCompare .)
    }               reduce using rule 98 (menor -> tCompare < tCompare .)
    :               reduce using rule 98 (menor -> tCompare < tCompare .)
    ,               reduce using rule 98 (menor -> tCompare < tCompare .)
    ]               reduce using rule 98 (menor -> tCompare < tCompare .)
    )               reduce using rule 98 (menor -> tCompare < tCompare .)


state 175

    (108) tCompare -> varYVals .
    (79) paren -> varYVals .

  ! reduce/reduce conflict for EQEQ resolved using rule 79 (paren -> varYVals .)
  ! reduce/reduce conflict for DISTINTO resolved using rule 79 (paren -> varYVals .)
  ! reduce/reduce conflict for AND resolved using rule 79 (paren -> varYVals .)
  ! reduce/reduce conflict for ? resolved using rule 79 (paren -> varYVals .)
  ! reduce/reduce conflict for OR resolved using rule 79 (paren -> varYVals .)
  ! reduce/reduce conflict for ) resolved using rule 79 (paren -> varYVals .)
  ! reduce/reduce conflict for ; resolved using rule 79 (paren -> varYVals .)
  ! reduce/reduce conflict for } resolved using rule 79 (paren -> varYVals .)
  ! reduce/reduce conflict for : resolved using rule 79 (paren -> varYVals .)
  ! reduce/reduce conflict for , resolved using rule 79 (paren -> varYVals .)
  ! reduce/reduce conflict for ] resolved using rule 79 (paren -> varYVals .)
    ^               reduce using rule 79 (paren -> varYVals .)
    *               reduce using rule 79 (paren -> varYVals .)
    /               reduce using rule 79 (paren -> varYVals .)
    %               reduce using rule 79 (paren -> varYVals .)
    +               reduce using rule 79 (paren -> varYVals .)
    -               reduce using rule 79 (paren -> varYVals .)
    EQEQ            reduce using rule 79 (paren -> varYVals .)
    DISTINTO        reduce using rule 79 (paren -> varYVals .)
    AND             reduce using rule 79 (paren -> varYVals .)
    ?               reduce using rule 79 (paren -> varYVals .)
    OR              reduce using rule 79 (paren -> varYVals .)
    )               reduce using rule 79 (paren -> varYVals .)
    ;               reduce using rule 79 (paren -> varYVals .)
    }               reduce using rule 79 (paren -> varYVals .)
    :               reduce using rule 79 (paren -> varYVals .)
    ,               reduce using rule 79 (paren -> varYVals .)
    ]               reduce using rule 79 (paren -> varYVals .)

  ! EQEQ            [ reduce using rule 108 (tCompare -> varYVals .) ]
  ! DISTINTO        [ reduce using rule 108 (tCompare -> varYVals .) ]
  ! AND             [ reduce using rule 108 (tCompare -> varYVals .) ]
  ! ?               [ reduce using rule 108 (tCompare -> varYVals .) ]
  ! OR              [ reduce using rule 108 (tCompare -> varYVals .) ]
  ! )               [ reduce using rule 108 (tCompare -> varYVals .) ]
  ! ;               [ reduce using rule 108 (tCompare -> varYVals .) ]
  ! }               [ reduce using rule 108 (tCompare -> varYVals .) ]
  ! :               [ reduce using rule 108 (tCompare -> varYVals .) ]
  ! ,               [ reduce using rule 108 (tCompare -> varYVals .) ]
  ! ]               [ reduce using rule 108 (tCompare -> varYVals .) ]


state 176

    (96) mayor -> tCompare > tCompare .

    EQEQ            reduce using rule 96 (mayor -> tCompare > tCompare .)
    DISTINTO        reduce using rule 96 (mayor -> tCompare > tCompare .)
    AND             reduce using rule 96 (mayor -> tCompare > tCompare .)
    ?               reduce using rule 96 (mayor -> tCompare > tCompare .)
    OR              reduce using rule 96 (mayor -> tCompare > tCompare .)
    )               reduce using rule 96 (mayor -> tCompare > tCompare .)
    ;               reduce using rule 96 (mayor -> tCompare > tCompare .)
    }               reduce using rule 96 (mayor -> tCompare > tCompare .)
    :               reduce using rule 96 (mayor -> tCompare > tCompare .)
    ,               reduce using rule 96 (mayor -> tCompare > tCompare .)
    ]               reduce using rule 96 (mayor -> tCompare > tCompare .)


state 177

    (44) m -> [ INT . ]
    (45) m -> [ INT . ] m

    ]               shift and go to state 195


state 178

    (89) or -> or OR and .
    (91) and -> and . AND eq

    ?               reduce using rule 89 (or -> or OR and .)
    OR              reduce using rule 89 (or -> or OR and .)
    ,               reduce using rule 89 (or -> or OR and .)
    ]               reduce using rule 89 (or -> or OR and .)
    ;               reduce using rule 89 (or -> or OR and .)
    )               reduce using rule 89 (or -> or OR and .)
    :               reduce using rule 89 (or -> or OR and .)
    }               reduce using rule 89 (or -> or OR and .)
    AND             shift and go to state 124


state 179

    (87) expBool -> or ? expBool . : expBool

    :               shift and go to state 196


state 180

    (68) p -> p * exp .
    (72) exp -> exp . ^ iSing

    *               reduce using rule 68 (p -> p * exp .)
    /               reduce using rule 68 (p -> p * exp .)
    %               reduce using rule 68 (p -> p * exp .)
    +               reduce using rule 68 (p -> p * exp .)
    -               reduce using rule 68 (p -> p * exp .)
    }               reduce using rule 68 (p -> p * exp .)
    >               reduce using rule 68 (p -> p * exp .)
    <               reduce using rule 68 (p -> p * exp .)
    )               reduce using rule 68 (p -> p * exp .)
    ;               reduce using rule 68 (p -> p * exp .)
    EQEQ            reduce using rule 68 (p -> p * exp .)
    DISTINTO        reduce using rule 68 (p -> p * exp .)
    AND             reduce using rule 68 (p -> p * exp .)
    ?               reduce using rule 68 (p -> p * exp .)
    OR              reduce using rule 68 (p -> p * exp .)
    :               reduce using rule 68 (p -> p * exp .)
    ,               reduce using rule 68 (p -> p * exp .)
    ]               reduce using rule 68 (p -> p * exp .)
    ^               shift and go to state 147


state 181

    (70) p -> p % exp .
    (72) exp -> exp . ^ iSing

    *               reduce using rule 70 (p -> p % exp .)
    /               reduce using rule 70 (p -> p % exp .)
    %               reduce using rule 70 (p -> p % exp .)
    +               reduce using rule 70 (p -> p % exp .)
    -               reduce using rule 70 (p -> p % exp .)
    }               reduce using rule 70 (p -> p % exp .)
    >               reduce using rule 70 (p -> p % exp .)
    <               reduce using rule 70 (p -> p % exp .)
    )               reduce using rule 70 (p -> p % exp .)
    ;               reduce using rule 70 (p -> p % exp .)
    EQEQ            reduce using rule 70 (p -> p % exp .)
    DISTINTO        reduce using rule 70 (p -> p % exp .)
    AND             reduce using rule 70 (p -> p % exp .)
    ?               reduce using rule 70 (p -> p % exp .)
    OR              reduce using rule 70 (p -> p % exp .)
    :               reduce using rule 70 (p -> p % exp .)
    ,               reduce using rule 70 (p -> p % exp .)
    ]               reduce using rule 70 (p -> p % exp .)
    ^               shift and go to state 147


state 182

    (69) p -> p / exp .
    (72) exp -> exp . ^ iSing

    *               reduce using rule 69 (p -> p / exp .)
    /               reduce using rule 69 (p -> p / exp .)
    %               reduce using rule 69 (p -> p / exp .)
    +               reduce using rule 69 (p -> p / exp .)
    -               reduce using rule 69 (p -> p / exp .)
    }               reduce using rule 69 (p -> p / exp .)
    >               reduce using rule 69 (p -> p / exp .)
    <               reduce using rule 69 (p -> p / exp .)
    )               reduce using rule 69 (p -> p / exp .)
    ;               reduce using rule 69 (p -> p / exp .)
    EQEQ            reduce using rule 69 (p -> p / exp .)
    DISTINTO        reduce using rule 69 (p -> p / exp .)
    AND             reduce using rule 69 (p -> p / exp .)
    ?               reduce using rule 69 (p -> p / exp .)
    OR              reduce using rule 69 (p -> p / exp .)
    :               reduce using rule 69 (p -> p / exp .)
    ,               reduce using rule 69 (p -> p / exp .)
    ]               reduce using rule 69 (p -> p / exp .)
    ^               shift and go to state 147


state 183

    (72) exp -> exp ^ iSing .

    ^               reduce using rule 72 (exp -> exp ^ iSing .)
    *               reduce using rule 72 (exp -> exp ^ iSing .)
    /               reduce using rule 72 (exp -> exp ^ iSing .)
    %               reduce using rule 72 (exp -> exp ^ iSing .)
    +               reduce using rule 72 (exp -> exp ^ iSing .)
    -               reduce using rule 72 (exp -> exp ^ iSing .)
    >               reduce using rule 72 (exp -> exp ^ iSing .)
    <               reduce using rule 72 (exp -> exp ^ iSing .)
    )               reduce using rule 72 (exp -> exp ^ iSing .)
    ;               reduce using rule 72 (exp -> exp ^ iSing .)
    }               reduce using rule 72 (exp -> exp ^ iSing .)
    EQEQ            reduce using rule 72 (exp -> exp ^ iSing .)
    DISTINTO        reduce using rule 72 (exp -> exp ^ iSing .)
    AND             reduce using rule 72 (exp -> exp ^ iSing .)
    ?               reduce using rule 72 (exp -> exp ^ iSing .)
    OR              reduce using rule 72 (exp -> exp ^ iSing .)
    :               reduce using rule 72 (exp -> exp ^ iSing .)
    ,               reduce using rule 72 (exp -> exp ^ iSing .)
    ]               reduce using rule 72 (exp -> exp ^ iSing .)


state 184

    (10) loop -> WHILE ( expBool ) bloque .

    RETURN          reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    MENOSMENOS      reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    MASMAS          reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    ID              reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    IF              reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    WHILE           reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    DO              reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    FOR             reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    PRINT           reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    MULTIESCALAR    reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    LENGTH          reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    CAPITALIZAR     reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    COLINEALES      reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    }               reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    $end            reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)


state 185

    (83) expString -> expString + STRING .

    +               reduce using rule 83 (expString -> expString + STRING .)
    ;               reduce using rule 83 (expString -> expString + STRING .)
    ,               reduce using rule 83 (expString -> expString + STRING .)
    ]               reduce using rule 83 (expString -> expString + STRING .)
    }               reduce using rule 83 (expString -> expString + STRING .)
    )               reduce using rule 83 (expString -> expString + STRING .)


state 186

    (40) valores -> ID . ID .

    }               reduce using rule 40 (valores -> ID . ID .)
    ,               reduce using rule 40 (valores -> ID . ID .)
    ;               reduce using rule 40 (valores -> ID . ID .)
    ]               reduce using rule 40 (valores -> ID . ID .)
    )               reduce using rule 40 (valores -> ID . ID .)


state 187

    (46) reg -> { campos } .

    )               reduce using rule 46 (reg -> { campos } .)
    ,               reduce using rule 46 (reg -> { campos } .)
    ]               reduce using rule 46 (reg -> { campos } .)
    ;               reduce using rule 46 (reg -> { campos } .)
    }               reduce using rule 46 (reg -> { campos } .)


state 188

    (47) campos -> ID : . valores , campos
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . expString
    (37) valores -> . varYVals
    (38) valores -> . funcReturn
    (39) valores -> . reg
    (40) valores -> . ID . ID
    (65) eMat -> . eMat + p
    (66) eMat -> . eMat - p
    (67) eMat -> . p
    (87) expBool -> . or ? expBool : expBool
    (88) expBool -> . or
    (83) expString -> . expString + STRING
    (84) expString -> . STRING
    (85) expString -> . varYVals
    (86) expString -> . funcString
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (46) reg -> . { campos }
    (68) p -> . p * exp
    (69) p -> . p / exp
    (70) p -> . p % exp
    (71) p -> . exp
    (89) or -> . or OR and
    (90) or -> . and
    (25) funcString -> . CAPITALIZAR ( expString )
    (43) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (26) funcBool -> . COLINEALES ( vec , vec )
    (72) exp -> . exp ^ iSing
    (73) exp -> . iSing
    (91) and -> . and AND eq
    (92) and -> . eq
    (74) iSing -> . - paren
    (75) iSing -> . + paren
    (76) iSing -> . paren
    (93) eq -> . eq EQEQ tBool
    (94) eq -> . eq DISTINTO tBool
    (95) eq -> . mayor
    (77) paren -> . ( eMat )
    (78) paren -> . INT
    (79) paren -> . varYVals
    (80) paren -> . FLOAT
    (81) paren -> . varsOps
    (82) paren -> . funcInt
    (96) mayor -> . tCompare > tCompare
    (97) mayor -> . menor
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (106) tCompare -> . eMat
    (107) tCompare -> . varsOps
    (108) tCompare -> . varYVals
    (98) menor -> . tCompare < tCompare
    (99) menor -> . not
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID
    (100) not -> . NOT not
    (101) not -> . tBool
    (102) tBool -> . ( expBool )
    (103) tBool -> . BOOL
    (104) tBool -> . varYVals
    (105) tBool -> . funcBool

    ID              shift and go to state 93
    STRING          shift and go to state 91
    {               shift and go to state 97
    CAPITALIZAR     shift and go to state 23
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 67
    +               shift and go to state 66
    (               shift and go to state 88
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    NOT             shift and go to state 81
    BOOL            shift and go to state 69

    and                            shift and go to state 58
    funcBool                       shift and go to state 85
    funcInt                        shift and go to state 86
    menor                          shift and go to state 61
    eq                             shift and go to state 62
    vecVal                         shift and go to state 68
    eMat                           shift and go to state 87
    mayor                          shift and go to state 63
    sMM                            shift and go to state 11
    paren                          shift and go to state 72
    reg                            shift and go to state 89
    varsOps                        shift and go to state 90
    expString                      shift and go to state 92
    tCompare                       shift and go to state 71
    not                            shift and go to state 73
    funcString                     shift and go to state 94
    funcReturn                     shift and go to state 95
    valores                        shift and go to state 197
    p                              shift and go to state 78
    iSing                          shift and go to state 70
    exp                            shift and go to state 80
    tBool                          shift and go to state 82
    varYVals                       shift and go to state 98
    or                             shift and go to state 77
    expBool                        shift and go to state 99

state 189

    (26) funcBool -> COLINEALES ( vec , vec . )

    )               shift and go to state 198


state 190

    (31) vec -> ID = [ . elem ]
    (32) elem -> . valores , elem
    (33) elem -> . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . expString
    (37) valores -> . varYVals
    (38) valores -> . funcReturn
    (39) valores -> . reg
    (40) valores -> . ID . ID
    (65) eMat -> . eMat + p
    (66) eMat -> . eMat - p
    (67) eMat -> . p
    (87) expBool -> . or ? expBool : expBool
    (88) expBool -> . or
    (83) expString -> . expString + STRING
    (84) expString -> . STRING
    (85) expString -> . varYVals
    (86) expString -> . funcString
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (46) reg -> . { campos }
    (68) p -> . p * exp
    (69) p -> . p / exp
    (70) p -> . p % exp
    (71) p -> . exp
    (89) or -> . or OR and
    (90) or -> . and
    (25) funcString -> . CAPITALIZAR ( expString )
    (43) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (26) funcBool -> . COLINEALES ( vec , vec )
    (72) exp -> . exp ^ iSing
    (73) exp -> . iSing
    (91) and -> . and AND eq
    (92) and -> . eq
    (74) iSing -> . - paren
    (75) iSing -> . + paren
    (76) iSing -> . paren
    (93) eq -> . eq EQEQ tBool
    (94) eq -> . eq DISTINTO tBool
    (95) eq -> . mayor
    (77) paren -> . ( eMat )
    (78) paren -> . INT
    (79) paren -> . varYVals
    (80) paren -> . FLOAT
    (81) paren -> . varsOps
    (82) paren -> . funcInt
    (96) mayor -> . tCompare > tCompare
    (97) mayor -> . menor
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (106) tCompare -> . eMat
    (107) tCompare -> . varsOps
    (108) tCompare -> . varYVals
    (98) menor -> . tCompare < tCompare
    (99) menor -> . not
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID
    (100) not -> . NOT not
    (101) not -> . tBool
    (102) tBool -> . ( expBool )
    (103) tBool -> . BOOL
    (104) tBool -> . varYVals
    (105) tBool -> . funcBool

    ID              shift and go to state 93
    STRING          shift and go to state 91
    {               shift and go to state 97
    CAPITALIZAR     shift and go to state 23
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 67
    +               shift and go to state 66
    (               shift and go to state 88
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    NOT             shift and go to state 81
    BOOL            shift and go to state 69

    and                            shift and go to state 58
    funcBool                       shift and go to state 85
    funcInt                        shift and go to state 86
    valores                        shift and go to state 200
    menor                          shift and go to state 61
    eq                             shift and go to state 62
    vecVal                         shift and go to state 68
    eMat                           shift and go to state 87
    mayor                          shift and go to state 63
    sMM                            shift and go to state 11
    paren                          shift and go to state 72
    reg                            shift and go to state 89
    varsOps                        shift and go to state 90
    expString                      shift and go to state 92
    tCompare                       shift and go to state 71
    not                            shift and go to state 73
    funcString                     shift and go to state 94
    funcReturn                     shift and go to state 95
    elem                           shift and go to state 199
    p                              shift and go to state 78
    iSing                          shift and go to state 70
    exp                            shift and go to state 80
    tBool                          shift and go to state 82
    varYVals                       shift and go to state 98
    or                             shift and go to state 77
    expBool                        shift and go to state 99

state 191

    (12) loop -> FOR ( varAsig ; expBool . ; varsOps ) bloque

    ;               shift and go to state 201


state 192

    (13) if -> IF ( expBool ) THEN . bloque else
    (16) bloque -> . sentencia
    (17) bloque -> . { g }
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (55) varAsig -> . ID MENOSEQ varAsig
    (56) varAsig -> . ID MASEQ varAsig
    (57) varAsig -> . ID MULEQ varAsig
    (58) varAsig -> . ID DIVEQ varAsig
    (59) varAsig -> . ID = varAsig
    (60) varAsig -> . ID MASEQ valores
    (61) varAsig -> . ID MENOSEQ valores
    (62) varAsig -> . ID MULEQ valores
    (63) varAsig -> . ID DIVEQ valores
    (64) varAsig -> . ID = valores
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( expString )
    (26) funcBool -> . COLINEALES ( vec , vec )

    {               shift and go to state 31
    RETURN          shift and go to state 2
    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    ID              shift and go to state 16
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    CAPITALIZAR     shift and go to state 23
    COLINEALES      shift and go to state 13

    varAsig                        shift and go to state 18
    sentencia                      shift and go to state 30
    funcBool                       shift and go to state 3
    funcString                     shift and go to state 20
    funcVoid                       shift and go to state 12
    funcReturn                     shift and go to state 22
    sMM                            shift and go to state 11
    varsOps                        shift and go to state 27
    func                           shift and go to state 15
    bloque                         shift and go to state 202
    funcInt                        shift and go to state 5

state 193

    (23) funcInt -> MULTIESCALAR ( vec , eMat . , param )
    (65) eMat -> eMat . + p
    (66) eMat -> eMat . - p

    ,               shift and go to state 203
    +               shift and go to state 127
    -               shift and go to state 128


state 194

    (11) loop -> DO bloque WHILE ( expBool ) . ;

    ;               shift and go to state 204


state 195

    (44) m -> [ INT ] .
    (45) m -> [ INT ] . m
    (44) m -> . [ INT ]
    (45) m -> . [ INT ] m

    )               reduce using rule 44 (m -> [ INT ] .)
    +               reduce using rule 44 (m -> [ INT ] .)
    ^               reduce using rule 44 (m -> [ INT ] .)
    *               reduce using rule 44 (m -> [ INT ] .)
    /               reduce using rule 44 (m -> [ INT ] .)
    %               reduce using rule 44 (m -> [ INT ] .)
    -               reduce using rule 44 (m -> [ INT ] .)
    >               reduce using rule 44 (m -> [ INT ] .)
    <               reduce using rule 44 (m -> [ INT ] .)
    EQEQ            reduce using rule 44 (m -> [ INT ] .)
    DISTINTO        reduce using rule 44 (m -> [ INT ] .)
    AND             reduce using rule 44 (m -> [ INT ] .)
    ?               reduce using rule 44 (m -> [ INT ] .)
    OR              reduce using rule 44 (m -> [ INT ] .)
    ,               reduce using rule 44 (m -> [ INT ] .)
    ]               reduce using rule 44 (m -> [ INT ] .)
    ;               reduce using rule 44 (m -> [ INT ] .)
    }               reduce using rule 44 (m -> [ INT ] .)
    :               reduce using rule 44 (m -> [ INT ] .)
    [               shift and go to state 141

    m                              shift and go to state 205

state 196

    (87) expBool -> or ? expBool : . expBool
    (87) expBool -> . or ? expBool : expBool
    (88) expBool -> . or
    (89) or -> . or OR and
    (90) or -> . and
    (91) and -> . and AND eq
    (92) and -> . eq
    (93) eq -> . eq EQEQ tBool
    (94) eq -> . eq DISTINTO tBool
    (95) eq -> . mayor
    (96) mayor -> . tCompare > tCompare
    (97) mayor -> . menor
    (106) tCompare -> . eMat
    (107) tCompare -> . varsOps
    (108) tCompare -> . varYVals
    (98) menor -> . tCompare < tCompare
    (99) menor -> . not
    (65) eMat -> . eMat + p
    (66) eMat -> . eMat - p
    (67) eMat -> . p
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (100) not -> . NOT not
    (101) not -> . tBool
    (68) p -> . p * exp
    (69) p -> . p / exp
    (70) p -> . p % exp
    (71) p -> . exp
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID
    (43) vecVal -> . ID m
    (102) tBool -> . ( expBool )
    (103) tBool -> . BOOL
    (104) tBool -> . varYVals
    (105) tBool -> . funcBool
    (72) exp -> . exp ^ iSing
    (73) exp -> . iSing
    (26) funcBool -> . COLINEALES ( vec , vec )
    (74) iSing -> . - paren
    (75) iSing -> . + paren
    (76) iSing -> . paren
    (77) paren -> . ( eMat )
    (78) paren -> . INT
    (79) paren -> . varYVals
    (80) paren -> . FLOAT
    (81) paren -> . varsOps
    (82) paren -> . funcInt
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )

    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    ID              shift and go to state 74
    NOT             shift and go to state 81
    (               shift and go to state 65
    BOOL            shift and go to state 69
    COLINEALES      shift and go to state 13
    -               shift and go to state 67
    +               shift and go to state 66
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24

    and                            shift and go to state 58
    funcBool                       shift and go to state 59
    funcInt                        shift and go to state 60
    menor                          shift and go to state 61
    eq                             shift and go to state 62
    mayor                          shift and go to state 63
    eMat                           shift and go to state 64
    vecVal                         shift and go to state 68
    sMM                            shift and go to state 11
    paren                          shift and go to state 72
    iSing                          shift and go to state 70
    tCompare                       shift and go to state 71
    not                            shift and go to state 73
    p                              shift and go to state 78
    varsOps                        shift and go to state 79
    exp                            shift and go to state 80
    tBool                          shift and go to state 82
    varYVals                       shift and go to state 83
    or                             shift and go to state 77
    expBool                        shift and go to state 206

state 197

    (47) campos -> ID : valores . , campos

    ,               shift and go to state 207


state 198

    (26) funcBool -> COLINEALES ( vec , vec ) .

    ;               reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    EQEQ            reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    DISTINTO        reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    AND             reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    ?               reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    OR              reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    )               reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    }               reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    :               reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    ,               reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    ]               reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)


state 199

    (31) vec -> ID = [ elem . ]

    ]               shift and go to state 208


state 200

    (32) elem -> valores . , elem
    (33) elem -> valores .

    ,               shift and go to state 209
    ]               reduce using rule 33 (elem -> valores .)


state 201

    (12) loop -> FOR ( varAsig ; expBool ; . varsOps ) bloque
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID

    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    ID              shift and go to state 53

    sMM                            shift and go to state 11
    varsOps                        shift and go to state 210

state 202

    (13) if -> IF ( expBool ) THEN bloque . else
    (14) else -> . ELSE bloque
    (15) else -> . empty
    (30) empty -> .

    ELSE            shift and go to state 213
    RETURN          reduce using rule 30 (empty -> .)
    MENOSMENOS      reduce using rule 30 (empty -> .)
    MASMAS          reduce using rule 30 (empty -> .)
    ID              reduce using rule 30 (empty -> .)
    IF              reduce using rule 30 (empty -> .)
    WHILE           reduce using rule 30 (empty -> .)
    DO              reduce using rule 30 (empty -> .)
    FOR             reduce using rule 30 (empty -> .)
    PRINT           reduce using rule 30 (empty -> .)
    MULTIESCALAR    reduce using rule 30 (empty -> .)
    LENGTH          reduce using rule 30 (empty -> .)
    CAPITALIZAR     reduce using rule 30 (empty -> .)
    COLINEALES      reduce using rule 30 (empty -> .)
    $end            reduce using rule 30 (empty -> .)
    }               reduce using rule 30 (empty -> .)

    empty                          shift and go to state 212
    else                           shift and go to state 211

state 203

    (23) funcInt -> MULTIESCALAR ( vec , eMat , . param )
    (28) param -> . expBool
    (29) param -> . empty
    (87) expBool -> . or ? expBool : expBool
    (88) expBool -> . or
    (30) empty -> .
    (89) or -> . or OR and
    (90) or -> . and
    (91) and -> . and AND eq
    (92) and -> . eq
    (93) eq -> . eq EQEQ tBool
    (94) eq -> . eq DISTINTO tBool
    (95) eq -> . mayor
    (96) mayor -> . tCompare > tCompare
    (97) mayor -> . menor
    (106) tCompare -> . eMat
    (107) tCompare -> . varsOps
    (108) tCompare -> . varYVals
    (98) menor -> . tCompare < tCompare
    (99) menor -> . not
    (65) eMat -> . eMat + p
    (66) eMat -> . eMat - p
    (67) eMat -> . p
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (100) not -> . NOT not
    (101) not -> . tBool
    (68) p -> . p * exp
    (69) p -> . p / exp
    (70) p -> . p % exp
    (71) p -> . exp
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID
    (43) vecVal -> . ID m
    (102) tBool -> . ( expBool )
    (103) tBool -> . BOOL
    (104) tBool -> . varYVals
    (105) tBool -> . funcBool
    (72) exp -> . exp ^ iSing
    (73) exp -> . iSing
    (26) funcBool -> . COLINEALES ( vec , vec )
    (74) iSing -> . - paren
    (75) iSing -> . + paren
    (76) iSing -> . paren
    (77) paren -> . ( eMat )
    (78) paren -> . INT
    (79) paren -> . varYVals
    (80) paren -> . FLOAT
    (81) paren -> . varsOps
    (82) paren -> . funcInt
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )

    )               reduce using rule 30 (empty -> .)
    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    ID              shift and go to state 74
    NOT             shift and go to state 81
    (               shift and go to state 65
    BOOL            shift and go to state 69
    COLINEALES      shift and go to state 13
    -               shift and go to state 67
    +               shift and go to state 66
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24

    and                            shift and go to state 58
    funcBool                       shift and go to state 59
    funcInt                        shift and go to state 60
    menor                          shift and go to state 61
    eq                             shift and go to state 62
    mayor                          shift and go to state 63
    eMat                           shift and go to state 64
    param                          shift and go to state 214
    vecVal                         shift and go to state 68
    sMM                            shift and go to state 11
    paren                          shift and go to state 72
    empty                          shift and go to state 215
    varsOps                        shift and go to state 79
    tCompare                       shift and go to state 71
    not                            shift and go to state 73
    p                              shift and go to state 78
    iSing                          shift and go to state 70
    exp                            shift and go to state 80
    tBool                          shift and go to state 82
    varYVals                       shift and go to state 83
    or                             shift and go to state 77
    expBool                        shift and go to state 216

state 204

    (11) loop -> DO bloque WHILE ( expBool ) ; .

    RETURN          reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    MENOSMENOS      reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    MASMAS          reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    ID              reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    IF              reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    WHILE           reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    DO              reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    FOR             reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    PRINT           reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    MULTIESCALAR    reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    LENGTH          reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    CAPITALIZAR     reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    COLINEALES      reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    }               reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    $end            reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)


state 205

    (45) m -> [ INT ] m .

    )               reduce using rule 45 (m -> [ INT ] m .)
    +               reduce using rule 45 (m -> [ INT ] m .)
    ^               reduce using rule 45 (m -> [ INT ] m .)
    *               reduce using rule 45 (m -> [ INT ] m .)
    /               reduce using rule 45 (m -> [ INT ] m .)
    %               reduce using rule 45 (m -> [ INT ] m .)
    -               reduce using rule 45 (m -> [ INT ] m .)
    >               reduce using rule 45 (m -> [ INT ] m .)
    <               reduce using rule 45 (m -> [ INT ] m .)
    EQEQ            reduce using rule 45 (m -> [ INT ] m .)
    DISTINTO        reduce using rule 45 (m -> [ INT ] m .)
    AND             reduce using rule 45 (m -> [ INT ] m .)
    ?               reduce using rule 45 (m -> [ INT ] m .)
    OR              reduce using rule 45 (m -> [ INT ] m .)
    ,               reduce using rule 45 (m -> [ INT ] m .)
    ]               reduce using rule 45 (m -> [ INT ] m .)
    ;               reduce using rule 45 (m -> [ INT ] m .)
    }               reduce using rule 45 (m -> [ INT ] m .)
    :               reduce using rule 45 (m -> [ INT ] m .)


state 206

    (87) expBool -> or ? expBool : expBool .

    }               reduce using rule 87 (expBool -> or ? expBool : expBool .)
    )               reduce using rule 87 (expBool -> or ? expBool : expBool .)
    ;               reduce using rule 87 (expBool -> or ? expBool : expBool .)
    ,               reduce using rule 87 (expBool -> or ? expBool : expBool .)
    :               reduce using rule 87 (expBool -> or ? expBool : expBool .)
    ]               reduce using rule 87 (expBool -> or ? expBool : expBool .)


state 207

    (47) campos -> ID : valores , . campos
    (47) campos -> . ID : valores , campos
    (48) campos -> . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . expString
    (37) valores -> . varYVals
    (38) valores -> . funcReturn
    (39) valores -> . reg
    (40) valores -> . ID . ID
    (65) eMat -> . eMat + p
    (66) eMat -> . eMat - p
    (67) eMat -> . p
    (87) expBool -> . or ? expBool : expBool
    (88) expBool -> . or
    (83) expString -> . expString + STRING
    (84) expString -> . STRING
    (85) expString -> . varYVals
    (86) expString -> . funcString
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (46) reg -> . { campos }
    (68) p -> . p * exp
    (69) p -> . p / exp
    (70) p -> . p % exp
    (71) p -> . exp
    (89) or -> . or OR and
    (90) or -> . and
    (25) funcString -> . CAPITALIZAR ( expString )
    (43) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (26) funcBool -> . COLINEALES ( vec , vec )
    (72) exp -> . exp ^ iSing
    (73) exp -> . iSing
    (91) and -> . and AND eq
    (92) and -> . eq
    (74) iSing -> . - paren
    (75) iSing -> . + paren
    (76) iSing -> . paren
    (93) eq -> . eq EQEQ tBool
    (94) eq -> . eq DISTINTO tBool
    (95) eq -> . mayor
    (77) paren -> . ( eMat )
    (78) paren -> . INT
    (79) paren -> . varYVals
    (80) paren -> . FLOAT
    (81) paren -> . varsOps
    (82) paren -> . funcInt
    (96) mayor -> . tCompare > tCompare
    (97) mayor -> . menor
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (106) tCompare -> . eMat
    (107) tCompare -> . varsOps
    (108) tCompare -> . varYVals
    (98) menor -> . tCompare < tCompare
    (99) menor -> . not
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID
    (100) not -> . NOT not
    (101) not -> . tBool
    (102) tBool -> . ( expBool )
    (103) tBool -> . BOOL
    (104) tBool -> . varYVals
    (105) tBool -> . funcBool

    ID              shift and go to state 156
    STRING          shift and go to state 91
    {               shift and go to state 97
    CAPITALIZAR     shift and go to state 23
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 67
    +               shift and go to state 66
    (               shift and go to state 88
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    NOT             shift and go to state 81
    BOOL            shift and go to state 69

    and                            shift and go to state 58
    funcBool                       shift and go to state 85
    funcInt                        shift and go to state 86
    menor                          shift and go to state 61
    eq                             shift and go to state 62
    vecVal                         shift and go to state 68
    eMat                           shift and go to state 87
    mayor                          shift and go to state 63
    sMM                            shift and go to state 11
    paren                          shift and go to state 72
    reg                            shift and go to state 89
    varsOps                        shift and go to state 90
    expString                      shift and go to state 92
    tCompare                       shift and go to state 71
    campos                         shift and go to state 217
    not                            shift and go to state 73
    funcString                     shift and go to state 94
    funcReturn                     shift and go to state 95
    valores                        shift and go to state 157
    p                              shift and go to state 78
    iSing                          shift and go to state 70
    exp                            shift and go to state 80
    tBool                          shift and go to state 82
    varYVals                       shift and go to state 98
    or                             shift and go to state 77
    expBool                        shift and go to state 99

state 208

    (31) vec -> ID = [ elem ] .

    ,               reduce using rule 31 (vec -> ID = [ elem ] .)
    )               reduce using rule 31 (vec -> ID = [ elem ] .)


state 209

    (32) elem -> valores , . elem
    (32) elem -> . valores , elem
    (33) elem -> . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . expString
    (37) valores -> . varYVals
    (38) valores -> . funcReturn
    (39) valores -> . reg
    (40) valores -> . ID . ID
    (65) eMat -> . eMat + p
    (66) eMat -> . eMat - p
    (67) eMat -> . p
    (87) expBool -> . or ? expBool : expBool
    (88) expBool -> . or
    (83) expString -> . expString + STRING
    (84) expString -> . STRING
    (85) expString -> . varYVals
    (86) expString -> . funcString
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (46) reg -> . { campos }
    (68) p -> . p * exp
    (69) p -> . p / exp
    (70) p -> . p % exp
    (71) p -> . exp
    (89) or -> . or OR and
    (90) or -> . and
    (25) funcString -> . CAPITALIZAR ( expString )
    (43) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (26) funcBool -> . COLINEALES ( vec , vec )
    (72) exp -> . exp ^ iSing
    (73) exp -> . iSing
    (91) and -> . and AND eq
    (92) and -> . eq
    (74) iSing -> . - paren
    (75) iSing -> . + paren
    (76) iSing -> . paren
    (93) eq -> . eq EQEQ tBool
    (94) eq -> . eq DISTINTO tBool
    (95) eq -> . mayor
    (77) paren -> . ( eMat )
    (78) paren -> . INT
    (79) paren -> . varYVals
    (80) paren -> . FLOAT
    (81) paren -> . varsOps
    (82) paren -> . funcInt
    (96) mayor -> . tCompare > tCompare
    (97) mayor -> . menor
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (106) tCompare -> . eMat
    (107) tCompare -> . varsOps
    (108) tCompare -> . varYVals
    (98) menor -> . tCompare < tCompare
    (99) menor -> . not
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID
    (100) not -> . NOT not
    (101) not -> . tBool
    (102) tBool -> . ( expBool )
    (103) tBool -> . BOOL
    (104) tBool -> . varYVals
    (105) tBool -> . funcBool

    ID              shift and go to state 93
    STRING          shift and go to state 91
    {               shift and go to state 97
    CAPITALIZAR     shift and go to state 23
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 67
    +               shift and go to state 66
    (               shift and go to state 88
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    NOT             shift and go to state 81
    BOOL            shift and go to state 69

    and                            shift and go to state 58
    funcBool                       shift and go to state 85
    funcInt                        shift and go to state 86
    elem                           shift and go to state 218
    menor                          shift and go to state 61
    eq                             shift and go to state 62
    vecVal                         shift and go to state 68
    eMat                           shift and go to state 87
    mayor                          shift and go to state 63
    sMM                            shift and go to state 11
    paren                          shift and go to state 72
    reg                            shift and go to state 89
    varsOps                        shift and go to state 90
    expString                      shift and go to state 92
    tCompare                       shift and go to state 71
    not                            shift and go to state 73
    funcString                     shift and go to state 94
    funcReturn                     shift and go to state 95
    valores                        shift and go to state 200
    p                              shift and go to state 78
    iSing                          shift and go to state 70
    exp                            shift and go to state 80
    tBool                          shift and go to state 82
    varYVals                       shift and go to state 98
    or                             shift and go to state 77
    expBool                        shift and go to state 99

state 210

    (12) loop -> FOR ( varAsig ; expBool ; varsOps . ) bloque

    )               shift and go to state 219


state 211

    (13) if -> IF ( expBool ) THEN bloque else .

    RETURN          reduce using rule 13 (if -> IF ( expBool ) THEN bloque else .)
    MENOSMENOS      reduce using rule 13 (if -> IF ( expBool ) THEN bloque else .)
    MASMAS          reduce using rule 13 (if -> IF ( expBool ) THEN bloque else .)
    ID              reduce using rule 13 (if -> IF ( expBool ) THEN bloque else .)
    IF              reduce using rule 13 (if -> IF ( expBool ) THEN bloque else .)
    WHILE           reduce using rule 13 (if -> IF ( expBool ) THEN bloque else .)
    DO              reduce using rule 13 (if -> IF ( expBool ) THEN bloque else .)
    FOR             reduce using rule 13 (if -> IF ( expBool ) THEN bloque else .)
    PRINT           reduce using rule 13 (if -> IF ( expBool ) THEN bloque else .)
    MULTIESCALAR    reduce using rule 13 (if -> IF ( expBool ) THEN bloque else .)
    LENGTH          reduce using rule 13 (if -> IF ( expBool ) THEN bloque else .)
    CAPITALIZAR     reduce using rule 13 (if -> IF ( expBool ) THEN bloque else .)
    COLINEALES      reduce using rule 13 (if -> IF ( expBool ) THEN bloque else .)
    }               reduce using rule 13 (if -> IF ( expBool ) THEN bloque else .)
    $end            reduce using rule 13 (if -> IF ( expBool ) THEN bloque else .)


state 212

    (15) else -> empty .

    RETURN          reduce using rule 15 (else -> empty .)
    MENOSMENOS      reduce using rule 15 (else -> empty .)
    MASMAS          reduce using rule 15 (else -> empty .)
    ID              reduce using rule 15 (else -> empty .)
    IF              reduce using rule 15 (else -> empty .)
    WHILE           reduce using rule 15 (else -> empty .)
    DO              reduce using rule 15 (else -> empty .)
    FOR             reduce using rule 15 (else -> empty .)
    PRINT           reduce using rule 15 (else -> empty .)
    MULTIESCALAR    reduce using rule 15 (else -> empty .)
    LENGTH          reduce using rule 15 (else -> empty .)
    CAPITALIZAR     reduce using rule 15 (else -> empty .)
    COLINEALES      reduce using rule 15 (else -> empty .)
    $end            reduce using rule 15 (else -> empty .)
    }               reduce using rule 15 (else -> empty .)


state 213

    (14) else -> ELSE . bloque
    (16) bloque -> . sentencia
    (17) bloque -> . { g }
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (55) varAsig -> . ID MENOSEQ varAsig
    (56) varAsig -> . ID MASEQ varAsig
    (57) varAsig -> . ID MULEQ varAsig
    (58) varAsig -> . ID DIVEQ varAsig
    (59) varAsig -> . ID = varAsig
    (60) varAsig -> . ID MASEQ valores
    (61) varAsig -> . ID MENOSEQ valores
    (62) varAsig -> . ID MULEQ valores
    (63) varAsig -> . ID DIVEQ valores
    (64) varAsig -> . ID = valores
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( expString )
    (26) funcBool -> . COLINEALES ( vec , vec )

    {               shift and go to state 31
    RETURN          shift and go to state 2
    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    ID              shift and go to state 16
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    CAPITALIZAR     shift and go to state 23
    COLINEALES      shift and go to state 13

    varAsig                        shift and go to state 18
    sentencia                      shift and go to state 30
    funcBool                       shift and go to state 3
    funcString                     shift and go to state 20
    funcVoid                       shift and go to state 12
    funcReturn                     shift and go to state 22
    sMM                            shift and go to state 11
    varsOps                        shift and go to state 27
    func                           shift and go to state 15
    bloque                         shift and go to state 220
    funcInt                        shift and go to state 5

state 214

    (23) funcInt -> MULTIESCALAR ( vec , eMat , param . )

    )               shift and go to state 221


state 215

    (29) param -> empty .

    )               reduce using rule 29 (param -> empty .)


state 216

    (28) param -> expBool .

    )               reduce using rule 28 (param -> expBool .)


state 217

    (47) campos -> ID : valores , campos .

    }               reduce using rule 47 (campos -> ID : valores , campos .)


state 218

    (32) elem -> valores , elem .

    ]               reduce using rule 32 (elem -> valores , elem .)


state 219

    (12) loop -> FOR ( varAsig ; expBool ; varsOps ) . bloque
    (16) bloque -> . sentencia
    (17) bloque -> . { g }
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (49) varsOps -> . MENOSMENOS sMM
    (50) varsOps -> . MASMAS sMM
    (51) varsOps -> . sMM
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (55) varAsig -> . ID MENOSEQ varAsig
    (56) varAsig -> . ID MASEQ varAsig
    (57) varAsig -> . ID MULEQ varAsig
    (58) varAsig -> . ID DIVEQ varAsig
    (59) varAsig -> . ID = varAsig
    (60) varAsig -> . ID MASEQ valores
    (61) varAsig -> . ID MENOSEQ valores
    (62) varAsig -> . ID MULEQ valores
    (63) varAsig -> . ID DIVEQ valores
    (64) varAsig -> . ID = valores
    (52) sMM -> . ID MASMAS
    (53) sMM -> . ID MENOSMENOS
    (54) sMM -> . ID
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( expString )
    (26) funcBool -> . COLINEALES ( vec , vec )

    {               shift and go to state 31
    RETURN          shift and go to state 2
    MENOSMENOS      shift and go to state 28
    MASMAS          shift and go to state 26
    ID              shift and go to state 16
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    CAPITALIZAR     shift and go to state 23
    COLINEALES      shift and go to state 13

    varAsig                        shift and go to state 18
    sentencia                      shift and go to state 30
    funcBool                       shift and go to state 3
    funcString                     shift and go to state 20
    funcVoid                       shift and go to state 12
    funcReturn                     shift and go to state 22
    sMM                            shift and go to state 11
    varsOps                        shift and go to state 27
    func                           shift and go to state 15
    bloque                         shift and go to state 222
    funcInt                        shift and go to state 5

state 220

    (14) else -> ELSE bloque .

    RETURN          reduce using rule 14 (else -> ELSE bloque .)
    MENOSMENOS      reduce using rule 14 (else -> ELSE bloque .)
    MASMAS          reduce using rule 14 (else -> ELSE bloque .)
    ID              reduce using rule 14 (else -> ELSE bloque .)
    IF              reduce using rule 14 (else -> ELSE bloque .)
    WHILE           reduce using rule 14 (else -> ELSE bloque .)
    DO              reduce using rule 14 (else -> ELSE bloque .)
    FOR             reduce using rule 14 (else -> ELSE bloque .)
    PRINT           reduce using rule 14 (else -> ELSE bloque .)
    MULTIESCALAR    reduce using rule 14 (else -> ELSE bloque .)
    LENGTH          reduce using rule 14 (else -> ELSE bloque .)
    CAPITALIZAR     reduce using rule 14 (else -> ELSE bloque .)
    COLINEALES      reduce using rule 14 (else -> ELSE bloque .)
    $end            reduce using rule 14 (else -> ELSE bloque .)
    }               reduce using rule 14 (else -> ELSE bloque .)


state 221

    (23) funcInt -> MULTIESCALAR ( vec , eMat , param ) .

    ;               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    }               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    ^               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    *               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    /               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    %               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    +               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    -               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    >               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    <               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    EQEQ            reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    DISTINTO        reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    AND             reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    ?               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    OR              reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    )               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    :               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    ,               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    ]               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)


state 222

    (12) loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .

    RETURN          reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    MENOSMENOS      reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    MASMAS          reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    ID              reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    IF              reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    WHILE           reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    DO              reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    FOR             reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    PRINT           reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    MULTIESCALAR    reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    LENGTH          reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    CAPITALIZAR     reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    COLINEALES      reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    }               reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    $end            reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 74 resolved using rule (varYVals -> ID)
WARNING: rejected rule (sMM -> ID) in state 74
WARNING: reduce/reduce conflict in state 79 resolved using rule (paren -> varsOps)
WARNING: rejected rule (tCompare -> varsOps) in state 79
WARNING: reduce/reduce conflict in state 83 resolved using rule (paren -> varYVals)
WARNING: rejected rule (tCompare -> varYVals) in state 83
WARNING: reduce/reduce conflict in state 85 resolved using rule (funcReturn -> funcBool)
WARNING: rejected rule (tBool -> funcBool) in state 85
WARNING: reduce/reduce conflict in state 86 resolved using rule (funcReturn -> funcInt)
WARNING: rejected rule (paren -> funcInt) in state 86
WARNING: reduce/reduce conflict in state 90 resolved using rule (paren -> varsOps)
WARNING: rejected rule (tCompare -> varsOps) in state 90
WARNING: reduce/reduce conflict in state 93 resolved using rule (varYVals -> ID)
WARNING: rejected rule (sMM -> ID) in state 93
WARNING: reduce/reduce conflict in state 94 resolved using rule (funcReturn -> funcString)
WARNING: rejected rule (expString -> funcString) in state 94
WARNING: reduce/reduce conflict in state 98 resolved using rule (valores -> varYVals)
WARNING: rejected rule (expString -> varYVals) in state 98
WARNING: reduce/reduce conflict in state 98 resolved using rule (paren -> varYVals)
WARNING: rejected rule (expString -> varYVals) in state 98
WARNING: reduce/reduce conflict in state 98 resolved using rule (valores -> varYVals)
WARNING: rejected rule (paren -> varYVals) in state 98
WARNING: reduce/reduce conflict in state 98 resolved using rule (paren -> varYVals)
WARNING: rejected rule (tCompare -> varYVals) in state 98
WARNING: reduce/reduce conflict in state 98 resolved using rule (valores -> varYVals)
WARNING: rejected rule (tBool -> varYVals) in state 98
WARNING: reduce/reduce conflict in state 104 resolved using rule (varYVals -> ID)
WARNING: rejected rule (sMM -> ID) in state 104
WARNING: reduce/reduce conflict in state 130 resolved using rule (varYVals -> ID)
WARNING: rejected rule (sMM -> ID) in state 130
WARNING: reduce/reduce conflict in state 131 resolved using rule (paren -> varYVals)
WARNING: rejected rule (tCompare -> varYVals) in state 131
WARNING: reduce/reduce conflict in state 131 resolved using rule (paren -> varYVals)
WARNING: rejected rule (tBool -> varYVals) in state 131
WARNING: reduce/reduce conflict in state 156 resolved using rule (varYVals -> ID)
WARNING: rejected rule (sMM -> ID) in state 156
WARNING: reduce/reduce conflict in state 175 resolved using rule (paren -> varYVals)
WARNING: rejected rule (tCompare -> varYVals) in state 175
WARNING: Rule (tCompare -> varsOps) is never reduced
WARNING: Rule (tCompare -> varYVals) is never reduced
