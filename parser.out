Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> g
Rule 1     g -> sentencia g
Rule 2     g -> ctrl g
Rule 3     g -> empty
Rule 4     sentencia -> varsOps ;
Rule 5     sentencia -> func ;
Rule 6     sentencia -> varAsig ;
Rule 7     sentencia -> RETURN ;
Rule 8     ctrl -> if
Rule 9     ctrl -> loop
Rule 10    loop -> WHILE ( expBool ) bloque
Rule 11    loop -> DO bloque WHILE ( expBool ) ;
Rule 12    loop -> FOR ( varAsig ; expBool ; varsOps ) bloque
Rule 13    if -> IF ( expBool ) bloque else
Rule 14    else -> ELSE bloque
Rule 15    else -> empty
Rule 16    bloque -> sentencia ;
Rule 17    bloque -> { g }
Rule 18    func -> funcReturn
Rule 19    func -> funcVoid
Rule 20    funcReturn -> funcInt
Rule 21    funcReturn -> funcString
Rule 22    funcReturn -> funcBool
Rule 23    funcInt -> MULTIESCALAR ( vec , eMat , param )
Rule 24    funcInt -> LENGTH ( vec )
Rule 25    funcString -> CAPITALIZAR ( eMat )
Rule 26    funcBool -> COLINEALES ( vec , vec )
Rule 27    funcVoid -> PRINT ( valores )
Rule 28    param -> expBool
Rule 29    param -> empty
Rule 30    empty -> <empty>
Rule 31    vec -> [ elem ]
Rule 32    elem -> valores , elem
Rule 33    elem -> valores
Rule 34    valores -> eMat
Rule 35    valores -> expBool
Rule 36    valores -> reg
Rule 37    valores -> INT
Rule 38    valores -> STRING
Rule 39    valores -> BOOL
Rule 40    valores -> varYVals
Rule 41    valores -> varsOps
Rule 42    valores -> vec
Rule 43    valores -> ID . valoresCampos
Rule 44    valores -> RES
Rule 45    valoresCampos -> ID
Rule 46    valoresCampos -> END
Rule 47    valoresCampos -> BEGIN
Rule 48    varYVals -> ID
Rule 49    varYVals -> vecVal
Rule 50    vecVal -> ID m
Rule 51    m -> [ INT ]
Rule 52    m -> [ INT ] m
Rule 53    reg -> { campos }
Rule 54    campos -> ID : valores , campos
Rule 55    campos -> valores
Rule 56    varsOps -> MENOSMENOS varYVals
Rule 57    varsOps -> MASMAS varYVals
Rule 58    varsOps -> varYVals MASMAS
Rule 59    varsOps -> varYVals MENOSMENOS
Rule 60    valoresAsig -> valores
Rule 61    varAsig -> ID MULEQ valoresAsig
Rule 62    varAsig -> ID DIVEQ valoresAsig
Rule 63    varAsig -> ID MASEQ valoresAsig
Rule 64    varAsig -> ID MENOSEQ valoresAsig
Rule 65    varAsig -> ID = valoresAsig
Rule 66    varAsig -> ID . ID = valoresAsig
Rule 67    valoresMat -> INT
Rule 68    valoresMat -> FLOAT
Rule 69    valoresMat -> funcInt
Rule 70    valoresMat -> varYVals
Rule 71    valoresMat -> varsOps
Rule 72    valoresMat -> STRING
Rule 73    eMat -> eMat + p
Rule 74    eMat -> eMat - p
Rule 75    eMat -> valoresMat + p
Rule 76    eMat -> valoresMat - p
Rule 77    eMat -> eMat + valoresMat
Rule 78    eMat -> eMat - valoresMat
Rule 79    eMat -> valoresMat + valoresMat
Rule 80    eMat -> valoresMat - valoresMat
Rule 81    eMat -> p
Rule 82    p -> p * exp
Rule 83    p -> p / exp
Rule 84    p -> p % exp
Rule 85    p -> valoresMat * exp
Rule 86    p -> valoresMat / exp
Rule 87    p -> valoresMat % exp
Rule 88    p -> p * valoresMat
Rule 89    p -> p / valoresMat
Rule 90    p -> p % valoresMat
Rule 91    p -> valoresMat * valoresMat
Rule 92    p -> valoresMat / valoresMat
Rule 93    p -> valoresMat % valoresMat
Rule 94    p -> exp
Rule 95    exp -> exp ^ iSing
Rule 96    exp -> valoresMat ^ iSing
Rule 97    exp -> exp ^ valoresMat
Rule 98    exp -> valoresMat ^ valoresMat
Rule 99    exp -> iSing
Rule 100   iSing -> - paren
Rule 101   iSing -> + paren
Rule 102   iSing -> - valoresMat
Rule 103   iSing -> + valoresMat
Rule 104   iSing -> paren
Rule 105   paren -> ( eMat )
Rule 106   valoresBool -> BOOL
Rule 107   valoresBool -> funcBool
Rule 108   valoresBool -> varYVals
Rule 109   valoresBool -> varsOps
Rule 110   expBool -> or ? expBool : expBool
Rule 111   expBool -> valoresBool ? expBool : expBool
Rule 112   expBool -> or ? valoresBool : valoresBool
Rule 113   expBool -> valoresBool ? valoresBool : valoresBool
Rule 114   expBool -> or
Rule 115   or -> or OR and
Rule 116   or -> valoresBool OR and
Rule 117   or -> or OR valoresBool
Rule 118   or -> valoresBool OR valoresBool
Rule 119   or -> and
Rule 120   and -> and AND eq
Rule 121   and -> valoresBool AND eq
Rule 122   and -> and AND valoresBool
Rule 123   and -> valoresBool AND valoresBool
Rule 124   and -> eq
Rule 125   eq -> eq EQEQ parenBool
Rule 126   eq -> eq DISTINTO parenBool
Rule 127   eq -> valoresBool EQEQ parenBool
Rule 128   eq -> valoresBool DISTINTO parenBool
Rule 129   eq -> eq EQEQ valoresBool
Rule 130   eq -> eq DISTINTO valoresBool
Rule 131   eq -> valoresBool EQEQ valoresBool
Rule 132   eq -> valoresBool DISTINTO valoresBool
Rule 133   eq -> mayor
Rule 134   tCompare -> eMat
Rule 135   tCompare -> varsOps
Rule 136   tCompare -> varYVals
Rule 137   mayor -> tCompare > tCompare
Rule 138   mayor -> menor
Rule 139   menor -> tCompare < tCompare
Rule 140   menor -> not
Rule 141   not -> NOT not
Rule 142   not -> NOT valoresBool
Rule 143   not -> parenBool
Rule 144   parenBool -> ( expBool )

Terminals, with rules where they appear

%                    : 84 87 90 93
(                    : 10 11 12 13 23 24 25 26 27 105 144
)                    : 10 11 12 13 23 24 25 26 27 105 144
*                    : 82 85 88 91
+                    : 73 75 77 79 101 103
,                    : 23 23 26 32 54
-                    : 74 76 78 80 100 102
.                    : 43 66
/                    : 83 86 89 92
:                    : 54 110 111 112 113
;                    : 4 5 6 7 11 12 12 16
<                    : 139
=                    : 65 66
>                    : 137
?                    : 110 111 112 113
AND                  : 120 121 122 123
BEGIN                : 47
BOOL                 : 39 106
CAPITALIZAR          : 25
COLINEALES           : 26
COMMENT              : 
DISTINTO             : 126 128 130 132
DIVEQ                : 62
DO                   : 11
ELSE                 : 14
END                  : 46
EQEQ                 : 125 127 129 131
FLOAT                : 68
FOR                  : 12
ID                   : 43 45 48 50 54 61 62 63 64 65 66 66
IF                   : 13
INT                  : 37 51 52 67
LENGTH               : 24
MASEQ                : 63
MASMAS               : 57 58
MENOSEQ              : 64
MENOSMENOS           : 56 59
MULEQ                : 61
MULTIESCALAR         : 23
NOT                  : 141 142
OR                   : 115 116 117 118
PRINT                : 27
RES                  : 44
RETURN               : 7
STRING               : 38 72
WHILE                : 10 11
[                    : 31 51 52
]                    : 31 51 52
^                    : 95 96 97 98
error                : 
{                    : 17 53
}                    : 17 53

Nonterminals, with rules where they appear

and                  : 115 116 119 120 122
bloque               : 10 11 12 13 14
campos               : 53 54
ctrl                 : 2
eMat                 : 23 25 34 73 74 77 78 105 134
elem                 : 31 32
else                 : 13
empty                : 3 15 29
eq                   : 120 121 124 125 126 129 130
exp                  : 82 83 84 85 86 87 94 95 97
expBool              : 10 11 12 13 28 35 110 110 111 111 144
func                 : 5
funcBool             : 22 107
funcInt              : 20 69
funcReturn           : 18
funcString           : 21
funcVoid             : 19
g                    : 1 2 17 0
iSing                : 95 96 99
if                   : 8
loop                 : 9
m                    : 50 52
mayor                : 133
menor                : 138
not                  : 140 141
or                   : 110 112 114 115 117
p                    : 73 74 75 76 81 82 83 84 88 89 90
param                : 23
paren                : 100 101 104
parenBool            : 125 126 127 128 143
reg                  : 36
sentencia            : 1 16
tCompare             : 137 137 139 139
valores              : 27 32 33 54 55 60
valoresAsig          : 61 62 63 64 65 66
valoresBool          : 111 112 112 113 113 113 116 117 118 118 121 122 123 123 127 128 129 130 131 131 132 132 142
valoresCampos        : 43
valoresMat           : 75 76 77 78 79 79 80 80 85 86 87 88 89 90 91 91 92 92 93 93 96 97 98 98 102 103
varAsig              : 6 12
varYVals             : 40 56 57 58 59 70 108 136
varsOps              : 4 12 41 71 109 135
vec                  : 23 24 26 26 42
vecVal               : 49

Parsing method: LALR

state 0

    (0) S' -> . g
    (1) g -> . sentencia g
    (2) g -> . ctrl g
    (3) g -> . empty
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (8) ctrl -> . if
    (9) ctrl -> . loop
    (30) empty -> .
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (61) varAsig -> . ID MULEQ valoresAsig
    (62) varAsig -> . ID DIVEQ valoresAsig
    (63) varAsig -> . ID MASEQ valoresAsig
    (64) varAsig -> . ID MENOSEQ valoresAsig
    (65) varAsig -> . ID = valoresAsig
    (66) varAsig -> . ID . ID = valoresAsig
    (13) if -> . IF ( expBool ) bloque else
    (10) loop -> . WHILE ( expBool ) bloque
    (11) loop -> . DO bloque WHILE ( expBool ) ;
    (12) loop -> . FOR ( varAsig ; expBool ; varsOps ) bloque
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (50) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( eMat )
    (26) funcBool -> . COLINEALES ( vec , vec )

    RETURN          shift and go to state 2
    $end            reduce using rule 30 (empty -> .)
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 6
    DO              shift and go to state 1
    FOR             shift and go to state 14
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    CAPITALIZAR     shift and go to state 23
    COLINEALES      shift and go to state 13

    funcBool                       shift and go to state 3
    ctrl                           shift and go to state 4
    funcInt                        shift and go to state 5
    loop                           shift and go to state 7
    vecVal                         shift and go to state 9
    if                             shift and go to state 10
    sentencia                      shift and go to state 11
    empty                          shift and go to state 25
    funcVoid                       shift and go to state 12
    func                           shift and go to state 15
    varAsig                        shift and go to state 18
    g                              shift and go to state 19
    funcString                     shift and go to state 20
    funcReturn                     shift and go to state 22
    varsOps                        shift and go to state 27
    varYVals                       shift and go to state 28

state 1

    (11) loop -> DO . bloque WHILE ( expBool ) ;
    (16) bloque -> . sentencia ;
    (17) bloque -> . { g }
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (61) varAsig -> . ID MULEQ valoresAsig
    (62) varAsig -> . ID DIVEQ valoresAsig
    (63) varAsig -> . ID MASEQ valoresAsig
    (64) varAsig -> . ID MENOSEQ valoresAsig
    (65) varAsig -> . ID = valoresAsig
    (66) varAsig -> . ID . ID = valoresAsig
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (50) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( eMat )
    (26) funcBool -> . COLINEALES ( vec , vec )

    {               shift and go to state 32
    RETURN          shift and go to state 2
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    ID              shift and go to state 16
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    CAPITALIZAR     shift and go to state 23
    COLINEALES      shift and go to state 13

    varAsig                        shift and go to state 18
    sentencia                      shift and go to state 31
    funcInt                        shift and go to state 5
    funcString                     shift and go to state 20
    funcVoid                       shift and go to state 12
    funcReturn                     shift and go to state 22
    funcBool                       shift and go to state 3
    varsOps                        shift and go to state 27
    func                           shift and go to state 15
    bloque                         shift and go to state 30
    varYVals                       shift and go to state 28
    vecVal                         shift and go to state 9

state 2

    (7) sentencia -> RETURN . ;

    ;               shift and go to state 33


state 3

    (22) funcReturn -> funcBool .

    ;               reduce using rule 22 (funcReturn -> funcBool .)


state 4

    (2) g -> ctrl . g
    (1) g -> . sentencia g
    (2) g -> . ctrl g
    (3) g -> . empty
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (8) ctrl -> . if
    (9) ctrl -> . loop
    (30) empty -> .
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (61) varAsig -> . ID MULEQ valoresAsig
    (62) varAsig -> . ID DIVEQ valoresAsig
    (63) varAsig -> . ID MASEQ valoresAsig
    (64) varAsig -> . ID MENOSEQ valoresAsig
    (65) varAsig -> . ID = valoresAsig
    (66) varAsig -> . ID . ID = valoresAsig
    (13) if -> . IF ( expBool ) bloque else
    (10) loop -> . WHILE ( expBool ) bloque
    (11) loop -> . DO bloque WHILE ( expBool ) ;
    (12) loop -> . FOR ( varAsig ; expBool ; varsOps ) bloque
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (50) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( eMat )
    (26) funcBool -> . COLINEALES ( vec , vec )

    RETURN          shift and go to state 2
    $end            reduce using rule 30 (empty -> .)
    }               reduce using rule 30 (empty -> .)
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 6
    DO              shift and go to state 1
    FOR             shift and go to state 14
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    CAPITALIZAR     shift and go to state 23
    COLINEALES      shift and go to state 13

    funcBool                       shift and go to state 3
    ctrl                           shift and go to state 4
    funcInt                        shift and go to state 5
    loop                           shift and go to state 7
    vecVal                         shift and go to state 9
    if                             shift and go to state 10
    sentencia                      shift and go to state 11
    empty                          shift and go to state 25
    funcVoid                       shift and go to state 12
    func                           shift and go to state 15
    varAsig                        shift and go to state 18
    g                              shift and go to state 34
    funcString                     shift and go to state 20
    funcReturn                     shift and go to state 22
    varsOps                        shift and go to state 27
    varYVals                       shift and go to state 28

state 5

    (20) funcReturn -> funcInt .

    ;               reduce using rule 20 (funcReturn -> funcInt .)


state 6

    (10) loop -> WHILE . ( expBool ) bloque

    (               shift and go to state 35


state 7

    (9) ctrl -> loop .

    RETURN          reduce using rule 9 (ctrl -> loop .)
    MENOSMENOS      reduce using rule 9 (ctrl -> loop .)
    MASMAS          reduce using rule 9 (ctrl -> loop .)
    ID              reduce using rule 9 (ctrl -> loop .)
    IF              reduce using rule 9 (ctrl -> loop .)
    WHILE           reduce using rule 9 (ctrl -> loop .)
    DO              reduce using rule 9 (ctrl -> loop .)
    FOR             reduce using rule 9 (ctrl -> loop .)
    PRINT           reduce using rule 9 (ctrl -> loop .)
    MULTIESCALAR    reduce using rule 9 (ctrl -> loop .)
    LENGTH          reduce using rule 9 (ctrl -> loop .)
    CAPITALIZAR     reduce using rule 9 (ctrl -> loop .)
    COLINEALES      reduce using rule 9 (ctrl -> loop .)
    $end            reduce using rule 9 (ctrl -> loop .)
    }               reduce using rule 9 (ctrl -> loop .)


state 8

    (27) funcVoid -> PRINT . ( valores )

    (               shift and go to state 36


state 9

    (49) varYVals -> vecVal .

    MASMAS          reduce using rule 49 (varYVals -> vecVal .)
    MENOSMENOS      reduce using rule 49 (varYVals -> vecVal .)
    +               reduce using rule 49 (varYVals -> vecVal .)
    -               reduce using rule 49 (varYVals -> vecVal .)
    *               reduce using rule 49 (varYVals -> vecVal .)
    /               reduce using rule 49 (varYVals -> vecVal .)
    %               reduce using rule 49 (varYVals -> vecVal .)
    ^               reduce using rule 49 (varYVals -> vecVal .)
    ,               reduce using rule 49 (varYVals -> vecVal .)
    ]               reduce using rule 49 (varYVals -> vecVal .)
    ?               reduce using rule 49 (varYVals -> vecVal .)
    OR              reduce using rule 49 (varYVals -> vecVal .)
    AND             reduce using rule 49 (varYVals -> vecVal .)
    EQEQ            reduce using rule 49 (varYVals -> vecVal .)
    DISTINTO        reduce using rule 49 (varYVals -> vecVal .)
    >               reduce using rule 49 (varYVals -> vecVal .)
    <               reduce using rule 49 (varYVals -> vecVal .)
    ;               reduce using rule 49 (varYVals -> vecVal .)
    )               reduce using rule 49 (varYVals -> vecVal .)
    }               reduce using rule 49 (varYVals -> vecVal .)
    :               reduce using rule 49 (varYVals -> vecVal .)


state 10

    (8) ctrl -> if .

    RETURN          reduce using rule 8 (ctrl -> if .)
    MENOSMENOS      reduce using rule 8 (ctrl -> if .)
    MASMAS          reduce using rule 8 (ctrl -> if .)
    ID              reduce using rule 8 (ctrl -> if .)
    IF              reduce using rule 8 (ctrl -> if .)
    WHILE           reduce using rule 8 (ctrl -> if .)
    DO              reduce using rule 8 (ctrl -> if .)
    FOR             reduce using rule 8 (ctrl -> if .)
    PRINT           reduce using rule 8 (ctrl -> if .)
    MULTIESCALAR    reduce using rule 8 (ctrl -> if .)
    LENGTH          reduce using rule 8 (ctrl -> if .)
    CAPITALIZAR     reduce using rule 8 (ctrl -> if .)
    COLINEALES      reduce using rule 8 (ctrl -> if .)
    $end            reduce using rule 8 (ctrl -> if .)
    }               reduce using rule 8 (ctrl -> if .)


state 11

    (1) g -> sentencia . g
    (1) g -> . sentencia g
    (2) g -> . ctrl g
    (3) g -> . empty
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (8) ctrl -> . if
    (9) ctrl -> . loop
    (30) empty -> .
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (61) varAsig -> . ID MULEQ valoresAsig
    (62) varAsig -> . ID DIVEQ valoresAsig
    (63) varAsig -> . ID MASEQ valoresAsig
    (64) varAsig -> . ID MENOSEQ valoresAsig
    (65) varAsig -> . ID = valoresAsig
    (66) varAsig -> . ID . ID = valoresAsig
    (13) if -> . IF ( expBool ) bloque else
    (10) loop -> . WHILE ( expBool ) bloque
    (11) loop -> . DO bloque WHILE ( expBool ) ;
    (12) loop -> . FOR ( varAsig ; expBool ; varsOps ) bloque
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (50) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( eMat )
    (26) funcBool -> . COLINEALES ( vec , vec )

    RETURN          shift and go to state 2
    $end            reduce using rule 30 (empty -> .)
    }               reduce using rule 30 (empty -> .)
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 6
    DO              shift and go to state 1
    FOR             shift and go to state 14
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    CAPITALIZAR     shift and go to state 23
    COLINEALES      shift and go to state 13

    funcBool                       shift and go to state 3
    ctrl                           shift and go to state 4
    funcInt                        shift and go to state 5
    loop                           shift and go to state 7
    vecVal                         shift and go to state 9
    if                             shift and go to state 10
    sentencia                      shift and go to state 11
    empty                          shift and go to state 25
    funcVoid                       shift and go to state 12
    func                           shift and go to state 15
    varAsig                        shift and go to state 18
    g                              shift and go to state 37
    funcString                     shift and go to state 20
    funcReturn                     shift and go to state 22
    varsOps                        shift and go to state 27
    varYVals                       shift and go to state 28

state 12

    (19) func -> funcVoid .

    ;               reduce using rule 19 (func -> funcVoid .)


state 13

    (26) funcBool -> COLINEALES . ( vec , vec )

    (               shift and go to state 38


state 14

    (12) loop -> FOR . ( varAsig ; expBool ; varsOps ) bloque

    (               shift and go to state 39


state 15

    (5) sentencia -> func . ;

    ;               shift and go to state 40


state 16

    (61) varAsig -> ID . MULEQ valoresAsig
    (62) varAsig -> ID . DIVEQ valoresAsig
    (63) varAsig -> ID . MASEQ valoresAsig
    (64) varAsig -> ID . MENOSEQ valoresAsig
    (65) varAsig -> ID . = valoresAsig
    (66) varAsig -> ID . . ID = valoresAsig
    (48) varYVals -> ID .
    (50) vecVal -> ID . m
    (51) m -> . [ INT ]
    (52) m -> . [ INT ] m

    MULEQ           shift and go to state 45
    DIVEQ           shift and go to state 48
    MASEQ           shift and go to state 42
    MENOSEQ         shift and go to state 41
    =               shift and go to state 47
    .               shift and go to state 44
    MASMAS          reduce using rule 48 (varYVals -> ID .)
    MENOSMENOS      reduce using rule 48 (varYVals -> ID .)
    [               shift and go to state 46

    m                              shift and go to state 43

state 17

    (13) if -> IF . ( expBool ) bloque else

    (               shift and go to state 49


state 18

    (6) sentencia -> varAsig . ;

    ;               shift and go to state 50


state 19

    (0) S' -> g .



state 20

    (21) funcReturn -> funcString .

    ;               reduce using rule 21 (funcReturn -> funcString .)


state 21

    (23) funcInt -> MULTIESCALAR . ( vec , eMat , param )

    (               shift and go to state 51


state 22

    (18) func -> funcReturn .

    ;               reduce using rule 18 (func -> funcReturn .)


state 23

    (25) funcString -> CAPITALIZAR . ( eMat )

    (               shift and go to state 52


state 24

    (24) funcInt -> LENGTH . ( vec )

    (               shift and go to state 53


state 25

    (3) g -> empty .

    $end            reduce using rule 3 (g -> empty .)
    }               reduce using rule 3 (g -> empty .)


state 26

    (57) varsOps -> MASMAS . varYVals
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (50) vecVal -> . ID m

    ID              shift and go to state 55

    varYVals                       shift and go to state 54
    vecVal                         shift and go to state 9

state 27

    (4) sentencia -> varsOps . ;

    ;               shift and go to state 56


state 28

    (58) varsOps -> varYVals . MASMAS
    (59) varsOps -> varYVals . MENOSMENOS

    MASMAS          shift and go to state 57
    MENOSMENOS      shift and go to state 58


state 29

    (56) varsOps -> MENOSMENOS . varYVals
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (50) vecVal -> . ID m

    ID              shift and go to state 55

    varYVals                       shift and go to state 59
    vecVal                         shift and go to state 9

state 30

    (11) loop -> DO bloque . WHILE ( expBool ) ;

    WHILE           shift and go to state 60


state 31

    (16) bloque -> sentencia . ;

    ;               shift and go to state 61


state 32

    (17) bloque -> { . g }
    (1) g -> . sentencia g
    (2) g -> . ctrl g
    (3) g -> . empty
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (8) ctrl -> . if
    (9) ctrl -> . loop
    (30) empty -> .
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (61) varAsig -> . ID MULEQ valoresAsig
    (62) varAsig -> . ID DIVEQ valoresAsig
    (63) varAsig -> . ID MASEQ valoresAsig
    (64) varAsig -> . ID MENOSEQ valoresAsig
    (65) varAsig -> . ID = valoresAsig
    (66) varAsig -> . ID . ID = valoresAsig
    (13) if -> . IF ( expBool ) bloque else
    (10) loop -> . WHILE ( expBool ) bloque
    (11) loop -> . DO bloque WHILE ( expBool ) ;
    (12) loop -> . FOR ( varAsig ; expBool ; varsOps ) bloque
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (50) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( eMat )
    (26) funcBool -> . COLINEALES ( vec , vec )

    RETURN          shift and go to state 2
    }               reduce using rule 30 (empty -> .)
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 6
    DO              shift and go to state 1
    FOR             shift and go to state 14
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    CAPITALIZAR     shift and go to state 23
    COLINEALES      shift and go to state 13

    funcBool                       shift and go to state 3
    ctrl                           shift and go to state 4
    funcInt                        shift and go to state 5
    loop                           shift and go to state 7
    vecVal                         shift and go to state 9
    if                             shift and go to state 10
    sentencia                      shift and go to state 11
    empty                          shift and go to state 25
    funcVoid                       shift and go to state 12
    func                           shift and go to state 15
    varAsig                        shift and go to state 18
    g                              shift and go to state 62
    funcString                     shift and go to state 20
    funcReturn                     shift and go to state 22
    varsOps                        shift and go to state 27
    varYVals                       shift and go to state 28

state 33

    (7) sentencia -> RETURN ; .

    ;               reduce using rule 7 (sentencia -> RETURN ; .)
    RETURN          reduce using rule 7 (sentencia -> RETURN ; .)
    MENOSMENOS      reduce using rule 7 (sentencia -> RETURN ; .)
    MASMAS          reduce using rule 7 (sentencia -> RETURN ; .)
    ID              reduce using rule 7 (sentencia -> RETURN ; .)
    IF              reduce using rule 7 (sentencia -> RETURN ; .)
    WHILE           reduce using rule 7 (sentencia -> RETURN ; .)
    DO              reduce using rule 7 (sentencia -> RETURN ; .)
    FOR             reduce using rule 7 (sentencia -> RETURN ; .)
    PRINT           reduce using rule 7 (sentencia -> RETURN ; .)
    MULTIESCALAR    reduce using rule 7 (sentencia -> RETURN ; .)
    LENGTH          reduce using rule 7 (sentencia -> RETURN ; .)
    CAPITALIZAR     reduce using rule 7 (sentencia -> RETURN ; .)
    COLINEALES      reduce using rule 7 (sentencia -> RETURN ; .)
    $end            reduce using rule 7 (sentencia -> RETURN ; .)
    }               reduce using rule 7 (sentencia -> RETURN ; .)


state 34

    (2) g -> ctrl g .

    $end            reduce using rule 2 (g -> ctrl g .)
    }               reduce using rule 2 (g -> ctrl g .)


state 35

    (10) loop -> WHILE ( . expBool ) bloque
    (110) expBool -> . or ? expBool : expBool
    (111) expBool -> . valoresBool ? expBool : expBool
    (112) expBool -> . or ? valoresBool : valoresBool
    (113) expBool -> . valoresBool ? valoresBool : valoresBool
    (114) expBool -> . or
    (115) or -> . or OR and
    (116) or -> . valoresBool OR and
    (117) or -> . or OR valoresBool
    (118) or -> . valoresBool OR valoresBool
    (119) or -> . and
    (106) valoresBool -> . BOOL
    (107) valoresBool -> . funcBool
    (108) valoresBool -> . varYVals
    (109) valoresBool -> . varsOps
    (120) and -> . and AND eq
    (121) and -> . valoresBool AND eq
    (122) and -> . and AND valoresBool
    (123) and -> . valoresBool AND valoresBool
    (124) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (125) eq -> . eq EQEQ parenBool
    (126) eq -> . eq DISTINTO parenBool
    (127) eq -> . valoresBool EQEQ parenBool
    (128) eq -> . valoresBool DISTINTO parenBool
    (129) eq -> . eq EQEQ valoresBool
    (130) eq -> . eq DISTINTO valoresBool
    (131) eq -> . valoresBool EQEQ valoresBool
    (132) eq -> . valoresBool DISTINTO valoresBool
    (133) eq -> . mayor
    (50) vecVal -> . ID m
    (137) mayor -> . tCompare > tCompare
    (138) mayor -> . menor
    (134) tCompare -> . eMat
    (135) tCompare -> . varsOps
    (136) tCompare -> . varYVals
    (139) menor -> . tCompare < tCompare
    (140) menor -> . not
    (73) eMat -> . eMat + p
    (74) eMat -> . eMat - p
    (75) eMat -> . valoresMat + p
    (76) eMat -> . valoresMat - p
    (77) eMat -> . eMat + valoresMat
    (78) eMat -> . eMat - valoresMat
    (79) eMat -> . valoresMat + valoresMat
    (80) eMat -> . valoresMat - valoresMat
    (81) eMat -> . p
    (141) not -> . NOT not
    (142) not -> . NOT valoresBool
    (143) not -> . parenBool
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (82) p -> . p * exp
    (83) p -> . p / exp
    (84) p -> . p % exp
    (85) p -> . valoresMat * exp
    (86) p -> . valoresMat / exp
    (87) p -> . valoresMat % exp
    (88) p -> . p * valoresMat
    (89) p -> . p / valoresMat
    (90) p -> . p % valoresMat
    (91) p -> . valoresMat * valoresMat
    (92) p -> . valoresMat / valoresMat
    (93) p -> . valoresMat % valoresMat
    (94) p -> . exp
    (144) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (105) paren -> . ( eMat )

    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 87
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    (               shift and go to state 72
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 74
    +               shift and go to state 73

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 71
    vecVal                         shift and go to state 9
    paren                          shift and go to state 77
    iSing                          shift and go to state 75
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    varYVals                       shift and go to state 88
    or                             shift and go to state 89
    p                              shift and go to state 82
    varsOps                        shift and go to state 84
    exp                            shift and go to state 85
    mayor                          shift and go to state 66
    parenBool                      shift and go to state 86
    expBool                        shift and go to state 90

state 36

    (27) funcVoid -> PRINT ( . valores )
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . reg
    (37) valores -> . INT
    (38) valores -> . STRING
    (39) valores -> . BOOL
    (40) valores -> . varYVals
    (41) valores -> . varsOps
    (42) valores -> . vec
    (43) valores -> . ID . valoresCampos
    (44) valores -> . RES
    (73) eMat -> . eMat + p
    (74) eMat -> . eMat - p
    (75) eMat -> . valoresMat + p
    (76) eMat -> . valoresMat - p
    (77) eMat -> . eMat + valoresMat
    (78) eMat -> . eMat - valoresMat
    (79) eMat -> . valoresMat + valoresMat
    (80) eMat -> . valoresMat - valoresMat
    (81) eMat -> . p
    (110) expBool -> . or ? expBool : expBool
    (111) expBool -> . valoresBool ? expBool : expBool
    (112) expBool -> . or ? valoresBool : valoresBool
    (113) expBool -> . valoresBool ? valoresBool : valoresBool
    (114) expBool -> . or
    (53) reg -> . { campos }
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (31) vec -> . [ elem ]
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (82) p -> . p * exp
    (83) p -> . p / exp
    (84) p -> . p % exp
    (85) p -> . valoresMat * exp
    (86) p -> . valoresMat / exp
    (87) p -> . valoresMat % exp
    (88) p -> . p * valoresMat
    (89) p -> . p / valoresMat
    (90) p -> . p % valoresMat
    (91) p -> . valoresMat * valoresMat
    (92) p -> . valoresMat / valoresMat
    (93) p -> . valoresMat % valoresMat
    (94) p -> . exp
    (115) or -> . or OR and
    (116) or -> . valoresBool OR and
    (117) or -> . or OR valoresBool
    (118) or -> . valoresBool OR valoresBool
    (119) or -> . and
    (106) valoresBool -> . BOOL
    (107) valoresBool -> . funcBool
    (108) valoresBool -> . varYVals
    (109) valoresBool -> . varsOps
    (50) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (120) and -> . and AND eq
    (121) and -> . valoresBool AND eq
    (122) and -> . and AND valoresBool
    (123) and -> . valoresBool AND valoresBool
    (124) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (125) eq -> . eq EQEQ parenBool
    (126) eq -> . eq DISTINTO parenBool
    (127) eq -> . valoresBool EQEQ parenBool
    (128) eq -> . valoresBool DISTINTO parenBool
    (129) eq -> . eq EQEQ valoresBool
    (130) eq -> . eq DISTINTO valoresBool
    (131) eq -> . valoresBool EQEQ valoresBool
    (132) eq -> . valoresBool DISTINTO valoresBool
    (133) eq -> . mayor
    (105) paren -> . ( eMat )
    (137) mayor -> . tCompare > tCompare
    (138) mayor -> . menor
    (134) tCompare -> . eMat
    (135) tCompare -> . varsOps
    (136) tCompare -> . varYVals
    (139) menor -> . tCompare < tCompare
    (140) menor -> . not
    (141) not -> . NOT not
    (142) not -> . NOT valoresBool
    (143) not -> . parenBool
    (144) parenBool -> . ( expBool )

    INT             shift and go to state 99
    STRING          shift and go to state 96
    BOOL            shift and go to state 101
    ID              shift and go to state 98
    RES             shift and go to state 91
    {               shift and go to state 103
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    [               shift and go to state 97
    FLOAT           shift and go to state 80
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 93
    NOT             shift and go to state 87

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    mayor                          shift and go to state 66
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 92
    vecVal                         shift and go to state 9
    vec                            shift and go to state 94
    paren                          shift and go to state 77
    reg                            shift and go to state 95
    varsOps                        shift and go to state 102
    exp                            shift and go to state 85
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    valores                        shift and go to state 100
    parenBool                      shift and go to state 86
    p                              shift and go to state 82
    iSing                          shift and go to state 75
    varYVals                       shift and go to state 104
    or                             shift and go to state 89
    expBool                        shift and go to state 105

state 37

    (1) g -> sentencia g .

    $end            reduce using rule 1 (g -> sentencia g .)
    }               reduce using rule 1 (g -> sentencia g .)


state 38

    (26) funcBool -> COLINEALES ( . vec , vec )
    (31) vec -> . [ elem ]

    [               shift and go to state 97

    vec                            shift and go to state 106

state 39

    (12) loop -> FOR ( . varAsig ; expBool ; varsOps ) bloque
    (61) varAsig -> . ID MULEQ valoresAsig
    (62) varAsig -> . ID DIVEQ valoresAsig
    (63) varAsig -> . ID MASEQ valoresAsig
    (64) varAsig -> . ID MENOSEQ valoresAsig
    (65) varAsig -> . ID = valoresAsig
    (66) varAsig -> . ID . ID = valoresAsig

    ID              shift and go to state 108

    varAsig                        shift and go to state 107

state 40

    (5) sentencia -> func ; .

    ;               reduce using rule 5 (sentencia -> func ; .)
    RETURN          reduce using rule 5 (sentencia -> func ; .)
    MENOSMENOS      reduce using rule 5 (sentencia -> func ; .)
    MASMAS          reduce using rule 5 (sentencia -> func ; .)
    ID              reduce using rule 5 (sentencia -> func ; .)
    IF              reduce using rule 5 (sentencia -> func ; .)
    WHILE           reduce using rule 5 (sentencia -> func ; .)
    DO              reduce using rule 5 (sentencia -> func ; .)
    FOR             reduce using rule 5 (sentencia -> func ; .)
    PRINT           reduce using rule 5 (sentencia -> func ; .)
    MULTIESCALAR    reduce using rule 5 (sentencia -> func ; .)
    LENGTH          reduce using rule 5 (sentencia -> func ; .)
    CAPITALIZAR     reduce using rule 5 (sentencia -> func ; .)
    COLINEALES      reduce using rule 5 (sentencia -> func ; .)
    $end            reduce using rule 5 (sentencia -> func ; .)
    }               reduce using rule 5 (sentencia -> func ; .)


state 41

    (64) varAsig -> ID MENOSEQ . valoresAsig
    (60) valoresAsig -> . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . reg
    (37) valores -> . INT
    (38) valores -> . STRING
    (39) valores -> . BOOL
    (40) valores -> . varYVals
    (41) valores -> . varsOps
    (42) valores -> . vec
    (43) valores -> . ID . valoresCampos
    (44) valores -> . RES
    (73) eMat -> . eMat + p
    (74) eMat -> . eMat - p
    (75) eMat -> . valoresMat + p
    (76) eMat -> . valoresMat - p
    (77) eMat -> . eMat + valoresMat
    (78) eMat -> . eMat - valoresMat
    (79) eMat -> . valoresMat + valoresMat
    (80) eMat -> . valoresMat - valoresMat
    (81) eMat -> . p
    (110) expBool -> . or ? expBool : expBool
    (111) expBool -> . valoresBool ? expBool : expBool
    (112) expBool -> . or ? valoresBool : valoresBool
    (113) expBool -> . valoresBool ? valoresBool : valoresBool
    (114) expBool -> . or
    (53) reg -> . { campos }
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (31) vec -> . [ elem ]
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (82) p -> . p * exp
    (83) p -> . p / exp
    (84) p -> . p % exp
    (85) p -> . valoresMat * exp
    (86) p -> . valoresMat / exp
    (87) p -> . valoresMat % exp
    (88) p -> . p * valoresMat
    (89) p -> . p / valoresMat
    (90) p -> . p % valoresMat
    (91) p -> . valoresMat * valoresMat
    (92) p -> . valoresMat / valoresMat
    (93) p -> . valoresMat % valoresMat
    (94) p -> . exp
    (115) or -> . or OR and
    (116) or -> . valoresBool OR and
    (117) or -> . or OR valoresBool
    (118) or -> . valoresBool OR valoresBool
    (119) or -> . and
    (106) valoresBool -> . BOOL
    (107) valoresBool -> . funcBool
    (108) valoresBool -> . varYVals
    (109) valoresBool -> . varsOps
    (50) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (120) and -> . and AND eq
    (121) and -> . valoresBool AND eq
    (122) and -> . and AND valoresBool
    (123) and -> . valoresBool AND valoresBool
    (124) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (125) eq -> . eq EQEQ parenBool
    (126) eq -> . eq DISTINTO parenBool
    (127) eq -> . valoresBool EQEQ parenBool
    (128) eq -> . valoresBool DISTINTO parenBool
    (129) eq -> . eq EQEQ valoresBool
    (130) eq -> . eq DISTINTO valoresBool
    (131) eq -> . valoresBool EQEQ valoresBool
    (132) eq -> . valoresBool DISTINTO valoresBool
    (133) eq -> . mayor
    (105) paren -> . ( eMat )
    (137) mayor -> . tCompare > tCompare
    (138) mayor -> . menor
    (134) tCompare -> . eMat
    (135) tCompare -> . varsOps
    (136) tCompare -> . varYVals
    (139) menor -> . tCompare < tCompare
    (140) menor -> . not
    (141) not -> . NOT not
    (142) not -> . NOT valoresBool
    (143) not -> . parenBool
    (144) parenBool -> . ( expBool )

    INT             shift and go to state 99
    STRING          shift and go to state 96
    BOOL            shift and go to state 101
    ID              shift and go to state 98
    RES             shift and go to state 91
    {               shift and go to state 103
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    [               shift and go to state 97
    FLOAT           shift and go to state 80
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 93
    NOT             shift and go to state 87

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    mayor                          shift and go to state 66
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 92
    vecVal                         shift and go to state 9
    vec                            shift and go to state 94
    paren                          shift and go to state 77
    reg                            shift and go to state 95
    iSing                          shift and go to state 75
    exp                            shift and go to state 85
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    valoresAsig                    shift and go to state 109
    valores                        shift and go to state 110
    parenBool                      shift and go to state 86
    p                              shift and go to state 82
    varsOps                        shift and go to state 102
    varYVals                       shift and go to state 104
    or                             shift and go to state 89
    expBool                        shift and go to state 105

state 42

    (63) varAsig -> ID MASEQ . valoresAsig
    (60) valoresAsig -> . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . reg
    (37) valores -> . INT
    (38) valores -> . STRING
    (39) valores -> . BOOL
    (40) valores -> . varYVals
    (41) valores -> . varsOps
    (42) valores -> . vec
    (43) valores -> . ID . valoresCampos
    (44) valores -> . RES
    (73) eMat -> . eMat + p
    (74) eMat -> . eMat - p
    (75) eMat -> . valoresMat + p
    (76) eMat -> . valoresMat - p
    (77) eMat -> . eMat + valoresMat
    (78) eMat -> . eMat - valoresMat
    (79) eMat -> . valoresMat + valoresMat
    (80) eMat -> . valoresMat - valoresMat
    (81) eMat -> . p
    (110) expBool -> . or ? expBool : expBool
    (111) expBool -> . valoresBool ? expBool : expBool
    (112) expBool -> . or ? valoresBool : valoresBool
    (113) expBool -> . valoresBool ? valoresBool : valoresBool
    (114) expBool -> . or
    (53) reg -> . { campos }
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (31) vec -> . [ elem ]
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (82) p -> . p * exp
    (83) p -> . p / exp
    (84) p -> . p % exp
    (85) p -> . valoresMat * exp
    (86) p -> . valoresMat / exp
    (87) p -> . valoresMat % exp
    (88) p -> . p * valoresMat
    (89) p -> . p / valoresMat
    (90) p -> . p % valoresMat
    (91) p -> . valoresMat * valoresMat
    (92) p -> . valoresMat / valoresMat
    (93) p -> . valoresMat % valoresMat
    (94) p -> . exp
    (115) or -> . or OR and
    (116) or -> . valoresBool OR and
    (117) or -> . or OR valoresBool
    (118) or -> . valoresBool OR valoresBool
    (119) or -> . and
    (106) valoresBool -> . BOOL
    (107) valoresBool -> . funcBool
    (108) valoresBool -> . varYVals
    (109) valoresBool -> . varsOps
    (50) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (120) and -> . and AND eq
    (121) and -> . valoresBool AND eq
    (122) and -> . and AND valoresBool
    (123) and -> . valoresBool AND valoresBool
    (124) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (125) eq -> . eq EQEQ parenBool
    (126) eq -> . eq DISTINTO parenBool
    (127) eq -> . valoresBool EQEQ parenBool
    (128) eq -> . valoresBool DISTINTO parenBool
    (129) eq -> . eq EQEQ valoresBool
    (130) eq -> . eq DISTINTO valoresBool
    (131) eq -> . valoresBool EQEQ valoresBool
    (132) eq -> . valoresBool DISTINTO valoresBool
    (133) eq -> . mayor
    (105) paren -> . ( eMat )
    (137) mayor -> . tCompare > tCompare
    (138) mayor -> . menor
    (134) tCompare -> . eMat
    (135) tCompare -> . varsOps
    (136) tCompare -> . varYVals
    (139) menor -> . tCompare < tCompare
    (140) menor -> . not
    (141) not -> . NOT not
    (142) not -> . NOT valoresBool
    (143) not -> . parenBool
    (144) parenBool -> . ( expBool )

    INT             shift and go to state 99
    STRING          shift and go to state 96
    BOOL            shift and go to state 101
    ID              shift and go to state 98
    RES             shift and go to state 91
    {               shift and go to state 103
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    [               shift and go to state 97
    FLOAT           shift and go to state 80
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 93
    NOT             shift and go to state 87

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    mayor                          shift and go to state 66
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 92
    vecVal                         shift and go to state 9
    vec                            shift and go to state 94
    paren                          shift and go to state 77
    reg                            shift and go to state 95
    iSing                          shift and go to state 75
    exp                            shift and go to state 85
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    valoresAsig                    shift and go to state 111
    valores                        shift and go to state 110
    parenBool                      shift and go to state 86
    p                              shift and go to state 82
    varsOps                        shift and go to state 102
    varYVals                       shift and go to state 104
    or                             shift and go to state 89
    expBool                        shift and go to state 105

state 43

    (50) vecVal -> ID m .

    MASMAS          reduce using rule 50 (vecVal -> ID m .)
    MENOSMENOS      reduce using rule 50 (vecVal -> ID m .)
    )               reduce using rule 50 (vecVal -> ID m .)
    +               reduce using rule 50 (vecVal -> ID m .)
    -               reduce using rule 50 (vecVal -> ID m .)
    *               reduce using rule 50 (vecVal -> ID m .)
    /               reduce using rule 50 (vecVal -> ID m .)
    %               reduce using rule 50 (vecVal -> ID m .)
    ^               reduce using rule 50 (vecVal -> ID m .)
    ?               reduce using rule 50 (vecVal -> ID m .)
    OR              reduce using rule 50 (vecVal -> ID m .)
    AND             reduce using rule 50 (vecVal -> ID m .)
    EQEQ            reduce using rule 50 (vecVal -> ID m .)
    DISTINTO        reduce using rule 50 (vecVal -> ID m .)
    >               reduce using rule 50 (vecVal -> ID m .)
    <               reduce using rule 50 (vecVal -> ID m .)
    ;               reduce using rule 50 (vecVal -> ID m .)
    ,               reduce using rule 50 (vecVal -> ID m .)
    ]               reduce using rule 50 (vecVal -> ID m .)
    }               reduce using rule 50 (vecVal -> ID m .)
    :               reduce using rule 50 (vecVal -> ID m .)


state 44

    (66) varAsig -> ID . . ID = valoresAsig

    ID              shift and go to state 112


state 45

    (61) varAsig -> ID MULEQ . valoresAsig
    (60) valoresAsig -> . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . reg
    (37) valores -> . INT
    (38) valores -> . STRING
    (39) valores -> . BOOL
    (40) valores -> . varYVals
    (41) valores -> . varsOps
    (42) valores -> . vec
    (43) valores -> . ID . valoresCampos
    (44) valores -> . RES
    (73) eMat -> . eMat + p
    (74) eMat -> . eMat - p
    (75) eMat -> . valoresMat + p
    (76) eMat -> . valoresMat - p
    (77) eMat -> . eMat + valoresMat
    (78) eMat -> . eMat - valoresMat
    (79) eMat -> . valoresMat + valoresMat
    (80) eMat -> . valoresMat - valoresMat
    (81) eMat -> . p
    (110) expBool -> . or ? expBool : expBool
    (111) expBool -> . valoresBool ? expBool : expBool
    (112) expBool -> . or ? valoresBool : valoresBool
    (113) expBool -> . valoresBool ? valoresBool : valoresBool
    (114) expBool -> . or
    (53) reg -> . { campos }
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (31) vec -> . [ elem ]
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (82) p -> . p * exp
    (83) p -> . p / exp
    (84) p -> . p % exp
    (85) p -> . valoresMat * exp
    (86) p -> . valoresMat / exp
    (87) p -> . valoresMat % exp
    (88) p -> . p * valoresMat
    (89) p -> . p / valoresMat
    (90) p -> . p % valoresMat
    (91) p -> . valoresMat * valoresMat
    (92) p -> . valoresMat / valoresMat
    (93) p -> . valoresMat % valoresMat
    (94) p -> . exp
    (115) or -> . or OR and
    (116) or -> . valoresBool OR and
    (117) or -> . or OR valoresBool
    (118) or -> . valoresBool OR valoresBool
    (119) or -> . and
    (106) valoresBool -> . BOOL
    (107) valoresBool -> . funcBool
    (108) valoresBool -> . varYVals
    (109) valoresBool -> . varsOps
    (50) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (120) and -> . and AND eq
    (121) and -> . valoresBool AND eq
    (122) and -> . and AND valoresBool
    (123) and -> . valoresBool AND valoresBool
    (124) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (125) eq -> . eq EQEQ parenBool
    (126) eq -> . eq DISTINTO parenBool
    (127) eq -> . valoresBool EQEQ parenBool
    (128) eq -> . valoresBool DISTINTO parenBool
    (129) eq -> . eq EQEQ valoresBool
    (130) eq -> . eq DISTINTO valoresBool
    (131) eq -> . valoresBool EQEQ valoresBool
    (132) eq -> . valoresBool DISTINTO valoresBool
    (133) eq -> . mayor
    (105) paren -> . ( eMat )
    (137) mayor -> . tCompare > tCompare
    (138) mayor -> . menor
    (134) tCompare -> . eMat
    (135) tCompare -> . varsOps
    (136) tCompare -> . varYVals
    (139) menor -> . tCompare < tCompare
    (140) menor -> . not
    (141) not -> . NOT not
    (142) not -> . NOT valoresBool
    (143) not -> . parenBool
    (144) parenBool -> . ( expBool )

    INT             shift and go to state 99
    STRING          shift and go to state 96
    BOOL            shift and go to state 101
    ID              shift and go to state 98
    RES             shift and go to state 91
    {               shift and go to state 103
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    [               shift and go to state 97
    FLOAT           shift and go to state 80
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 93
    NOT             shift and go to state 87

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    mayor                          shift and go to state 66
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 92
    vecVal                         shift and go to state 9
    vec                            shift and go to state 94
    paren                          shift and go to state 77
    reg                            shift and go to state 95
    iSing                          shift and go to state 75
    exp                            shift and go to state 85
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    valoresAsig                    shift and go to state 113
    valores                        shift and go to state 110
    parenBool                      shift and go to state 86
    p                              shift and go to state 82
    varsOps                        shift and go to state 102
    varYVals                       shift and go to state 104
    or                             shift and go to state 89
    expBool                        shift and go to state 105

state 46

    (51) m -> [ . INT ]
    (52) m -> [ . INT ] m

    INT             shift and go to state 114


state 47

    (65) varAsig -> ID = . valoresAsig
    (60) valoresAsig -> . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . reg
    (37) valores -> . INT
    (38) valores -> . STRING
    (39) valores -> . BOOL
    (40) valores -> . varYVals
    (41) valores -> . varsOps
    (42) valores -> . vec
    (43) valores -> . ID . valoresCampos
    (44) valores -> . RES
    (73) eMat -> . eMat + p
    (74) eMat -> . eMat - p
    (75) eMat -> . valoresMat + p
    (76) eMat -> . valoresMat - p
    (77) eMat -> . eMat + valoresMat
    (78) eMat -> . eMat - valoresMat
    (79) eMat -> . valoresMat + valoresMat
    (80) eMat -> . valoresMat - valoresMat
    (81) eMat -> . p
    (110) expBool -> . or ? expBool : expBool
    (111) expBool -> . valoresBool ? expBool : expBool
    (112) expBool -> . or ? valoresBool : valoresBool
    (113) expBool -> . valoresBool ? valoresBool : valoresBool
    (114) expBool -> . or
    (53) reg -> . { campos }
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (31) vec -> . [ elem ]
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (82) p -> . p * exp
    (83) p -> . p / exp
    (84) p -> . p % exp
    (85) p -> . valoresMat * exp
    (86) p -> . valoresMat / exp
    (87) p -> . valoresMat % exp
    (88) p -> . p * valoresMat
    (89) p -> . p / valoresMat
    (90) p -> . p % valoresMat
    (91) p -> . valoresMat * valoresMat
    (92) p -> . valoresMat / valoresMat
    (93) p -> . valoresMat % valoresMat
    (94) p -> . exp
    (115) or -> . or OR and
    (116) or -> . valoresBool OR and
    (117) or -> . or OR valoresBool
    (118) or -> . valoresBool OR valoresBool
    (119) or -> . and
    (106) valoresBool -> . BOOL
    (107) valoresBool -> . funcBool
    (108) valoresBool -> . varYVals
    (109) valoresBool -> . varsOps
    (50) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (120) and -> . and AND eq
    (121) and -> . valoresBool AND eq
    (122) and -> . and AND valoresBool
    (123) and -> . valoresBool AND valoresBool
    (124) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (125) eq -> . eq EQEQ parenBool
    (126) eq -> . eq DISTINTO parenBool
    (127) eq -> . valoresBool EQEQ parenBool
    (128) eq -> . valoresBool DISTINTO parenBool
    (129) eq -> . eq EQEQ valoresBool
    (130) eq -> . eq DISTINTO valoresBool
    (131) eq -> . valoresBool EQEQ valoresBool
    (132) eq -> . valoresBool DISTINTO valoresBool
    (133) eq -> . mayor
    (105) paren -> . ( eMat )
    (137) mayor -> . tCompare > tCompare
    (138) mayor -> . menor
    (134) tCompare -> . eMat
    (135) tCompare -> . varsOps
    (136) tCompare -> . varYVals
    (139) menor -> . tCompare < tCompare
    (140) menor -> . not
    (141) not -> . NOT not
    (142) not -> . NOT valoresBool
    (143) not -> . parenBool
    (144) parenBool -> . ( expBool )

    INT             shift and go to state 99
    STRING          shift and go to state 96
    BOOL            shift and go to state 101
    ID              shift and go to state 98
    RES             shift and go to state 91
    {               shift and go to state 103
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    [               shift and go to state 97
    FLOAT           shift and go to state 80
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 93
    NOT             shift and go to state 87

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    mayor                          shift and go to state 66
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 92
    vecVal                         shift and go to state 9
    vec                            shift and go to state 94
    paren                          shift and go to state 77
    reg                            shift and go to state 95
    iSing                          shift and go to state 75
    exp                            shift and go to state 85
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    valoresAsig                    shift and go to state 115
    valores                        shift and go to state 110
    parenBool                      shift and go to state 86
    p                              shift and go to state 82
    varsOps                        shift and go to state 102
    varYVals                       shift and go to state 104
    or                             shift and go to state 89
    expBool                        shift and go to state 105

state 48

    (62) varAsig -> ID DIVEQ . valoresAsig
    (60) valoresAsig -> . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . reg
    (37) valores -> . INT
    (38) valores -> . STRING
    (39) valores -> . BOOL
    (40) valores -> . varYVals
    (41) valores -> . varsOps
    (42) valores -> . vec
    (43) valores -> . ID . valoresCampos
    (44) valores -> . RES
    (73) eMat -> . eMat + p
    (74) eMat -> . eMat - p
    (75) eMat -> . valoresMat + p
    (76) eMat -> . valoresMat - p
    (77) eMat -> . eMat + valoresMat
    (78) eMat -> . eMat - valoresMat
    (79) eMat -> . valoresMat + valoresMat
    (80) eMat -> . valoresMat - valoresMat
    (81) eMat -> . p
    (110) expBool -> . or ? expBool : expBool
    (111) expBool -> . valoresBool ? expBool : expBool
    (112) expBool -> . or ? valoresBool : valoresBool
    (113) expBool -> . valoresBool ? valoresBool : valoresBool
    (114) expBool -> . or
    (53) reg -> . { campos }
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (31) vec -> . [ elem ]
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (82) p -> . p * exp
    (83) p -> . p / exp
    (84) p -> . p % exp
    (85) p -> . valoresMat * exp
    (86) p -> . valoresMat / exp
    (87) p -> . valoresMat % exp
    (88) p -> . p * valoresMat
    (89) p -> . p / valoresMat
    (90) p -> . p % valoresMat
    (91) p -> . valoresMat * valoresMat
    (92) p -> . valoresMat / valoresMat
    (93) p -> . valoresMat % valoresMat
    (94) p -> . exp
    (115) or -> . or OR and
    (116) or -> . valoresBool OR and
    (117) or -> . or OR valoresBool
    (118) or -> . valoresBool OR valoresBool
    (119) or -> . and
    (106) valoresBool -> . BOOL
    (107) valoresBool -> . funcBool
    (108) valoresBool -> . varYVals
    (109) valoresBool -> . varsOps
    (50) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (120) and -> . and AND eq
    (121) and -> . valoresBool AND eq
    (122) and -> . and AND valoresBool
    (123) and -> . valoresBool AND valoresBool
    (124) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (125) eq -> . eq EQEQ parenBool
    (126) eq -> . eq DISTINTO parenBool
    (127) eq -> . valoresBool EQEQ parenBool
    (128) eq -> . valoresBool DISTINTO parenBool
    (129) eq -> . eq EQEQ valoresBool
    (130) eq -> . eq DISTINTO valoresBool
    (131) eq -> . valoresBool EQEQ valoresBool
    (132) eq -> . valoresBool DISTINTO valoresBool
    (133) eq -> . mayor
    (105) paren -> . ( eMat )
    (137) mayor -> . tCompare > tCompare
    (138) mayor -> . menor
    (134) tCompare -> . eMat
    (135) tCompare -> . varsOps
    (136) tCompare -> . varYVals
    (139) menor -> . tCompare < tCompare
    (140) menor -> . not
    (141) not -> . NOT not
    (142) not -> . NOT valoresBool
    (143) not -> . parenBool
    (144) parenBool -> . ( expBool )

    INT             shift and go to state 99
    STRING          shift and go to state 96
    BOOL            shift and go to state 101
    ID              shift and go to state 98
    RES             shift and go to state 91
    {               shift and go to state 103
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    [               shift and go to state 97
    FLOAT           shift and go to state 80
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 93
    NOT             shift and go to state 87

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    mayor                          shift and go to state 66
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 92
    vecVal                         shift and go to state 9
    vec                            shift and go to state 94
    paren                          shift and go to state 77
    reg                            shift and go to state 95
    iSing                          shift and go to state 75
    exp                            shift and go to state 85
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    valoresAsig                    shift and go to state 116
    valores                        shift and go to state 110
    parenBool                      shift and go to state 86
    p                              shift and go to state 82
    varsOps                        shift and go to state 102
    varYVals                       shift and go to state 104
    or                             shift and go to state 89
    expBool                        shift and go to state 105

state 49

    (13) if -> IF ( . expBool ) bloque else
    (110) expBool -> . or ? expBool : expBool
    (111) expBool -> . valoresBool ? expBool : expBool
    (112) expBool -> . or ? valoresBool : valoresBool
    (113) expBool -> . valoresBool ? valoresBool : valoresBool
    (114) expBool -> . or
    (115) or -> . or OR and
    (116) or -> . valoresBool OR and
    (117) or -> . or OR valoresBool
    (118) or -> . valoresBool OR valoresBool
    (119) or -> . and
    (106) valoresBool -> . BOOL
    (107) valoresBool -> . funcBool
    (108) valoresBool -> . varYVals
    (109) valoresBool -> . varsOps
    (120) and -> . and AND eq
    (121) and -> . valoresBool AND eq
    (122) and -> . and AND valoresBool
    (123) and -> . valoresBool AND valoresBool
    (124) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (125) eq -> . eq EQEQ parenBool
    (126) eq -> . eq DISTINTO parenBool
    (127) eq -> . valoresBool EQEQ parenBool
    (128) eq -> . valoresBool DISTINTO parenBool
    (129) eq -> . eq EQEQ valoresBool
    (130) eq -> . eq DISTINTO valoresBool
    (131) eq -> . valoresBool EQEQ valoresBool
    (132) eq -> . valoresBool DISTINTO valoresBool
    (133) eq -> . mayor
    (50) vecVal -> . ID m
    (137) mayor -> . tCompare > tCompare
    (138) mayor -> . menor
    (134) tCompare -> . eMat
    (135) tCompare -> . varsOps
    (136) tCompare -> . varYVals
    (139) menor -> . tCompare < tCompare
    (140) menor -> . not
    (73) eMat -> . eMat + p
    (74) eMat -> . eMat - p
    (75) eMat -> . valoresMat + p
    (76) eMat -> . valoresMat - p
    (77) eMat -> . eMat + valoresMat
    (78) eMat -> . eMat - valoresMat
    (79) eMat -> . valoresMat + valoresMat
    (80) eMat -> . valoresMat - valoresMat
    (81) eMat -> . p
    (141) not -> . NOT not
    (142) not -> . NOT valoresBool
    (143) not -> . parenBool
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (82) p -> . p * exp
    (83) p -> . p / exp
    (84) p -> . p % exp
    (85) p -> . valoresMat * exp
    (86) p -> . valoresMat / exp
    (87) p -> . valoresMat % exp
    (88) p -> . p * valoresMat
    (89) p -> . p / valoresMat
    (90) p -> . p % valoresMat
    (91) p -> . valoresMat * valoresMat
    (92) p -> . valoresMat / valoresMat
    (93) p -> . valoresMat % valoresMat
    (94) p -> . exp
    (144) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (105) paren -> . ( eMat )

    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 87
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    (               shift and go to state 72
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 74
    +               shift and go to state 73

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    mayor                          shift and go to state 66
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 71
    vecVal                         shift and go to state 9
    paren                          shift and go to state 77
    iSing                          shift and go to state 75
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    parenBool                      shift and go to state 86
    p                              shift and go to state 82
    varsOps                        shift and go to state 84
    exp                            shift and go to state 85
    varYVals                       shift and go to state 88
    or                             shift and go to state 89
    expBool                        shift and go to state 117

state 50

    (6) sentencia -> varAsig ; .

    ;               reduce using rule 6 (sentencia -> varAsig ; .)
    RETURN          reduce using rule 6 (sentencia -> varAsig ; .)
    MENOSMENOS      reduce using rule 6 (sentencia -> varAsig ; .)
    MASMAS          reduce using rule 6 (sentencia -> varAsig ; .)
    ID              reduce using rule 6 (sentencia -> varAsig ; .)
    IF              reduce using rule 6 (sentencia -> varAsig ; .)
    WHILE           reduce using rule 6 (sentencia -> varAsig ; .)
    DO              reduce using rule 6 (sentencia -> varAsig ; .)
    FOR             reduce using rule 6 (sentencia -> varAsig ; .)
    PRINT           reduce using rule 6 (sentencia -> varAsig ; .)
    MULTIESCALAR    reduce using rule 6 (sentencia -> varAsig ; .)
    LENGTH          reduce using rule 6 (sentencia -> varAsig ; .)
    CAPITALIZAR     reduce using rule 6 (sentencia -> varAsig ; .)
    COLINEALES      reduce using rule 6 (sentencia -> varAsig ; .)
    $end            reduce using rule 6 (sentencia -> varAsig ; .)
    }               reduce using rule 6 (sentencia -> varAsig ; .)


state 51

    (23) funcInt -> MULTIESCALAR ( . vec , eMat , param )
    (31) vec -> . [ elem ]

    [               shift and go to state 97

    vec                            shift and go to state 118

state 52

    (25) funcString -> CAPITALIZAR ( . eMat )
    (73) eMat -> . eMat + p
    (74) eMat -> . eMat - p
    (75) eMat -> . valoresMat + p
    (76) eMat -> . valoresMat - p
    (77) eMat -> . eMat + valoresMat
    (78) eMat -> . eMat - valoresMat
    (79) eMat -> . valoresMat + valoresMat
    (80) eMat -> . valoresMat - valoresMat
    (81) eMat -> . p
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (82) p -> . p * exp
    (83) p -> . p / exp
    (84) p -> . p % exp
    (85) p -> . valoresMat * exp
    (86) p -> . valoresMat / exp
    (87) p -> . valoresMat % exp
    (88) p -> . p * valoresMat
    (89) p -> . p / valoresMat
    (90) p -> . p % valoresMat
    (91) p -> . valoresMat * valoresMat
    (92) p -> . valoresMat / valoresMat
    (93) p -> . valoresMat % valoresMat
    (94) p -> . exp
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (50) vecVal -> . ID m
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (105) paren -> . ( eMat )

    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 120

    eMat                           shift and go to state 119
    funcInt                        shift and go to state 65
    iSing                          shift and go to state 75
    p                              shift and go to state 82
    varsOps                        shift and go to state 121
    valoresMat                     shift and go to state 67
    paren                          shift and go to state 77
    exp                            shift and go to state 85
    varYVals                       shift and go to state 122
    vecVal                         shift and go to state 9

state 53

    (24) funcInt -> LENGTH ( . vec )
    (31) vec -> . [ elem ]

    [               shift and go to state 97

    vec                            shift and go to state 123

state 54

    (57) varsOps -> MASMAS varYVals .

    *               reduce using rule 57 (varsOps -> MASMAS varYVals .)
    /               reduce using rule 57 (varsOps -> MASMAS varYVals .)
    %               reduce using rule 57 (varsOps -> MASMAS varYVals .)
    ^               reduce using rule 57 (varsOps -> MASMAS varYVals .)
    +               reduce using rule 57 (varsOps -> MASMAS varYVals .)
    -               reduce using rule 57 (varsOps -> MASMAS varYVals .)
    >               reduce using rule 57 (varsOps -> MASMAS varYVals .)
    <               reduce using rule 57 (varsOps -> MASMAS varYVals .)
    )               reduce using rule 57 (varsOps -> MASMAS varYVals .)
    ;               reduce using rule 57 (varsOps -> MASMAS varYVals .)
    ,               reduce using rule 57 (varsOps -> MASMAS varYVals .)
    ]               reduce using rule 57 (varsOps -> MASMAS varYVals .)
    }               reduce using rule 57 (varsOps -> MASMAS varYVals .)
    EQEQ            reduce using rule 57 (varsOps -> MASMAS varYVals .)
    DISTINTO        reduce using rule 57 (varsOps -> MASMAS varYVals .)
    AND             reduce using rule 57 (varsOps -> MASMAS varYVals .)
    ?               reduce using rule 57 (varsOps -> MASMAS varYVals .)
    OR              reduce using rule 57 (varsOps -> MASMAS varYVals .)
    :               reduce using rule 57 (varsOps -> MASMAS varYVals .)


state 55

    (48) varYVals -> ID .
    (50) vecVal -> ID . m
    (51) m -> . [ INT ]
    (52) m -> . [ INT ] m

    MASMAS          reduce using rule 48 (varYVals -> ID .)
    MENOSMENOS      reduce using rule 48 (varYVals -> ID .)
    +               reduce using rule 48 (varYVals -> ID .)
    -               reduce using rule 48 (varYVals -> ID .)
    *               reduce using rule 48 (varYVals -> ID .)
    /               reduce using rule 48 (varYVals -> ID .)
    %               reduce using rule 48 (varYVals -> ID .)
    ^               reduce using rule 48 (varYVals -> ID .)
    ?               reduce using rule 48 (varYVals -> ID .)
    OR              reduce using rule 48 (varYVals -> ID .)
    AND             reduce using rule 48 (varYVals -> ID .)
    EQEQ            reduce using rule 48 (varYVals -> ID .)
    DISTINTO        reduce using rule 48 (varYVals -> ID .)
    >               reduce using rule 48 (varYVals -> ID .)
    <               reduce using rule 48 (varYVals -> ID .)
    )               reduce using rule 48 (varYVals -> ID .)
    ;               reduce using rule 48 (varYVals -> ID .)
    ,               reduce using rule 48 (varYVals -> ID .)
    ]               reduce using rule 48 (varYVals -> ID .)
    }               reduce using rule 48 (varYVals -> ID .)
    :               reduce using rule 48 (varYVals -> ID .)
    [               shift and go to state 46

    m                              shift and go to state 43

state 56

    (4) sentencia -> varsOps ; .

    ;               reduce using rule 4 (sentencia -> varsOps ; .)
    RETURN          reduce using rule 4 (sentencia -> varsOps ; .)
    MENOSMENOS      reduce using rule 4 (sentencia -> varsOps ; .)
    MASMAS          reduce using rule 4 (sentencia -> varsOps ; .)
    ID              reduce using rule 4 (sentencia -> varsOps ; .)
    IF              reduce using rule 4 (sentencia -> varsOps ; .)
    WHILE           reduce using rule 4 (sentencia -> varsOps ; .)
    DO              reduce using rule 4 (sentencia -> varsOps ; .)
    FOR             reduce using rule 4 (sentencia -> varsOps ; .)
    PRINT           reduce using rule 4 (sentencia -> varsOps ; .)
    MULTIESCALAR    reduce using rule 4 (sentencia -> varsOps ; .)
    LENGTH          reduce using rule 4 (sentencia -> varsOps ; .)
    CAPITALIZAR     reduce using rule 4 (sentencia -> varsOps ; .)
    COLINEALES      reduce using rule 4 (sentencia -> varsOps ; .)
    $end            reduce using rule 4 (sentencia -> varsOps ; .)
    }               reduce using rule 4 (sentencia -> varsOps ; .)


state 57

    (58) varsOps -> varYVals MASMAS .

    *               reduce using rule 58 (varsOps -> varYVals MASMAS .)
    /               reduce using rule 58 (varsOps -> varYVals MASMAS .)
    %               reduce using rule 58 (varsOps -> varYVals MASMAS .)
    ^               reduce using rule 58 (varsOps -> varYVals MASMAS .)
    +               reduce using rule 58 (varsOps -> varYVals MASMAS .)
    -               reduce using rule 58 (varsOps -> varYVals MASMAS .)
    >               reduce using rule 58 (varsOps -> varYVals MASMAS .)
    <               reduce using rule 58 (varsOps -> varYVals MASMAS .)
    )               reduce using rule 58 (varsOps -> varYVals MASMAS .)
    ;               reduce using rule 58 (varsOps -> varYVals MASMAS .)
    ,               reduce using rule 58 (varsOps -> varYVals MASMAS .)
    ]               reduce using rule 58 (varsOps -> varYVals MASMAS .)
    }               reduce using rule 58 (varsOps -> varYVals MASMAS .)
    EQEQ            reduce using rule 58 (varsOps -> varYVals MASMAS .)
    DISTINTO        reduce using rule 58 (varsOps -> varYVals MASMAS .)
    AND             reduce using rule 58 (varsOps -> varYVals MASMAS .)
    ?               reduce using rule 58 (varsOps -> varYVals MASMAS .)
    OR              reduce using rule 58 (varsOps -> varYVals MASMAS .)
    :               reduce using rule 58 (varsOps -> varYVals MASMAS .)


state 58

    (59) varsOps -> varYVals MENOSMENOS .

    *               reduce using rule 59 (varsOps -> varYVals MENOSMENOS .)
    /               reduce using rule 59 (varsOps -> varYVals MENOSMENOS .)
    %               reduce using rule 59 (varsOps -> varYVals MENOSMENOS .)
    ^               reduce using rule 59 (varsOps -> varYVals MENOSMENOS .)
    +               reduce using rule 59 (varsOps -> varYVals MENOSMENOS .)
    -               reduce using rule 59 (varsOps -> varYVals MENOSMENOS .)
    >               reduce using rule 59 (varsOps -> varYVals MENOSMENOS .)
    <               reduce using rule 59 (varsOps -> varYVals MENOSMENOS .)
    )               reduce using rule 59 (varsOps -> varYVals MENOSMENOS .)
    ;               reduce using rule 59 (varsOps -> varYVals MENOSMENOS .)
    ,               reduce using rule 59 (varsOps -> varYVals MENOSMENOS .)
    ]               reduce using rule 59 (varsOps -> varYVals MENOSMENOS .)
    }               reduce using rule 59 (varsOps -> varYVals MENOSMENOS .)
    EQEQ            reduce using rule 59 (varsOps -> varYVals MENOSMENOS .)
    DISTINTO        reduce using rule 59 (varsOps -> varYVals MENOSMENOS .)
    AND             reduce using rule 59 (varsOps -> varYVals MENOSMENOS .)
    ?               reduce using rule 59 (varsOps -> varYVals MENOSMENOS .)
    OR              reduce using rule 59 (varsOps -> varYVals MENOSMENOS .)
    :               reduce using rule 59 (varsOps -> varYVals MENOSMENOS .)


state 59

    (56) varsOps -> MENOSMENOS varYVals .

    *               reduce using rule 56 (varsOps -> MENOSMENOS varYVals .)
    /               reduce using rule 56 (varsOps -> MENOSMENOS varYVals .)
    %               reduce using rule 56 (varsOps -> MENOSMENOS varYVals .)
    ^               reduce using rule 56 (varsOps -> MENOSMENOS varYVals .)
    +               reduce using rule 56 (varsOps -> MENOSMENOS varYVals .)
    -               reduce using rule 56 (varsOps -> MENOSMENOS varYVals .)
    >               reduce using rule 56 (varsOps -> MENOSMENOS varYVals .)
    <               reduce using rule 56 (varsOps -> MENOSMENOS varYVals .)
    )               reduce using rule 56 (varsOps -> MENOSMENOS varYVals .)
    ;               reduce using rule 56 (varsOps -> MENOSMENOS varYVals .)
    ,               reduce using rule 56 (varsOps -> MENOSMENOS varYVals .)
    ]               reduce using rule 56 (varsOps -> MENOSMENOS varYVals .)
    }               reduce using rule 56 (varsOps -> MENOSMENOS varYVals .)
    EQEQ            reduce using rule 56 (varsOps -> MENOSMENOS varYVals .)
    DISTINTO        reduce using rule 56 (varsOps -> MENOSMENOS varYVals .)
    AND             reduce using rule 56 (varsOps -> MENOSMENOS varYVals .)
    ?               reduce using rule 56 (varsOps -> MENOSMENOS varYVals .)
    OR              reduce using rule 56 (varsOps -> MENOSMENOS varYVals .)
    :               reduce using rule 56 (varsOps -> MENOSMENOS varYVals .)


state 60

    (11) loop -> DO bloque WHILE . ( expBool ) ;

    (               shift and go to state 124


state 61

    (16) bloque -> sentencia ; .

    RETURN          reduce using rule 16 (bloque -> sentencia ; .)
    MENOSMENOS      reduce using rule 16 (bloque -> sentencia ; .)
    MASMAS          reduce using rule 16 (bloque -> sentencia ; .)
    ID              reduce using rule 16 (bloque -> sentencia ; .)
    IF              reduce using rule 16 (bloque -> sentencia ; .)
    WHILE           reduce using rule 16 (bloque -> sentencia ; .)
    DO              reduce using rule 16 (bloque -> sentencia ; .)
    FOR             reduce using rule 16 (bloque -> sentencia ; .)
    PRINT           reduce using rule 16 (bloque -> sentencia ; .)
    MULTIESCALAR    reduce using rule 16 (bloque -> sentencia ; .)
    LENGTH          reduce using rule 16 (bloque -> sentencia ; .)
    CAPITALIZAR     reduce using rule 16 (bloque -> sentencia ; .)
    COLINEALES      reduce using rule 16 (bloque -> sentencia ; .)
    $end            reduce using rule 16 (bloque -> sentencia ; .)
    }               reduce using rule 16 (bloque -> sentencia ; .)
    ELSE            reduce using rule 16 (bloque -> sentencia ; .)


state 62

    (17) bloque -> { g . }

    }               shift and go to state 125


state 63

    (119) or -> and .
    (120) and -> and . AND eq
    (122) and -> and . AND valoresBool

    ?               reduce using rule 119 (or -> and .)
    OR              reduce using rule 119 (or -> and .)
    )               reduce using rule 119 (or -> and .)
    ,               reduce using rule 119 (or -> and .)
    ]               reduce using rule 119 (or -> and .)
    :               reduce using rule 119 (or -> and .)
    ;               reduce using rule 119 (or -> and .)
    }               reduce using rule 119 (or -> and .)
    AND             shift and go to state 126


state 64

    (107) valoresBool -> funcBool .

    EQEQ            reduce using rule 107 (valoresBool -> funcBool .)
    DISTINTO        reduce using rule 107 (valoresBool -> funcBool .)
    AND             reduce using rule 107 (valoresBool -> funcBool .)
    ?               reduce using rule 107 (valoresBool -> funcBool .)
    OR              reduce using rule 107 (valoresBool -> funcBool .)
    )               reduce using rule 107 (valoresBool -> funcBool .)
    ;               reduce using rule 107 (valoresBool -> funcBool .)
    ,               reduce using rule 107 (valoresBool -> funcBool .)
    ]               reduce using rule 107 (valoresBool -> funcBool .)
    }               reduce using rule 107 (valoresBool -> funcBool .)
    :               reduce using rule 107 (valoresBool -> funcBool .)


state 65

    (69) valoresMat -> funcInt .

    +               reduce using rule 69 (valoresMat -> funcInt .)
    -               reduce using rule 69 (valoresMat -> funcInt .)
    *               reduce using rule 69 (valoresMat -> funcInt .)
    /               reduce using rule 69 (valoresMat -> funcInt .)
    %               reduce using rule 69 (valoresMat -> funcInt .)
    ^               reduce using rule 69 (valoresMat -> funcInt .)
    >               reduce using rule 69 (valoresMat -> funcInt .)
    <               reduce using rule 69 (valoresMat -> funcInt .)
    )               reduce using rule 69 (valoresMat -> funcInt .)
    ;               reduce using rule 69 (valoresMat -> funcInt .)
    ,               reduce using rule 69 (valoresMat -> funcInt .)
    ]               reduce using rule 69 (valoresMat -> funcInt .)
    }               reduce using rule 69 (valoresMat -> funcInt .)
    EQEQ            reduce using rule 69 (valoresMat -> funcInt .)
    DISTINTO        reduce using rule 69 (valoresMat -> funcInt .)
    AND             reduce using rule 69 (valoresMat -> funcInt .)
    ?               reduce using rule 69 (valoresMat -> funcInt .)
    OR              reduce using rule 69 (valoresMat -> funcInt .)
    :               reduce using rule 69 (valoresMat -> funcInt .)


state 66

    (133) eq -> mayor .

    EQEQ            reduce using rule 133 (eq -> mayor .)
    DISTINTO        reduce using rule 133 (eq -> mayor .)
    AND             reduce using rule 133 (eq -> mayor .)
    ?               reduce using rule 133 (eq -> mayor .)
    OR              reduce using rule 133 (eq -> mayor .)
    )               reduce using rule 133 (eq -> mayor .)
    ;               reduce using rule 133 (eq -> mayor .)
    ,               reduce using rule 133 (eq -> mayor .)
    ]               reduce using rule 133 (eq -> mayor .)
    }               reduce using rule 133 (eq -> mayor .)
    :               reduce using rule 133 (eq -> mayor .)


state 67

    (75) eMat -> valoresMat . + p
    (76) eMat -> valoresMat . - p
    (79) eMat -> valoresMat . + valoresMat
    (80) eMat -> valoresMat . - valoresMat
    (85) p -> valoresMat . * exp
    (86) p -> valoresMat . / exp
    (87) p -> valoresMat . % exp
    (91) p -> valoresMat . * valoresMat
    (92) p -> valoresMat . / valoresMat
    (93) p -> valoresMat . % valoresMat
    (96) exp -> valoresMat . ^ iSing
    (98) exp -> valoresMat . ^ valoresMat

    +               shift and go to state 128
    -               shift and go to state 130
    *               shift and go to state 129
    /               shift and go to state 131
    %               shift and go to state 127
    ^               shift and go to state 132


state 68

    (124) and -> eq .
    (125) eq -> eq . EQEQ parenBool
    (126) eq -> eq . DISTINTO parenBool
    (129) eq -> eq . EQEQ valoresBool
    (130) eq -> eq . DISTINTO valoresBool

    AND             reduce using rule 124 (and -> eq .)
    ?               reduce using rule 124 (and -> eq .)
    OR              reduce using rule 124 (and -> eq .)
    )               reduce using rule 124 (and -> eq .)
    ;               reduce using rule 124 (and -> eq .)
    ,               reduce using rule 124 (and -> eq .)
    ]               reduce using rule 124 (and -> eq .)
    }               reduce using rule 124 (and -> eq .)
    :               reduce using rule 124 (and -> eq .)
    EQEQ            shift and go to state 133
    DISTINTO        shift and go to state 134


state 69

    (111) expBool -> valoresBool . ? expBool : expBool
    (113) expBool -> valoresBool . ? valoresBool : valoresBool
    (116) or -> valoresBool . OR and
    (118) or -> valoresBool . OR valoresBool
    (121) and -> valoresBool . AND eq
    (123) and -> valoresBool . AND valoresBool
    (127) eq -> valoresBool . EQEQ parenBool
    (128) eq -> valoresBool . DISTINTO parenBool
    (131) eq -> valoresBool . EQEQ valoresBool
    (132) eq -> valoresBool . DISTINTO valoresBool

    ?               shift and go to state 139
    OR              shift and go to state 138
    AND             shift and go to state 135
    EQEQ            shift and go to state 137
    DISTINTO        shift and go to state 136


state 70

    (72) valoresMat -> STRING .

    +               reduce using rule 72 (valoresMat -> STRING .)
    -               reduce using rule 72 (valoresMat -> STRING .)
    *               reduce using rule 72 (valoresMat -> STRING .)
    /               reduce using rule 72 (valoresMat -> STRING .)
    %               reduce using rule 72 (valoresMat -> STRING .)
    ^               reduce using rule 72 (valoresMat -> STRING .)
    >               reduce using rule 72 (valoresMat -> STRING .)
    <               reduce using rule 72 (valoresMat -> STRING .)
    )               reduce using rule 72 (valoresMat -> STRING .)
    ;               reduce using rule 72 (valoresMat -> STRING .)
    ,               reduce using rule 72 (valoresMat -> STRING .)
    ]               reduce using rule 72 (valoresMat -> STRING .)
    }               reduce using rule 72 (valoresMat -> STRING .)
    EQEQ            reduce using rule 72 (valoresMat -> STRING .)
    DISTINTO        reduce using rule 72 (valoresMat -> STRING .)
    AND             reduce using rule 72 (valoresMat -> STRING .)
    ?               reduce using rule 72 (valoresMat -> STRING .)
    OR              reduce using rule 72 (valoresMat -> STRING .)
    :               reduce using rule 72 (valoresMat -> STRING .)


state 71

    (134) tCompare -> eMat .
    (73) eMat -> eMat . + p
    (74) eMat -> eMat . - p
    (77) eMat -> eMat . + valoresMat
    (78) eMat -> eMat . - valoresMat

    EQEQ            reduce using rule 134 (tCompare -> eMat .)
    DISTINTO        reduce using rule 134 (tCompare -> eMat .)
    AND             reduce using rule 134 (tCompare -> eMat .)
    ?               reduce using rule 134 (tCompare -> eMat .)
    OR              reduce using rule 134 (tCompare -> eMat .)
    )               reduce using rule 134 (tCompare -> eMat .)
    ;               reduce using rule 134 (tCompare -> eMat .)
    ,               reduce using rule 134 (tCompare -> eMat .)
    ]               reduce using rule 134 (tCompare -> eMat .)
    }               reduce using rule 134 (tCompare -> eMat .)
    :               reduce using rule 134 (tCompare -> eMat .)
    >               reduce using rule 134 (tCompare -> eMat .)
    <               reduce using rule 134 (tCompare -> eMat .)
    +               shift and go to state 140
    -               shift and go to state 141


state 72

    (144) parenBool -> ( . expBool )
    (105) paren -> ( . eMat )
    (110) expBool -> . or ? expBool : expBool
    (111) expBool -> . valoresBool ? expBool : expBool
    (112) expBool -> . or ? valoresBool : valoresBool
    (113) expBool -> . valoresBool ? valoresBool : valoresBool
    (114) expBool -> . or
    (73) eMat -> . eMat + p
    (74) eMat -> . eMat - p
    (75) eMat -> . valoresMat + p
    (76) eMat -> . valoresMat - p
    (77) eMat -> . eMat + valoresMat
    (78) eMat -> . eMat - valoresMat
    (79) eMat -> . valoresMat + valoresMat
    (80) eMat -> . valoresMat - valoresMat
    (81) eMat -> . p
    (115) or -> . or OR and
    (116) or -> . valoresBool OR and
    (117) or -> . or OR valoresBool
    (118) or -> . valoresBool OR valoresBool
    (119) or -> . and
    (106) valoresBool -> . BOOL
    (107) valoresBool -> . funcBool
    (108) valoresBool -> . varYVals
    (109) valoresBool -> . varsOps
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (82) p -> . p * exp
    (83) p -> . p / exp
    (84) p -> . p % exp
    (85) p -> . valoresMat * exp
    (86) p -> . valoresMat / exp
    (87) p -> . valoresMat % exp
    (88) p -> . p * valoresMat
    (89) p -> . p / valoresMat
    (90) p -> . p % valoresMat
    (91) p -> . valoresMat * valoresMat
    (92) p -> . valoresMat / valoresMat
    (93) p -> . valoresMat % valoresMat
    (94) p -> . exp
    (120) and -> . and AND eq
    (121) and -> . valoresBool AND eq
    (122) and -> . and AND valoresBool
    (123) and -> . valoresBool AND valoresBool
    (124) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (125) eq -> . eq EQEQ parenBool
    (126) eq -> . eq DISTINTO parenBool
    (127) eq -> . valoresBool EQEQ parenBool
    (128) eq -> . valoresBool DISTINTO parenBool
    (129) eq -> . eq EQEQ valoresBool
    (130) eq -> . eq DISTINTO valoresBool
    (131) eq -> . valoresBool EQEQ valoresBool
    (132) eq -> . valoresBool DISTINTO valoresBool
    (133) eq -> . mayor
    (50) vecVal -> . ID m
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (137) mayor -> . tCompare > tCompare
    (138) mayor -> . menor
    (105) paren -> . ( eMat )
    (134) tCompare -> . eMat
    (135) tCompare -> . varsOps
    (136) tCompare -> . varYVals
    (139) menor -> . tCompare < tCompare
    (140) menor -> . not
    (141) not -> . NOT not
    (142) not -> . NOT valoresBool
    (143) not -> . parenBool
    (144) parenBool -> . ( expBool )

    BOOL            shift and go to state 83
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    COLINEALES      shift and go to state 13
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 93
    NOT             shift and go to state 87

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    vecVal                         shift and go to state 9
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 142
    mayor                          shift and go to state 66
    paren                          shift and go to state 77
    varsOps                        shift and go to state 143
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    parenBool                      shift and go to state 86
    p                              shift and go to state 82
    iSing                          shift and go to state 75
    exp                            shift and go to state 85
    varYVals                       shift and go to state 144
    or                             shift and go to state 89
    expBool                        shift and go to state 145

state 73

    (101) iSing -> + . paren
    (103) iSing -> + . valoresMat
    (105) paren -> . ( eMat )
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (50) vecVal -> . ID m

    (               shift and go to state 120
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26

    funcInt                        shift and go to state 65
    varsOps                        shift and go to state 121
    valoresMat                     shift and go to state 146
    paren                          shift and go to state 147
    varYVals                       shift and go to state 122
    vecVal                         shift and go to state 9

state 74

    (100) iSing -> - . paren
    (102) iSing -> - . valoresMat
    (105) paren -> . ( eMat )
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (50) vecVal -> . ID m

    (               shift and go to state 120
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26

    funcInt                        shift and go to state 65
    varsOps                        shift and go to state 121
    valoresMat                     shift and go to state 148
    paren                          shift and go to state 149
    varYVals                       shift and go to state 122
    vecVal                         shift and go to state 9

state 75

    (99) exp -> iSing .

    ^               reduce using rule 99 (exp -> iSing .)
    *               reduce using rule 99 (exp -> iSing .)
    /               reduce using rule 99 (exp -> iSing .)
    %               reduce using rule 99 (exp -> iSing .)
    +               reduce using rule 99 (exp -> iSing .)
    -               reduce using rule 99 (exp -> iSing .)
    }               reduce using rule 99 (exp -> iSing .)
    >               reduce using rule 99 (exp -> iSing .)
    <               reduce using rule 99 (exp -> iSing .)
    )               reduce using rule 99 (exp -> iSing .)
    ;               reduce using rule 99 (exp -> iSing .)
    ,               reduce using rule 99 (exp -> iSing .)
    ]               reduce using rule 99 (exp -> iSing .)
    EQEQ            reduce using rule 99 (exp -> iSing .)
    DISTINTO        reduce using rule 99 (exp -> iSing .)
    AND             reduce using rule 99 (exp -> iSing .)
    ?               reduce using rule 99 (exp -> iSing .)
    OR              reduce using rule 99 (exp -> iSing .)
    :               reduce using rule 99 (exp -> iSing .)


state 76

    (137) mayor -> tCompare . > tCompare
    (139) menor -> tCompare . < tCompare

    >               shift and go to state 151
    <               shift and go to state 150


state 77

    (104) iSing -> paren .

    ^               reduce using rule 104 (iSing -> paren .)
    *               reduce using rule 104 (iSing -> paren .)
    /               reduce using rule 104 (iSing -> paren .)
    %               reduce using rule 104 (iSing -> paren .)
    +               reduce using rule 104 (iSing -> paren .)
    -               reduce using rule 104 (iSing -> paren .)
    ,               reduce using rule 104 (iSing -> paren .)
    ]               reduce using rule 104 (iSing -> paren .)
    >               reduce using rule 104 (iSing -> paren .)
    <               reduce using rule 104 (iSing -> paren .)
    )               reduce using rule 104 (iSing -> paren .)
    }               reduce using rule 104 (iSing -> paren .)
    EQEQ            reduce using rule 104 (iSing -> paren .)
    DISTINTO        reduce using rule 104 (iSing -> paren .)
    AND             reduce using rule 104 (iSing -> paren .)
    ?               reduce using rule 104 (iSing -> paren .)
    OR              reduce using rule 104 (iSing -> paren .)
    ;               reduce using rule 104 (iSing -> paren .)
    :               reduce using rule 104 (iSing -> paren .)


state 78

    (140) menor -> not .

    EQEQ            reduce using rule 140 (menor -> not .)
    DISTINTO        reduce using rule 140 (menor -> not .)
    AND             reduce using rule 140 (menor -> not .)
    ?               reduce using rule 140 (menor -> not .)
    OR              reduce using rule 140 (menor -> not .)
    ,               reduce using rule 140 (menor -> not .)
    ]               reduce using rule 140 (menor -> not .)
    )               reduce using rule 140 (menor -> not .)
    ;               reduce using rule 140 (menor -> not .)
    }               reduce using rule 140 (menor -> not .)
    :               reduce using rule 140 (menor -> not .)


state 79

    (67) valoresMat -> INT .

    +               reduce using rule 67 (valoresMat -> INT .)
    -               reduce using rule 67 (valoresMat -> INT .)
    *               reduce using rule 67 (valoresMat -> INT .)
    /               reduce using rule 67 (valoresMat -> INT .)
    %               reduce using rule 67 (valoresMat -> INT .)
    ^               reduce using rule 67 (valoresMat -> INT .)
    >               reduce using rule 67 (valoresMat -> INT .)
    <               reduce using rule 67 (valoresMat -> INT .)
    )               reduce using rule 67 (valoresMat -> INT .)
    ;               reduce using rule 67 (valoresMat -> INT .)
    ,               reduce using rule 67 (valoresMat -> INT .)
    ]               reduce using rule 67 (valoresMat -> INT .)
    }               reduce using rule 67 (valoresMat -> INT .)
    EQEQ            reduce using rule 67 (valoresMat -> INT .)
    DISTINTO        reduce using rule 67 (valoresMat -> INT .)
    AND             reduce using rule 67 (valoresMat -> INT .)
    ?               reduce using rule 67 (valoresMat -> INT .)
    OR              reduce using rule 67 (valoresMat -> INT .)
    :               reduce using rule 67 (valoresMat -> INT .)


state 80

    (68) valoresMat -> FLOAT .

    +               reduce using rule 68 (valoresMat -> FLOAT .)
    -               reduce using rule 68 (valoresMat -> FLOAT .)
    *               reduce using rule 68 (valoresMat -> FLOAT .)
    /               reduce using rule 68 (valoresMat -> FLOAT .)
    %               reduce using rule 68 (valoresMat -> FLOAT .)
    ^               reduce using rule 68 (valoresMat -> FLOAT .)
    >               reduce using rule 68 (valoresMat -> FLOAT .)
    <               reduce using rule 68 (valoresMat -> FLOAT .)
    )               reduce using rule 68 (valoresMat -> FLOAT .)
    ;               reduce using rule 68 (valoresMat -> FLOAT .)
    ,               reduce using rule 68 (valoresMat -> FLOAT .)
    ]               reduce using rule 68 (valoresMat -> FLOAT .)
    }               reduce using rule 68 (valoresMat -> FLOAT .)
    EQEQ            reduce using rule 68 (valoresMat -> FLOAT .)
    DISTINTO        reduce using rule 68 (valoresMat -> FLOAT .)
    AND             reduce using rule 68 (valoresMat -> FLOAT .)
    ?               reduce using rule 68 (valoresMat -> FLOAT .)
    OR              reduce using rule 68 (valoresMat -> FLOAT .)
    :               reduce using rule 68 (valoresMat -> FLOAT .)


state 81

    (138) mayor -> menor .

    EQEQ            reduce using rule 138 (mayor -> menor .)
    DISTINTO        reduce using rule 138 (mayor -> menor .)
    AND             reduce using rule 138 (mayor -> menor .)
    ?               reduce using rule 138 (mayor -> menor .)
    OR              reduce using rule 138 (mayor -> menor .)
    ;               reduce using rule 138 (mayor -> menor .)
    )               reduce using rule 138 (mayor -> menor .)
    ,               reduce using rule 138 (mayor -> menor .)
    ]               reduce using rule 138 (mayor -> menor .)
    }               reduce using rule 138 (mayor -> menor .)
    :               reduce using rule 138 (mayor -> menor .)


state 82

    (81) eMat -> p .
    (82) p -> p . * exp
    (83) p -> p . / exp
    (84) p -> p . % exp
    (88) p -> p . * valoresMat
    (89) p -> p . / valoresMat
    (90) p -> p . % valoresMat

    +               reduce using rule 81 (eMat -> p .)
    -               reduce using rule 81 (eMat -> p .)
    >               reduce using rule 81 (eMat -> p .)
    <               reduce using rule 81 (eMat -> p .)
    ;               reduce using rule 81 (eMat -> p .)
    }               reduce using rule 81 (eMat -> p .)
    )               reduce using rule 81 (eMat -> p .)
    ,               reduce using rule 81 (eMat -> p .)
    ]               reduce using rule 81 (eMat -> p .)
    EQEQ            reduce using rule 81 (eMat -> p .)
    DISTINTO        reduce using rule 81 (eMat -> p .)
    AND             reduce using rule 81 (eMat -> p .)
    ?               reduce using rule 81 (eMat -> p .)
    OR              reduce using rule 81 (eMat -> p .)
    :               reduce using rule 81 (eMat -> p .)
    *               shift and go to state 153
    /               shift and go to state 154
    %               shift and go to state 152


state 83

    (106) valoresBool -> BOOL .

    EQEQ            reduce using rule 106 (valoresBool -> BOOL .)
    DISTINTO        reduce using rule 106 (valoresBool -> BOOL .)
    AND             reduce using rule 106 (valoresBool -> BOOL .)
    ?               reduce using rule 106 (valoresBool -> BOOL .)
    OR              reduce using rule 106 (valoresBool -> BOOL .)
    )               reduce using rule 106 (valoresBool -> BOOL .)
    ;               reduce using rule 106 (valoresBool -> BOOL .)
    ,               reduce using rule 106 (valoresBool -> BOOL .)
    ]               reduce using rule 106 (valoresBool -> BOOL .)
    }               reduce using rule 106 (valoresBool -> BOOL .)
    :               reduce using rule 106 (valoresBool -> BOOL .)


state 84

    (109) valoresBool -> varsOps .
    (135) tCompare -> varsOps .
    (71) valoresMat -> varsOps .

    EQEQ            reduce using rule 109 (valoresBool -> varsOps .)
    DISTINTO        reduce using rule 109 (valoresBool -> varsOps .)
    AND             reduce using rule 109 (valoresBool -> varsOps .)
    ?               reduce using rule 109 (valoresBool -> varsOps .)
    OR              reduce using rule 109 (valoresBool -> varsOps .)
    )               reduce using rule 109 (valoresBool -> varsOps .)
    ;               reduce using rule 109 (valoresBool -> varsOps .)
    ,               reduce using rule 109 (valoresBool -> varsOps .)
    ]               reduce using rule 109 (valoresBool -> varsOps .)
    }               reduce using rule 109 (valoresBool -> varsOps .)
    :               reduce using rule 109 (valoresBool -> varsOps .)
    >               reduce using rule 135 (tCompare -> varsOps .)
    <               reduce using rule 135 (tCompare -> varsOps .)
    +               reduce using rule 71 (valoresMat -> varsOps .)
    -               reduce using rule 71 (valoresMat -> varsOps .)
    *               reduce using rule 71 (valoresMat -> varsOps .)
    /               reduce using rule 71 (valoresMat -> varsOps .)
    %               reduce using rule 71 (valoresMat -> varsOps .)
    ^               reduce using rule 71 (valoresMat -> varsOps .)


state 85

    (94) p -> exp .
    (95) exp -> exp . ^ iSing
    (97) exp -> exp . ^ valoresMat

    *               reduce using rule 94 (p -> exp .)
    /               reduce using rule 94 (p -> exp .)
    %               reduce using rule 94 (p -> exp .)
    +               reduce using rule 94 (p -> exp .)
    -               reduce using rule 94 (p -> exp .)
    >               reduce using rule 94 (p -> exp .)
    <               reduce using rule 94 (p -> exp .)
    ,               reduce using rule 94 (p -> exp .)
    )               reduce using rule 94 (p -> exp .)
    ]               reduce using rule 94 (p -> exp .)
    ;               reduce using rule 94 (p -> exp .)
    }               reduce using rule 94 (p -> exp .)
    EQEQ            reduce using rule 94 (p -> exp .)
    DISTINTO        reduce using rule 94 (p -> exp .)
    AND             reduce using rule 94 (p -> exp .)
    ?               reduce using rule 94 (p -> exp .)
    OR              reduce using rule 94 (p -> exp .)
    :               reduce using rule 94 (p -> exp .)
    ^               shift and go to state 155


state 86

    (143) not -> parenBool .

    EQEQ            reduce using rule 143 (not -> parenBool .)
    DISTINTO        reduce using rule 143 (not -> parenBool .)
    AND             reduce using rule 143 (not -> parenBool .)
    ?               reduce using rule 143 (not -> parenBool .)
    OR              reduce using rule 143 (not -> parenBool .)
    ;               reduce using rule 143 (not -> parenBool .)
    }               reduce using rule 143 (not -> parenBool .)
    )               reduce using rule 143 (not -> parenBool .)
    ,               reduce using rule 143 (not -> parenBool .)
    ]               reduce using rule 143 (not -> parenBool .)
    :               reduce using rule 143 (not -> parenBool .)


state 87

    (141) not -> NOT . not
    (142) not -> NOT . valoresBool
    (141) not -> . NOT not
    (142) not -> . NOT valoresBool
    (143) not -> . parenBool
    (106) valoresBool -> . BOOL
    (107) valoresBool -> . funcBool
    (108) valoresBool -> . varYVals
    (109) valoresBool -> . varsOps
    (144) parenBool -> . ( expBool )
    (26) funcBool -> . COLINEALES ( vec , vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (50) vecVal -> . ID m

    NOT             shift and go to state 87
    BOOL            shift and go to state 83
    (               shift and go to state 156
    COLINEALES      shift and go to state 13
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26

    funcBool                       shift and go to state 64
    parenBool                      shift and go to state 86
    varsOps                        shift and go to state 158
    vecVal                         shift and go to state 9
    not                            shift and go to state 157
    varYVals                       shift and go to state 159
    valoresBool                    shift and go to state 160

state 88

    (108) valoresBool -> varYVals .
    (58) varsOps -> varYVals . MASMAS
    (59) varsOps -> varYVals . MENOSMENOS
    (136) tCompare -> varYVals .
    (70) valoresMat -> varYVals .

    EQEQ            reduce using rule 108 (valoresBool -> varYVals .)
    DISTINTO        reduce using rule 108 (valoresBool -> varYVals .)
    AND             reduce using rule 108 (valoresBool -> varYVals .)
    ?               reduce using rule 108 (valoresBool -> varYVals .)
    OR              reduce using rule 108 (valoresBool -> varYVals .)
    )               reduce using rule 108 (valoresBool -> varYVals .)
    ;               reduce using rule 108 (valoresBool -> varYVals .)
    ,               reduce using rule 108 (valoresBool -> varYVals .)
    ]               reduce using rule 108 (valoresBool -> varYVals .)
    }               reduce using rule 108 (valoresBool -> varYVals .)
    :               reduce using rule 108 (valoresBool -> varYVals .)
    MASMAS          shift and go to state 57
    MENOSMENOS      shift and go to state 58
    >               reduce using rule 136 (tCompare -> varYVals .)
    <               reduce using rule 136 (tCompare -> varYVals .)
    +               reduce using rule 70 (valoresMat -> varYVals .)
    -               reduce using rule 70 (valoresMat -> varYVals .)
    *               reduce using rule 70 (valoresMat -> varYVals .)
    /               reduce using rule 70 (valoresMat -> varYVals .)
    %               reduce using rule 70 (valoresMat -> varYVals .)
    ^               reduce using rule 70 (valoresMat -> varYVals .)


state 89

    (110) expBool -> or . ? expBool : expBool
    (112) expBool -> or . ? valoresBool : valoresBool
    (114) expBool -> or .
    (115) or -> or . OR and
    (117) or -> or . OR valoresBool

    ?               shift and go to state 161
    ,               reduce using rule 114 (expBool -> or .)
    ]               reduce using rule 114 (expBool -> or .)
    )               reduce using rule 114 (expBool -> or .)
    ;               reduce using rule 114 (expBool -> or .)
    }               reduce using rule 114 (expBool -> or .)
    :               reduce using rule 114 (expBool -> or .)
    OR              shift and go to state 162


state 90

    (10) loop -> WHILE ( expBool . ) bloque

    )               shift and go to state 163


state 91

    (44) valores -> RES .

    ;               reduce using rule 44 (valores -> RES .)
    ,               reduce using rule 44 (valores -> RES .)
    ]               reduce using rule 44 (valores -> RES .)
    )               reduce using rule 44 (valores -> RES .)
    }               reduce using rule 44 (valores -> RES .)


state 92

    (34) valores -> eMat .
    (73) eMat -> eMat . + p
    (74) eMat -> eMat . - p
    (77) eMat -> eMat . + valoresMat
    (78) eMat -> eMat . - valoresMat
    (134) tCompare -> eMat .

    ;               reduce using rule 34 (valores -> eMat .)
    ,               reduce using rule 34 (valores -> eMat .)
    ]               reduce using rule 34 (valores -> eMat .)
    )               reduce using rule 34 (valores -> eMat .)
    }               reduce using rule 34 (valores -> eMat .)
    +               shift and go to state 140
    -               shift and go to state 141
    >               reduce using rule 134 (tCompare -> eMat .)
    <               reduce using rule 134 (tCompare -> eMat .)


state 93

    (105) paren -> ( . eMat )
    (144) parenBool -> ( . expBool )
    (73) eMat -> . eMat + p
    (74) eMat -> . eMat - p
    (75) eMat -> . valoresMat + p
    (76) eMat -> . valoresMat - p
    (77) eMat -> . eMat + valoresMat
    (78) eMat -> . eMat - valoresMat
    (79) eMat -> . valoresMat + valoresMat
    (80) eMat -> . valoresMat - valoresMat
    (81) eMat -> . p
    (110) expBool -> . or ? expBool : expBool
    (111) expBool -> . valoresBool ? expBool : expBool
    (112) expBool -> . or ? valoresBool : valoresBool
    (113) expBool -> . valoresBool ? valoresBool : valoresBool
    (114) expBool -> . or
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (82) p -> . p * exp
    (83) p -> . p / exp
    (84) p -> . p % exp
    (85) p -> . valoresMat * exp
    (86) p -> . valoresMat / exp
    (87) p -> . valoresMat % exp
    (88) p -> . p * valoresMat
    (89) p -> . p / valoresMat
    (90) p -> . p % valoresMat
    (91) p -> . valoresMat * valoresMat
    (92) p -> . valoresMat / valoresMat
    (93) p -> . valoresMat % valoresMat
    (94) p -> . exp
    (115) or -> . or OR and
    (116) or -> . valoresBool OR and
    (117) or -> . or OR valoresBool
    (118) or -> . valoresBool OR valoresBool
    (119) or -> . and
    (106) valoresBool -> . BOOL
    (107) valoresBool -> . funcBool
    (108) valoresBool -> . varYVals
    (109) valoresBool -> . varsOps
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (120) and -> . and AND eq
    (121) and -> . valoresBool AND eq
    (122) and -> . and AND valoresBool
    (123) and -> . valoresBool AND valoresBool
    (124) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (50) vecVal -> . ID m
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (125) eq -> . eq EQEQ parenBool
    (126) eq -> . eq DISTINTO parenBool
    (127) eq -> . valoresBool EQEQ parenBool
    (128) eq -> . valoresBool DISTINTO parenBool
    (129) eq -> . eq EQEQ valoresBool
    (130) eq -> . eq DISTINTO valoresBool
    (131) eq -> . valoresBool EQEQ valoresBool
    (132) eq -> . valoresBool DISTINTO valoresBool
    (133) eq -> . mayor
    (105) paren -> . ( eMat )
    (137) mayor -> . tCompare > tCompare
    (138) mayor -> . menor
    (134) tCompare -> . eMat
    (135) tCompare -> . varsOps
    (136) tCompare -> . varYVals
    (139) menor -> . tCompare < tCompare
    (140) menor -> . not
    (141) not -> . NOT not
    (142) not -> . NOT valoresBool
    (143) not -> . parenBool
    (144) parenBool -> . ( expBool )

    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    BOOL            shift and go to state 83
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    COLINEALES      shift and go to state 13
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 93
    NOT             shift and go to state 87

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    vecVal                         shift and go to state 9
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 142
    mayor                          shift and go to state 66
    paren                          shift and go to state 77
    varsOps                        shift and go to state 164
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    parenBool                      shift and go to state 86
    p                              shift and go to state 82
    iSing                          shift and go to state 75
    exp                            shift and go to state 85
    varYVals                       shift and go to state 165
    or                             shift and go to state 89
    expBool                        shift and go to state 145

state 94

    (42) valores -> vec .

    ;               reduce using rule 42 (valores -> vec .)
    ,               reduce using rule 42 (valores -> vec .)
    ]               reduce using rule 42 (valores -> vec .)
    )               reduce using rule 42 (valores -> vec .)
    }               reduce using rule 42 (valores -> vec .)


state 95

    (36) valores -> reg .

    ;               reduce using rule 36 (valores -> reg .)
    ,               reduce using rule 36 (valores -> reg .)
    ]               reduce using rule 36 (valores -> reg .)
    )               reduce using rule 36 (valores -> reg .)
    }               reduce using rule 36 (valores -> reg .)


state 96

    (38) valores -> STRING .
    (72) valoresMat -> STRING .

    ;               reduce using rule 38 (valores -> STRING .)
    ,               reduce using rule 38 (valores -> STRING .)
    ]               reduce using rule 38 (valores -> STRING .)
    )               reduce using rule 38 (valores -> STRING .)
    }               reduce using rule 38 (valores -> STRING .)
    +               reduce using rule 72 (valoresMat -> STRING .)
    -               reduce using rule 72 (valoresMat -> STRING .)
    *               reduce using rule 72 (valoresMat -> STRING .)
    /               reduce using rule 72 (valoresMat -> STRING .)
    %               reduce using rule 72 (valoresMat -> STRING .)
    ^               reduce using rule 72 (valoresMat -> STRING .)


state 97

    (31) vec -> [ . elem ]
    (32) elem -> . valores , elem
    (33) elem -> . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . reg
    (37) valores -> . INT
    (38) valores -> . STRING
    (39) valores -> . BOOL
    (40) valores -> . varYVals
    (41) valores -> . varsOps
    (42) valores -> . vec
    (43) valores -> . ID . valoresCampos
    (44) valores -> . RES
    (73) eMat -> . eMat + p
    (74) eMat -> . eMat - p
    (75) eMat -> . valoresMat + p
    (76) eMat -> . valoresMat - p
    (77) eMat -> . eMat + valoresMat
    (78) eMat -> . eMat - valoresMat
    (79) eMat -> . valoresMat + valoresMat
    (80) eMat -> . valoresMat - valoresMat
    (81) eMat -> . p
    (110) expBool -> . or ? expBool : expBool
    (111) expBool -> . valoresBool ? expBool : expBool
    (112) expBool -> . or ? valoresBool : valoresBool
    (113) expBool -> . valoresBool ? valoresBool : valoresBool
    (114) expBool -> . or
    (53) reg -> . { campos }
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (31) vec -> . [ elem ]
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (82) p -> . p * exp
    (83) p -> . p / exp
    (84) p -> . p % exp
    (85) p -> . valoresMat * exp
    (86) p -> . valoresMat / exp
    (87) p -> . valoresMat % exp
    (88) p -> . p * valoresMat
    (89) p -> . p / valoresMat
    (90) p -> . p % valoresMat
    (91) p -> . valoresMat * valoresMat
    (92) p -> . valoresMat / valoresMat
    (93) p -> . valoresMat % valoresMat
    (94) p -> . exp
    (115) or -> . or OR and
    (116) or -> . valoresBool OR and
    (117) or -> . or OR valoresBool
    (118) or -> . valoresBool OR valoresBool
    (119) or -> . and
    (106) valoresBool -> . BOOL
    (107) valoresBool -> . funcBool
    (108) valoresBool -> . varYVals
    (109) valoresBool -> . varsOps
    (50) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (120) and -> . and AND eq
    (121) and -> . valoresBool AND eq
    (122) and -> . and AND valoresBool
    (123) and -> . valoresBool AND valoresBool
    (124) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (125) eq -> . eq EQEQ parenBool
    (126) eq -> . eq DISTINTO parenBool
    (127) eq -> . valoresBool EQEQ parenBool
    (128) eq -> . valoresBool DISTINTO parenBool
    (129) eq -> . eq EQEQ valoresBool
    (130) eq -> . eq DISTINTO valoresBool
    (131) eq -> . valoresBool EQEQ valoresBool
    (132) eq -> . valoresBool DISTINTO valoresBool
    (133) eq -> . mayor
    (105) paren -> . ( eMat )
    (137) mayor -> . tCompare > tCompare
    (138) mayor -> . menor
    (134) tCompare -> . eMat
    (135) tCompare -> . varsOps
    (136) tCompare -> . varYVals
    (139) menor -> . tCompare < tCompare
    (140) menor -> . not
    (141) not -> . NOT not
    (142) not -> . NOT valoresBool
    (143) not -> . parenBool
    (144) parenBool -> . ( expBool )

    INT             shift and go to state 99
    STRING          shift and go to state 96
    BOOL            shift and go to state 101
    ID              shift and go to state 98
    RES             shift and go to state 91
    {               shift and go to state 103
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    [               shift and go to state 97
    FLOAT           shift and go to state 80
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 93
    NOT             shift and go to state 87

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    valores                        shift and go to state 166
    menor                          shift and go to state 81
    mayor                          shift and go to state 66
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 92
    vecVal                         shift and go to state 9
    vec                            shift and go to state 94
    paren                          shift and go to state 77
    reg                            shift and go to state 95
    varsOps                        shift and go to state 102
    exp                            shift and go to state 85
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    elem                           shift and go to state 167
    parenBool                      shift and go to state 86
    p                              shift and go to state 82
    iSing                          shift and go to state 75
    varYVals                       shift and go to state 104
    or                             shift and go to state 89
    expBool                        shift and go to state 105

state 98

    (43) valores -> ID . . valoresCampos
    (48) varYVals -> ID .
    (50) vecVal -> ID . m
    (51) m -> . [ INT ]
    (52) m -> . [ INT ] m

    .               shift and go to state 168
    MASMAS          reduce using rule 48 (varYVals -> ID .)
    MENOSMENOS      reduce using rule 48 (varYVals -> ID .)
    ,               reduce using rule 48 (varYVals -> ID .)
    ]               reduce using rule 48 (varYVals -> ID .)
    +               reduce using rule 48 (varYVals -> ID .)
    -               reduce using rule 48 (varYVals -> ID .)
    *               reduce using rule 48 (varYVals -> ID .)
    /               reduce using rule 48 (varYVals -> ID .)
    %               reduce using rule 48 (varYVals -> ID .)
    ^               reduce using rule 48 (varYVals -> ID .)
    ?               reduce using rule 48 (varYVals -> ID .)
    OR              reduce using rule 48 (varYVals -> ID .)
    AND             reduce using rule 48 (varYVals -> ID .)
    EQEQ            reduce using rule 48 (varYVals -> ID .)
    DISTINTO        reduce using rule 48 (varYVals -> ID .)
    >               reduce using rule 48 (varYVals -> ID .)
    <               reduce using rule 48 (varYVals -> ID .)
    ;               reduce using rule 48 (varYVals -> ID .)
    )               reduce using rule 48 (varYVals -> ID .)
    [               shift and go to state 46

    m                              shift and go to state 43

state 99

    (37) valores -> INT .
    (67) valoresMat -> INT .

    ;               reduce using rule 37 (valores -> INT .)
    ,               reduce using rule 37 (valores -> INT .)
    ]               reduce using rule 37 (valores -> INT .)
    )               reduce using rule 37 (valores -> INT .)
    }               reduce using rule 37 (valores -> INT .)
    +               reduce using rule 67 (valoresMat -> INT .)
    -               reduce using rule 67 (valoresMat -> INT .)
    *               reduce using rule 67 (valoresMat -> INT .)
    /               reduce using rule 67 (valoresMat -> INT .)
    %               reduce using rule 67 (valoresMat -> INT .)
    ^               reduce using rule 67 (valoresMat -> INT .)


state 100

    (27) funcVoid -> PRINT ( valores . )

    )               shift and go to state 169


state 101

    (39) valores -> BOOL .
    (106) valoresBool -> BOOL .

    ;               reduce using rule 39 (valores -> BOOL .)
    ,               reduce using rule 39 (valores -> BOOL .)
    ]               reduce using rule 39 (valores -> BOOL .)
    )               reduce using rule 39 (valores -> BOOL .)
    }               reduce using rule 39 (valores -> BOOL .)
    ?               reduce using rule 106 (valoresBool -> BOOL .)
    OR              reduce using rule 106 (valoresBool -> BOOL .)
    AND             reduce using rule 106 (valoresBool -> BOOL .)
    EQEQ            reduce using rule 106 (valoresBool -> BOOL .)
    DISTINTO        reduce using rule 106 (valoresBool -> BOOL .)


state 102

    (41) valores -> varsOps .
    (71) valoresMat -> varsOps .
    (109) valoresBool -> varsOps .
    (135) tCompare -> varsOps .

    ;               reduce using rule 41 (valores -> varsOps .)
    ,               reduce using rule 41 (valores -> varsOps .)
    ]               reduce using rule 41 (valores -> varsOps .)
    )               reduce using rule 41 (valores -> varsOps .)
    }               reduce using rule 41 (valores -> varsOps .)
    +               reduce using rule 71 (valoresMat -> varsOps .)
    -               reduce using rule 71 (valoresMat -> varsOps .)
    *               reduce using rule 71 (valoresMat -> varsOps .)
    /               reduce using rule 71 (valoresMat -> varsOps .)
    %               reduce using rule 71 (valoresMat -> varsOps .)
    ^               reduce using rule 71 (valoresMat -> varsOps .)
    ?               reduce using rule 109 (valoresBool -> varsOps .)
    OR              reduce using rule 109 (valoresBool -> varsOps .)
    AND             reduce using rule 109 (valoresBool -> varsOps .)
    EQEQ            reduce using rule 109 (valoresBool -> varsOps .)
    DISTINTO        reduce using rule 109 (valoresBool -> varsOps .)
    >               reduce using rule 135 (tCompare -> varsOps .)
    <               reduce using rule 135 (tCompare -> varsOps .)


state 103

    (53) reg -> { . campos }
    (54) campos -> . ID : valores , campos
    (55) campos -> . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . reg
    (37) valores -> . INT
    (38) valores -> . STRING
    (39) valores -> . BOOL
    (40) valores -> . varYVals
    (41) valores -> . varsOps
    (42) valores -> . vec
    (43) valores -> . ID . valoresCampos
    (44) valores -> . RES
    (73) eMat -> . eMat + p
    (74) eMat -> . eMat - p
    (75) eMat -> . valoresMat + p
    (76) eMat -> . valoresMat - p
    (77) eMat -> . eMat + valoresMat
    (78) eMat -> . eMat - valoresMat
    (79) eMat -> . valoresMat + valoresMat
    (80) eMat -> . valoresMat - valoresMat
    (81) eMat -> . p
    (110) expBool -> . or ? expBool : expBool
    (111) expBool -> . valoresBool ? expBool : expBool
    (112) expBool -> . or ? valoresBool : valoresBool
    (113) expBool -> . valoresBool ? valoresBool : valoresBool
    (114) expBool -> . or
    (53) reg -> . { campos }
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (31) vec -> . [ elem ]
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (82) p -> . p * exp
    (83) p -> . p / exp
    (84) p -> . p % exp
    (85) p -> . valoresMat * exp
    (86) p -> . valoresMat / exp
    (87) p -> . valoresMat % exp
    (88) p -> . p * valoresMat
    (89) p -> . p / valoresMat
    (90) p -> . p % valoresMat
    (91) p -> . valoresMat * valoresMat
    (92) p -> . valoresMat / valoresMat
    (93) p -> . valoresMat % valoresMat
    (94) p -> . exp
    (115) or -> . or OR and
    (116) or -> . valoresBool OR and
    (117) or -> . or OR valoresBool
    (118) or -> . valoresBool OR valoresBool
    (119) or -> . and
    (106) valoresBool -> . BOOL
    (107) valoresBool -> . funcBool
    (108) valoresBool -> . varYVals
    (109) valoresBool -> . varsOps
    (50) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (120) and -> . and AND eq
    (121) and -> . valoresBool AND eq
    (122) and -> . and AND valoresBool
    (123) and -> . valoresBool AND valoresBool
    (124) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (125) eq -> . eq EQEQ parenBool
    (126) eq -> . eq DISTINTO parenBool
    (127) eq -> . valoresBool EQEQ parenBool
    (128) eq -> . valoresBool DISTINTO parenBool
    (129) eq -> . eq EQEQ valoresBool
    (130) eq -> . eq DISTINTO valoresBool
    (131) eq -> . valoresBool EQEQ valoresBool
    (132) eq -> . valoresBool DISTINTO valoresBool
    (133) eq -> . mayor
    (105) paren -> . ( eMat )
    (137) mayor -> . tCompare > tCompare
    (138) mayor -> . menor
    (134) tCompare -> . eMat
    (135) tCompare -> . varsOps
    (136) tCompare -> . varYVals
    (139) menor -> . tCompare < tCompare
    (140) menor -> . not
    (141) not -> . NOT not
    (142) not -> . NOT valoresBool
    (143) not -> . parenBool
    (144) parenBool -> . ( expBool )

    ID              shift and go to state 171
    INT             shift and go to state 99
    STRING          shift and go to state 96
    BOOL            shift and go to state 101
    RES             shift and go to state 91
    {               shift and go to state 103
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    [               shift and go to state 97
    FLOAT           shift and go to state 80
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 93
    NOT             shift and go to state 87

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    mayor                          shift and go to state 66
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 92
    vecVal                         shift and go to state 9
    vec                            shift and go to state 94
    paren                          shift and go to state 77
    reg                            shift and go to state 95
    varsOps                        shift and go to state 102
    exp                            shift and go to state 85
    tCompare                       shift and go to state 76
    campos                         shift and go to state 170
    not                            shift and go to state 78
    valores                        shift and go to state 172
    parenBool                      shift and go to state 86
    p                              shift and go to state 82
    iSing                          shift and go to state 75
    varYVals                       shift and go to state 104
    or                             shift and go to state 89
    expBool                        shift and go to state 105

state 104

    (40) valores -> varYVals .
    (58) varsOps -> varYVals . MASMAS
    (59) varsOps -> varYVals . MENOSMENOS
    (70) valoresMat -> varYVals .
    (108) valoresBool -> varYVals .
    (136) tCompare -> varYVals .

    ;               reduce using rule 40 (valores -> varYVals .)
    ,               reduce using rule 40 (valores -> varYVals .)
    ]               reduce using rule 40 (valores -> varYVals .)
    )               reduce using rule 40 (valores -> varYVals .)
    }               reduce using rule 40 (valores -> varYVals .)
    MASMAS          shift and go to state 57
    MENOSMENOS      shift and go to state 58
    +               reduce using rule 70 (valoresMat -> varYVals .)
    -               reduce using rule 70 (valoresMat -> varYVals .)
    *               reduce using rule 70 (valoresMat -> varYVals .)
    /               reduce using rule 70 (valoresMat -> varYVals .)
    %               reduce using rule 70 (valoresMat -> varYVals .)
    ^               reduce using rule 70 (valoresMat -> varYVals .)
    ?               reduce using rule 108 (valoresBool -> varYVals .)
    OR              reduce using rule 108 (valoresBool -> varYVals .)
    AND             reduce using rule 108 (valoresBool -> varYVals .)
    EQEQ            reduce using rule 108 (valoresBool -> varYVals .)
    DISTINTO        reduce using rule 108 (valoresBool -> varYVals .)
    >               reduce using rule 136 (tCompare -> varYVals .)
    <               reduce using rule 136 (tCompare -> varYVals .)


state 105

    (35) valores -> expBool .

    ;               reduce using rule 35 (valores -> expBool .)
    ,               reduce using rule 35 (valores -> expBool .)
    ]               reduce using rule 35 (valores -> expBool .)
    )               reduce using rule 35 (valores -> expBool .)
    }               reduce using rule 35 (valores -> expBool .)


state 106

    (26) funcBool -> COLINEALES ( vec . , vec )

    ,               shift and go to state 173


state 107

    (12) loop -> FOR ( varAsig . ; expBool ; varsOps ) bloque

    ;               shift and go to state 174


state 108

    (61) varAsig -> ID . MULEQ valoresAsig
    (62) varAsig -> ID . DIVEQ valoresAsig
    (63) varAsig -> ID . MASEQ valoresAsig
    (64) varAsig -> ID . MENOSEQ valoresAsig
    (65) varAsig -> ID . = valoresAsig
    (66) varAsig -> ID . . ID = valoresAsig

    MULEQ           shift and go to state 45
    DIVEQ           shift and go to state 48
    MASEQ           shift and go to state 42
    MENOSEQ         shift and go to state 41
    =               shift and go to state 47
    .               shift and go to state 44


state 109

    (64) varAsig -> ID MENOSEQ valoresAsig .

    ;               reduce using rule 64 (varAsig -> ID MENOSEQ valoresAsig .)


state 110

    (60) valoresAsig -> valores .

    ;               reduce using rule 60 (valoresAsig -> valores .)


state 111

    (63) varAsig -> ID MASEQ valoresAsig .

    ;               reduce using rule 63 (varAsig -> ID MASEQ valoresAsig .)


state 112

    (66) varAsig -> ID . ID . = valoresAsig

    =               shift and go to state 175


state 113

    (61) varAsig -> ID MULEQ valoresAsig .

    ;               reduce using rule 61 (varAsig -> ID MULEQ valoresAsig .)


state 114

    (51) m -> [ INT . ]
    (52) m -> [ INT . ] m

    ]               shift and go to state 176


state 115

    (65) varAsig -> ID = valoresAsig .

    ;               reduce using rule 65 (varAsig -> ID = valoresAsig .)


state 116

    (62) varAsig -> ID DIVEQ valoresAsig .

    ;               reduce using rule 62 (varAsig -> ID DIVEQ valoresAsig .)


state 117

    (13) if -> IF ( expBool . ) bloque else

    )               shift and go to state 177


state 118

    (23) funcInt -> MULTIESCALAR ( vec . , eMat , param )

    ,               shift and go to state 178


state 119

    (25) funcString -> CAPITALIZAR ( eMat . )
    (73) eMat -> eMat . + p
    (74) eMat -> eMat . - p
    (77) eMat -> eMat . + valoresMat
    (78) eMat -> eMat . - valoresMat

    )               shift and go to state 179
    +               shift and go to state 140
    -               shift and go to state 141


state 120

    (105) paren -> ( . eMat )
    (73) eMat -> . eMat + p
    (74) eMat -> . eMat - p
    (75) eMat -> . valoresMat + p
    (76) eMat -> . valoresMat - p
    (77) eMat -> . eMat + valoresMat
    (78) eMat -> . eMat - valoresMat
    (79) eMat -> . valoresMat + valoresMat
    (80) eMat -> . valoresMat - valoresMat
    (81) eMat -> . p
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (82) p -> . p * exp
    (83) p -> . p / exp
    (84) p -> . p % exp
    (85) p -> . valoresMat * exp
    (86) p -> . valoresMat / exp
    (87) p -> . valoresMat % exp
    (88) p -> . p * valoresMat
    (89) p -> . p / valoresMat
    (90) p -> . p % valoresMat
    (91) p -> . valoresMat * valoresMat
    (92) p -> . valoresMat / valoresMat
    (93) p -> . valoresMat % valoresMat
    (94) p -> . exp
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (50) vecVal -> . ID m
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (105) paren -> . ( eMat )

    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 120

    eMat                           shift and go to state 180
    funcInt                        shift and go to state 65
    iSing                          shift and go to state 75
    p                              shift and go to state 82
    varsOps                        shift and go to state 121
    valoresMat                     shift and go to state 67
    paren                          shift and go to state 77
    exp                            shift and go to state 85
    varYVals                       shift and go to state 122
    vecVal                         shift and go to state 9

state 121

    (71) valoresMat -> varsOps .

    +               reduce using rule 71 (valoresMat -> varsOps .)
    -               reduce using rule 71 (valoresMat -> varsOps .)
    *               reduce using rule 71 (valoresMat -> varsOps .)
    /               reduce using rule 71 (valoresMat -> varsOps .)
    %               reduce using rule 71 (valoresMat -> varsOps .)
    ^               reduce using rule 71 (valoresMat -> varsOps .)
    >               reduce using rule 71 (valoresMat -> varsOps .)
    <               reduce using rule 71 (valoresMat -> varsOps .)
    )               reduce using rule 71 (valoresMat -> varsOps .)
    ;               reduce using rule 71 (valoresMat -> varsOps .)
    ,               reduce using rule 71 (valoresMat -> varsOps .)
    ]               reduce using rule 71 (valoresMat -> varsOps .)
    }               reduce using rule 71 (valoresMat -> varsOps .)
    EQEQ            reduce using rule 71 (valoresMat -> varsOps .)
    DISTINTO        reduce using rule 71 (valoresMat -> varsOps .)
    AND             reduce using rule 71 (valoresMat -> varsOps .)
    ?               reduce using rule 71 (valoresMat -> varsOps .)
    OR              reduce using rule 71 (valoresMat -> varsOps .)
    :               reduce using rule 71 (valoresMat -> varsOps .)


state 122

    (70) valoresMat -> varYVals .
    (58) varsOps -> varYVals . MASMAS
    (59) varsOps -> varYVals . MENOSMENOS

    +               reduce using rule 70 (valoresMat -> varYVals .)
    -               reduce using rule 70 (valoresMat -> varYVals .)
    *               reduce using rule 70 (valoresMat -> varYVals .)
    /               reduce using rule 70 (valoresMat -> varYVals .)
    %               reduce using rule 70 (valoresMat -> varYVals .)
    ^               reduce using rule 70 (valoresMat -> varYVals .)
    >               reduce using rule 70 (valoresMat -> varYVals .)
    <               reduce using rule 70 (valoresMat -> varYVals .)
    )               reduce using rule 70 (valoresMat -> varYVals .)
    ;               reduce using rule 70 (valoresMat -> varYVals .)
    ,               reduce using rule 70 (valoresMat -> varYVals .)
    ]               reduce using rule 70 (valoresMat -> varYVals .)
    }               reduce using rule 70 (valoresMat -> varYVals .)
    EQEQ            reduce using rule 70 (valoresMat -> varYVals .)
    DISTINTO        reduce using rule 70 (valoresMat -> varYVals .)
    AND             reduce using rule 70 (valoresMat -> varYVals .)
    ?               reduce using rule 70 (valoresMat -> varYVals .)
    OR              reduce using rule 70 (valoresMat -> varYVals .)
    :               reduce using rule 70 (valoresMat -> varYVals .)
    MASMAS          shift and go to state 57
    MENOSMENOS      shift and go to state 58


state 123

    (24) funcInt -> LENGTH ( vec . )

    )               shift and go to state 181


state 124

    (11) loop -> DO bloque WHILE ( . expBool ) ;
    (110) expBool -> . or ? expBool : expBool
    (111) expBool -> . valoresBool ? expBool : expBool
    (112) expBool -> . or ? valoresBool : valoresBool
    (113) expBool -> . valoresBool ? valoresBool : valoresBool
    (114) expBool -> . or
    (115) or -> . or OR and
    (116) or -> . valoresBool OR and
    (117) or -> . or OR valoresBool
    (118) or -> . valoresBool OR valoresBool
    (119) or -> . and
    (106) valoresBool -> . BOOL
    (107) valoresBool -> . funcBool
    (108) valoresBool -> . varYVals
    (109) valoresBool -> . varsOps
    (120) and -> . and AND eq
    (121) and -> . valoresBool AND eq
    (122) and -> . and AND valoresBool
    (123) and -> . valoresBool AND valoresBool
    (124) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (125) eq -> . eq EQEQ parenBool
    (126) eq -> . eq DISTINTO parenBool
    (127) eq -> . valoresBool EQEQ parenBool
    (128) eq -> . valoresBool DISTINTO parenBool
    (129) eq -> . eq EQEQ valoresBool
    (130) eq -> . eq DISTINTO valoresBool
    (131) eq -> . valoresBool EQEQ valoresBool
    (132) eq -> . valoresBool DISTINTO valoresBool
    (133) eq -> . mayor
    (50) vecVal -> . ID m
    (137) mayor -> . tCompare > tCompare
    (138) mayor -> . menor
    (134) tCompare -> . eMat
    (135) tCompare -> . varsOps
    (136) tCompare -> . varYVals
    (139) menor -> . tCompare < tCompare
    (140) menor -> . not
    (73) eMat -> . eMat + p
    (74) eMat -> . eMat - p
    (75) eMat -> . valoresMat + p
    (76) eMat -> . valoresMat - p
    (77) eMat -> . eMat + valoresMat
    (78) eMat -> . eMat - valoresMat
    (79) eMat -> . valoresMat + valoresMat
    (80) eMat -> . valoresMat - valoresMat
    (81) eMat -> . p
    (141) not -> . NOT not
    (142) not -> . NOT valoresBool
    (143) not -> . parenBool
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (82) p -> . p * exp
    (83) p -> . p / exp
    (84) p -> . p % exp
    (85) p -> . valoresMat * exp
    (86) p -> . valoresMat / exp
    (87) p -> . valoresMat % exp
    (88) p -> . p * valoresMat
    (89) p -> . p / valoresMat
    (90) p -> . p % valoresMat
    (91) p -> . valoresMat * valoresMat
    (92) p -> . valoresMat / valoresMat
    (93) p -> . valoresMat % valoresMat
    (94) p -> . exp
    (144) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (105) paren -> . ( eMat )

    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 87
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    (               shift and go to state 72
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 74
    +               shift and go to state 73

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 71
    vecVal                         shift and go to state 9
    paren                          shift and go to state 77
    iSing                          shift and go to state 75
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    varYVals                       shift and go to state 88
    or                             shift and go to state 89
    p                              shift and go to state 82
    varsOps                        shift and go to state 84
    exp                            shift and go to state 85
    mayor                          shift and go to state 66
    parenBool                      shift and go to state 86
    expBool                        shift and go to state 182

state 125

    (17) bloque -> { g } .

    RETURN          reduce using rule 17 (bloque -> { g } .)
    MENOSMENOS      reduce using rule 17 (bloque -> { g } .)
    MASMAS          reduce using rule 17 (bloque -> { g } .)
    ID              reduce using rule 17 (bloque -> { g } .)
    IF              reduce using rule 17 (bloque -> { g } .)
    WHILE           reduce using rule 17 (bloque -> { g } .)
    DO              reduce using rule 17 (bloque -> { g } .)
    FOR             reduce using rule 17 (bloque -> { g } .)
    PRINT           reduce using rule 17 (bloque -> { g } .)
    MULTIESCALAR    reduce using rule 17 (bloque -> { g } .)
    LENGTH          reduce using rule 17 (bloque -> { g } .)
    CAPITALIZAR     reduce using rule 17 (bloque -> { g } .)
    COLINEALES      reduce using rule 17 (bloque -> { g } .)
    $end            reduce using rule 17 (bloque -> { g } .)
    }               reduce using rule 17 (bloque -> { g } .)
    ELSE            reduce using rule 17 (bloque -> { g } .)


state 126

    (120) and -> and AND . eq
    (122) and -> and AND . valoresBool
    (125) eq -> . eq EQEQ parenBool
    (126) eq -> . eq DISTINTO parenBool
    (127) eq -> . valoresBool EQEQ parenBool
    (128) eq -> . valoresBool DISTINTO parenBool
    (129) eq -> . eq EQEQ valoresBool
    (130) eq -> . eq DISTINTO valoresBool
    (131) eq -> . valoresBool EQEQ valoresBool
    (132) eq -> . valoresBool DISTINTO valoresBool
    (133) eq -> . mayor
    (106) valoresBool -> . BOOL
    (107) valoresBool -> . funcBool
    (108) valoresBool -> . varYVals
    (109) valoresBool -> . varsOps
    (137) mayor -> . tCompare > tCompare
    (138) mayor -> . menor
    (26) funcBool -> . COLINEALES ( vec , vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (134) tCompare -> . eMat
    (135) tCompare -> . varsOps
    (136) tCompare -> . varYVals
    (139) menor -> . tCompare < tCompare
    (140) menor -> . not
    (50) vecVal -> . ID m
    (73) eMat -> . eMat + p
    (74) eMat -> . eMat - p
    (75) eMat -> . valoresMat + p
    (76) eMat -> . valoresMat - p
    (77) eMat -> . eMat + valoresMat
    (78) eMat -> . eMat - valoresMat
    (79) eMat -> . valoresMat + valoresMat
    (80) eMat -> . valoresMat - valoresMat
    (81) eMat -> . p
    (141) not -> . NOT not
    (142) not -> . NOT valoresBool
    (143) not -> . parenBool
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (82) p -> . p * exp
    (83) p -> . p / exp
    (84) p -> . p % exp
    (85) p -> . valoresMat * exp
    (86) p -> . valoresMat / exp
    (87) p -> . valoresMat % exp
    (88) p -> . p * valoresMat
    (89) p -> . p / valoresMat
    (90) p -> . p % valoresMat
    (91) p -> . valoresMat * valoresMat
    (92) p -> . valoresMat / valoresMat
    (93) p -> . valoresMat % valoresMat
    (94) p -> . exp
    (144) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (105) paren -> . ( eMat )

    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 87
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    (               shift and go to state 72
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 74
    +               shift and go to state 73

    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    mayor                          shift and go to state 66
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 183
    valoresBool                    shift and go to state 184
    eMat                           shift and go to state 71
    vecVal                         shift and go to state 9
    paren                          shift and go to state 77
    varsOps                        shift and go to state 84
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    p                              shift and go to state 82
    iSing                          shift and go to state 75
    exp                            shift and go to state 85
    varYVals                       shift and go to state 88
    parenBool                      shift and go to state 86

state 127

    (87) p -> valoresMat % . exp
    (93) p -> valoresMat % . valoresMat
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (105) paren -> . ( eMat )
    (50) vecVal -> . ID m

    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    -               shift and go to state 74
    +               shift and go to state 73
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    (               shift and go to state 120

    valoresMat                     shift and go to state 185
    funcInt                        shift and go to state 65
    vecVal                         shift and go to state 9
    varsOps                        shift and go to state 121
    exp                            shift and go to state 186
    paren                          shift and go to state 77
    varYVals                       shift and go to state 122
    iSing                          shift and go to state 75

state 128

    (75) eMat -> valoresMat + . p
    (79) eMat -> valoresMat + . valoresMat
    (82) p -> . p * exp
    (83) p -> . p / exp
    (84) p -> . p % exp
    (85) p -> . valoresMat * exp
    (86) p -> . valoresMat / exp
    (87) p -> . valoresMat % exp
    (88) p -> . p * valoresMat
    (89) p -> . p / valoresMat
    (90) p -> . p % valoresMat
    (91) p -> . valoresMat * valoresMat
    (92) p -> . valoresMat / valoresMat
    (93) p -> . valoresMat % valoresMat
    (94) p -> . exp
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (50) vecVal -> . ID m
    (105) paren -> . ( eMat )

    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 120

    valoresMat                     shift and go to state 187
    funcInt                        shift and go to state 65
    vecVal                         shift and go to state 9
    p                              shift and go to state 188
    varsOps                        shift and go to state 121
    exp                            shift and go to state 85
    paren                          shift and go to state 77
    varYVals                       shift and go to state 122
    iSing                          shift and go to state 75

state 129

    (85) p -> valoresMat * . exp
    (91) p -> valoresMat * . valoresMat
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (105) paren -> . ( eMat )
    (50) vecVal -> . ID m

    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    -               shift and go to state 74
    +               shift and go to state 73
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    (               shift and go to state 120

    valoresMat                     shift and go to state 189
    funcInt                        shift and go to state 65
    vecVal                         shift and go to state 9
    varsOps                        shift and go to state 121
    exp                            shift and go to state 190
    paren                          shift and go to state 77
    varYVals                       shift and go to state 122
    iSing                          shift and go to state 75

state 130

    (76) eMat -> valoresMat - . p
    (80) eMat -> valoresMat - . valoresMat
    (82) p -> . p * exp
    (83) p -> . p / exp
    (84) p -> . p % exp
    (85) p -> . valoresMat * exp
    (86) p -> . valoresMat / exp
    (87) p -> . valoresMat % exp
    (88) p -> . p * valoresMat
    (89) p -> . p / valoresMat
    (90) p -> . p % valoresMat
    (91) p -> . valoresMat * valoresMat
    (92) p -> . valoresMat / valoresMat
    (93) p -> . valoresMat % valoresMat
    (94) p -> . exp
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (50) vecVal -> . ID m
    (105) paren -> . ( eMat )

    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 120

    valoresMat                     shift and go to state 191
    funcInt                        shift and go to state 65
    vecVal                         shift and go to state 9
    p                              shift and go to state 192
    varsOps                        shift and go to state 121
    exp                            shift and go to state 85
    paren                          shift and go to state 77
    varYVals                       shift and go to state 122
    iSing                          shift and go to state 75

state 131

    (86) p -> valoresMat / . exp
    (92) p -> valoresMat / . valoresMat
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (105) paren -> . ( eMat )
    (50) vecVal -> . ID m

    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    -               shift and go to state 74
    +               shift and go to state 73
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    (               shift and go to state 120

    valoresMat                     shift and go to state 193
    funcInt                        shift and go to state 65
    vecVal                         shift and go to state 9
    varsOps                        shift and go to state 121
    exp                            shift and go to state 194
    paren                          shift and go to state 77
    varYVals                       shift and go to state 122
    iSing                          shift and go to state 75

state 132

    (96) exp -> valoresMat ^ . iSing
    (98) exp -> valoresMat ^ . valoresMat
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (105) paren -> . ( eMat )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (50) vecVal -> . ID m

    -               shift and go to state 74
    +               shift and go to state 73
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    (               shift and go to state 120
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26

    funcInt                        shift and go to state 65
    vecVal                         shift and go to state 9
    iSing                          shift and go to state 196
    valoresMat                     shift and go to state 195
    paren                          shift and go to state 77
    varYVals                       shift and go to state 122
    varsOps                        shift and go to state 121

state 133

    (125) eq -> eq EQEQ . parenBool
    (129) eq -> eq EQEQ . valoresBool
    (144) parenBool -> . ( expBool )
    (106) valoresBool -> . BOOL
    (107) valoresBool -> . funcBool
    (108) valoresBool -> . varYVals
    (109) valoresBool -> . varsOps
    (26) funcBool -> . COLINEALES ( vec , vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (50) vecVal -> . ID m

    (               shift and go to state 156
    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26

    funcBool                       shift and go to state 64
    valoresBool                    shift and go to state 197
    varsOps                        shift and go to state 158
    vecVal                         shift and go to state 9
    varYVals                       shift and go to state 159
    parenBool                      shift and go to state 198

state 134

    (126) eq -> eq DISTINTO . parenBool
    (130) eq -> eq DISTINTO . valoresBool
    (144) parenBool -> . ( expBool )
    (106) valoresBool -> . BOOL
    (107) valoresBool -> . funcBool
    (108) valoresBool -> . varYVals
    (109) valoresBool -> . varsOps
    (26) funcBool -> . COLINEALES ( vec , vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (50) vecVal -> . ID m

    (               shift and go to state 156
    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26

    funcBool                       shift and go to state 64
    valoresBool                    shift and go to state 199
    varsOps                        shift and go to state 158
    vecVal                         shift and go to state 9
    varYVals                       shift and go to state 159
    parenBool                      shift and go to state 200

state 135

    (121) and -> valoresBool AND . eq
    (123) and -> valoresBool AND . valoresBool
    (125) eq -> . eq EQEQ parenBool
    (126) eq -> . eq DISTINTO parenBool
    (127) eq -> . valoresBool EQEQ parenBool
    (128) eq -> . valoresBool DISTINTO parenBool
    (129) eq -> . eq EQEQ valoresBool
    (130) eq -> . eq DISTINTO valoresBool
    (131) eq -> . valoresBool EQEQ valoresBool
    (132) eq -> . valoresBool DISTINTO valoresBool
    (133) eq -> . mayor
    (106) valoresBool -> . BOOL
    (107) valoresBool -> . funcBool
    (108) valoresBool -> . varYVals
    (109) valoresBool -> . varsOps
    (137) mayor -> . tCompare > tCompare
    (138) mayor -> . menor
    (26) funcBool -> . COLINEALES ( vec , vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (134) tCompare -> . eMat
    (135) tCompare -> . varsOps
    (136) tCompare -> . varYVals
    (139) menor -> . tCompare < tCompare
    (140) menor -> . not
    (50) vecVal -> . ID m
    (73) eMat -> . eMat + p
    (74) eMat -> . eMat - p
    (75) eMat -> . valoresMat + p
    (76) eMat -> . valoresMat - p
    (77) eMat -> . eMat + valoresMat
    (78) eMat -> . eMat - valoresMat
    (79) eMat -> . valoresMat + valoresMat
    (80) eMat -> . valoresMat - valoresMat
    (81) eMat -> . p
    (141) not -> . NOT not
    (142) not -> . NOT valoresBool
    (143) not -> . parenBool
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (82) p -> . p * exp
    (83) p -> . p / exp
    (84) p -> . p % exp
    (85) p -> . valoresMat * exp
    (86) p -> . valoresMat / exp
    (87) p -> . valoresMat % exp
    (88) p -> . p * valoresMat
    (89) p -> . p / valoresMat
    (90) p -> . p % valoresMat
    (91) p -> . valoresMat * valoresMat
    (92) p -> . valoresMat / valoresMat
    (93) p -> . valoresMat % valoresMat
    (94) p -> . exp
    (144) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (105) paren -> . ( eMat )

    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 87
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    (               shift and go to state 72
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 74
    +               shift and go to state 73

    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    mayor                          shift and go to state 66
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 201
    valoresBool                    shift and go to state 202
    eMat                           shift and go to state 71
    vecVal                         shift and go to state 9
    paren                          shift and go to state 77
    varsOps                        shift and go to state 84
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    p                              shift and go to state 82
    iSing                          shift and go to state 75
    exp                            shift and go to state 85
    varYVals                       shift and go to state 88
    parenBool                      shift and go to state 86

state 136

    (128) eq -> valoresBool DISTINTO . parenBool
    (132) eq -> valoresBool DISTINTO . valoresBool
    (144) parenBool -> . ( expBool )
    (106) valoresBool -> . BOOL
    (107) valoresBool -> . funcBool
    (108) valoresBool -> . varYVals
    (109) valoresBool -> . varsOps
    (26) funcBool -> . COLINEALES ( vec , vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (50) vecVal -> . ID m

    (               shift and go to state 156
    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26

    funcBool                       shift and go to state 64
    parenBool                      shift and go to state 203
    varsOps                        shift and go to state 158
    vecVal                         shift and go to state 9
    varYVals                       shift and go to state 159
    valoresBool                    shift and go to state 204

state 137

    (127) eq -> valoresBool EQEQ . parenBool
    (131) eq -> valoresBool EQEQ . valoresBool
    (144) parenBool -> . ( expBool )
    (106) valoresBool -> . BOOL
    (107) valoresBool -> . funcBool
    (108) valoresBool -> . varYVals
    (109) valoresBool -> . varsOps
    (26) funcBool -> . COLINEALES ( vec , vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (50) vecVal -> . ID m

    (               shift and go to state 156
    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26

    funcBool                       shift and go to state 64
    parenBool                      shift and go to state 205
    varsOps                        shift and go to state 158
    vecVal                         shift and go to state 9
    varYVals                       shift and go to state 159
    valoresBool                    shift and go to state 206

state 138

    (116) or -> valoresBool OR . and
    (118) or -> valoresBool OR . valoresBool
    (120) and -> . and AND eq
    (121) and -> . valoresBool AND eq
    (122) and -> . and AND valoresBool
    (123) and -> . valoresBool AND valoresBool
    (124) and -> . eq
    (106) valoresBool -> . BOOL
    (107) valoresBool -> . funcBool
    (108) valoresBool -> . varYVals
    (109) valoresBool -> . varsOps
    (125) eq -> . eq EQEQ parenBool
    (126) eq -> . eq DISTINTO parenBool
    (127) eq -> . valoresBool EQEQ parenBool
    (128) eq -> . valoresBool DISTINTO parenBool
    (129) eq -> . eq EQEQ valoresBool
    (130) eq -> . eq DISTINTO valoresBool
    (131) eq -> . valoresBool EQEQ valoresBool
    (132) eq -> . valoresBool DISTINTO valoresBool
    (133) eq -> . mayor
    (26) funcBool -> . COLINEALES ( vec , vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (137) mayor -> . tCompare > tCompare
    (138) mayor -> . menor
    (50) vecVal -> . ID m
    (134) tCompare -> . eMat
    (135) tCompare -> . varsOps
    (136) tCompare -> . varYVals
    (139) menor -> . tCompare < tCompare
    (140) menor -> . not
    (73) eMat -> . eMat + p
    (74) eMat -> . eMat - p
    (75) eMat -> . valoresMat + p
    (76) eMat -> . valoresMat - p
    (77) eMat -> . eMat + valoresMat
    (78) eMat -> . eMat - valoresMat
    (79) eMat -> . valoresMat + valoresMat
    (80) eMat -> . valoresMat - valoresMat
    (81) eMat -> . p
    (141) not -> . NOT not
    (142) not -> . NOT valoresBool
    (143) not -> . parenBool
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (82) p -> . p * exp
    (83) p -> . p / exp
    (84) p -> . p % exp
    (85) p -> . valoresMat * exp
    (86) p -> . valoresMat / exp
    (87) p -> . valoresMat % exp
    (88) p -> . p * valoresMat
    (89) p -> . p / valoresMat
    (90) p -> . p % valoresMat
    (91) p -> . valoresMat * valoresMat
    (92) p -> . valoresMat / valoresMat
    (93) p -> . valoresMat % valoresMat
    (94) p -> . exp
    (144) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (105) paren -> . ( eMat )

    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 87
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    (               shift and go to state 72
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 74
    +               shift and go to state 73

    and                            shift and go to state 207
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    vecVal                         shift and go to state 9
    valoresBool                    shift and go to state 208
    eMat                           shift and go to state 71
    mayor                          shift and go to state 66
    paren                          shift and go to state 77
    varsOps                        shift and go to state 84
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    p                              shift and go to state 82
    iSing                          shift and go to state 75
    exp                            shift and go to state 85
    varYVals                       shift and go to state 88
    parenBool                      shift and go to state 86

state 139

    (111) expBool -> valoresBool ? . expBool : expBool
    (113) expBool -> valoresBool ? . valoresBool : valoresBool
    (110) expBool -> . or ? expBool : expBool
    (111) expBool -> . valoresBool ? expBool : expBool
    (112) expBool -> . or ? valoresBool : valoresBool
    (113) expBool -> . valoresBool ? valoresBool : valoresBool
    (114) expBool -> . or
    (106) valoresBool -> . BOOL
    (107) valoresBool -> . funcBool
    (108) valoresBool -> . varYVals
    (109) valoresBool -> . varsOps
    (115) or -> . or OR and
    (116) or -> . valoresBool OR and
    (117) or -> . or OR valoresBool
    (118) or -> . valoresBool OR valoresBool
    (119) or -> . and
    (26) funcBool -> . COLINEALES ( vec , vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (120) and -> . and AND eq
    (121) and -> . valoresBool AND eq
    (122) and -> . and AND valoresBool
    (123) and -> . valoresBool AND valoresBool
    (124) and -> . eq
    (50) vecVal -> . ID m
    (125) eq -> . eq EQEQ parenBool
    (126) eq -> . eq DISTINTO parenBool
    (127) eq -> . valoresBool EQEQ parenBool
    (128) eq -> . valoresBool DISTINTO parenBool
    (129) eq -> . eq EQEQ valoresBool
    (130) eq -> . eq DISTINTO valoresBool
    (131) eq -> . valoresBool EQEQ valoresBool
    (132) eq -> . valoresBool DISTINTO valoresBool
    (133) eq -> . mayor
    (137) mayor -> . tCompare > tCompare
    (138) mayor -> . menor
    (134) tCompare -> . eMat
    (135) tCompare -> . varsOps
    (136) tCompare -> . varYVals
    (139) menor -> . tCompare < tCompare
    (140) menor -> . not
    (73) eMat -> . eMat + p
    (74) eMat -> . eMat - p
    (75) eMat -> . valoresMat + p
    (76) eMat -> . valoresMat - p
    (77) eMat -> . eMat + valoresMat
    (78) eMat -> . eMat - valoresMat
    (79) eMat -> . valoresMat + valoresMat
    (80) eMat -> . valoresMat - valoresMat
    (81) eMat -> . p
    (141) not -> . NOT not
    (142) not -> . NOT valoresBool
    (143) not -> . parenBool
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (82) p -> . p * exp
    (83) p -> . p / exp
    (84) p -> . p % exp
    (85) p -> . valoresMat * exp
    (86) p -> . valoresMat / exp
    (87) p -> . valoresMat % exp
    (88) p -> . p * valoresMat
    (89) p -> . p / valoresMat
    (90) p -> . p % valoresMat
    (91) p -> . valoresMat * valoresMat
    (92) p -> . valoresMat / valoresMat
    (93) p -> . valoresMat % valoresMat
    (94) p -> . exp
    (144) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (105) paren -> . ( eMat )

    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 87
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    (               shift and go to state 72
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 74
    +               shift and go to state 73

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    vecVal                         shift and go to state 9
    valoresBool                    shift and go to state 209
    eMat                           shift and go to state 71
    mayor                          shift and go to state 66
    paren                          shift and go to state 77
    iSing                          shift and go to state 75
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    parenBool                      shift and go to state 86
    p                              shift and go to state 82
    varsOps                        shift and go to state 84
    exp                            shift and go to state 85
    varYVals                       shift and go to state 88
    or                             shift and go to state 89
    expBool                        shift and go to state 210

state 140

    (73) eMat -> eMat + . p
    (77) eMat -> eMat + . valoresMat
    (82) p -> . p * exp
    (83) p -> . p / exp
    (84) p -> . p % exp
    (85) p -> . valoresMat * exp
    (86) p -> . valoresMat / exp
    (87) p -> . valoresMat % exp
    (88) p -> . p * valoresMat
    (89) p -> . p / valoresMat
    (90) p -> . p % valoresMat
    (91) p -> . valoresMat * valoresMat
    (92) p -> . valoresMat / valoresMat
    (93) p -> . valoresMat % valoresMat
    (94) p -> . exp
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (50) vecVal -> . ID m
    (105) paren -> . ( eMat )

    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 120

    valoresMat                     shift and go to state 211
    funcInt                        shift and go to state 65
    vecVal                         shift and go to state 9
    p                              shift and go to state 212
    varsOps                        shift and go to state 121
    exp                            shift and go to state 85
    paren                          shift and go to state 77
    varYVals                       shift and go to state 122
    iSing                          shift and go to state 75

state 141

    (74) eMat -> eMat - . p
    (78) eMat -> eMat - . valoresMat
    (82) p -> . p * exp
    (83) p -> . p / exp
    (84) p -> . p % exp
    (85) p -> . valoresMat * exp
    (86) p -> . valoresMat / exp
    (87) p -> . valoresMat % exp
    (88) p -> . p * valoresMat
    (89) p -> . p / valoresMat
    (90) p -> . p % valoresMat
    (91) p -> . valoresMat * valoresMat
    (92) p -> . valoresMat / valoresMat
    (93) p -> . valoresMat % valoresMat
    (94) p -> . exp
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (50) vecVal -> . ID m
    (105) paren -> . ( eMat )

    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 120

    valoresMat                     shift and go to state 213
    funcInt                        shift and go to state 65
    vecVal                         shift and go to state 9
    p                              shift and go to state 214
    varsOps                        shift and go to state 121
    exp                            shift and go to state 85
    paren                          shift and go to state 77
    varYVals                       shift and go to state 122
    iSing                          shift and go to state 75

state 142

    (105) paren -> ( eMat . )
    (73) eMat -> eMat . + p
    (74) eMat -> eMat . - p
    (77) eMat -> eMat . + valoresMat
    (78) eMat -> eMat . - valoresMat
    (134) tCompare -> eMat .

    )               shift and go to state 215
    +               shift and go to state 140
    -               shift and go to state 141
    >               reduce using rule 134 (tCompare -> eMat .)
    <               reduce using rule 134 (tCompare -> eMat .)


state 143

    (109) valoresBool -> varsOps .
    (71) valoresMat -> varsOps .
    (135) tCompare -> varsOps .

    ?               reduce using rule 109 (valoresBool -> varsOps .)
    OR              reduce using rule 109 (valoresBool -> varsOps .)
    AND             reduce using rule 109 (valoresBool -> varsOps .)
    EQEQ            reduce using rule 109 (valoresBool -> varsOps .)
    DISTINTO        reduce using rule 109 (valoresBool -> varsOps .)
    +               reduce using rule 71 (valoresMat -> varsOps .)
    -               reduce using rule 71 (valoresMat -> varsOps .)
    *               reduce using rule 71 (valoresMat -> varsOps .)
    /               reduce using rule 71 (valoresMat -> varsOps .)
    %               reduce using rule 71 (valoresMat -> varsOps .)
    ^               reduce using rule 71 (valoresMat -> varsOps .)
    >               reduce using rule 135 (tCompare -> varsOps .)
    <               reduce using rule 135 (tCompare -> varsOps .)


state 144

    (108) valoresBool -> varYVals .
    (70) valoresMat -> varYVals .
    (58) varsOps -> varYVals . MASMAS
    (59) varsOps -> varYVals . MENOSMENOS
    (136) tCompare -> varYVals .

    ?               reduce using rule 108 (valoresBool -> varYVals .)
    OR              reduce using rule 108 (valoresBool -> varYVals .)
    AND             reduce using rule 108 (valoresBool -> varYVals .)
    EQEQ            reduce using rule 108 (valoresBool -> varYVals .)
    DISTINTO        reduce using rule 108 (valoresBool -> varYVals .)
    +               reduce using rule 70 (valoresMat -> varYVals .)
    -               reduce using rule 70 (valoresMat -> varYVals .)
    *               reduce using rule 70 (valoresMat -> varYVals .)
    /               reduce using rule 70 (valoresMat -> varYVals .)
    %               reduce using rule 70 (valoresMat -> varYVals .)
    ^               reduce using rule 70 (valoresMat -> varYVals .)
    MASMAS          shift and go to state 57
    MENOSMENOS      shift and go to state 58
    >               reduce using rule 136 (tCompare -> varYVals .)
    <               reduce using rule 136 (tCompare -> varYVals .)


state 145

    (144) parenBool -> ( expBool . )

    )               shift and go to state 216


state 146

    (103) iSing -> + valoresMat .

    ^               reduce using rule 103 (iSing -> + valoresMat .)
    *               reduce using rule 103 (iSing -> + valoresMat .)
    /               reduce using rule 103 (iSing -> + valoresMat .)
    %               reduce using rule 103 (iSing -> + valoresMat .)
    +               reduce using rule 103 (iSing -> + valoresMat .)
    -               reduce using rule 103 (iSing -> + valoresMat .)
    ,               reduce using rule 103 (iSing -> + valoresMat .)
    ]               reduce using rule 103 (iSing -> + valoresMat .)
    >               reduce using rule 103 (iSing -> + valoresMat .)
    <               reduce using rule 103 (iSing -> + valoresMat .)
    )               reduce using rule 103 (iSing -> + valoresMat .)
    }               reduce using rule 103 (iSing -> + valoresMat .)
    EQEQ            reduce using rule 103 (iSing -> + valoresMat .)
    DISTINTO        reduce using rule 103 (iSing -> + valoresMat .)
    AND             reduce using rule 103 (iSing -> + valoresMat .)
    ?               reduce using rule 103 (iSing -> + valoresMat .)
    OR              reduce using rule 103 (iSing -> + valoresMat .)
    ;               reduce using rule 103 (iSing -> + valoresMat .)
    :               reduce using rule 103 (iSing -> + valoresMat .)


state 147

    (101) iSing -> + paren .

    ^               reduce using rule 101 (iSing -> + paren .)
    *               reduce using rule 101 (iSing -> + paren .)
    /               reduce using rule 101 (iSing -> + paren .)
    %               reduce using rule 101 (iSing -> + paren .)
    +               reduce using rule 101 (iSing -> + paren .)
    -               reduce using rule 101 (iSing -> + paren .)
    ,               reduce using rule 101 (iSing -> + paren .)
    ]               reduce using rule 101 (iSing -> + paren .)
    >               reduce using rule 101 (iSing -> + paren .)
    <               reduce using rule 101 (iSing -> + paren .)
    )               reduce using rule 101 (iSing -> + paren .)
    }               reduce using rule 101 (iSing -> + paren .)
    EQEQ            reduce using rule 101 (iSing -> + paren .)
    DISTINTO        reduce using rule 101 (iSing -> + paren .)
    AND             reduce using rule 101 (iSing -> + paren .)
    ?               reduce using rule 101 (iSing -> + paren .)
    OR              reduce using rule 101 (iSing -> + paren .)
    ;               reduce using rule 101 (iSing -> + paren .)
    :               reduce using rule 101 (iSing -> + paren .)


state 148

    (102) iSing -> - valoresMat .

    ^               reduce using rule 102 (iSing -> - valoresMat .)
    *               reduce using rule 102 (iSing -> - valoresMat .)
    /               reduce using rule 102 (iSing -> - valoresMat .)
    %               reduce using rule 102 (iSing -> - valoresMat .)
    +               reduce using rule 102 (iSing -> - valoresMat .)
    -               reduce using rule 102 (iSing -> - valoresMat .)
    ,               reduce using rule 102 (iSing -> - valoresMat .)
    ]               reduce using rule 102 (iSing -> - valoresMat .)
    >               reduce using rule 102 (iSing -> - valoresMat .)
    <               reduce using rule 102 (iSing -> - valoresMat .)
    )               reduce using rule 102 (iSing -> - valoresMat .)
    }               reduce using rule 102 (iSing -> - valoresMat .)
    EQEQ            reduce using rule 102 (iSing -> - valoresMat .)
    DISTINTO        reduce using rule 102 (iSing -> - valoresMat .)
    AND             reduce using rule 102 (iSing -> - valoresMat .)
    ?               reduce using rule 102 (iSing -> - valoresMat .)
    OR              reduce using rule 102 (iSing -> - valoresMat .)
    ;               reduce using rule 102 (iSing -> - valoresMat .)
    :               reduce using rule 102 (iSing -> - valoresMat .)


state 149

    (100) iSing -> - paren .

    ^               reduce using rule 100 (iSing -> - paren .)
    *               reduce using rule 100 (iSing -> - paren .)
    /               reduce using rule 100 (iSing -> - paren .)
    %               reduce using rule 100 (iSing -> - paren .)
    +               reduce using rule 100 (iSing -> - paren .)
    -               reduce using rule 100 (iSing -> - paren .)
    ,               reduce using rule 100 (iSing -> - paren .)
    ]               reduce using rule 100 (iSing -> - paren .)
    >               reduce using rule 100 (iSing -> - paren .)
    <               reduce using rule 100 (iSing -> - paren .)
    )               reduce using rule 100 (iSing -> - paren .)
    }               reduce using rule 100 (iSing -> - paren .)
    EQEQ            reduce using rule 100 (iSing -> - paren .)
    DISTINTO        reduce using rule 100 (iSing -> - paren .)
    AND             reduce using rule 100 (iSing -> - paren .)
    ?               reduce using rule 100 (iSing -> - paren .)
    OR              reduce using rule 100 (iSing -> - paren .)
    ;               reduce using rule 100 (iSing -> - paren .)
    :               reduce using rule 100 (iSing -> - paren .)


state 150

    (139) menor -> tCompare < . tCompare
    (134) tCompare -> . eMat
    (135) tCompare -> . varsOps
    (136) tCompare -> . varYVals
    (73) eMat -> . eMat + p
    (74) eMat -> . eMat - p
    (75) eMat -> . valoresMat + p
    (76) eMat -> . valoresMat - p
    (77) eMat -> . eMat + valoresMat
    (78) eMat -> . eMat - valoresMat
    (79) eMat -> . valoresMat + valoresMat
    (80) eMat -> . valoresMat - valoresMat
    (81) eMat -> . p
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (82) p -> . p * exp
    (83) p -> . p / exp
    (84) p -> . p % exp
    (85) p -> . valoresMat * exp
    (86) p -> . valoresMat / exp
    (87) p -> . valoresMat % exp
    (88) p -> . p * valoresMat
    (89) p -> . p / valoresMat
    (90) p -> . p % valoresMat
    (91) p -> . valoresMat * valoresMat
    (92) p -> . valoresMat / valoresMat
    (93) p -> . valoresMat % valoresMat
    (94) p -> . exp
    (50) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (105) paren -> . ( eMat )

    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    ID              shift and go to state 55
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 120

    eMat                           shift and go to state 71
    p                              shift and go to state 82
    funcInt                        shift and go to state 65
    iSing                          shift and go to state 75
    tCompare                       shift and go to state 217
    varsOps                        shift and go to state 218
    valoresMat                     shift and go to state 67
    paren                          shift and go to state 77
    exp                            shift and go to state 85
    varYVals                       shift and go to state 219
    vecVal                         shift and go to state 9

state 151

    (137) mayor -> tCompare > . tCompare
    (134) tCompare -> . eMat
    (135) tCompare -> . varsOps
    (136) tCompare -> . varYVals
    (73) eMat -> . eMat + p
    (74) eMat -> . eMat - p
    (75) eMat -> . valoresMat + p
    (76) eMat -> . valoresMat - p
    (77) eMat -> . eMat + valoresMat
    (78) eMat -> . eMat - valoresMat
    (79) eMat -> . valoresMat + valoresMat
    (80) eMat -> . valoresMat - valoresMat
    (81) eMat -> . p
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (82) p -> . p * exp
    (83) p -> . p / exp
    (84) p -> . p % exp
    (85) p -> . valoresMat * exp
    (86) p -> . valoresMat / exp
    (87) p -> . valoresMat % exp
    (88) p -> . p * valoresMat
    (89) p -> . p / valoresMat
    (90) p -> . p % valoresMat
    (91) p -> . valoresMat * valoresMat
    (92) p -> . valoresMat / valoresMat
    (93) p -> . valoresMat % valoresMat
    (94) p -> . exp
    (50) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (105) paren -> . ( eMat )

    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    ID              shift and go to state 55
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 120

    eMat                           shift and go to state 71
    p                              shift and go to state 82
    funcInt                        shift and go to state 65
    iSing                          shift and go to state 75
    tCompare                       shift and go to state 220
    varsOps                        shift and go to state 218
    valoresMat                     shift and go to state 67
    paren                          shift and go to state 77
    exp                            shift and go to state 85
    varYVals                       shift and go to state 219
    vecVal                         shift and go to state 9

state 152

    (84) p -> p % . exp
    (90) p -> p % . valoresMat
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (105) paren -> . ( eMat )
    (50) vecVal -> . ID m

    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    -               shift and go to state 74
    +               shift and go to state 73
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    (               shift and go to state 120

    exp                            shift and go to state 222
    funcInt                        shift and go to state 65
    vecVal                         shift and go to state 9
    iSing                          shift and go to state 75
    valoresMat                     shift and go to state 221
    paren                          shift and go to state 77
    varYVals                       shift and go to state 122
    varsOps                        shift and go to state 121

state 153

    (82) p -> p * . exp
    (88) p -> p * . valoresMat
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (105) paren -> . ( eMat )
    (50) vecVal -> . ID m

    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    -               shift and go to state 74
    +               shift and go to state 73
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    (               shift and go to state 120

    exp                            shift and go to state 224
    funcInt                        shift and go to state 65
    vecVal                         shift and go to state 9
    iSing                          shift and go to state 75
    valoresMat                     shift and go to state 223
    paren                          shift and go to state 77
    varYVals                       shift and go to state 122
    varsOps                        shift and go to state 121

state 154

    (83) p -> p / . exp
    (89) p -> p / . valoresMat
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (105) paren -> . ( eMat )
    (50) vecVal -> . ID m

    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    -               shift and go to state 74
    +               shift and go to state 73
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    (               shift and go to state 120

    exp                            shift and go to state 226
    funcInt                        shift and go to state 65
    vecVal                         shift and go to state 9
    iSing                          shift and go to state 75
    valoresMat                     shift and go to state 225
    paren                          shift and go to state 77
    varYVals                       shift and go to state 122
    varsOps                        shift and go to state 121

state 155

    (95) exp -> exp ^ . iSing
    (97) exp -> exp ^ . valoresMat
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (105) paren -> . ( eMat )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (50) vecVal -> . ID m

    -               shift and go to state 74
    +               shift and go to state 73
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    (               shift and go to state 120
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26

    funcInt                        shift and go to state 65
    vecVal                         shift and go to state 9
    iSing                          shift and go to state 228
    valoresMat                     shift and go to state 227
    paren                          shift and go to state 77
    varYVals                       shift and go to state 122
    varsOps                        shift and go to state 121

state 156

    (144) parenBool -> ( . expBool )
    (110) expBool -> . or ? expBool : expBool
    (111) expBool -> . valoresBool ? expBool : expBool
    (112) expBool -> . or ? valoresBool : valoresBool
    (113) expBool -> . valoresBool ? valoresBool : valoresBool
    (114) expBool -> . or
    (115) or -> . or OR and
    (116) or -> . valoresBool OR and
    (117) or -> . or OR valoresBool
    (118) or -> . valoresBool OR valoresBool
    (119) or -> . and
    (106) valoresBool -> . BOOL
    (107) valoresBool -> . funcBool
    (108) valoresBool -> . varYVals
    (109) valoresBool -> . varsOps
    (120) and -> . and AND eq
    (121) and -> . valoresBool AND eq
    (122) and -> . and AND valoresBool
    (123) and -> . valoresBool AND valoresBool
    (124) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (125) eq -> . eq EQEQ parenBool
    (126) eq -> . eq DISTINTO parenBool
    (127) eq -> . valoresBool EQEQ parenBool
    (128) eq -> . valoresBool DISTINTO parenBool
    (129) eq -> . eq EQEQ valoresBool
    (130) eq -> . eq DISTINTO valoresBool
    (131) eq -> . valoresBool EQEQ valoresBool
    (132) eq -> . valoresBool DISTINTO valoresBool
    (133) eq -> . mayor
    (50) vecVal -> . ID m
    (137) mayor -> . tCompare > tCompare
    (138) mayor -> . menor
    (134) tCompare -> . eMat
    (135) tCompare -> . varsOps
    (136) tCompare -> . varYVals
    (139) menor -> . tCompare < tCompare
    (140) menor -> . not
    (73) eMat -> . eMat + p
    (74) eMat -> . eMat - p
    (75) eMat -> . valoresMat + p
    (76) eMat -> . valoresMat - p
    (77) eMat -> . eMat + valoresMat
    (78) eMat -> . eMat - valoresMat
    (79) eMat -> . valoresMat + valoresMat
    (80) eMat -> . valoresMat - valoresMat
    (81) eMat -> . p
    (141) not -> . NOT not
    (142) not -> . NOT valoresBool
    (143) not -> . parenBool
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (82) p -> . p * exp
    (83) p -> . p / exp
    (84) p -> . p % exp
    (85) p -> . valoresMat * exp
    (86) p -> . valoresMat / exp
    (87) p -> . valoresMat % exp
    (88) p -> . p * valoresMat
    (89) p -> . p / valoresMat
    (90) p -> . p % valoresMat
    (91) p -> . valoresMat * valoresMat
    (92) p -> . valoresMat / valoresMat
    (93) p -> . valoresMat % valoresMat
    (94) p -> . exp
    (144) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (105) paren -> . ( eMat )

    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 87
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    (               shift and go to state 72
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 74
    +               shift and go to state 73

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 71
    vecVal                         shift and go to state 9
    paren                          shift and go to state 77
    iSing                          shift and go to state 75
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    varYVals                       shift and go to state 88
    or                             shift and go to state 89
    p                              shift and go to state 82
    varsOps                        shift and go to state 84
    exp                            shift and go to state 85
    mayor                          shift and go to state 66
    parenBool                      shift and go to state 86
    expBool                        shift and go to state 145

state 157

    (141) not -> NOT not .

    EQEQ            reduce using rule 141 (not -> NOT not .)
    DISTINTO        reduce using rule 141 (not -> NOT not .)
    AND             reduce using rule 141 (not -> NOT not .)
    ?               reduce using rule 141 (not -> NOT not .)
    OR              reduce using rule 141 (not -> NOT not .)
    ;               reduce using rule 141 (not -> NOT not .)
    }               reduce using rule 141 (not -> NOT not .)
    )               reduce using rule 141 (not -> NOT not .)
    ,               reduce using rule 141 (not -> NOT not .)
    ]               reduce using rule 141 (not -> NOT not .)
    :               reduce using rule 141 (not -> NOT not .)


state 158

    (109) valoresBool -> varsOps .

    )               reduce using rule 109 (valoresBool -> varsOps .)
    ;               reduce using rule 109 (valoresBool -> varsOps .)
    ,               reduce using rule 109 (valoresBool -> varsOps .)
    ]               reduce using rule 109 (valoresBool -> varsOps .)
    }               reduce using rule 109 (valoresBool -> varsOps .)
    :               reduce using rule 109 (valoresBool -> varsOps .)
    EQEQ            reduce using rule 109 (valoresBool -> varsOps .)
    DISTINTO        reduce using rule 109 (valoresBool -> varsOps .)
    AND             reduce using rule 109 (valoresBool -> varsOps .)
    ?               reduce using rule 109 (valoresBool -> varsOps .)
    OR              reduce using rule 109 (valoresBool -> varsOps .)


state 159

    (108) valoresBool -> varYVals .
    (58) varsOps -> varYVals . MASMAS
    (59) varsOps -> varYVals . MENOSMENOS

    )               reduce using rule 108 (valoresBool -> varYVals .)
    ;               reduce using rule 108 (valoresBool -> varYVals .)
    ,               reduce using rule 108 (valoresBool -> varYVals .)
    ]               reduce using rule 108 (valoresBool -> varYVals .)
    }               reduce using rule 108 (valoresBool -> varYVals .)
    :               reduce using rule 108 (valoresBool -> varYVals .)
    EQEQ            reduce using rule 108 (valoresBool -> varYVals .)
    DISTINTO        reduce using rule 108 (valoresBool -> varYVals .)
    AND             reduce using rule 108 (valoresBool -> varYVals .)
    ?               reduce using rule 108 (valoresBool -> varYVals .)
    OR              reduce using rule 108 (valoresBool -> varYVals .)
    MASMAS          shift and go to state 57
    MENOSMENOS      shift and go to state 58


state 160

    (142) not -> NOT valoresBool .

    EQEQ            reduce using rule 142 (not -> NOT valoresBool .)
    DISTINTO        reduce using rule 142 (not -> NOT valoresBool .)
    AND             reduce using rule 142 (not -> NOT valoresBool .)
    ?               reduce using rule 142 (not -> NOT valoresBool .)
    OR              reduce using rule 142 (not -> NOT valoresBool .)
    ;               reduce using rule 142 (not -> NOT valoresBool .)
    }               reduce using rule 142 (not -> NOT valoresBool .)
    )               reduce using rule 142 (not -> NOT valoresBool .)
    ,               reduce using rule 142 (not -> NOT valoresBool .)
    ]               reduce using rule 142 (not -> NOT valoresBool .)
    :               reduce using rule 142 (not -> NOT valoresBool .)


state 161

    (110) expBool -> or ? . expBool : expBool
    (112) expBool -> or ? . valoresBool : valoresBool
    (110) expBool -> . or ? expBool : expBool
    (111) expBool -> . valoresBool ? expBool : expBool
    (112) expBool -> . or ? valoresBool : valoresBool
    (113) expBool -> . valoresBool ? valoresBool : valoresBool
    (114) expBool -> . or
    (106) valoresBool -> . BOOL
    (107) valoresBool -> . funcBool
    (108) valoresBool -> . varYVals
    (109) valoresBool -> . varsOps
    (115) or -> . or OR and
    (116) or -> . valoresBool OR and
    (117) or -> . or OR valoresBool
    (118) or -> . valoresBool OR valoresBool
    (119) or -> . and
    (26) funcBool -> . COLINEALES ( vec , vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (120) and -> . and AND eq
    (121) and -> . valoresBool AND eq
    (122) and -> . and AND valoresBool
    (123) and -> . valoresBool AND valoresBool
    (124) and -> . eq
    (50) vecVal -> . ID m
    (125) eq -> . eq EQEQ parenBool
    (126) eq -> . eq DISTINTO parenBool
    (127) eq -> . valoresBool EQEQ parenBool
    (128) eq -> . valoresBool DISTINTO parenBool
    (129) eq -> . eq EQEQ valoresBool
    (130) eq -> . eq DISTINTO valoresBool
    (131) eq -> . valoresBool EQEQ valoresBool
    (132) eq -> . valoresBool DISTINTO valoresBool
    (133) eq -> . mayor
    (137) mayor -> . tCompare > tCompare
    (138) mayor -> . menor
    (134) tCompare -> . eMat
    (135) tCompare -> . varsOps
    (136) tCompare -> . varYVals
    (139) menor -> . tCompare < tCompare
    (140) menor -> . not
    (73) eMat -> . eMat + p
    (74) eMat -> . eMat - p
    (75) eMat -> . valoresMat + p
    (76) eMat -> . valoresMat - p
    (77) eMat -> . eMat + valoresMat
    (78) eMat -> . eMat - valoresMat
    (79) eMat -> . valoresMat + valoresMat
    (80) eMat -> . valoresMat - valoresMat
    (81) eMat -> . p
    (141) not -> . NOT not
    (142) not -> . NOT valoresBool
    (143) not -> . parenBool
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (82) p -> . p * exp
    (83) p -> . p / exp
    (84) p -> . p % exp
    (85) p -> . valoresMat * exp
    (86) p -> . valoresMat / exp
    (87) p -> . valoresMat % exp
    (88) p -> . p * valoresMat
    (89) p -> . p / valoresMat
    (90) p -> . p % valoresMat
    (91) p -> . valoresMat * valoresMat
    (92) p -> . valoresMat / valoresMat
    (93) p -> . valoresMat % valoresMat
    (94) p -> . exp
    (144) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (105) paren -> . ( eMat )

    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 87
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    (               shift and go to state 72
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 74
    +               shift and go to state 73

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    valoresBool                    shift and go to state 229
    eMat                           shift and go to state 71
    vecVal                         shift and go to state 9
    paren                          shift and go to state 77
    iSing                          shift and go to state 75
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    varYVals                       shift and go to state 88
    or                             shift and go to state 89
    p                              shift and go to state 82
    varsOps                        shift and go to state 84
    exp                            shift and go to state 85
    mayor                          shift and go to state 66
    parenBool                      shift and go to state 86
    expBool                        shift and go to state 230

state 162

    (115) or -> or OR . and
    (117) or -> or OR . valoresBool
    (120) and -> . and AND eq
    (121) and -> . valoresBool AND eq
    (122) and -> . and AND valoresBool
    (123) and -> . valoresBool AND valoresBool
    (124) and -> . eq
    (106) valoresBool -> . BOOL
    (107) valoresBool -> . funcBool
    (108) valoresBool -> . varYVals
    (109) valoresBool -> . varsOps
    (125) eq -> . eq EQEQ parenBool
    (126) eq -> . eq DISTINTO parenBool
    (127) eq -> . valoresBool EQEQ parenBool
    (128) eq -> . valoresBool DISTINTO parenBool
    (129) eq -> . eq EQEQ valoresBool
    (130) eq -> . eq DISTINTO valoresBool
    (131) eq -> . valoresBool EQEQ valoresBool
    (132) eq -> . valoresBool DISTINTO valoresBool
    (133) eq -> . mayor
    (26) funcBool -> . COLINEALES ( vec , vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (137) mayor -> . tCompare > tCompare
    (138) mayor -> . menor
    (50) vecVal -> . ID m
    (134) tCompare -> . eMat
    (135) tCompare -> . varsOps
    (136) tCompare -> . varYVals
    (139) menor -> . tCompare < tCompare
    (140) menor -> . not
    (73) eMat -> . eMat + p
    (74) eMat -> . eMat - p
    (75) eMat -> . valoresMat + p
    (76) eMat -> . valoresMat - p
    (77) eMat -> . eMat + valoresMat
    (78) eMat -> . eMat - valoresMat
    (79) eMat -> . valoresMat + valoresMat
    (80) eMat -> . valoresMat - valoresMat
    (81) eMat -> . p
    (141) not -> . NOT not
    (142) not -> . NOT valoresBool
    (143) not -> . parenBool
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (82) p -> . p * exp
    (83) p -> . p / exp
    (84) p -> . p % exp
    (85) p -> . valoresMat * exp
    (86) p -> . valoresMat / exp
    (87) p -> . valoresMat % exp
    (88) p -> . p * valoresMat
    (89) p -> . p / valoresMat
    (90) p -> . p % valoresMat
    (91) p -> . valoresMat * valoresMat
    (92) p -> . valoresMat / valoresMat
    (93) p -> . valoresMat % valoresMat
    (94) p -> . exp
    (144) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (105) paren -> . ( eMat )

    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 87
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    (               shift and go to state 72
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 74
    +               shift and go to state 73

    and                            shift and go to state 231
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    valoresBool                    shift and go to state 232
    eMat                           shift and go to state 71
    vecVal                         shift and go to state 9
    paren                          shift and go to state 77
    iSing                          shift and go to state 75
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    varYVals                       shift and go to state 88
    p                              shift and go to state 82
    varsOps                        shift and go to state 84
    exp                            shift and go to state 85
    mayor                          shift and go to state 66
    parenBool                      shift and go to state 86

state 163

    (10) loop -> WHILE ( expBool ) . bloque
    (16) bloque -> . sentencia ;
    (17) bloque -> . { g }
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (61) varAsig -> . ID MULEQ valoresAsig
    (62) varAsig -> . ID DIVEQ valoresAsig
    (63) varAsig -> . ID MASEQ valoresAsig
    (64) varAsig -> . ID MENOSEQ valoresAsig
    (65) varAsig -> . ID = valoresAsig
    (66) varAsig -> . ID . ID = valoresAsig
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (50) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( eMat )
    (26) funcBool -> . COLINEALES ( vec , vec )

    {               shift and go to state 32
    RETURN          shift and go to state 2
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    ID              shift and go to state 16
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    CAPITALIZAR     shift and go to state 23
    COLINEALES      shift and go to state 13

    varAsig                        shift and go to state 18
    sentencia                      shift and go to state 31
    funcInt                        shift and go to state 5
    funcString                     shift and go to state 20
    funcVoid                       shift and go to state 12
    funcReturn                     shift and go to state 22
    funcBool                       shift and go to state 3
    varsOps                        shift and go to state 27
    func                           shift and go to state 15
    bloque                         shift and go to state 233
    varYVals                       shift and go to state 28
    vecVal                         shift and go to state 9

state 164

    (71) valoresMat -> varsOps .
    (109) valoresBool -> varsOps .
    (135) tCompare -> varsOps .

    +               reduce using rule 71 (valoresMat -> varsOps .)
    -               reduce using rule 71 (valoresMat -> varsOps .)
    *               reduce using rule 71 (valoresMat -> varsOps .)
    /               reduce using rule 71 (valoresMat -> varsOps .)
    %               reduce using rule 71 (valoresMat -> varsOps .)
    ^               reduce using rule 71 (valoresMat -> varsOps .)
    ?               reduce using rule 109 (valoresBool -> varsOps .)
    OR              reduce using rule 109 (valoresBool -> varsOps .)
    AND             reduce using rule 109 (valoresBool -> varsOps .)
    EQEQ            reduce using rule 109 (valoresBool -> varsOps .)
    DISTINTO        reduce using rule 109 (valoresBool -> varsOps .)
    >               reduce using rule 135 (tCompare -> varsOps .)
    <               reduce using rule 135 (tCompare -> varsOps .)


state 165

    (70) valoresMat -> varYVals .
    (108) valoresBool -> varYVals .
    (58) varsOps -> varYVals . MASMAS
    (59) varsOps -> varYVals . MENOSMENOS
    (136) tCompare -> varYVals .

    +               reduce using rule 70 (valoresMat -> varYVals .)
    -               reduce using rule 70 (valoresMat -> varYVals .)
    *               reduce using rule 70 (valoresMat -> varYVals .)
    /               reduce using rule 70 (valoresMat -> varYVals .)
    %               reduce using rule 70 (valoresMat -> varYVals .)
    ^               reduce using rule 70 (valoresMat -> varYVals .)
    ?               reduce using rule 108 (valoresBool -> varYVals .)
    OR              reduce using rule 108 (valoresBool -> varYVals .)
    AND             reduce using rule 108 (valoresBool -> varYVals .)
    EQEQ            reduce using rule 108 (valoresBool -> varYVals .)
    DISTINTO        reduce using rule 108 (valoresBool -> varYVals .)
    MASMAS          shift and go to state 57
    MENOSMENOS      shift and go to state 58
    >               reduce using rule 136 (tCompare -> varYVals .)
    <               reduce using rule 136 (tCompare -> varYVals .)


state 166

    (32) elem -> valores . , elem
    (33) elem -> valores .

    ,               shift and go to state 234
    ]               reduce using rule 33 (elem -> valores .)


state 167

    (31) vec -> [ elem . ]

    ]               shift and go to state 235


state 168

    (43) valores -> ID . . valoresCampos
    (45) valoresCampos -> . ID
    (46) valoresCampos -> . END
    (47) valoresCampos -> . BEGIN

    ID              shift and go to state 238
    END             shift and go to state 237
    BEGIN           shift and go to state 236

    valoresCampos                  shift and go to state 239

state 169

    (27) funcVoid -> PRINT ( valores ) .

    ;               reduce using rule 27 (funcVoid -> PRINT ( valores ) .)


state 170

    (53) reg -> { campos . }

    }               shift and go to state 240


state 171

    (54) campos -> ID . : valores , campos
    (43) valores -> ID . . valoresCampos
    (48) varYVals -> ID .
    (50) vecVal -> ID . m
    (51) m -> . [ INT ]
    (52) m -> . [ INT ] m

    :               shift and go to state 241
    .               shift and go to state 168
    MASMAS          reduce using rule 48 (varYVals -> ID .)
    MENOSMENOS      reduce using rule 48 (varYVals -> ID .)
    }               reduce using rule 48 (varYVals -> ID .)
    +               reduce using rule 48 (varYVals -> ID .)
    -               reduce using rule 48 (varYVals -> ID .)
    *               reduce using rule 48 (varYVals -> ID .)
    /               reduce using rule 48 (varYVals -> ID .)
    %               reduce using rule 48 (varYVals -> ID .)
    ^               reduce using rule 48 (varYVals -> ID .)
    ?               reduce using rule 48 (varYVals -> ID .)
    OR              reduce using rule 48 (varYVals -> ID .)
    AND             reduce using rule 48 (varYVals -> ID .)
    EQEQ            reduce using rule 48 (varYVals -> ID .)
    DISTINTO        reduce using rule 48 (varYVals -> ID .)
    >               reduce using rule 48 (varYVals -> ID .)
    <               reduce using rule 48 (varYVals -> ID .)
    [               shift and go to state 46

    m                              shift and go to state 43

state 172

    (55) campos -> valores .

    }               reduce using rule 55 (campos -> valores .)


state 173

    (26) funcBool -> COLINEALES ( vec , . vec )
    (31) vec -> . [ elem ]

    [               shift and go to state 97

    vec                            shift and go to state 242

state 174

    (12) loop -> FOR ( varAsig ; . expBool ; varsOps ) bloque
    (110) expBool -> . or ? expBool : expBool
    (111) expBool -> . valoresBool ? expBool : expBool
    (112) expBool -> . or ? valoresBool : valoresBool
    (113) expBool -> . valoresBool ? valoresBool : valoresBool
    (114) expBool -> . or
    (115) or -> . or OR and
    (116) or -> . valoresBool OR and
    (117) or -> . or OR valoresBool
    (118) or -> . valoresBool OR valoresBool
    (119) or -> . and
    (106) valoresBool -> . BOOL
    (107) valoresBool -> . funcBool
    (108) valoresBool -> . varYVals
    (109) valoresBool -> . varsOps
    (120) and -> . and AND eq
    (121) and -> . valoresBool AND eq
    (122) and -> . and AND valoresBool
    (123) and -> . valoresBool AND valoresBool
    (124) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (125) eq -> . eq EQEQ parenBool
    (126) eq -> . eq DISTINTO parenBool
    (127) eq -> . valoresBool EQEQ parenBool
    (128) eq -> . valoresBool DISTINTO parenBool
    (129) eq -> . eq EQEQ valoresBool
    (130) eq -> . eq DISTINTO valoresBool
    (131) eq -> . valoresBool EQEQ valoresBool
    (132) eq -> . valoresBool DISTINTO valoresBool
    (133) eq -> . mayor
    (50) vecVal -> . ID m
    (137) mayor -> . tCompare > tCompare
    (138) mayor -> . menor
    (134) tCompare -> . eMat
    (135) tCompare -> . varsOps
    (136) tCompare -> . varYVals
    (139) menor -> . tCompare < tCompare
    (140) menor -> . not
    (73) eMat -> . eMat + p
    (74) eMat -> . eMat - p
    (75) eMat -> . valoresMat + p
    (76) eMat -> . valoresMat - p
    (77) eMat -> . eMat + valoresMat
    (78) eMat -> . eMat - valoresMat
    (79) eMat -> . valoresMat + valoresMat
    (80) eMat -> . valoresMat - valoresMat
    (81) eMat -> . p
    (141) not -> . NOT not
    (142) not -> . NOT valoresBool
    (143) not -> . parenBool
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (82) p -> . p * exp
    (83) p -> . p / exp
    (84) p -> . p % exp
    (85) p -> . valoresMat * exp
    (86) p -> . valoresMat / exp
    (87) p -> . valoresMat % exp
    (88) p -> . p * valoresMat
    (89) p -> . p / valoresMat
    (90) p -> . p % valoresMat
    (91) p -> . valoresMat * valoresMat
    (92) p -> . valoresMat / valoresMat
    (93) p -> . valoresMat % valoresMat
    (94) p -> . exp
    (144) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (105) paren -> . ( eMat )

    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 87
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    (               shift and go to state 72
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 74
    +               shift and go to state 73

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    vecVal                         shift and go to state 9
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 71
    mayor                          shift and go to state 66
    paren                          shift and go to state 77
    iSing                          shift and go to state 75
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    parenBool                      shift and go to state 86
    p                              shift and go to state 82
    varsOps                        shift and go to state 84
    exp                            shift and go to state 85
    varYVals                       shift and go to state 88
    or                             shift and go to state 89
    expBool                        shift and go to state 243

state 175

    (66) varAsig -> ID . ID = . valoresAsig
    (60) valoresAsig -> . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . reg
    (37) valores -> . INT
    (38) valores -> . STRING
    (39) valores -> . BOOL
    (40) valores -> . varYVals
    (41) valores -> . varsOps
    (42) valores -> . vec
    (43) valores -> . ID . valoresCampos
    (44) valores -> . RES
    (73) eMat -> . eMat + p
    (74) eMat -> . eMat - p
    (75) eMat -> . valoresMat + p
    (76) eMat -> . valoresMat - p
    (77) eMat -> . eMat + valoresMat
    (78) eMat -> . eMat - valoresMat
    (79) eMat -> . valoresMat + valoresMat
    (80) eMat -> . valoresMat - valoresMat
    (81) eMat -> . p
    (110) expBool -> . or ? expBool : expBool
    (111) expBool -> . valoresBool ? expBool : expBool
    (112) expBool -> . or ? valoresBool : valoresBool
    (113) expBool -> . valoresBool ? valoresBool : valoresBool
    (114) expBool -> . or
    (53) reg -> . { campos }
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (31) vec -> . [ elem ]
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (82) p -> . p * exp
    (83) p -> . p / exp
    (84) p -> . p % exp
    (85) p -> . valoresMat * exp
    (86) p -> . valoresMat / exp
    (87) p -> . valoresMat % exp
    (88) p -> . p * valoresMat
    (89) p -> . p / valoresMat
    (90) p -> . p % valoresMat
    (91) p -> . valoresMat * valoresMat
    (92) p -> . valoresMat / valoresMat
    (93) p -> . valoresMat % valoresMat
    (94) p -> . exp
    (115) or -> . or OR and
    (116) or -> . valoresBool OR and
    (117) or -> . or OR valoresBool
    (118) or -> . valoresBool OR valoresBool
    (119) or -> . and
    (106) valoresBool -> . BOOL
    (107) valoresBool -> . funcBool
    (108) valoresBool -> . varYVals
    (109) valoresBool -> . varsOps
    (50) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (120) and -> . and AND eq
    (121) and -> . valoresBool AND eq
    (122) and -> . and AND valoresBool
    (123) and -> . valoresBool AND valoresBool
    (124) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (125) eq -> . eq EQEQ parenBool
    (126) eq -> . eq DISTINTO parenBool
    (127) eq -> . valoresBool EQEQ parenBool
    (128) eq -> . valoresBool DISTINTO parenBool
    (129) eq -> . eq EQEQ valoresBool
    (130) eq -> . eq DISTINTO valoresBool
    (131) eq -> . valoresBool EQEQ valoresBool
    (132) eq -> . valoresBool DISTINTO valoresBool
    (133) eq -> . mayor
    (105) paren -> . ( eMat )
    (137) mayor -> . tCompare > tCompare
    (138) mayor -> . menor
    (134) tCompare -> . eMat
    (135) tCompare -> . varsOps
    (136) tCompare -> . varYVals
    (139) menor -> . tCompare < tCompare
    (140) menor -> . not
    (141) not -> . NOT not
    (142) not -> . NOT valoresBool
    (143) not -> . parenBool
    (144) parenBool -> . ( expBool )

    INT             shift and go to state 99
    STRING          shift and go to state 96
    BOOL            shift and go to state 101
    ID              shift and go to state 98
    RES             shift and go to state 91
    {               shift and go to state 103
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    [               shift and go to state 97
    FLOAT           shift and go to state 80
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 93
    NOT             shift and go to state 87

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    mayor                          shift and go to state 66
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 92
    vecVal                         shift and go to state 9
    vec                            shift and go to state 94
    paren                          shift and go to state 77
    reg                            shift and go to state 95
    iSing                          shift and go to state 75
    exp                            shift and go to state 85
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    valoresAsig                    shift and go to state 244
    valores                        shift and go to state 110
    parenBool                      shift and go to state 86
    p                              shift and go to state 82
    varsOps                        shift and go to state 102
    varYVals                       shift and go to state 104
    or                             shift and go to state 89
    expBool                        shift and go to state 105

state 176

    (51) m -> [ INT ] .
    (52) m -> [ INT ] . m
    (51) m -> . [ INT ]
    (52) m -> . [ INT ] m

    ;               reduce using rule 51 (m -> [ INT ] .)
    ?               reduce using rule 51 (m -> [ INT ] .)
    OR              reduce using rule 51 (m -> [ INT ] .)
    AND             reduce using rule 51 (m -> [ INT ] .)
    EQEQ            reduce using rule 51 (m -> [ INT ] .)
    DISTINTO        reduce using rule 51 (m -> [ INT ] .)
    >               reduce using rule 51 (m -> [ INT ] .)
    <               reduce using rule 51 (m -> [ INT ] .)
    +               reduce using rule 51 (m -> [ INT ] .)
    -               reduce using rule 51 (m -> [ INT ] .)
    *               reduce using rule 51 (m -> [ INT ] .)
    /               reduce using rule 51 (m -> [ INT ] .)
    %               reduce using rule 51 (m -> [ INT ] .)
    ^               reduce using rule 51 (m -> [ INT ] .)
    )               reduce using rule 51 (m -> [ INT ] .)
    ,               reduce using rule 51 (m -> [ INT ] .)
    ]               reduce using rule 51 (m -> [ INT ] .)
    }               reduce using rule 51 (m -> [ INT ] .)
    :               reduce using rule 51 (m -> [ INT ] .)
    MASMAS          reduce using rule 51 (m -> [ INT ] .)
    MENOSMENOS      reduce using rule 51 (m -> [ INT ] .)
    [               shift and go to state 46

    m                              shift and go to state 245

state 177

    (13) if -> IF ( expBool ) . bloque else
    (16) bloque -> . sentencia ;
    (17) bloque -> . { g }
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (61) varAsig -> . ID MULEQ valoresAsig
    (62) varAsig -> . ID DIVEQ valoresAsig
    (63) varAsig -> . ID MASEQ valoresAsig
    (64) varAsig -> . ID MENOSEQ valoresAsig
    (65) varAsig -> . ID = valoresAsig
    (66) varAsig -> . ID . ID = valoresAsig
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (50) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( eMat )
    (26) funcBool -> . COLINEALES ( vec , vec )

    {               shift and go to state 32
    RETURN          shift and go to state 2
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    ID              shift and go to state 16
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    CAPITALIZAR     shift and go to state 23
    COLINEALES      shift and go to state 13

    varAsig                        shift and go to state 18
    sentencia                      shift and go to state 31
    funcInt                        shift and go to state 5
    funcString                     shift and go to state 20
    funcVoid                       shift and go to state 12
    funcReturn                     shift and go to state 22
    funcBool                       shift and go to state 3
    varsOps                        shift and go to state 27
    func                           shift and go to state 15
    bloque                         shift and go to state 246
    varYVals                       shift and go to state 28
    vecVal                         shift and go to state 9

state 178

    (23) funcInt -> MULTIESCALAR ( vec , . eMat , param )
    (73) eMat -> . eMat + p
    (74) eMat -> . eMat - p
    (75) eMat -> . valoresMat + p
    (76) eMat -> . valoresMat - p
    (77) eMat -> . eMat + valoresMat
    (78) eMat -> . eMat - valoresMat
    (79) eMat -> . valoresMat + valoresMat
    (80) eMat -> . valoresMat - valoresMat
    (81) eMat -> . p
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (82) p -> . p * exp
    (83) p -> . p / exp
    (84) p -> . p % exp
    (85) p -> . valoresMat * exp
    (86) p -> . valoresMat / exp
    (87) p -> . valoresMat % exp
    (88) p -> . p * valoresMat
    (89) p -> . p / valoresMat
    (90) p -> . p % valoresMat
    (91) p -> . valoresMat * valoresMat
    (92) p -> . valoresMat / valoresMat
    (93) p -> . valoresMat % valoresMat
    (94) p -> . exp
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (50) vecVal -> . ID m
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (105) paren -> . ( eMat )

    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 120

    eMat                           shift and go to state 247
    funcInt                        shift and go to state 65
    iSing                          shift and go to state 75
    p                              shift and go to state 82
    valoresMat                     shift and go to state 67
    paren                          shift and go to state 77
    exp                            shift and go to state 85
    varYVals                       shift and go to state 122
    vecVal                         shift and go to state 9
    varsOps                        shift and go to state 121

state 179

    (25) funcString -> CAPITALIZAR ( eMat ) .

    ;               reduce using rule 25 (funcString -> CAPITALIZAR ( eMat ) .)


state 180

    (105) paren -> ( eMat . )
    (73) eMat -> eMat . + p
    (74) eMat -> eMat . - p
    (77) eMat -> eMat . + valoresMat
    (78) eMat -> eMat . - valoresMat

    )               shift and go to state 215
    +               shift and go to state 140
    -               shift and go to state 141


state 181

    (24) funcInt -> LENGTH ( vec ) .

    ;               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    +               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    -               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    *               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    /               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    %               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    ^               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    >               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    <               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    )               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    ,               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    ]               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    }               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    EQEQ            reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    DISTINTO        reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    AND             reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    ?               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    OR              reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    :               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)


state 182

    (11) loop -> DO bloque WHILE ( expBool . ) ;

    )               shift and go to state 248


state 183

    (120) and -> and AND eq .
    (125) eq -> eq . EQEQ parenBool
    (126) eq -> eq . DISTINTO parenBool
    (129) eq -> eq . EQEQ valoresBool
    (130) eq -> eq . DISTINTO valoresBool

    AND             reduce using rule 120 (and -> and AND eq .)
    ?               reduce using rule 120 (and -> and AND eq .)
    OR              reduce using rule 120 (and -> and AND eq .)
    )               reduce using rule 120 (and -> and AND eq .)
    ;               reduce using rule 120 (and -> and AND eq .)
    ,               reduce using rule 120 (and -> and AND eq .)
    ]               reduce using rule 120 (and -> and AND eq .)
    }               reduce using rule 120 (and -> and AND eq .)
    :               reduce using rule 120 (and -> and AND eq .)
    EQEQ            shift and go to state 133
    DISTINTO        shift and go to state 134


state 184

    (122) and -> and AND valoresBool .
    (127) eq -> valoresBool . EQEQ parenBool
    (128) eq -> valoresBool . DISTINTO parenBool
    (131) eq -> valoresBool . EQEQ valoresBool
    (132) eq -> valoresBool . DISTINTO valoresBool

    AND             reduce using rule 122 (and -> and AND valoresBool .)
    ?               reduce using rule 122 (and -> and AND valoresBool .)
    OR              reduce using rule 122 (and -> and AND valoresBool .)
    )               reduce using rule 122 (and -> and AND valoresBool .)
    ;               reduce using rule 122 (and -> and AND valoresBool .)
    ,               reduce using rule 122 (and -> and AND valoresBool .)
    ]               reduce using rule 122 (and -> and AND valoresBool .)
    }               reduce using rule 122 (and -> and AND valoresBool .)
    :               reduce using rule 122 (and -> and AND valoresBool .)
    EQEQ            shift and go to state 137
    DISTINTO        shift and go to state 136


state 185

    (93) p -> valoresMat % valoresMat .
    (96) exp -> valoresMat . ^ iSing
    (98) exp -> valoresMat . ^ valoresMat

    *               reduce using rule 93 (p -> valoresMat % valoresMat .)
    /               reduce using rule 93 (p -> valoresMat % valoresMat .)
    %               reduce using rule 93 (p -> valoresMat % valoresMat .)
    +               reduce using rule 93 (p -> valoresMat % valoresMat .)
    -               reduce using rule 93 (p -> valoresMat % valoresMat .)
    >               reduce using rule 93 (p -> valoresMat % valoresMat .)
    <               reduce using rule 93 (p -> valoresMat % valoresMat .)
    ,               reduce using rule 93 (p -> valoresMat % valoresMat .)
    )               reduce using rule 93 (p -> valoresMat % valoresMat .)
    ]               reduce using rule 93 (p -> valoresMat % valoresMat .)
    ;               reduce using rule 93 (p -> valoresMat % valoresMat .)
    }               reduce using rule 93 (p -> valoresMat % valoresMat .)
    EQEQ            reduce using rule 93 (p -> valoresMat % valoresMat .)
    DISTINTO        reduce using rule 93 (p -> valoresMat % valoresMat .)
    AND             reduce using rule 93 (p -> valoresMat % valoresMat .)
    ?               reduce using rule 93 (p -> valoresMat % valoresMat .)
    OR              reduce using rule 93 (p -> valoresMat % valoresMat .)
    :               reduce using rule 93 (p -> valoresMat % valoresMat .)
    ^               shift and go to state 132


state 186

    (87) p -> valoresMat % exp .
    (95) exp -> exp . ^ iSing
    (97) exp -> exp . ^ valoresMat

    *               reduce using rule 87 (p -> valoresMat % exp .)
    /               reduce using rule 87 (p -> valoresMat % exp .)
    %               reduce using rule 87 (p -> valoresMat % exp .)
    +               reduce using rule 87 (p -> valoresMat % exp .)
    -               reduce using rule 87 (p -> valoresMat % exp .)
    >               reduce using rule 87 (p -> valoresMat % exp .)
    <               reduce using rule 87 (p -> valoresMat % exp .)
    ,               reduce using rule 87 (p -> valoresMat % exp .)
    )               reduce using rule 87 (p -> valoresMat % exp .)
    ]               reduce using rule 87 (p -> valoresMat % exp .)
    ;               reduce using rule 87 (p -> valoresMat % exp .)
    }               reduce using rule 87 (p -> valoresMat % exp .)
    EQEQ            reduce using rule 87 (p -> valoresMat % exp .)
    DISTINTO        reduce using rule 87 (p -> valoresMat % exp .)
    AND             reduce using rule 87 (p -> valoresMat % exp .)
    ?               reduce using rule 87 (p -> valoresMat % exp .)
    OR              reduce using rule 87 (p -> valoresMat % exp .)
    :               reduce using rule 87 (p -> valoresMat % exp .)
    ^               shift and go to state 155


state 187

    (79) eMat -> valoresMat + valoresMat .
    (85) p -> valoresMat . * exp
    (86) p -> valoresMat . / exp
    (87) p -> valoresMat . % exp
    (91) p -> valoresMat . * valoresMat
    (92) p -> valoresMat . / valoresMat
    (93) p -> valoresMat . % valoresMat
    (96) exp -> valoresMat . ^ iSing
    (98) exp -> valoresMat . ^ valoresMat

    +               reduce using rule 79 (eMat -> valoresMat + valoresMat .)
    -               reduce using rule 79 (eMat -> valoresMat + valoresMat .)
    >               reduce using rule 79 (eMat -> valoresMat + valoresMat .)
    <               reduce using rule 79 (eMat -> valoresMat + valoresMat .)
    ;               reduce using rule 79 (eMat -> valoresMat + valoresMat .)
    }               reduce using rule 79 (eMat -> valoresMat + valoresMat .)
    )               reduce using rule 79 (eMat -> valoresMat + valoresMat .)
    ,               reduce using rule 79 (eMat -> valoresMat + valoresMat .)
    ]               reduce using rule 79 (eMat -> valoresMat + valoresMat .)
    EQEQ            reduce using rule 79 (eMat -> valoresMat + valoresMat .)
    DISTINTO        reduce using rule 79 (eMat -> valoresMat + valoresMat .)
    AND             reduce using rule 79 (eMat -> valoresMat + valoresMat .)
    ?               reduce using rule 79 (eMat -> valoresMat + valoresMat .)
    OR              reduce using rule 79 (eMat -> valoresMat + valoresMat .)
    :               reduce using rule 79 (eMat -> valoresMat + valoresMat .)
    *               shift and go to state 129
    /               shift and go to state 131
    %               shift and go to state 127
    ^               shift and go to state 132


state 188

    (75) eMat -> valoresMat + p .
    (82) p -> p . * exp
    (83) p -> p . / exp
    (84) p -> p . % exp
    (88) p -> p . * valoresMat
    (89) p -> p . / valoresMat
    (90) p -> p . % valoresMat

    +               reduce using rule 75 (eMat -> valoresMat + p .)
    -               reduce using rule 75 (eMat -> valoresMat + p .)
    >               reduce using rule 75 (eMat -> valoresMat + p .)
    <               reduce using rule 75 (eMat -> valoresMat + p .)
    ;               reduce using rule 75 (eMat -> valoresMat + p .)
    }               reduce using rule 75 (eMat -> valoresMat + p .)
    )               reduce using rule 75 (eMat -> valoresMat + p .)
    ,               reduce using rule 75 (eMat -> valoresMat + p .)
    ]               reduce using rule 75 (eMat -> valoresMat + p .)
    EQEQ            reduce using rule 75 (eMat -> valoresMat + p .)
    DISTINTO        reduce using rule 75 (eMat -> valoresMat + p .)
    AND             reduce using rule 75 (eMat -> valoresMat + p .)
    ?               reduce using rule 75 (eMat -> valoresMat + p .)
    OR              reduce using rule 75 (eMat -> valoresMat + p .)
    :               reduce using rule 75 (eMat -> valoresMat + p .)
    *               shift and go to state 153
    /               shift and go to state 154
    %               shift and go to state 152


state 189

    (91) p -> valoresMat * valoresMat .
    (96) exp -> valoresMat . ^ iSing
    (98) exp -> valoresMat . ^ valoresMat

    *               reduce using rule 91 (p -> valoresMat * valoresMat .)
    /               reduce using rule 91 (p -> valoresMat * valoresMat .)
    %               reduce using rule 91 (p -> valoresMat * valoresMat .)
    +               reduce using rule 91 (p -> valoresMat * valoresMat .)
    -               reduce using rule 91 (p -> valoresMat * valoresMat .)
    >               reduce using rule 91 (p -> valoresMat * valoresMat .)
    <               reduce using rule 91 (p -> valoresMat * valoresMat .)
    ,               reduce using rule 91 (p -> valoresMat * valoresMat .)
    )               reduce using rule 91 (p -> valoresMat * valoresMat .)
    ]               reduce using rule 91 (p -> valoresMat * valoresMat .)
    ;               reduce using rule 91 (p -> valoresMat * valoresMat .)
    }               reduce using rule 91 (p -> valoresMat * valoresMat .)
    EQEQ            reduce using rule 91 (p -> valoresMat * valoresMat .)
    DISTINTO        reduce using rule 91 (p -> valoresMat * valoresMat .)
    AND             reduce using rule 91 (p -> valoresMat * valoresMat .)
    ?               reduce using rule 91 (p -> valoresMat * valoresMat .)
    OR              reduce using rule 91 (p -> valoresMat * valoresMat .)
    :               reduce using rule 91 (p -> valoresMat * valoresMat .)
    ^               shift and go to state 132


state 190

    (85) p -> valoresMat * exp .
    (95) exp -> exp . ^ iSing
    (97) exp -> exp . ^ valoresMat

    *               reduce using rule 85 (p -> valoresMat * exp .)
    /               reduce using rule 85 (p -> valoresMat * exp .)
    %               reduce using rule 85 (p -> valoresMat * exp .)
    +               reduce using rule 85 (p -> valoresMat * exp .)
    -               reduce using rule 85 (p -> valoresMat * exp .)
    >               reduce using rule 85 (p -> valoresMat * exp .)
    <               reduce using rule 85 (p -> valoresMat * exp .)
    ,               reduce using rule 85 (p -> valoresMat * exp .)
    )               reduce using rule 85 (p -> valoresMat * exp .)
    ]               reduce using rule 85 (p -> valoresMat * exp .)
    ;               reduce using rule 85 (p -> valoresMat * exp .)
    }               reduce using rule 85 (p -> valoresMat * exp .)
    EQEQ            reduce using rule 85 (p -> valoresMat * exp .)
    DISTINTO        reduce using rule 85 (p -> valoresMat * exp .)
    AND             reduce using rule 85 (p -> valoresMat * exp .)
    ?               reduce using rule 85 (p -> valoresMat * exp .)
    OR              reduce using rule 85 (p -> valoresMat * exp .)
    :               reduce using rule 85 (p -> valoresMat * exp .)
    ^               shift and go to state 155


state 191

    (80) eMat -> valoresMat - valoresMat .
    (85) p -> valoresMat . * exp
    (86) p -> valoresMat . / exp
    (87) p -> valoresMat . % exp
    (91) p -> valoresMat . * valoresMat
    (92) p -> valoresMat . / valoresMat
    (93) p -> valoresMat . % valoresMat
    (96) exp -> valoresMat . ^ iSing
    (98) exp -> valoresMat . ^ valoresMat

    +               reduce using rule 80 (eMat -> valoresMat - valoresMat .)
    -               reduce using rule 80 (eMat -> valoresMat - valoresMat .)
    >               reduce using rule 80 (eMat -> valoresMat - valoresMat .)
    <               reduce using rule 80 (eMat -> valoresMat - valoresMat .)
    ;               reduce using rule 80 (eMat -> valoresMat - valoresMat .)
    }               reduce using rule 80 (eMat -> valoresMat - valoresMat .)
    )               reduce using rule 80 (eMat -> valoresMat - valoresMat .)
    ,               reduce using rule 80 (eMat -> valoresMat - valoresMat .)
    ]               reduce using rule 80 (eMat -> valoresMat - valoresMat .)
    EQEQ            reduce using rule 80 (eMat -> valoresMat - valoresMat .)
    DISTINTO        reduce using rule 80 (eMat -> valoresMat - valoresMat .)
    AND             reduce using rule 80 (eMat -> valoresMat - valoresMat .)
    ?               reduce using rule 80 (eMat -> valoresMat - valoresMat .)
    OR              reduce using rule 80 (eMat -> valoresMat - valoresMat .)
    :               reduce using rule 80 (eMat -> valoresMat - valoresMat .)
    *               shift and go to state 129
    /               shift and go to state 131
    %               shift and go to state 127
    ^               shift and go to state 132


state 192

    (76) eMat -> valoresMat - p .
    (82) p -> p . * exp
    (83) p -> p . / exp
    (84) p -> p . % exp
    (88) p -> p . * valoresMat
    (89) p -> p . / valoresMat
    (90) p -> p . % valoresMat

    +               reduce using rule 76 (eMat -> valoresMat - p .)
    -               reduce using rule 76 (eMat -> valoresMat - p .)
    >               reduce using rule 76 (eMat -> valoresMat - p .)
    <               reduce using rule 76 (eMat -> valoresMat - p .)
    ;               reduce using rule 76 (eMat -> valoresMat - p .)
    }               reduce using rule 76 (eMat -> valoresMat - p .)
    )               reduce using rule 76 (eMat -> valoresMat - p .)
    ,               reduce using rule 76 (eMat -> valoresMat - p .)
    ]               reduce using rule 76 (eMat -> valoresMat - p .)
    EQEQ            reduce using rule 76 (eMat -> valoresMat - p .)
    DISTINTO        reduce using rule 76 (eMat -> valoresMat - p .)
    AND             reduce using rule 76 (eMat -> valoresMat - p .)
    ?               reduce using rule 76 (eMat -> valoresMat - p .)
    OR              reduce using rule 76 (eMat -> valoresMat - p .)
    :               reduce using rule 76 (eMat -> valoresMat - p .)
    *               shift and go to state 153
    /               shift and go to state 154
    %               shift and go to state 152


state 193

    (92) p -> valoresMat / valoresMat .
    (96) exp -> valoresMat . ^ iSing
    (98) exp -> valoresMat . ^ valoresMat

    *               reduce using rule 92 (p -> valoresMat / valoresMat .)
    /               reduce using rule 92 (p -> valoresMat / valoresMat .)
    %               reduce using rule 92 (p -> valoresMat / valoresMat .)
    +               reduce using rule 92 (p -> valoresMat / valoresMat .)
    -               reduce using rule 92 (p -> valoresMat / valoresMat .)
    >               reduce using rule 92 (p -> valoresMat / valoresMat .)
    <               reduce using rule 92 (p -> valoresMat / valoresMat .)
    ,               reduce using rule 92 (p -> valoresMat / valoresMat .)
    )               reduce using rule 92 (p -> valoresMat / valoresMat .)
    ]               reduce using rule 92 (p -> valoresMat / valoresMat .)
    ;               reduce using rule 92 (p -> valoresMat / valoresMat .)
    }               reduce using rule 92 (p -> valoresMat / valoresMat .)
    EQEQ            reduce using rule 92 (p -> valoresMat / valoresMat .)
    DISTINTO        reduce using rule 92 (p -> valoresMat / valoresMat .)
    AND             reduce using rule 92 (p -> valoresMat / valoresMat .)
    ?               reduce using rule 92 (p -> valoresMat / valoresMat .)
    OR              reduce using rule 92 (p -> valoresMat / valoresMat .)
    :               reduce using rule 92 (p -> valoresMat / valoresMat .)
    ^               shift and go to state 132


state 194

    (86) p -> valoresMat / exp .
    (95) exp -> exp . ^ iSing
    (97) exp -> exp . ^ valoresMat

    *               reduce using rule 86 (p -> valoresMat / exp .)
    /               reduce using rule 86 (p -> valoresMat / exp .)
    %               reduce using rule 86 (p -> valoresMat / exp .)
    +               reduce using rule 86 (p -> valoresMat / exp .)
    -               reduce using rule 86 (p -> valoresMat / exp .)
    >               reduce using rule 86 (p -> valoresMat / exp .)
    <               reduce using rule 86 (p -> valoresMat / exp .)
    ,               reduce using rule 86 (p -> valoresMat / exp .)
    )               reduce using rule 86 (p -> valoresMat / exp .)
    ]               reduce using rule 86 (p -> valoresMat / exp .)
    ;               reduce using rule 86 (p -> valoresMat / exp .)
    }               reduce using rule 86 (p -> valoresMat / exp .)
    EQEQ            reduce using rule 86 (p -> valoresMat / exp .)
    DISTINTO        reduce using rule 86 (p -> valoresMat / exp .)
    AND             reduce using rule 86 (p -> valoresMat / exp .)
    ?               reduce using rule 86 (p -> valoresMat / exp .)
    OR              reduce using rule 86 (p -> valoresMat / exp .)
    :               reduce using rule 86 (p -> valoresMat / exp .)
    ^               shift and go to state 155


state 195

    (98) exp -> valoresMat ^ valoresMat .

    ^               reduce using rule 98 (exp -> valoresMat ^ valoresMat .)
    *               reduce using rule 98 (exp -> valoresMat ^ valoresMat .)
    /               reduce using rule 98 (exp -> valoresMat ^ valoresMat .)
    %               reduce using rule 98 (exp -> valoresMat ^ valoresMat .)
    +               reduce using rule 98 (exp -> valoresMat ^ valoresMat .)
    -               reduce using rule 98 (exp -> valoresMat ^ valoresMat .)
    }               reduce using rule 98 (exp -> valoresMat ^ valoresMat .)
    >               reduce using rule 98 (exp -> valoresMat ^ valoresMat .)
    <               reduce using rule 98 (exp -> valoresMat ^ valoresMat .)
    )               reduce using rule 98 (exp -> valoresMat ^ valoresMat .)
    ;               reduce using rule 98 (exp -> valoresMat ^ valoresMat .)
    ,               reduce using rule 98 (exp -> valoresMat ^ valoresMat .)
    ]               reduce using rule 98 (exp -> valoresMat ^ valoresMat .)
    EQEQ            reduce using rule 98 (exp -> valoresMat ^ valoresMat .)
    DISTINTO        reduce using rule 98 (exp -> valoresMat ^ valoresMat .)
    AND             reduce using rule 98 (exp -> valoresMat ^ valoresMat .)
    ?               reduce using rule 98 (exp -> valoresMat ^ valoresMat .)
    OR              reduce using rule 98 (exp -> valoresMat ^ valoresMat .)
    :               reduce using rule 98 (exp -> valoresMat ^ valoresMat .)


state 196

    (96) exp -> valoresMat ^ iSing .

    ^               reduce using rule 96 (exp -> valoresMat ^ iSing .)
    *               reduce using rule 96 (exp -> valoresMat ^ iSing .)
    /               reduce using rule 96 (exp -> valoresMat ^ iSing .)
    %               reduce using rule 96 (exp -> valoresMat ^ iSing .)
    +               reduce using rule 96 (exp -> valoresMat ^ iSing .)
    -               reduce using rule 96 (exp -> valoresMat ^ iSing .)
    }               reduce using rule 96 (exp -> valoresMat ^ iSing .)
    >               reduce using rule 96 (exp -> valoresMat ^ iSing .)
    <               reduce using rule 96 (exp -> valoresMat ^ iSing .)
    )               reduce using rule 96 (exp -> valoresMat ^ iSing .)
    ;               reduce using rule 96 (exp -> valoresMat ^ iSing .)
    ,               reduce using rule 96 (exp -> valoresMat ^ iSing .)
    ]               reduce using rule 96 (exp -> valoresMat ^ iSing .)
    EQEQ            reduce using rule 96 (exp -> valoresMat ^ iSing .)
    DISTINTO        reduce using rule 96 (exp -> valoresMat ^ iSing .)
    AND             reduce using rule 96 (exp -> valoresMat ^ iSing .)
    ?               reduce using rule 96 (exp -> valoresMat ^ iSing .)
    OR              reduce using rule 96 (exp -> valoresMat ^ iSing .)
    :               reduce using rule 96 (exp -> valoresMat ^ iSing .)


state 197

    (129) eq -> eq EQEQ valoresBool .

    EQEQ            reduce using rule 129 (eq -> eq EQEQ valoresBool .)
    DISTINTO        reduce using rule 129 (eq -> eq EQEQ valoresBool .)
    AND             reduce using rule 129 (eq -> eq EQEQ valoresBool .)
    ?               reduce using rule 129 (eq -> eq EQEQ valoresBool .)
    OR              reduce using rule 129 (eq -> eq EQEQ valoresBool .)
    )               reduce using rule 129 (eq -> eq EQEQ valoresBool .)
    ;               reduce using rule 129 (eq -> eq EQEQ valoresBool .)
    ,               reduce using rule 129 (eq -> eq EQEQ valoresBool .)
    ]               reduce using rule 129 (eq -> eq EQEQ valoresBool .)
    }               reduce using rule 129 (eq -> eq EQEQ valoresBool .)
    :               reduce using rule 129 (eq -> eq EQEQ valoresBool .)


state 198

    (125) eq -> eq EQEQ parenBool .

    EQEQ            reduce using rule 125 (eq -> eq EQEQ parenBool .)
    DISTINTO        reduce using rule 125 (eq -> eq EQEQ parenBool .)
    AND             reduce using rule 125 (eq -> eq EQEQ parenBool .)
    ?               reduce using rule 125 (eq -> eq EQEQ parenBool .)
    OR              reduce using rule 125 (eq -> eq EQEQ parenBool .)
    )               reduce using rule 125 (eq -> eq EQEQ parenBool .)
    ;               reduce using rule 125 (eq -> eq EQEQ parenBool .)
    ,               reduce using rule 125 (eq -> eq EQEQ parenBool .)
    ]               reduce using rule 125 (eq -> eq EQEQ parenBool .)
    }               reduce using rule 125 (eq -> eq EQEQ parenBool .)
    :               reduce using rule 125 (eq -> eq EQEQ parenBool .)


state 199

    (130) eq -> eq DISTINTO valoresBool .

    EQEQ            reduce using rule 130 (eq -> eq DISTINTO valoresBool .)
    DISTINTO        reduce using rule 130 (eq -> eq DISTINTO valoresBool .)
    AND             reduce using rule 130 (eq -> eq DISTINTO valoresBool .)
    ?               reduce using rule 130 (eq -> eq DISTINTO valoresBool .)
    OR              reduce using rule 130 (eq -> eq DISTINTO valoresBool .)
    )               reduce using rule 130 (eq -> eq DISTINTO valoresBool .)
    ;               reduce using rule 130 (eq -> eq DISTINTO valoresBool .)
    ,               reduce using rule 130 (eq -> eq DISTINTO valoresBool .)
    ]               reduce using rule 130 (eq -> eq DISTINTO valoresBool .)
    }               reduce using rule 130 (eq -> eq DISTINTO valoresBool .)
    :               reduce using rule 130 (eq -> eq DISTINTO valoresBool .)


state 200

    (126) eq -> eq DISTINTO parenBool .

    EQEQ            reduce using rule 126 (eq -> eq DISTINTO parenBool .)
    DISTINTO        reduce using rule 126 (eq -> eq DISTINTO parenBool .)
    AND             reduce using rule 126 (eq -> eq DISTINTO parenBool .)
    ?               reduce using rule 126 (eq -> eq DISTINTO parenBool .)
    OR              reduce using rule 126 (eq -> eq DISTINTO parenBool .)
    )               reduce using rule 126 (eq -> eq DISTINTO parenBool .)
    ;               reduce using rule 126 (eq -> eq DISTINTO parenBool .)
    ,               reduce using rule 126 (eq -> eq DISTINTO parenBool .)
    ]               reduce using rule 126 (eq -> eq DISTINTO parenBool .)
    }               reduce using rule 126 (eq -> eq DISTINTO parenBool .)
    :               reduce using rule 126 (eq -> eq DISTINTO parenBool .)


state 201

    (121) and -> valoresBool AND eq .
    (125) eq -> eq . EQEQ parenBool
    (126) eq -> eq . DISTINTO parenBool
    (129) eq -> eq . EQEQ valoresBool
    (130) eq -> eq . DISTINTO valoresBool

    AND             reduce using rule 121 (and -> valoresBool AND eq .)
    ?               reduce using rule 121 (and -> valoresBool AND eq .)
    OR              reduce using rule 121 (and -> valoresBool AND eq .)
    )               reduce using rule 121 (and -> valoresBool AND eq .)
    ;               reduce using rule 121 (and -> valoresBool AND eq .)
    ,               reduce using rule 121 (and -> valoresBool AND eq .)
    ]               reduce using rule 121 (and -> valoresBool AND eq .)
    }               reduce using rule 121 (and -> valoresBool AND eq .)
    :               reduce using rule 121 (and -> valoresBool AND eq .)
    EQEQ            shift and go to state 133
    DISTINTO        shift and go to state 134


state 202

    (123) and -> valoresBool AND valoresBool .
    (127) eq -> valoresBool . EQEQ parenBool
    (128) eq -> valoresBool . DISTINTO parenBool
    (131) eq -> valoresBool . EQEQ valoresBool
    (132) eq -> valoresBool . DISTINTO valoresBool

    AND             reduce using rule 123 (and -> valoresBool AND valoresBool .)
    ?               reduce using rule 123 (and -> valoresBool AND valoresBool .)
    OR              reduce using rule 123 (and -> valoresBool AND valoresBool .)
    )               reduce using rule 123 (and -> valoresBool AND valoresBool .)
    ;               reduce using rule 123 (and -> valoresBool AND valoresBool .)
    ,               reduce using rule 123 (and -> valoresBool AND valoresBool .)
    ]               reduce using rule 123 (and -> valoresBool AND valoresBool .)
    }               reduce using rule 123 (and -> valoresBool AND valoresBool .)
    :               reduce using rule 123 (and -> valoresBool AND valoresBool .)
    EQEQ            shift and go to state 137
    DISTINTO        shift and go to state 136


state 203

    (128) eq -> valoresBool DISTINTO parenBool .

    EQEQ            reduce using rule 128 (eq -> valoresBool DISTINTO parenBool .)
    DISTINTO        reduce using rule 128 (eq -> valoresBool DISTINTO parenBool .)
    AND             reduce using rule 128 (eq -> valoresBool DISTINTO parenBool .)
    ?               reduce using rule 128 (eq -> valoresBool DISTINTO parenBool .)
    OR              reduce using rule 128 (eq -> valoresBool DISTINTO parenBool .)
    )               reduce using rule 128 (eq -> valoresBool DISTINTO parenBool .)
    ;               reduce using rule 128 (eq -> valoresBool DISTINTO parenBool .)
    ,               reduce using rule 128 (eq -> valoresBool DISTINTO parenBool .)
    ]               reduce using rule 128 (eq -> valoresBool DISTINTO parenBool .)
    }               reduce using rule 128 (eq -> valoresBool DISTINTO parenBool .)
    :               reduce using rule 128 (eq -> valoresBool DISTINTO parenBool .)


state 204

    (132) eq -> valoresBool DISTINTO valoresBool .

    EQEQ            reduce using rule 132 (eq -> valoresBool DISTINTO valoresBool .)
    DISTINTO        reduce using rule 132 (eq -> valoresBool DISTINTO valoresBool .)
    AND             reduce using rule 132 (eq -> valoresBool DISTINTO valoresBool .)
    ?               reduce using rule 132 (eq -> valoresBool DISTINTO valoresBool .)
    OR              reduce using rule 132 (eq -> valoresBool DISTINTO valoresBool .)
    )               reduce using rule 132 (eq -> valoresBool DISTINTO valoresBool .)
    ;               reduce using rule 132 (eq -> valoresBool DISTINTO valoresBool .)
    ,               reduce using rule 132 (eq -> valoresBool DISTINTO valoresBool .)
    ]               reduce using rule 132 (eq -> valoresBool DISTINTO valoresBool .)
    }               reduce using rule 132 (eq -> valoresBool DISTINTO valoresBool .)
    :               reduce using rule 132 (eq -> valoresBool DISTINTO valoresBool .)


state 205

    (127) eq -> valoresBool EQEQ parenBool .

    EQEQ            reduce using rule 127 (eq -> valoresBool EQEQ parenBool .)
    DISTINTO        reduce using rule 127 (eq -> valoresBool EQEQ parenBool .)
    AND             reduce using rule 127 (eq -> valoresBool EQEQ parenBool .)
    ?               reduce using rule 127 (eq -> valoresBool EQEQ parenBool .)
    OR              reduce using rule 127 (eq -> valoresBool EQEQ parenBool .)
    )               reduce using rule 127 (eq -> valoresBool EQEQ parenBool .)
    ;               reduce using rule 127 (eq -> valoresBool EQEQ parenBool .)
    ,               reduce using rule 127 (eq -> valoresBool EQEQ parenBool .)
    ]               reduce using rule 127 (eq -> valoresBool EQEQ parenBool .)
    }               reduce using rule 127 (eq -> valoresBool EQEQ parenBool .)
    :               reduce using rule 127 (eq -> valoresBool EQEQ parenBool .)


state 206

    (131) eq -> valoresBool EQEQ valoresBool .

    EQEQ            reduce using rule 131 (eq -> valoresBool EQEQ valoresBool .)
    DISTINTO        reduce using rule 131 (eq -> valoresBool EQEQ valoresBool .)
    AND             reduce using rule 131 (eq -> valoresBool EQEQ valoresBool .)
    ?               reduce using rule 131 (eq -> valoresBool EQEQ valoresBool .)
    OR              reduce using rule 131 (eq -> valoresBool EQEQ valoresBool .)
    )               reduce using rule 131 (eq -> valoresBool EQEQ valoresBool .)
    ;               reduce using rule 131 (eq -> valoresBool EQEQ valoresBool .)
    ,               reduce using rule 131 (eq -> valoresBool EQEQ valoresBool .)
    ]               reduce using rule 131 (eq -> valoresBool EQEQ valoresBool .)
    }               reduce using rule 131 (eq -> valoresBool EQEQ valoresBool .)
    :               reduce using rule 131 (eq -> valoresBool EQEQ valoresBool .)


state 207

    (116) or -> valoresBool OR and .
    (120) and -> and . AND eq
    (122) and -> and . AND valoresBool

    ?               reduce using rule 116 (or -> valoresBool OR and .)
    OR              reduce using rule 116 (or -> valoresBool OR and .)
    )               reduce using rule 116 (or -> valoresBool OR and .)
    ,               reduce using rule 116 (or -> valoresBool OR and .)
    ]               reduce using rule 116 (or -> valoresBool OR and .)
    :               reduce using rule 116 (or -> valoresBool OR and .)
    ;               reduce using rule 116 (or -> valoresBool OR and .)
    }               reduce using rule 116 (or -> valoresBool OR and .)
    AND             shift and go to state 126


state 208

    (118) or -> valoresBool OR valoresBool .
    (121) and -> valoresBool . AND eq
    (123) and -> valoresBool . AND valoresBool
    (127) eq -> valoresBool . EQEQ parenBool
    (128) eq -> valoresBool . DISTINTO parenBool
    (131) eq -> valoresBool . EQEQ valoresBool
    (132) eq -> valoresBool . DISTINTO valoresBool

    ?               reduce using rule 118 (or -> valoresBool OR valoresBool .)
    OR              reduce using rule 118 (or -> valoresBool OR valoresBool .)
    )               reduce using rule 118 (or -> valoresBool OR valoresBool .)
    ,               reduce using rule 118 (or -> valoresBool OR valoresBool .)
    ]               reduce using rule 118 (or -> valoresBool OR valoresBool .)
    :               reduce using rule 118 (or -> valoresBool OR valoresBool .)
    ;               reduce using rule 118 (or -> valoresBool OR valoresBool .)
    }               reduce using rule 118 (or -> valoresBool OR valoresBool .)
    AND             shift and go to state 135
    EQEQ            shift and go to state 137
    DISTINTO        shift and go to state 136


state 209

    (113) expBool -> valoresBool ? valoresBool . : valoresBool
    (111) expBool -> valoresBool . ? expBool : expBool
    (113) expBool -> valoresBool . ? valoresBool : valoresBool
    (116) or -> valoresBool . OR and
    (118) or -> valoresBool . OR valoresBool
    (121) and -> valoresBool . AND eq
    (123) and -> valoresBool . AND valoresBool
    (127) eq -> valoresBool . EQEQ parenBool
    (128) eq -> valoresBool . DISTINTO parenBool
    (131) eq -> valoresBool . EQEQ valoresBool
    (132) eq -> valoresBool . DISTINTO valoresBool

    :               shift and go to state 249
    ?               shift and go to state 139
    OR              shift and go to state 138
    AND             shift and go to state 135
    EQEQ            shift and go to state 137
    DISTINTO        shift and go to state 136


state 210

    (111) expBool -> valoresBool ? expBool . : expBool

    :               shift and go to state 250


state 211

    (77) eMat -> eMat + valoresMat .
    (85) p -> valoresMat . * exp
    (86) p -> valoresMat . / exp
    (87) p -> valoresMat . % exp
    (91) p -> valoresMat . * valoresMat
    (92) p -> valoresMat . / valoresMat
    (93) p -> valoresMat . % valoresMat
    (96) exp -> valoresMat . ^ iSing
    (98) exp -> valoresMat . ^ valoresMat

    +               reduce using rule 77 (eMat -> eMat + valoresMat .)
    -               reduce using rule 77 (eMat -> eMat + valoresMat .)
    >               reduce using rule 77 (eMat -> eMat + valoresMat .)
    <               reduce using rule 77 (eMat -> eMat + valoresMat .)
    ;               reduce using rule 77 (eMat -> eMat + valoresMat .)
    }               reduce using rule 77 (eMat -> eMat + valoresMat .)
    )               reduce using rule 77 (eMat -> eMat + valoresMat .)
    ,               reduce using rule 77 (eMat -> eMat + valoresMat .)
    ]               reduce using rule 77 (eMat -> eMat + valoresMat .)
    EQEQ            reduce using rule 77 (eMat -> eMat + valoresMat .)
    DISTINTO        reduce using rule 77 (eMat -> eMat + valoresMat .)
    AND             reduce using rule 77 (eMat -> eMat + valoresMat .)
    ?               reduce using rule 77 (eMat -> eMat + valoresMat .)
    OR              reduce using rule 77 (eMat -> eMat + valoresMat .)
    :               reduce using rule 77 (eMat -> eMat + valoresMat .)
    *               shift and go to state 129
    /               shift and go to state 131
    %               shift and go to state 127
    ^               shift and go to state 132


state 212

    (73) eMat -> eMat + p .
    (82) p -> p . * exp
    (83) p -> p . / exp
    (84) p -> p . % exp
    (88) p -> p . * valoresMat
    (89) p -> p . / valoresMat
    (90) p -> p . % valoresMat

    +               reduce using rule 73 (eMat -> eMat + p .)
    -               reduce using rule 73 (eMat -> eMat + p .)
    >               reduce using rule 73 (eMat -> eMat + p .)
    <               reduce using rule 73 (eMat -> eMat + p .)
    ;               reduce using rule 73 (eMat -> eMat + p .)
    }               reduce using rule 73 (eMat -> eMat + p .)
    )               reduce using rule 73 (eMat -> eMat + p .)
    ,               reduce using rule 73 (eMat -> eMat + p .)
    ]               reduce using rule 73 (eMat -> eMat + p .)
    EQEQ            reduce using rule 73 (eMat -> eMat + p .)
    DISTINTO        reduce using rule 73 (eMat -> eMat + p .)
    AND             reduce using rule 73 (eMat -> eMat + p .)
    ?               reduce using rule 73 (eMat -> eMat + p .)
    OR              reduce using rule 73 (eMat -> eMat + p .)
    :               reduce using rule 73 (eMat -> eMat + p .)
    *               shift and go to state 153
    /               shift and go to state 154
    %               shift and go to state 152


state 213

    (78) eMat -> eMat - valoresMat .
    (85) p -> valoresMat . * exp
    (86) p -> valoresMat . / exp
    (87) p -> valoresMat . % exp
    (91) p -> valoresMat . * valoresMat
    (92) p -> valoresMat . / valoresMat
    (93) p -> valoresMat . % valoresMat
    (96) exp -> valoresMat . ^ iSing
    (98) exp -> valoresMat . ^ valoresMat

    +               reduce using rule 78 (eMat -> eMat - valoresMat .)
    -               reduce using rule 78 (eMat -> eMat - valoresMat .)
    >               reduce using rule 78 (eMat -> eMat - valoresMat .)
    <               reduce using rule 78 (eMat -> eMat - valoresMat .)
    ;               reduce using rule 78 (eMat -> eMat - valoresMat .)
    }               reduce using rule 78 (eMat -> eMat - valoresMat .)
    )               reduce using rule 78 (eMat -> eMat - valoresMat .)
    ,               reduce using rule 78 (eMat -> eMat - valoresMat .)
    ]               reduce using rule 78 (eMat -> eMat - valoresMat .)
    EQEQ            reduce using rule 78 (eMat -> eMat - valoresMat .)
    DISTINTO        reduce using rule 78 (eMat -> eMat - valoresMat .)
    AND             reduce using rule 78 (eMat -> eMat - valoresMat .)
    ?               reduce using rule 78 (eMat -> eMat - valoresMat .)
    OR              reduce using rule 78 (eMat -> eMat - valoresMat .)
    :               reduce using rule 78 (eMat -> eMat - valoresMat .)
    *               shift and go to state 129
    /               shift and go to state 131
    %               shift and go to state 127
    ^               shift and go to state 132


state 214

    (74) eMat -> eMat - p .
    (82) p -> p . * exp
    (83) p -> p . / exp
    (84) p -> p . % exp
    (88) p -> p . * valoresMat
    (89) p -> p . / valoresMat
    (90) p -> p . % valoresMat

    +               reduce using rule 74 (eMat -> eMat - p .)
    -               reduce using rule 74 (eMat -> eMat - p .)
    >               reduce using rule 74 (eMat -> eMat - p .)
    <               reduce using rule 74 (eMat -> eMat - p .)
    ;               reduce using rule 74 (eMat -> eMat - p .)
    }               reduce using rule 74 (eMat -> eMat - p .)
    )               reduce using rule 74 (eMat -> eMat - p .)
    ,               reduce using rule 74 (eMat -> eMat - p .)
    ]               reduce using rule 74 (eMat -> eMat - p .)
    EQEQ            reduce using rule 74 (eMat -> eMat - p .)
    DISTINTO        reduce using rule 74 (eMat -> eMat - p .)
    AND             reduce using rule 74 (eMat -> eMat - p .)
    ?               reduce using rule 74 (eMat -> eMat - p .)
    OR              reduce using rule 74 (eMat -> eMat - p .)
    :               reduce using rule 74 (eMat -> eMat - p .)
    *               shift and go to state 153
    /               shift and go to state 154
    %               shift and go to state 152


state 215

    (105) paren -> ( eMat ) .

    ^               reduce using rule 105 (paren -> ( eMat ) .)
    *               reduce using rule 105 (paren -> ( eMat ) .)
    /               reduce using rule 105 (paren -> ( eMat ) .)
    %               reduce using rule 105 (paren -> ( eMat ) .)
    +               reduce using rule 105 (paren -> ( eMat ) .)
    -               reduce using rule 105 (paren -> ( eMat ) .)
    >               reduce using rule 105 (paren -> ( eMat ) .)
    <               reduce using rule 105 (paren -> ( eMat ) .)
    EQEQ            reduce using rule 105 (paren -> ( eMat ) .)
    DISTINTO        reduce using rule 105 (paren -> ( eMat ) .)
    AND             reduce using rule 105 (paren -> ( eMat ) .)
    ?               reduce using rule 105 (paren -> ( eMat ) .)
    OR              reduce using rule 105 (paren -> ( eMat ) .)
    )               reduce using rule 105 (paren -> ( eMat ) .)
    ;               reduce using rule 105 (paren -> ( eMat ) .)
    ,               reduce using rule 105 (paren -> ( eMat ) .)
    ]               reduce using rule 105 (paren -> ( eMat ) .)
    }               reduce using rule 105 (paren -> ( eMat ) .)
    :               reduce using rule 105 (paren -> ( eMat ) .)


state 216

    (144) parenBool -> ( expBool ) .

    EQEQ            reduce using rule 144 (parenBool -> ( expBool ) .)
    DISTINTO        reduce using rule 144 (parenBool -> ( expBool ) .)
    AND             reduce using rule 144 (parenBool -> ( expBool ) .)
    ?               reduce using rule 144 (parenBool -> ( expBool ) .)
    OR              reduce using rule 144 (parenBool -> ( expBool ) .)
    )               reduce using rule 144 (parenBool -> ( expBool ) .)
    ;               reduce using rule 144 (parenBool -> ( expBool ) .)
    ,               reduce using rule 144 (parenBool -> ( expBool ) .)
    ]               reduce using rule 144 (parenBool -> ( expBool ) .)
    }               reduce using rule 144 (parenBool -> ( expBool ) .)
    :               reduce using rule 144 (parenBool -> ( expBool ) .)


state 217

    (139) menor -> tCompare < tCompare .

    EQEQ            reduce using rule 139 (menor -> tCompare < tCompare .)
    DISTINTO        reduce using rule 139 (menor -> tCompare < tCompare .)
    AND             reduce using rule 139 (menor -> tCompare < tCompare .)
    ?               reduce using rule 139 (menor -> tCompare < tCompare .)
    OR              reduce using rule 139 (menor -> tCompare < tCompare .)
    ,               reduce using rule 139 (menor -> tCompare < tCompare .)
    ]               reduce using rule 139 (menor -> tCompare < tCompare .)
    )               reduce using rule 139 (menor -> tCompare < tCompare .)
    ;               reduce using rule 139 (menor -> tCompare < tCompare .)
    }               reduce using rule 139 (menor -> tCompare < tCompare .)
    :               reduce using rule 139 (menor -> tCompare < tCompare .)


state 218

    (135) tCompare -> varsOps .
    (71) valoresMat -> varsOps .

    EQEQ            reduce using rule 135 (tCompare -> varsOps .)
    DISTINTO        reduce using rule 135 (tCompare -> varsOps .)
    AND             reduce using rule 135 (tCompare -> varsOps .)
    ?               reduce using rule 135 (tCompare -> varsOps .)
    OR              reduce using rule 135 (tCompare -> varsOps .)
    )               reduce using rule 135 (tCompare -> varsOps .)
    ;               reduce using rule 135 (tCompare -> varsOps .)
    ,               reduce using rule 135 (tCompare -> varsOps .)
    ]               reduce using rule 135 (tCompare -> varsOps .)
    }               reduce using rule 135 (tCompare -> varsOps .)
    :               reduce using rule 135 (tCompare -> varsOps .)
    +               reduce using rule 71 (valoresMat -> varsOps .)
    -               reduce using rule 71 (valoresMat -> varsOps .)
    *               reduce using rule 71 (valoresMat -> varsOps .)
    /               reduce using rule 71 (valoresMat -> varsOps .)
    %               reduce using rule 71 (valoresMat -> varsOps .)
    ^               reduce using rule 71 (valoresMat -> varsOps .)


state 219

    (136) tCompare -> varYVals .
    (58) varsOps -> varYVals . MASMAS
    (59) varsOps -> varYVals . MENOSMENOS
    (70) valoresMat -> varYVals .

    EQEQ            reduce using rule 136 (tCompare -> varYVals .)
    DISTINTO        reduce using rule 136 (tCompare -> varYVals .)
    AND             reduce using rule 136 (tCompare -> varYVals .)
    ?               reduce using rule 136 (tCompare -> varYVals .)
    OR              reduce using rule 136 (tCompare -> varYVals .)
    )               reduce using rule 136 (tCompare -> varYVals .)
    ;               reduce using rule 136 (tCompare -> varYVals .)
    ,               reduce using rule 136 (tCompare -> varYVals .)
    ]               reduce using rule 136 (tCompare -> varYVals .)
    }               reduce using rule 136 (tCompare -> varYVals .)
    :               reduce using rule 136 (tCompare -> varYVals .)
    MASMAS          shift and go to state 57
    MENOSMENOS      shift and go to state 58
    +               reduce using rule 70 (valoresMat -> varYVals .)
    -               reduce using rule 70 (valoresMat -> varYVals .)
    *               reduce using rule 70 (valoresMat -> varYVals .)
    /               reduce using rule 70 (valoresMat -> varYVals .)
    %               reduce using rule 70 (valoresMat -> varYVals .)
    ^               reduce using rule 70 (valoresMat -> varYVals .)


state 220

    (137) mayor -> tCompare > tCompare .

    EQEQ            reduce using rule 137 (mayor -> tCompare > tCompare .)
    DISTINTO        reduce using rule 137 (mayor -> tCompare > tCompare .)
    AND             reduce using rule 137 (mayor -> tCompare > tCompare .)
    ?               reduce using rule 137 (mayor -> tCompare > tCompare .)
    OR              reduce using rule 137 (mayor -> tCompare > tCompare .)
    ;               reduce using rule 137 (mayor -> tCompare > tCompare .)
    )               reduce using rule 137 (mayor -> tCompare > tCompare .)
    ,               reduce using rule 137 (mayor -> tCompare > tCompare .)
    ]               reduce using rule 137 (mayor -> tCompare > tCompare .)
    }               reduce using rule 137 (mayor -> tCompare > tCompare .)
    :               reduce using rule 137 (mayor -> tCompare > tCompare .)


state 221

    (90) p -> p % valoresMat .
    (96) exp -> valoresMat . ^ iSing
    (98) exp -> valoresMat . ^ valoresMat

    *               reduce using rule 90 (p -> p % valoresMat .)
    /               reduce using rule 90 (p -> p % valoresMat .)
    %               reduce using rule 90 (p -> p % valoresMat .)
    +               reduce using rule 90 (p -> p % valoresMat .)
    -               reduce using rule 90 (p -> p % valoresMat .)
    >               reduce using rule 90 (p -> p % valoresMat .)
    <               reduce using rule 90 (p -> p % valoresMat .)
    ,               reduce using rule 90 (p -> p % valoresMat .)
    )               reduce using rule 90 (p -> p % valoresMat .)
    ]               reduce using rule 90 (p -> p % valoresMat .)
    ;               reduce using rule 90 (p -> p % valoresMat .)
    }               reduce using rule 90 (p -> p % valoresMat .)
    EQEQ            reduce using rule 90 (p -> p % valoresMat .)
    DISTINTO        reduce using rule 90 (p -> p % valoresMat .)
    AND             reduce using rule 90 (p -> p % valoresMat .)
    ?               reduce using rule 90 (p -> p % valoresMat .)
    OR              reduce using rule 90 (p -> p % valoresMat .)
    :               reduce using rule 90 (p -> p % valoresMat .)
    ^               shift and go to state 132


state 222

    (84) p -> p % exp .
    (95) exp -> exp . ^ iSing
    (97) exp -> exp . ^ valoresMat

    *               reduce using rule 84 (p -> p % exp .)
    /               reduce using rule 84 (p -> p % exp .)
    %               reduce using rule 84 (p -> p % exp .)
    +               reduce using rule 84 (p -> p % exp .)
    -               reduce using rule 84 (p -> p % exp .)
    >               reduce using rule 84 (p -> p % exp .)
    <               reduce using rule 84 (p -> p % exp .)
    ,               reduce using rule 84 (p -> p % exp .)
    )               reduce using rule 84 (p -> p % exp .)
    ]               reduce using rule 84 (p -> p % exp .)
    ;               reduce using rule 84 (p -> p % exp .)
    }               reduce using rule 84 (p -> p % exp .)
    EQEQ            reduce using rule 84 (p -> p % exp .)
    DISTINTO        reduce using rule 84 (p -> p % exp .)
    AND             reduce using rule 84 (p -> p % exp .)
    ?               reduce using rule 84 (p -> p % exp .)
    OR              reduce using rule 84 (p -> p % exp .)
    :               reduce using rule 84 (p -> p % exp .)
    ^               shift and go to state 155


state 223

    (88) p -> p * valoresMat .
    (96) exp -> valoresMat . ^ iSing
    (98) exp -> valoresMat . ^ valoresMat

    *               reduce using rule 88 (p -> p * valoresMat .)
    /               reduce using rule 88 (p -> p * valoresMat .)
    %               reduce using rule 88 (p -> p * valoresMat .)
    +               reduce using rule 88 (p -> p * valoresMat .)
    -               reduce using rule 88 (p -> p * valoresMat .)
    >               reduce using rule 88 (p -> p * valoresMat .)
    <               reduce using rule 88 (p -> p * valoresMat .)
    ,               reduce using rule 88 (p -> p * valoresMat .)
    )               reduce using rule 88 (p -> p * valoresMat .)
    ]               reduce using rule 88 (p -> p * valoresMat .)
    ;               reduce using rule 88 (p -> p * valoresMat .)
    }               reduce using rule 88 (p -> p * valoresMat .)
    EQEQ            reduce using rule 88 (p -> p * valoresMat .)
    DISTINTO        reduce using rule 88 (p -> p * valoresMat .)
    AND             reduce using rule 88 (p -> p * valoresMat .)
    ?               reduce using rule 88 (p -> p * valoresMat .)
    OR              reduce using rule 88 (p -> p * valoresMat .)
    :               reduce using rule 88 (p -> p * valoresMat .)
    ^               shift and go to state 132


state 224

    (82) p -> p * exp .
    (95) exp -> exp . ^ iSing
    (97) exp -> exp . ^ valoresMat

    *               reduce using rule 82 (p -> p * exp .)
    /               reduce using rule 82 (p -> p * exp .)
    %               reduce using rule 82 (p -> p * exp .)
    +               reduce using rule 82 (p -> p * exp .)
    -               reduce using rule 82 (p -> p * exp .)
    >               reduce using rule 82 (p -> p * exp .)
    <               reduce using rule 82 (p -> p * exp .)
    ,               reduce using rule 82 (p -> p * exp .)
    )               reduce using rule 82 (p -> p * exp .)
    ]               reduce using rule 82 (p -> p * exp .)
    ;               reduce using rule 82 (p -> p * exp .)
    }               reduce using rule 82 (p -> p * exp .)
    EQEQ            reduce using rule 82 (p -> p * exp .)
    DISTINTO        reduce using rule 82 (p -> p * exp .)
    AND             reduce using rule 82 (p -> p * exp .)
    ?               reduce using rule 82 (p -> p * exp .)
    OR              reduce using rule 82 (p -> p * exp .)
    :               reduce using rule 82 (p -> p * exp .)
    ^               shift and go to state 155


state 225

    (89) p -> p / valoresMat .
    (96) exp -> valoresMat . ^ iSing
    (98) exp -> valoresMat . ^ valoresMat

    *               reduce using rule 89 (p -> p / valoresMat .)
    /               reduce using rule 89 (p -> p / valoresMat .)
    %               reduce using rule 89 (p -> p / valoresMat .)
    +               reduce using rule 89 (p -> p / valoresMat .)
    -               reduce using rule 89 (p -> p / valoresMat .)
    >               reduce using rule 89 (p -> p / valoresMat .)
    <               reduce using rule 89 (p -> p / valoresMat .)
    ,               reduce using rule 89 (p -> p / valoresMat .)
    )               reduce using rule 89 (p -> p / valoresMat .)
    ]               reduce using rule 89 (p -> p / valoresMat .)
    ;               reduce using rule 89 (p -> p / valoresMat .)
    }               reduce using rule 89 (p -> p / valoresMat .)
    EQEQ            reduce using rule 89 (p -> p / valoresMat .)
    DISTINTO        reduce using rule 89 (p -> p / valoresMat .)
    AND             reduce using rule 89 (p -> p / valoresMat .)
    ?               reduce using rule 89 (p -> p / valoresMat .)
    OR              reduce using rule 89 (p -> p / valoresMat .)
    :               reduce using rule 89 (p -> p / valoresMat .)
    ^               shift and go to state 132


state 226

    (83) p -> p / exp .
    (95) exp -> exp . ^ iSing
    (97) exp -> exp . ^ valoresMat

    *               reduce using rule 83 (p -> p / exp .)
    /               reduce using rule 83 (p -> p / exp .)
    %               reduce using rule 83 (p -> p / exp .)
    +               reduce using rule 83 (p -> p / exp .)
    -               reduce using rule 83 (p -> p / exp .)
    >               reduce using rule 83 (p -> p / exp .)
    <               reduce using rule 83 (p -> p / exp .)
    ,               reduce using rule 83 (p -> p / exp .)
    )               reduce using rule 83 (p -> p / exp .)
    ]               reduce using rule 83 (p -> p / exp .)
    ;               reduce using rule 83 (p -> p / exp .)
    }               reduce using rule 83 (p -> p / exp .)
    EQEQ            reduce using rule 83 (p -> p / exp .)
    DISTINTO        reduce using rule 83 (p -> p / exp .)
    AND             reduce using rule 83 (p -> p / exp .)
    ?               reduce using rule 83 (p -> p / exp .)
    OR              reduce using rule 83 (p -> p / exp .)
    :               reduce using rule 83 (p -> p / exp .)
    ^               shift and go to state 155


state 227

    (97) exp -> exp ^ valoresMat .

    ^               reduce using rule 97 (exp -> exp ^ valoresMat .)
    *               reduce using rule 97 (exp -> exp ^ valoresMat .)
    /               reduce using rule 97 (exp -> exp ^ valoresMat .)
    %               reduce using rule 97 (exp -> exp ^ valoresMat .)
    +               reduce using rule 97 (exp -> exp ^ valoresMat .)
    -               reduce using rule 97 (exp -> exp ^ valoresMat .)
    }               reduce using rule 97 (exp -> exp ^ valoresMat .)
    >               reduce using rule 97 (exp -> exp ^ valoresMat .)
    <               reduce using rule 97 (exp -> exp ^ valoresMat .)
    )               reduce using rule 97 (exp -> exp ^ valoresMat .)
    ;               reduce using rule 97 (exp -> exp ^ valoresMat .)
    ,               reduce using rule 97 (exp -> exp ^ valoresMat .)
    ]               reduce using rule 97 (exp -> exp ^ valoresMat .)
    EQEQ            reduce using rule 97 (exp -> exp ^ valoresMat .)
    DISTINTO        reduce using rule 97 (exp -> exp ^ valoresMat .)
    AND             reduce using rule 97 (exp -> exp ^ valoresMat .)
    ?               reduce using rule 97 (exp -> exp ^ valoresMat .)
    OR              reduce using rule 97 (exp -> exp ^ valoresMat .)
    :               reduce using rule 97 (exp -> exp ^ valoresMat .)


state 228

    (95) exp -> exp ^ iSing .

    ^               reduce using rule 95 (exp -> exp ^ iSing .)
    *               reduce using rule 95 (exp -> exp ^ iSing .)
    /               reduce using rule 95 (exp -> exp ^ iSing .)
    %               reduce using rule 95 (exp -> exp ^ iSing .)
    +               reduce using rule 95 (exp -> exp ^ iSing .)
    -               reduce using rule 95 (exp -> exp ^ iSing .)
    }               reduce using rule 95 (exp -> exp ^ iSing .)
    >               reduce using rule 95 (exp -> exp ^ iSing .)
    <               reduce using rule 95 (exp -> exp ^ iSing .)
    )               reduce using rule 95 (exp -> exp ^ iSing .)
    ;               reduce using rule 95 (exp -> exp ^ iSing .)
    ,               reduce using rule 95 (exp -> exp ^ iSing .)
    ]               reduce using rule 95 (exp -> exp ^ iSing .)
    EQEQ            reduce using rule 95 (exp -> exp ^ iSing .)
    DISTINTO        reduce using rule 95 (exp -> exp ^ iSing .)
    AND             reduce using rule 95 (exp -> exp ^ iSing .)
    ?               reduce using rule 95 (exp -> exp ^ iSing .)
    OR              reduce using rule 95 (exp -> exp ^ iSing .)
    :               reduce using rule 95 (exp -> exp ^ iSing .)


state 229

    (112) expBool -> or ? valoresBool . : valoresBool
    (111) expBool -> valoresBool . ? expBool : expBool
    (113) expBool -> valoresBool . ? valoresBool : valoresBool
    (116) or -> valoresBool . OR and
    (118) or -> valoresBool . OR valoresBool
    (121) and -> valoresBool . AND eq
    (123) and -> valoresBool . AND valoresBool
    (127) eq -> valoresBool . EQEQ parenBool
    (128) eq -> valoresBool . DISTINTO parenBool
    (131) eq -> valoresBool . EQEQ valoresBool
    (132) eq -> valoresBool . DISTINTO valoresBool

    :               shift and go to state 251
    ?               shift and go to state 139
    OR              shift and go to state 138
    AND             shift and go to state 135
    EQEQ            shift and go to state 137
    DISTINTO        shift and go to state 136


state 230

    (110) expBool -> or ? expBool . : expBool

    :               shift and go to state 252


state 231

    (115) or -> or OR and .
    (120) and -> and . AND eq
    (122) and -> and . AND valoresBool

    ?               reduce using rule 115 (or -> or OR and .)
    OR              reduce using rule 115 (or -> or OR and .)
    )               reduce using rule 115 (or -> or OR and .)
    ,               reduce using rule 115 (or -> or OR and .)
    ]               reduce using rule 115 (or -> or OR and .)
    :               reduce using rule 115 (or -> or OR and .)
    ;               reduce using rule 115 (or -> or OR and .)
    }               reduce using rule 115 (or -> or OR and .)
    AND             shift and go to state 126


state 232

    (117) or -> or OR valoresBool .
    (121) and -> valoresBool . AND eq
    (123) and -> valoresBool . AND valoresBool
    (127) eq -> valoresBool . EQEQ parenBool
    (128) eq -> valoresBool . DISTINTO parenBool
    (131) eq -> valoresBool . EQEQ valoresBool
    (132) eq -> valoresBool . DISTINTO valoresBool

    ?               reduce using rule 117 (or -> or OR valoresBool .)
    OR              reduce using rule 117 (or -> or OR valoresBool .)
    )               reduce using rule 117 (or -> or OR valoresBool .)
    ,               reduce using rule 117 (or -> or OR valoresBool .)
    ]               reduce using rule 117 (or -> or OR valoresBool .)
    :               reduce using rule 117 (or -> or OR valoresBool .)
    ;               reduce using rule 117 (or -> or OR valoresBool .)
    }               reduce using rule 117 (or -> or OR valoresBool .)
    AND             shift and go to state 135
    EQEQ            shift and go to state 137
    DISTINTO        shift and go to state 136


state 233

    (10) loop -> WHILE ( expBool ) bloque .

    RETURN          reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    MENOSMENOS      reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    MASMAS          reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    ID              reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    IF              reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    WHILE           reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    DO              reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    FOR             reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    PRINT           reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    MULTIESCALAR    reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    LENGTH          reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    CAPITALIZAR     reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    COLINEALES      reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    }               reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    $end            reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)


state 234

    (32) elem -> valores , . elem
    (32) elem -> . valores , elem
    (33) elem -> . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . reg
    (37) valores -> . INT
    (38) valores -> . STRING
    (39) valores -> . BOOL
    (40) valores -> . varYVals
    (41) valores -> . varsOps
    (42) valores -> . vec
    (43) valores -> . ID . valoresCampos
    (44) valores -> . RES
    (73) eMat -> . eMat + p
    (74) eMat -> . eMat - p
    (75) eMat -> . valoresMat + p
    (76) eMat -> . valoresMat - p
    (77) eMat -> . eMat + valoresMat
    (78) eMat -> . eMat - valoresMat
    (79) eMat -> . valoresMat + valoresMat
    (80) eMat -> . valoresMat - valoresMat
    (81) eMat -> . p
    (110) expBool -> . or ? expBool : expBool
    (111) expBool -> . valoresBool ? expBool : expBool
    (112) expBool -> . or ? valoresBool : valoresBool
    (113) expBool -> . valoresBool ? valoresBool : valoresBool
    (114) expBool -> . or
    (53) reg -> . { campos }
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (31) vec -> . [ elem ]
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (82) p -> . p * exp
    (83) p -> . p / exp
    (84) p -> . p % exp
    (85) p -> . valoresMat * exp
    (86) p -> . valoresMat / exp
    (87) p -> . valoresMat % exp
    (88) p -> . p * valoresMat
    (89) p -> . p / valoresMat
    (90) p -> . p % valoresMat
    (91) p -> . valoresMat * valoresMat
    (92) p -> . valoresMat / valoresMat
    (93) p -> . valoresMat % valoresMat
    (94) p -> . exp
    (115) or -> . or OR and
    (116) or -> . valoresBool OR and
    (117) or -> . or OR valoresBool
    (118) or -> . valoresBool OR valoresBool
    (119) or -> . and
    (106) valoresBool -> . BOOL
    (107) valoresBool -> . funcBool
    (108) valoresBool -> . varYVals
    (109) valoresBool -> . varsOps
    (50) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (120) and -> . and AND eq
    (121) and -> . valoresBool AND eq
    (122) and -> . and AND valoresBool
    (123) and -> . valoresBool AND valoresBool
    (124) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (125) eq -> . eq EQEQ parenBool
    (126) eq -> . eq DISTINTO parenBool
    (127) eq -> . valoresBool EQEQ parenBool
    (128) eq -> . valoresBool DISTINTO parenBool
    (129) eq -> . eq EQEQ valoresBool
    (130) eq -> . eq DISTINTO valoresBool
    (131) eq -> . valoresBool EQEQ valoresBool
    (132) eq -> . valoresBool DISTINTO valoresBool
    (133) eq -> . mayor
    (105) paren -> . ( eMat )
    (137) mayor -> . tCompare > tCompare
    (138) mayor -> . menor
    (134) tCompare -> . eMat
    (135) tCompare -> . varsOps
    (136) tCompare -> . varYVals
    (139) menor -> . tCompare < tCompare
    (140) menor -> . not
    (141) not -> . NOT not
    (142) not -> . NOT valoresBool
    (143) not -> . parenBool
    (144) parenBool -> . ( expBool )

    INT             shift and go to state 99
    STRING          shift and go to state 96
    BOOL            shift and go to state 101
    ID              shift and go to state 98
    RES             shift and go to state 91
    {               shift and go to state 103
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    [               shift and go to state 97
    FLOAT           shift and go to state 80
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 93
    NOT             shift and go to state 87

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    elem                           shift and go to state 253
    menor                          shift and go to state 81
    mayor                          shift and go to state 66
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 92
    vecVal                         shift and go to state 9
    vec                            shift and go to state 94
    paren                          shift and go to state 77
    reg                            shift and go to state 95
    varsOps                        shift and go to state 102
    exp                            shift and go to state 85
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    valores                        shift and go to state 166
    parenBool                      shift and go to state 86
    p                              shift and go to state 82
    iSing                          shift and go to state 75
    varYVals                       shift and go to state 104
    or                             shift and go to state 89
    expBool                        shift and go to state 105

state 235

    (31) vec -> [ elem ] .

    )               reduce using rule 31 (vec -> [ elem ] .)
    ;               reduce using rule 31 (vec -> [ elem ] .)
    ,               reduce using rule 31 (vec -> [ elem ] .)
    }               reduce using rule 31 (vec -> [ elem ] .)
    ]               reduce using rule 31 (vec -> [ elem ] .)


state 236

    (47) valoresCampos -> BEGIN .

    )               reduce using rule 47 (valoresCampos -> BEGIN .)
    ;               reduce using rule 47 (valoresCampos -> BEGIN .)
    ,               reduce using rule 47 (valoresCampos -> BEGIN .)
    ]               reduce using rule 47 (valoresCampos -> BEGIN .)
    }               reduce using rule 47 (valoresCampos -> BEGIN .)


state 237

    (46) valoresCampos -> END .

    )               reduce using rule 46 (valoresCampos -> END .)
    ;               reduce using rule 46 (valoresCampos -> END .)
    ,               reduce using rule 46 (valoresCampos -> END .)
    ]               reduce using rule 46 (valoresCampos -> END .)
    }               reduce using rule 46 (valoresCampos -> END .)


state 238

    (45) valoresCampos -> ID .

    )               reduce using rule 45 (valoresCampos -> ID .)
    ;               reduce using rule 45 (valoresCampos -> ID .)
    ,               reduce using rule 45 (valoresCampos -> ID .)
    ]               reduce using rule 45 (valoresCampos -> ID .)
    }               reduce using rule 45 (valoresCampos -> ID .)


state 239

    (43) valores -> ID . valoresCampos .

    ;               reduce using rule 43 (valores -> ID . valoresCampos .)
    ,               reduce using rule 43 (valores -> ID . valoresCampos .)
    ]               reduce using rule 43 (valores -> ID . valoresCampos .)
    )               reduce using rule 43 (valores -> ID . valoresCampos .)
    }               reduce using rule 43 (valores -> ID . valoresCampos .)


state 240

    (53) reg -> { campos } .

    )               reduce using rule 53 (reg -> { campos } .)
    }               reduce using rule 53 (reg -> { campos } .)
    ,               reduce using rule 53 (reg -> { campos } .)
    ]               reduce using rule 53 (reg -> { campos } .)
    ;               reduce using rule 53 (reg -> { campos } .)


state 241

    (54) campos -> ID : . valores , campos
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . reg
    (37) valores -> . INT
    (38) valores -> . STRING
    (39) valores -> . BOOL
    (40) valores -> . varYVals
    (41) valores -> . varsOps
    (42) valores -> . vec
    (43) valores -> . ID . valoresCampos
    (44) valores -> . RES
    (73) eMat -> . eMat + p
    (74) eMat -> . eMat - p
    (75) eMat -> . valoresMat + p
    (76) eMat -> . valoresMat - p
    (77) eMat -> . eMat + valoresMat
    (78) eMat -> . eMat - valoresMat
    (79) eMat -> . valoresMat + valoresMat
    (80) eMat -> . valoresMat - valoresMat
    (81) eMat -> . p
    (110) expBool -> . or ? expBool : expBool
    (111) expBool -> . valoresBool ? expBool : expBool
    (112) expBool -> . or ? valoresBool : valoresBool
    (113) expBool -> . valoresBool ? valoresBool : valoresBool
    (114) expBool -> . or
    (53) reg -> . { campos }
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (31) vec -> . [ elem ]
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (82) p -> . p * exp
    (83) p -> . p / exp
    (84) p -> . p % exp
    (85) p -> . valoresMat * exp
    (86) p -> . valoresMat / exp
    (87) p -> . valoresMat % exp
    (88) p -> . p * valoresMat
    (89) p -> . p / valoresMat
    (90) p -> . p % valoresMat
    (91) p -> . valoresMat * valoresMat
    (92) p -> . valoresMat / valoresMat
    (93) p -> . valoresMat % valoresMat
    (94) p -> . exp
    (115) or -> . or OR and
    (116) or -> . valoresBool OR and
    (117) or -> . or OR valoresBool
    (118) or -> . valoresBool OR valoresBool
    (119) or -> . and
    (106) valoresBool -> . BOOL
    (107) valoresBool -> . funcBool
    (108) valoresBool -> . varYVals
    (109) valoresBool -> . varsOps
    (50) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (120) and -> . and AND eq
    (121) and -> . valoresBool AND eq
    (122) and -> . and AND valoresBool
    (123) and -> . valoresBool AND valoresBool
    (124) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (125) eq -> . eq EQEQ parenBool
    (126) eq -> . eq DISTINTO parenBool
    (127) eq -> . valoresBool EQEQ parenBool
    (128) eq -> . valoresBool DISTINTO parenBool
    (129) eq -> . eq EQEQ valoresBool
    (130) eq -> . eq DISTINTO valoresBool
    (131) eq -> . valoresBool EQEQ valoresBool
    (132) eq -> . valoresBool DISTINTO valoresBool
    (133) eq -> . mayor
    (105) paren -> . ( eMat )
    (137) mayor -> . tCompare > tCompare
    (138) mayor -> . menor
    (134) tCompare -> . eMat
    (135) tCompare -> . varsOps
    (136) tCompare -> . varYVals
    (139) menor -> . tCompare < tCompare
    (140) menor -> . not
    (141) not -> . NOT not
    (142) not -> . NOT valoresBool
    (143) not -> . parenBool
    (144) parenBool -> . ( expBool )

    INT             shift and go to state 99
    STRING          shift and go to state 96
    BOOL            shift and go to state 101
    ID              shift and go to state 98
    RES             shift and go to state 91
    {               shift and go to state 103
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    [               shift and go to state 97
    FLOAT           shift and go to state 80
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 93
    NOT             shift and go to state 87

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    mayor                          shift and go to state 66
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 92
    vecVal                         shift and go to state 9
    vec                            shift and go to state 94
    paren                          shift and go to state 77
    reg                            shift and go to state 95
    varsOps                        shift and go to state 102
    exp                            shift and go to state 85
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    valores                        shift and go to state 254
    parenBool                      shift and go to state 86
    p                              shift and go to state 82
    iSing                          shift and go to state 75
    varYVals                       shift and go to state 104
    or                             shift and go to state 89
    expBool                        shift and go to state 105

state 242

    (26) funcBool -> COLINEALES ( vec , vec . )

    )               shift and go to state 255


state 243

    (12) loop -> FOR ( varAsig ; expBool . ; varsOps ) bloque

    ;               shift and go to state 256


state 244

    (66) varAsig -> ID . ID = valoresAsig .

    ;               reduce using rule 66 (varAsig -> ID . ID = valoresAsig .)


state 245

    (52) m -> [ INT ] m .

    ;               reduce using rule 52 (m -> [ INT ] m .)
    ?               reduce using rule 52 (m -> [ INT ] m .)
    OR              reduce using rule 52 (m -> [ INT ] m .)
    AND             reduce using rule 52 (m -> [ INT ] m .)
    EQEQ            reduce using rule 52 (m -> [ INT ] m .)
    DISTINTO        reduce using rule 52 (m -> [ INT ] m .)
    >               reduce using rule 52 (m -> [ INT ] m .)
    <               reduce using rule 52 (m -> [ INT ] m .)
    +               reduce using rule 52 (m -> [ INT ] m .)
    -               reduce using rule 52 (m -> [ INT ] m .)
    *               reduce using rule 52 (m -> [ INT ] m .)
    /               reduce using rule 52 (m -> [ INT ] m .)
    %               reduce using rule 52 (m -> [ INT ] m .)
    ^               reduce using rule 52 (m -> [ INT ] m .)
    )               reduce using rule 52 (m -> [ INT ] m .)
    ,               reduce using rule 52 (m -> [ INT ] m .)
    ]               reduce using rule 52 (m -> [ INT ] m .)
    }               reduce using rule 52 (m -> [ INT ] m .)
    :               reduce using rule 52 (m -> [ INT ] m .)
    MASMAS          reduce using rule 52 (m -> [ INT ] m .)
    MENOSMENOS      reduce using rule 52 (m -> [ INT ] m .)


state 246

    (13) if -> IF ( expBool ) bloque . else
    (14) else -> . ELSE bloque
    (15) else -> . empty
    (30) empty -> .

    ELSE            shift and go to state 259
    RETURN          reduce using rule 30 (empty -> .)
    MENOSMENOS      reduce using rule 30 (empty -> .)
    MASMAS          reduce using rule 30 (empty -> .)
    ID              reduce using rule 30 (empty -> .)
    IF              reduce using rule 30 (empty -> .)
    WHILE           reduce using rule 30 (empty -> .)
    DO              reduce using rule 30 (empty -> .)
    FOR             reduce using rule 30 (empty -> .)
    PRINT           reduce using rule 30 (empty -> .)
    MULTIESCALAR    reduce using rule 30 (empty -> .)
    LENGTH          reduce using rule 30 (empty -> .)
    CAPITALIZAR     reduce using rule 30 (empty -> .)
    COLINEALES      reduce using rule 30 (empty -> .)
    $end            reduce using rule 30 (empty -> .)
    }               reduce using rule 30 (empty -> .)

    empty                          shift and go to state 258
    else                           shift and go to state 257

state 247

    (23) funcInt -> MULTIESCALAR ( vec , eMat . , param )
    (73) eMat -> eMat . + p
    (74) eMat -> eMat . - p
    (77) eMat -> eMat . + valoresMat
    (78) eMat -> eMat . - valoresMat

    ,               shift and go to state 260
    +               shift and go to state 140
    -               shift and go to state 141


state 248

    (11) loop -> DO bloque WHILE ( expBool ) . ;

    ;               shift and go to state 261


state 249

    (113) expBool -> valoresBool ? valoresBool : . valoresBool
    (106) valoresBool -> . BOOL
    (107) valoresBool -> . funcBool
    (108) valoresBool -> . varYVals
    (109) valoresBool -> . varsOps
    (26) funcBool -> . COLINEALES ( vec , vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (50) vecVal -> . ID m

    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26

    funcBool                       shift and go to state 64
    valoresBool                    shift and go to state 262
    varYVals                       shift and go to state 159
    vecVal                         shift and go to state 9
    varsOps                        shift and go to state 158

state 250

    (111) expBool -> valoresBool ? expBool : . expBool
    (110) expBool -> . or ? expBool : expBool
    (111) expBool -> . valoresBool ? expBool : expBool
    (112) expBool -> . or ? valoresBool : valoresBool
    (113) expBool -> . valoresBool ? valoresBool : valoresBool
    (114) expBool -> . or
    (115) or -> . or OR and
    (116) or -> . valoresBool OR and
    (117) or -> . or OR valoresBool
    (118) or -> . valoresBool OR valoresBool
    (119) or -> . and
    (106) valoresBool -> . BOOL
    (107) valoresBool -> . funcBool
    (108) valoresBool -> . varYVals
    (109) valoresBool -> . varsOps
    (120) and -> . and AND eq
    (121) and -> . valoresBool AND eq
    (122) and -> . and AND valoresBool
    (123) and -> . valoresBool AND valoresBool
    (124) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (125) eq -> . eq EQEQ parenBool
    (126) eq -> . eq DISTINTO parenBool
    (127) eq -> . valoresBool EQEQ parenBool
    (128) eq -> . valoresBool DISTINTO parenBool
    (129) eq -> . eq EQEQ valoresBool
    (130) eq -> . eq DISTINTO valoresBool
    (131) eq -> . valoresBool EQEQ valoresBool
    (132) eq -> . valoresBool DISTINTO valoresBool
    (133) eq -> . mayor
    (50) vecVal -> . ID m
    (137) mayor -> . tCompare > tCompare
    (138) mayor -> . menor
    (134) tCompare -> . eMat
    (135) tCompare -> . varsOps
    (136) tCompare -> . varYVals
    (139) menor -> . tCompare < tCompare
    (140) menor -> . not
    (73) eMat -> . eMat + p
    (74) eMat -> . eMat - p
    (75) eMat -> . valoresMat + p
    (76) eMat -> . valoresMat - p
    (77) eMat -> . eMat + valoresMat
    (78) eMat -> . eMat - valoresMat
    (79) eMat -> . valoresMat + valoresMat
    (80) eMat -> . valoresMat - valoresMat
    (81) eMat -> . p
    (141) not -> . NOT not
    (142) not -> . NOT valoresBool
    (143) not -> . parenBool
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (82) p -> . p * exp
    (83) p -> . p / exp
    (84) p -> . p % exp
    (85) p -> . valoresMat * exp
    (86) p -> . valoresMat / exp
    (87) p -> . valoresMat % exp
    (88) p -> . p * valoresMat
    (89) p -> . p / valoresMat
    (90) p -> . p % valoresMat
    (91) p -> . valoresMat * valoresMat
    (92) p -> . valoresMat / valoresMat
    (93) p -> . valoresMat % valoresMat
    (94) p -> . exp
    (144) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (105) paren -> . ( eMat )

    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 87
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    (               shift and go to state 72
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 74
    +               shift and go to state 73

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    vecVal                         shift and go to state 9
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 71
    mayor                          shift and go to state 66
    paren                          shift and go to state 77
    iSing                          shift and go to state 75
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    parenBool                      shift and go to state 86
    p                              shift and go to state 82
    varsOps                        shift and go to state 84
    exp                            shift and go to state 85
    varYVals                       shift and go to state 88
    or                             shift and go to state 89
    expBool                        shift and go to state 263

state 251

    (112) expBool -> or ? valoresBool : . valoresBool
    (106) valoresBool -> . BOOL
    (107) valoresBool -> . funcBool
    (108) valoresBool -> . varYVals
    (109) valoresBool -> . varsOps
    (26) funcBool -> . COLINEALES ( vec , vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (50) vecVal -> . ID m

    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26

    funcBool                       shift and go to state 64
    valoresBool                    shift and go to state 264
    vecVal                         shift and go to state 9
    varYVals                       shift and go to state 159
    varsOps                        shift and go to state 158

state 252

    (110) expBool -> or ? expBool : . expBool
    (110) expBool -> . or ? expBool : expBool
    (111) expBool -> . valoresBool ? expBool : expBool
    (112) expBool -> . or ? valoresBool : valoresBool
    (113) expBool -> . valoresBool ? valoresBool : valoresBool
    (114) expBool -> . or
    (115) or -> . or OR and
    (116) or -> . valoresBool OR and
    (117) or -> . or OR valoresBool
    (118) or -> . valoresBool OR valoresBool
    (119) or -> . and
    (106) valoresBool -> . BOOL
    (107) valoresBool -> . funcBool
    (108) valoresBool -> . varYVals
    (109) valoresBool -> . varsOps
    (120) and -> . and AND eq
    (121) and -> . valoresBool AND eq
    (122) and -> . and AND valoresBool
    (123) and -> . valoresBool AND valoresBool
    (124) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (125) eq -> . eq EQEQ parenBool
    (126) eq -> . eq DISTINTO parenBool
    (127) eq -> . valoresBool EQEQ parenBool
    (128) eq -> . valoresBool DISTINTO parenBool
    (129) eq -> . eq EQEQ valoresBool
    (130) eq -> . eq DISTINTO valoresBool
    (131) eq -> . valoresBool EQEQ valoresBool
    (132) eq -> . valoresBool DISTINTO valoresBool
    (133) eq -> . mayor
    (50) vecVal -> . ID m
    (137) mayor -> . tCompare > tCompare
    (138) mayor -> . menor
    (134) tCompare -> . eMat
    (135) tCompare -> . varsOps
    (136) tCompare -> . varYVals
    (139) menor -> . tCompare < tCompare
    (140) menor -> . not
    (73) eMat -> . eMat + p
    (74) eMat -> . eMat - p
    (75) eMat -> . valoresMat + p
    (76) eMat -> . valoresMat - p
    (77) eMat -> . eMat + valoresMat
    (78) eMat -> . eMat - valoresMat
    (79) eMat -> . valoresMat + valoresMat
    (80) eMat -> . valoresMat - valoresMat
    (81) eMat -> . p
    (141) not -> . NOT not
    (142) not -> . NOT valoresBool
    (143) not -> . parenBool
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (82) p -> . p * exp
    (83) p -> . p / exp
    (84) p -> . p % exp
    (85) p -> . valoresMat * exp
    (86) p -> . valoresMat / exp
    (87) p -> . valoresMat % exp
    (88) p -> . p * valoresMat
    (89) p -> . p / valoresMat
    (90) p -> . p % valoresMat
    (91) p -> . valoresMat * valoresMat
    (92) p -> . valoresMat / valoresMat
    (93) p -> . valoresMat % valoresMat
    (94) p -> . exp
    (144) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (105) paren -> . ( eMat )

    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 87
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    (               shift and go to state 72
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 74
    +               shift and go to state 73

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 71
    vecVal                         shift and go to state 9
    paren                          shift and go to state 77
    iSing                          shift and go to state 75
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    varYVals                       shift and go to state 88
    or                             shift and go to state 89
    p                              shift and go to state 82
    varsOps                        shift and go to state 84
    exp                            shift and go to state 85
    mayor                          shift and go to state 66
    parenBool                      shift and go to state 86
    expBool                        shift and go to state 265

state 253

    (32) elem -> valores , elem .

    ]               reduce using rule 32 (elem -> valores , elem .)


state 254

    (54) campos -> ID : valores . , campos

    ,               shift and go to state 266


state 255

    (26) funcBool -> COLINEALES ( vec , vec ) .

    EQEQ            reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    DISTINTO        reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    AND             reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    ?               reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    OR              reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    )               reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    ;               reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    ,               reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    ]               reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    }               reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    :               reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)


state 256

    (12) loop -> FOR ( varAsig ; expBool ; . varsOps ) bloque
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (50) vecVal -> . ID m

    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    ID              shift and go to state 55

    varsOps                        shift and go to state 267
    varYVals                       shift and go to state 28
    vecVal                         shift and go to state 9

state 257

    (13) if -> IF ( expBool ) bloque else .

    RETURN          reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    MENOSMENOS      reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    MASMAS          reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    ID              reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    IF              reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    WHILE           reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    DO              reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    FOR             reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    PRINT           reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    MULTIESCALAR    reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    LENGTH          reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    CAPITALIZAR     reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    COLINEALES      reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    }               reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    $end            reduce using rule 13 (if -> IF ( expBool ) bloque else .)


state 258

    (15) else -> empty .

    RETURN          reduce using rule 15 (else -> empty .)
    MENOSMENOS      reduce using rule 15 (else -> empty .)
    MASMAS          reduce using rule 15 (else -> empty .)
    ID              reduce using rule 15 (else -> empty .)
    IF              reduce using rule 15 (else -> empty .)
    WHILE           reduce using rule 15 (else -> empty .)
    DO              reduce using rule 15 (else -> empty .)
    FOR             reduce using rule 15 (else -> empty .)
    PRINT           reduce using rule 15 (else -> empty .)
    MULTIESCALAR    reduce using rule 15 (else -> empty .)
    LENGTH          reduce using rule 15 (else -> empty .)
    CAPITALIZAR     reduce using rule 15 (else -> empty .)
    COLINEALES      reduce using rule 15 (else -> empty .)
    $end            reduce using rule 15 (else -> empty .)
    }               reduce using rule 15 (else -> empty .)


state 259

    (14) else -> ELSE . bloque
    (16) bloque -> . sentencia ;
    (17) bloque -> . { g }
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (61) varAsig -> . ID MULEQ valoresAsig
    (62) varAsig -> . ID DIVEQ valoresAsig
    (63) varAsig -> . ID MASEQ valoresAsig
    (64) varAsig -> . ID MENOSEQ valoresAsig
    (65) varAsig -> . ID = valoresAsig
    (66) varAsig -> . ID . ID = valoresAsig
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (50) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( eMat )
    (26) funcBool -> . COLINEALES ( vec , vec )

    {               shift and go to state 32
    RETURN          shift and go to state 2
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    ID              shift and go to state 16
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    CAPITALIZAR     shift and go to state 23
    COLINEALES      shift and go to state 13

    varAsig                        shift and go to state 18
    sentencia                      shift and go to state 31
    funcInt                        shift and go to state 5
    funcString                     shift and go to state 20
    funcVoid                       shift and go to state 12
    funcReturn                     shift and go to state 22
    funcBool                       shift and go to state 3
    varsOps                        shift and go to state 27
    func                           shift and go to state 15
    bloque                         shift and go to state 268
    varYVals                       shift and go to state 28
    vecVal                         shift and go to state 9

state 260

    (23) funcInt -> MULTIESCALAR ( vec , eMat , . param )
    (28) param -> . expBool
    (29) param -> . empty
    (110) expBool -> . or ? expBool : expBool
    (111) expBool -> . valoresBool ? expBool : expBool
    (112) expBool -> . or ? valoresBool : valoresBool
    (113) expBool -> . valoresBool ? valoresBool : valoresBool
    (114) expBool -> . or
    (30) empty -> .
    (115) or -> . or OR and
    (116) or -> . valoresBool OR and
    (117) or -> . or OR valoresBool
    (118) or -> . valoresBool OR valoresBool
    (119) or -> . and
    (106) valoresBool -> . BOOL
    (107) valoresBool -> . funcBool
    (108) valoresBool -> . varYVals
    (109) valoresBool -> . varsOps
    (120) and -> . and AND eq
    (121) and -> . valoresBool AND eq
    (122) and -> . and AND valoresBool
    (123) and -> . valoresBool AND valoresBool
    (124) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (125) eq -> . eq EQEQ parenBool
    (126) eq -> . eq DISTINTO parenBool
    (127) eq -> . valoresBool EQEQ parenBool
    (128) eq -> . valoresBool DISTINTO parenBool
    (129) eq -> . eq EQEQ valoresBool
    (130) eq -> . eq DISTINTO valoresBool
    (131) eq -> . valoresBool EQEQ valoresBool
    (132) eq -> . valoresBool DISTINTO valoresBool
    (133) eq -> . mayor
    (50) vecVal -> . ID m
    (137) mayor -> . tCompare > tCompare
    (138) mayor -> . menor
    (134) tCompare -> . eMat
    (135) tCompare -> . varsOps
    (136) tCompare -> . varYVals
    (139) menor -> . tCompare < tCompare
    (140) menor -> . not
    (73) eMat -> . eMat + p
    (74) eMat -> . eMat - p
    (75) eMat -> . valoresMat + p
    (76) eMat -> . valoresMat - p
    (77) eMat -> . eMat + valoresMat
    (78) eMat -> . eMat - valoresMat
    (79) eMat -> . valoresMat + valoresMat
    (80) eMat -> . valoresMat - valoresMat
    (81) eMat -> . p
    (141) not -> . NOT not
    (142) not -> . NOT valoresBool
    (143) not -> . parenBool
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (82) p -> . p * exp
    (83) p -> . p / exp
    (84) p -> . p % exp
    (85) p -> . valoresMat * exp
    (86) p -> . valoresMat / exp
    (87) p -> . valoresMat % exp
    (88) p -> . p * valoresMat
    (89) p -> . p / valoresMat
    (90) p -> . p % valoresMat
    (91) p -> . valoresMat * valoresMat
    (92) p -> . valoresMat / valoresMat
    (93) p -> . valoresMat % valoresMat
    (94) p -> . exp
    (144) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (105) paren -> . ( eMat )

    )               reduce using rule 30 (empty -> .)
    BOOL            shift and go to state 83
    COLINEALES      shift and go to state 13
    ID              shift and go to state 55
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 87
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 70
    (               shift and go to state 72
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 74
    +               shift and go to state 73

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    valoresMat                     shift and go to state 67
    vecVal                         shift and go to state 9
    eq                             shift and go to state 68
    mayor                          shift and go to state 66
    eMat                           shift and go to state 71
    param                          shift and go to state 269
    valoresBool                    shift and go to state 69
    paren                          shift and go to state 77
    empty                          shift and go to state 270
    iSing                          shift and go to state 75
    tCompare                       shift and go to state 76
    not                            shift and go to state 78
    or                             shift and go to state 89
    p                              shift and go to state 82
    varsOps                        shift and go to state 84
    exp                            shift and go to state 85
    varYVals                       shift and go to state 88
    parenBool                      shift and go to state 86
    expBool                        shift and go to state 271

state 261

    (11) loop -> DO bloque WHILE ( expBool ) ; .

    RETURN          reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    MENOSMENOS      reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    MASMAS          reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    ID              reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    IF              reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    WHILE           reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    DO              reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    FOR             reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    PRINT           reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    MULTIESCALAR    reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    LENGTH          reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    CAPITALIZAR     reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    COLINEALES      reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    }               reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    $end            reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)


state 262

    (113) expBool -> valoresBool ? valoresBool : valoresBool .

    ,               reduce using rule 113 (expBool -> valoresBool ? valoresBool : valoresBool .)
    ]               reduce using rule 113 (expBool -> valoresBool ? valoresBool : valoresBool .)
    )               reduce using rule 113 (expBool -> valoresBool ? valoresBool : valoresBool .)
    ;               reduce using rule 113 (expBool -> valoresBool ? valoresBool : valoresBool .)
    }               reduce using rule 113 (expBool -> valoresBool ? valoresBool : valoresBool .)
    :               reduce using rule 113 (expBool -> valoresBool ? valoresBool : valoresBool .)


state 263

    (111) expBool -> valoresBool ? expBool : expBool .

    ,               reduce using rule 111 (expBool -> valoresBool ? expBool : expBool .)
    ]               reduce using rule 111 (expBool -> valoresBool ? expBool : expBool .)
    )               reduce using rule 111 (expBool -> valoresBool ? expBool : expBool .)
    ;               reduce using rule 111 (expBool -> valoresBool ? expBool : expBool .)
    }               reduce using rule 111 (expBool -> valoresBool ? expBool : expBool .)
    :               reduce using rule 111 (expBool -> valoresBool ? expBool : expBool .)


state 264

    (112) expBool -> or ? valoresBool : valoresBool .

    ,               reduce using rule 112 (expBool -> or ? valoresBool : valoresBool .)
    ]               reduce using rule 112 (expBool -> or ? valoresBool : valoresBool .)
    )               reduce using rule 112 (expBool -> or ? valoresBool : valoresBool .)
    ;               reduce using rule 112 (expBool -> or ? valoresBool : valoresBool .)
    }               reduce using rule 112 (expBool -> or ? valoresBool : valoresBool .)
    :               reduce using rule 112 (expBool -> or ? valoresBool : valoresBool .)


state 265

    (110) expBool -> or ? expBool : expBool .

    ,               reduce using rule 110 (expBool -> or ? expBool : expBool .)
    ]               reduce using rule 110 (expBool -> or ? expBool : expBool .)
    )               reduce using rule 110 (expBool -> or ? expBool : expBool .)
    ;               reduce using rule 110 (expBool -> or ? expBool : expBool .)
    }               reduce using rule 110 (expBool -> or ? expBool : expBool .)
    :               reduce using rule 110 (expBool -> or ? expBool : expBool .)


state 266

    (54) campos -> ID : valores , . campos
    (54) campos -> . ID : valores , campos
    (55) campos -> . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . reg
    (37) valores -> . INT
    (38) valores -> . STRING
    (39) valores -> . BOOL
    (40) valores -> . varYVals
    (41) valores -> . varsOps
    (42) valores -> . vec
    (43) valores -> . ID . valoresCampos
    (44) valores -> . RES
    (73) eMat -> . eMat + p
    (74) eMat -> . eMat - p
    (75) eMat -> . valoresMat + p
    (76) eMat -> . valoresMat - p
    (77) eMat -> . eMat + valoresMat
    (78) eMat -> . eMat - valoresMat
    (79) eMat -> . valoresMat + valoresMat
    (80) eMat -> . valoresMat - valoresMat
    (81) eMat -> . p
    (110) expBool -> . or ? expBool : expBool
    (111) expBool -> . valoresBool ? expBool : expBool
    (112) expBool -> . or ? valoresBool : valoresBool
    (113) expBool -> . valoresBool ? valoresBool : valoresBool
    (114) expBool -> . or
    (53) reg -> . { campos }
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (31) vec -> . [ elem ]
    (67) valoresMat -> . INT
    (68) valoresMat -> . FLOAT
    (69) valoresMat -> . funcInt
    (70) valoresMat -> . varYVals
    (71) valoresMat -> . varsOps
    (72) valoresMat -> . STRING
    (82) p -> . p * exp
    (83) p -> . p / exp
    (84) p -> . p % exp
    (85) p -> . valoresMat * exp
    (86) p -> . valoresMat / exp
    (87) p -> . valoresMat % exp
    (88) p -> . p * valoresMat
    (89) p -> . p / valoresMat
    (90) p -> . p % valoresMat
    (91) p -> . valoresMat * valoresMat
    (92) p -> . valoresMat / valoresMat
    (93) p -> . valoresMat % valoresMat
    (94) p -> . exp
    (115) or -> . or OR and
    (116) or -> . valoresBool OR and
    (117) or -> . or OR valoresBool
    (118) or -> . valoresBool OR valoresBool
    (119) or -> . and
    (106) valoresBool -> . BOOL
    (107) valoresBool -> . funcBool
    (108) valoresBool -> . varYVals
    (109) valoresBool -> . varsOps
    (50) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (95) exp -> . exp ^ iSing
    (96) exp -> . valoresMat ^ iSing
    (97) exp -> . exp ^ valoresMat
    (98) exp -> . valoresMat ^ valoresMat
    (99) exp -> . iSing
    (120) and -> . and AND eq
    (121) and -> . valoresBool AND eq
    (122) and -> . and AND valoresBool
    (123) and -> . valoresBool AND valoresBool
    (124) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (100) iSing -> . - paren
    (101) iSing -> . + paren
    (102) iSing -> . - valoresMat
    (103) iSing -> . + valoresMat
    (104) iSing -> . paren
    (125) eq -> . eq EQEQ parenBool
    (126) eq -> . eq DISTINTO parenBool
    (127) eq -> . valoresBool EQEQ parenBool
    (128) eq -> . valoresBool DISTINTO parenBool
    (129) eq -> . eq EQEQ valoresBool
    (130) eq -> . eq DISTINTO valoresBool
    (131) eq -> . valoresBool EQEQ valoresBool
    (132) eq -> . valoresBool DISTINTO valoresBool
    (133) eq -> . mayor
    (105) paren -> . ( eMat )
    (137) mayor -> . tCompare > tCompare
    (138) mayor -> . menor
    (134) tCompare -> . eMat
    (135) tCompare -> . varsOps
    (136) tCompare -> . varYVals
    (139) menor -> . tCompare < tCompare
    (140) menor -> . not
    (141) not -> . NOT not
    (142) not -> . NOT valoresBool
    (143) not -> . parenBool
    (144) parenBool -> . ( expBool )

    ID              shift and go to state 171
    INT             shift and go to state 99
    STRING          shift and go to state 96
    BOOL            shift and go to state 101
    RES             shift and go to state 91
    {               shift and go to state 103
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    [               shift and go to state 97
    FLOAT           shift and go to state 80
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 74
    +               shift and go to state 73
    (               shift and go to state 93
    NOT             shift and go to state 87

    and                            shift and go to state 63
    funcBool                       shift and go to state 64
    funcInt                        shift and go to state 65
    menor                          shift and go to state 81
    mayor                          shift and go to state 66
    valoresMat                     shift and go to state 67
    eq                             shift and go to state 68
    valoresBool                    shift and go to state 69
    eMat                           shift and go to state 92
    vecVal                         shift and go to state 9
    vec                            shift and go to state 94
    paren                          shift and go to state 77
    reg                            shift and go to state 95
    varsOps                        shift and go to state 102
    exp                            shift and go to state 85
    tCompare                       shift and go to state 76
    campos                         shift and go to state 272
    not                            shift and go to state 78
    valores                        shift and go to state 172
    parenBool                      shift and go to state 86
    p                              shift and go to state 82
    iSing                          shift and go to state 75
    varYVals                       shift and go to state 104
    or                             shift and go to state 89
    expBool                        shift and go to state 105

state 267

    (12) loop -> FOR ( varAsig ; expBool ; varsOps . ) bloque

    )               shift and go to state 273


state 268

    (14) else -> ELSE bloque .

    RETURN          reduce using rule 14 (else -> ELSE bloque .)
    MENOSMENOS      reduce using rule 14 (else -> ELSE bloque .)
    MASMAS          reduce using rule 14 (else -> ELSE bloque .)
    ID              reduce using rule 14 (else -> ELSE bloque .)
    IF              reduce using rule 14 (else -> ELSE bloque .)
    WHILE           reduce using rule 14 (else -> ELSE bloque .)
    DO              reduce using rule 14 (else -> ELSE bloque .)
    FOR             reduce using rule 14 (else -> ELSE bloque .)
    PRINT           reduce using rule 14 (else -> ELSE bloque .)
    MULTIESCALAR    reduce using rule 14 (else -> ELSE bloque .)
    LENGTH          reduce using rule 14 (else -> ELSE bloque .)
    CAPITALIZAR     reduce using rule 14 (else -> ELSE bloque .)
    COLINEALES      reduce using rule 14 (else -> ELSE bloque .)
    $end            reduce using rule 14 (else -> ELSE bloque .)
    }               reduce using rule 14 (else -> ELSE bloque .)


state 269

    (23) funcInt -> MULTIESCALAR ( vec , eMat , param . )

    )               shift and go to state 274


state 270

    (29) param -> empty .

    )               reduce using rule 29 (param -> empty .)


state 271

    (28) param -> expBool .

    )               reduce using rule 28 (param -> expBool .)


state 272

    (54) campos -> ID : valores , campos .

    }               reduce using rule 54 (campos -> ID : valores , campos .)


state 273

    (12) loop -> FOR ( varAsig ; expBool ; varsOps ) . bloque
    (16) bloque -> . sentencia ;
    (17) bloque -> . { g }
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (56) varsOps -> . MENOSMENOS varYVals
    (57) varsOps -> . MASMAS varYVals
    (58) varsOps -> . varYVals MASMAS
    (59) varsOps -> . varYVals MENOSMENOS
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (61) varAsig -> . ID MULEQ valoresAsig
    (62) varAsig -> . ID DIVEQ valoresAsig
    (63) varAsig -> . ID MASEQ valoresAsig
    (64) varAsig -> . ID MENOSEQ valoresAsig
    (65) varAsig -> . ID = valoresAsig
    (66) varAsig -> . ID . ID = valoresAsig
    (48) varYVals -> . ID
    (49) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (50) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( eMat )
    (26) funcBool -> . COLINEALES ( vec , vec )

    {               shift and go to state 32
    RETURN          shift and go to state 2
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    ID              shift and go to state 16
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    CAPITALIZAR     shift and go to state 23
    COLINEALES      shift and go to state 13

    varAsig                        shift and go to state 18
    sentencia                      shift and go to state 31
    funcInt                        shift and go to state 5
    funcString                     shift and go to state 20
    funcVoid                       shift and go to state 12
    funcReturn                     shift and go to state 22
    funcBool                       shift and go to state 3
    varsOps                        shift and go to state 27
    func                           shift and go to state 15
    bloque                         shift and go to state 275
    varYVals                       shift and go to state 28
    vecVal                         shift and go to state 9

state 274

    (23) funcInt -> MULTIESCALAR ( vec , eMat , param ) .

    ;               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    +               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    -               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    *               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    /               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    %               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    ^               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    >               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    <               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    )               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    ,               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    ]               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    }               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    EQEQ            reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    DISTINTO        reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    AND             reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    ?               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    OR              reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    :               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)


state 275

    (12) loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .

    RETURN          reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    MENOSMENOS      reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    MASMAS          reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    ID              reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    IF              reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    WHILE           reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    DO              reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    FOR             reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    PRINT           reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    MULTIESCALAR    reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    LENGTH          reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    CAPITALIZAR     reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    COLINEALES      reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    }               reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    $end            reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)

