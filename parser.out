Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> g
Rule 1     g -> sentencia
Rule 2     g -> ctrl g
Rule 3     g -> empty
Rule 4     sentencia -> varsOps ;
Rule 5     sentencia -> func ;
Rule 6     sentencia -> varAsig ;
Rule 7     sentencia -> RETURN ;
Rule 8     ctrl -> if
Rule 9     ctrl -> loop
Rule 10    loop -> WHILE ( expBool ) bloque
Rule 11    loop -> DO bloque WHILE ( expBool ) ;
Rule 12    loop -> FOR ( varAsig ; expBool ; varsOps ) bloque
Rule 13    if -> IF ( expBool ) bloque else
Rule 14    else -> ELSE bloque
Rule 15    else -> empty
Rule 16    bloque -> sentencia ;
Rule 17    bloque -> { g }
Rule 18    func -> funcReturn
Rule 19    func -> funcVoid
Rule 20    funcReturn -> funcInt
Rule 21    funcReturn -> funcString
Rule 22    funcReturn -> funcBool
Rule 23    funcInt -> MULTIESCALAR ( vec , eMat , param )
Rule 24    funcInt -> LENGTH ( vec )
Rule 25    funcString -> CAPITALIZAR ( eMat )
Rule 26    funcBool -> COLINEALES ( vec , vec )
Rule 27    funcVoid -> PRINT ( valores )
Rule 28    param -> expBool
Rule 29    param -> empty
Rule 30    empty -> <empty>
Rule 31    vec -> [ elem ]
Rule 32    elem -> valores , elem
Rule 33    elem -> valores
Rule 34    valores -> eMat
Rule 35    valores -> expBool
Rule 36    valores -> reg
Rule 37    valores -> INT
Rule 38    valores -> STRING
Rule 39    valores -> BOOL
Rule 40    valores -> varYVals
Rule 41    valores -> varsOps
Rule 42    valores -> ID . valoresCampos
Rule 43    valores -> RES
Rule 44    valoresCampos -> ID
Rule 45    valoresCampos -> END
Rule 46    valoresCampos -> BEGIN
Rule 47    varYVals -> ID
Rule 48    varYVals -> vecVal
Rule 49    vecVal -> ID m
Rule 50    m -> [ INT ]
Rule 51    m -> [ INT ] m
Rule 52    reg -> { campos }
Rule 53    campos -> ID : valores , campos
Rule 54    campos -> valores
Rule 55    varsOps -> MENOSMENOS varYVals
Rule 56    varsOps -> MASMAS varYVals
Rule 57    varsOps -> varYVals MASMAS
Rule 58    varsOps -> varYVals MENOSMENOS
Rule 59    valoresAsig -> valores
Rule 60    varAsig -> ID MULEQ valoresAsig
Rule 61    varAsig -> ID DIVEQ valoresAsig
Rule 62    varAsig -> ID MASEQ valoresAsig
Rule 63    varAsig -> ID MENOSEQ valoresAsig
Rule 64    varAsig -> ID = valoresAsig
Rule 65    varAsig -> ID . ID = valores
Rule 66    valoresMat -> INT
Rule 67    valoresMat -> FLOAT
Rule 68    valoresMat -> funcInt
Rule 69    valoresMat -> varYVals
Rule 70    valoresMat -> varsOps
Rule 71    valoresMat -> STRING
Rule 72    eMat -> eMat + p
Rule 73    eMat -> eMat - p
Rule 74    eMat -> valoresMat + p
Rule 75    eMat -> valoresMat - p
Rule 76    eMat -> eMat + valoresMat
Rule 77    eMat -> eMat - valoresMat
Rule 78    eMat -> valoresMat + valoresMat
Rule 79    eMat -> valoresMat - valoresMat
Rule 80    eMat -> p
Rule 81    p -> p * exp
Rule 82    p -> p / exp
Rule 83    p -> p % exp
Rule 84    p -> valoresMat * exp
Rule 85    p -> valoresMat / exp
Rule 86    p -> valoresMat % exp
Rule 87    p -> p * valoresMat
Rule 88    p -> p / valoresMat
Rule 89    p -> p % valoresMat
Rule 90    p -> valoresMat * valoresMat
Rule 91    p -> valoresMat / valoresMat
Rule 92    p -> valoresMat % valoresMat
Rule 93    p -> exp
Rule 94    exp -> exp ^ iSing
Rule 95    exp -> valoresMat ^ iSing
Rule 96    exp -> exp ^ valoresMat
Rule 97    exp -> valoresMat ^ valoresMat
Rule 98    exp -> iSing
Rule 99    iSing -> - paren
Rule 100   iSing -> + paren
Rule 101   iSing -> - valoresMat
Rule 102   iSing -> + valoresMat
Rule 103   iSing -> paren
Rule 104   paren -> ( eMat )
Rule 105   valoresBool -> BOOL
Rule 106   valoresBool -> funcBool
Rule 107   valoresBool -> varYVals
Rule 108   valoresBool -> varsOps
Rule 109   expBool -> or ? expBool : expBool
Rule 110   expBool -> valoresBool ? expBool : expBool
Rule 111   expBool -> or ? valoresBool : valoresBool
Rule 112   expBool -> valoresBool ? valoresBool : valoresBool
Rule 113   expBool -> or
Rule 114   or -> or OR and
Rule 115   or -> valoresBool OR and
Rule 116   or -> or OR valoresBool
Rule 117   or -> valoresBool OR valoresBool
Rule 118   or -> and
Rule 119   and -> and AND eq
Rule 120   and -> valoresBool AND eq
Rule 121   and -> and AND valoresBool
Rule 122   and -> valoresBool AND valoresBool
Rule 123   and -> eq
Rule 124   eq -> eq EQEQ parenBool
Rule 125   eq -> eq DISTINTO parenBool
Rule 126   eq -> valoresBool EQEQ parenBool
Rule 127   eq -> valoresBool DISTINTO parenBool
Rule 128   eq -> eq EQEQ valoresBool
Rule 129   eq -> eq DISTINTO valoresBool
Rule 130   eq -> valoresBool EQEQ valoresBool
Rule 131   eq -> valoresBool DISTINTO valoresBool
Rule 132   eq -> mayor
Rule 133   tCompare -> eMat
Rule 134   tCompare -> varsOps
Rule 135   tCompare -> varYVals
Rule 136   mayor -> tCompare > tCompare
Rule 137   mayor -> menor
Rule 138   menor -> tCompare < tCompare
Rule 139   menor -> not
Rule 140   not -> NOT not
Rule 141   not -> NOT valoresBool
Rule 142   not -> parenBool
Rule 143   parenBool -> ( expBool )

Terminals, with rules where they appear

%                    : 83 86 89 92
(                    : 10 11 12 13 23 24 25 26 27 104 143
)                    : 10 11 12 13 23 24 25 26 27 104 143
*                    : 81 84 87 90
+                    : 72 74 76 78 100 102
,                    : 23 23 26 32 53
-                    : 73 75 77 79 99 101
.                    : 42 65
/                    : 82 85 88 91
:                    : 53 109 110 111 112
;                    : 4 5 6 7 11 12 12 16
<                    : 138
=                    : 64 65
>                    : 136
?                    : 109 110 111 112
AND                  : 119 120 121 122
BEGIN                : 46
BOOL                 : 39 105
CAPITALIZAR          : 25
COLINEALES           : 26
COMMENT              : 
DISTINTO             : 125 127 129 131
DIVEQ                : 61
DO                   : 11
ELSE                 : 14
END                  : 45
EQEQ                 : 124 126 128 130
FLOAT                : 67
FOR                  : 12
ID                   : 42 44 47 49 53 60 61 62 63 64 65 65
IF                   : 13
INT                  : 37 50 51 66
LENGTH               : 24
MASEQ                : 62
MASMAS               : 56 57
MENOSEQ              : 63
MENOSMENOS           : 55 58
MULEQ                : 60
MULTIESCALAR         : 23
NOT                  : 140 141
OR                   : 114 115 116 117
PRINT                : 27
RES                  : 43
RETURN               : 7
STRING               : 38 71
WHILE                : 10 11
[                    : 31 50 51
]                    : 31 50 51
^                    : 94 95 96 97
error                : 
{                    : 17 52
}                    : 17 52

Nonterminals, with rules where they appear

and                  : 114 115 118 119 121
bloque               : 10 11 12 13 14
campos               : 52 53
ctrl                 : 2
eMat                 : 23 25 34 72 73 76 77 104 133
elem                 : 31 32
else                 : 13
empty                : 3 15 29
eq                   : 119 120 123 124 125 128 129
exp                  : 81 82 83 84 85 86 93 94 96
expBool              : 10 11 12 13 28 35 109 109 110 110 143
func                 : 5
funcBool             : 22 106
funcInt              : 20 68
funcReturn           : 18
funcString           : 21
funcVoid             : 19
g                    : 2 17 0
iSing                : 94 95 98
if                   : 8
loop                 : 9
m                    : 49 51
mayor                : 132
menor                : 137
not                  : 139 140
or                   : 109 111 113 114 116
p                    : 72 73 74 75 80 81 82 83 87 88 89
param                : 23
paren                : 99 100 103
parenBool            : 124 125 126 127 142
reg                  : 36
sentencia            : 1 16
tCompare             : 136 136 138 138
valores              : 27 32 33 53 54 59 65
valoresAsig          : 60 61 62 63 64
valoresBool          : 110 111 111 112 112 112 115 116 117 117 120 121 122 122 126 127 128 129 130 130 131 131 141
valoresCampos        : 42
valoresMat           : 74 75 76 77 78 78 79 79 84 85 86 87 88 89 90 90 91 91 92 92 95 96 97 97 101 102
varAsig              : 6 12
varYVals             : 40 55 56 57 58 69 107 135
varsOps              : 4 12 41 70 108 134
vec                  : 23 24 26 26
vecVal               : 48

Parsing method: LALR

state 0

    (0) S' -> . g
    (1) g -> . sentencia
    (2) g -> . ctrl g
    (3) g -> . empty
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (8) ctrl -> . if
    (9) ctrl -> . loop
    (30) empty -> .
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (60) varAsig -> . ID MULEQ valoresAsig
    (61) varAsig -> . ID DIVEQ valoresAsig
    (62) varAsig -> . ID MASEQ valoresAsig
    (63) varAsig -> . ID MENOSEQ valoresAsig
    (64) varAsig -> . ID = valoresAsig
    (65) varAsig -> . ID . ID = valores
    (13) if -> . IF ( expBool ) bloque else
    (10) loop -> . WHILE ( expBool ) bloque
    (11) loop -> . DO bloque WHILE ( expBool ) ;
    (12) loop -> . FOR ( varAsig ; expBool ; varsOps ) bloque
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (49) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( eMat )
    (26) funcBool -> . COLINEALES ( vec , vec )

    RETURN          shift and go to state 2
    $end            reduce using rule 30 (empty -> .)
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 6
    DO              shift and go to state 1
    FOR             shift and go to state 14
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    CAPITALIZAR     shift and go to state 23
    COLINEALES      shift and go to state 13

    funcBool                       shift and go to state 3
    ctrl                           shift and go to state 4
    funcInt                        shift and go to state 5
    loop                           shift and go to state 7
    vecVal                         shift and go to state 9
    if                             shift and go to state 10
    sentencia                      shift and go to state 11
    empty                          shift and go to state 25
    funcVoid                       shift and go to state 12
    func                           shift and go to state 15
    varAsig                        shift and go to state 18
    g                              shift and go to state 19
    funcString                     shift and go to state 20
    funcReturn                     shift and go to state 22
    varsOps                        shift and go to state 27
    varYVals                       shift and go to state 28

state 1

    (11) loop -> DO . bloque WHILE ( expBool ) ;
    (16) bloque -> . sentencia ;
    (17) bloque -> . { g }
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (60) varAsig -> . ID MULEQ valoresAsig
    (61) varAsig -> . ID DIVEQ valoresAsig
    (62) varAsig -> . ID MASEQ valoresAsig
    (63) varAsig -> . ID MENOSEQ valoresAsig
    (64) varAsig -> . ID = valoresAsig
    (65) varAsig -> . ID . ID = valores
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (49) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( eMat )
    (26) funcBool -> . COLINEALES ( vec , vec )

    {               shift and go to state 32
    RETURN          shift and go to state 2
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    ID              shift and go to state 16
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    CAPITALIZAR     shift and go to state 23
    COLINEALES      shift and go to state 13

    varAsig                        shift and go to state 18
    sentencia                      shift and go to state 31
    funcInt                        shift and go to state 5
    funcString                     shift and go to state 20
    funcVoid                       shift and go to state 12
    funcReturn                     shift and go to state 22
    funcBool                       shift and go to state 3
    varsOps                        shift and go to state 27
    func                           shift and go to state 15
    bloque                         shift and go to state 30
    varYVals                       shift and go to state 28
    vecVal                         shift and go to state 9

state 2

    (7) sentencia -> RETURN . ;

    ;               shift and go to state 33


state 3

    (22) funcReturn -> funcBool .

    ;               reduce using rule 22 (funcReturn -> funcBool .)


state 4

    (2) g -> ctrl . g
    (1) g -> . sentencia
    (2) g -> . ctrl g
    (3) g -> . empty
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (8) ctrl -> . if
    (9) ctrl -> . loop
    (30) empty -> .
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (60) varAsig -> . ID MULEQ valoresAsig
    (61) varAsig -> . ID DIVEQ valoresAsig
    (62) varAsig -> . ID MASEQ valoresAsig
    (63) varAsig -> . ID MENOSEQ valoresAsig
    (64) varAsig -> . ID = valoresAsig
    (65) varAsig -> . ID . ID = valores
    (13) if -> . IF ( expBool ) bloque else
    (10) loop -> . WHILE ( expBool ) bloque
    (11) loop -> . DO bloque WHILE ( expBool ) ;
    (12) loop -> . FOR ( varAsig ; expBool ; varsOps ) bloque
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (49) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( eMat )
    (26) funcBool -> . COLINEALES ( vec , vec )

    RETURN          shift and go to state 2
    $end            reduce using rule 30 (empty -> .)
    }               reduce using rule 30 (empty -> .)
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 6
    DO              shift and go to state 1
    FOR             shift and go to state 14
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    CAPITALIZAR     shift and go to state 23
    COLINEALES      shift and go to state 13

    funcBool                       shift and go to state 3
    ctrl                           shift and go to state 4
    funcInt                        shift and go to state 5
    loop                           shift and go to state 7
    vecVal                         shift and go to state 9
    if                             shift and go to state 10
    sentencia                      shift and go to state 11
    empty                          shift and go to state 25
    funcVoid                       shift and go to state 12
    func                           shift and go to state 15
    varAsig                        shift and go to state 18
    g                              shift and go to state 34
    funcString                     shift and go to state 20
    funcReturn                     shift and go to state 22
    varsOps                        shift and go to state 27
    varYVals                       shift and go to state 28

state 5

    (20) funcReturn -> funcInt .

    ;               reduce using rule 20 (funcReturn -> funcInt .)


state 6

    (10) loop -> WHILE . ( expBool ) bloque

    (               shift and go to state 35


state 7

    (9) ctrl -> loop .

    RETURN          reduce using rule 9 (ctrl -> loop .)
    MENOSMENOS      reduce using rule 9 (ctrl -> loop .)
    MASMAS          reduce using rule 9 (ctrl -> loop .)
    ID              reduce using rule 9 (ctrl -> loop .)
    IF              reduce using rule 9 (ctrl -> loop .)
    WHILE           reduce using rule 9 (ctrl -> loop .)
    DO              reduce using rule 9 (ctrl -> loop .)
    FOR             reduce using rule 9 (ctrl -> loop .)
    PRINT           reduce using rule 9 (ctrl -> loop .)
    MULTIESCALAR    reduce using rule 9 (ctrl -> loop .)
    LENGTH          reduce using rule 9 (ctrl -> loop .)
    CAPITALIZAR     reduce using rule 9 (ctrl -> loop .)
    COLINEALES      reduce using rule 9 (ctrl -> loop .)
    $end            reduce using rule 9 (ctrl -> loop .)
    }               reduce using rule 9 (ctrl -> loop .)


state 8

    (27) funcVoid -> PRINT . ( valores )

    (               shift and go to state 36


state 9

    (48) varYVals -> vecVal .

    MASMAS          reduce using rule 48 (varYVals -> vecVal .)
    MENOSMENOS      reduce using rule 48 (varYVals -> vecVal .)
    +               reduce using rule 48 (varYVals -> vecVal .)
    -               reduce using rule 48 (varYVals -> vecVal .)
    *               reduce using rule 48 (varYVals -> vecVal .)
    /               reduce using rule 48 (varYVals -> vecVal .)
    %               reduce using rule 48 (varYVals -> vecVal .)
    ^               reduce using rule 48 (varYVals -> vecVal .)
    ?               reduce using rule 48 (varYVals -> vecVal .)
    OR              reduce using rule 48 (varYVals -> vecVal .)
    AND             reduce using rule 48 (varYVals -> vecVal .)
    EQEQ            reduce using rule 48 (varYVals -> vecVal .)
    DISTINTO        reduce using rule 48 (varYVals -> vecVal .)
    >               reduce using rule 48 (varYVals -> vecVal .)
    <               reduce using rule 48 (varYVals -> vecVal .)
    ,               reduce using rule 48 (varYVals -> vecVal .)
    )               reduce using rule 48 (varYVals -> vecVal .)
    ;               reduce using rule 48 (varYVals -> vecVal .)
    }               reduce using rule 48 (varYVals -> vecVal .)
    ]               reduce using rule 48 (varYVals -> vecVal .)
    :               reduce using rule 48 (varYVals -> vecVal .)


state 10

    (8) ctrl -> if .

    RETURN          reduce using rule 8 (ctrl -> if .)
    MENOSMENOS      reduce using rule 8 (ctrl -> if .)
    MASMAS          reduce using rule 8 (ctrl -> if .)
    ID              reduce using rule 8 (ctrl -> if .)
    IF              reduce using rule 8 (ctrl -> if .)
    WHILE           reduce using rule 8 (ctrl -> if .)
    DO              reduce using rule 8 (ctrl -> if .)
    FOR             reduce using rule 8 (ctrl -> if .)
    PRINT           reduce using rule 8 (ctrl -> if .)
    MULTIESCALAR    reduce using rule 8 (ctrl -> if .)
    LENGTH          reduce using rule 8 (ctrl -> if .)
    CAPITALIZAR     reduce using rule 8 (ctrl -> if .)
    COLINEALES      reduce using rule 8 (ctrl -> if .)
    $end            reduce using rule 8 (ctrl -> if .)
    }               reduce using rule 8 (ctrl -> if .)


state 11

    (1) g -> sentencia .

    $end            reduce using rule 1 (g -> sentencia .)
    }               reduce using rule 1 (g -> sentencia .)


state 12

    (19) func -> funcVoid .

    ;               reduce using rule 19 (func -> funcVoid .)


state 13

    (26) funcBool -> COLINEALES . ( vec , vec )

    (               shift and go to state 37


state 14

    (12) loop -> FOR . ( varAsig ; expBool ; varsOps ) bloque

    (               shift and go to state 38


state 15

    (5) sentencia -> func . ;

    ;               shift and go to state 39


state 16

    (60) varAsig -> ID . MULEQ valoresAsig
    (61) varAsig -> ID . DIVEQ valoresAsig
    (62) varAsig -> ID . MASEQ valoresAsig
    (63) varAsig -> ID . MENOSEQ valoresAsig
    (64) varAsig -> ID . = valoresAsig
    (65) varAsig -> ID . . ID = valores
    (47) varYVals -> ID .
    (49) vecVal -> ID . m
    (50) m -> . [ INT ]
    (51) m -> . [ INT ] m

    MULEQ           shift and go to state 44
    DIVEQ           shift and go to state 47
    MASEQ           shift and go to state 41
    MENOSEQ         shift and go to state 40
    =               shift and go to state 46
    .               shift and go to state 43
    MASMAS          reduce using rule 47 (varYVals -> ID .)
    MENOSMENOS      reduce using rule 47 (varYVals -> ID .)
    [               shift and go to state 45

    m                              shift and go to state 42

state 17

    (13) if -> IF . ( expBool ) bloque else

    (               shift and go to state 48


state 18

    (6) sentencia -> varAsig . ;

    ;               shift and go to state 49


state 19

    (0) S' -> g .



state 20

    (21) funcReturn -> funcString .

    ;               reduce using rule 21 (funcReturn -> funcString .)


state 21

    (23) funcInt -> MULTIESCALAR . ( vec , eMat , param )

    (               shift and go to state 50


state 22

    (18) func -> funcReturn .

    ;               reduce using rule 18 (func -> funcReturn .)


state 23

    (25) funcString -> CAPITALIZAR . ( eMat )

    (               shift and go to state 51


state 24

    (24) funcInt -> LENGTH . ( vec )

    (               shift and go to state 52


state 25

    (3) g -> empty .

    $end            reduce using rule 3 (g -> empty .)
    }               reduce using rule 3 (g -> empty .)


state 26

    (56) varsOps -> MASMAS . varYVals
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (49) vecVal -> . ID m

    ID              shift and go to state 54

    varYVals                       shift and go to state 53
    vecVal                         shift and go to state 9

state 27

    (4) sentencia -> varsOps . ;

    ;               shift and go to state 55


state 28

    (57) varsOps -> varYVals . MASMAS
    (58) varsOps -> varYVals . MENOSMENOS

    MASMAS          shift and go to state 56
    MENOSMENOS      shift and go to state 57


state 29

    (55) varsOps -> MENOSMENOS . varYVals
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (49) vecVal -> . ID m

    ID              shift and go to state 54

    varYVals                       shift and go to state 58
    vecVal                         shift and go to state 9

state 30

    (11) loop -> DO bloque . WHILE ( expBool ) ;

    WHILE           shift and go to state 59


state 31

    (16) bloque -> sentencia . ;

    ;               shift and go to state 60


state 32

    (17) bloque -> { . g }
    (1) g -> . sentencia
    (2) g -> . ctrl g
    (3) g -> . empty
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (8) ctrl -> . if
    (9) ctrl -> . loop
    (30) empty -> .
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (60) varAsig -> . ID MULEQ valoresAsig
    (61) varAsig -> . ID DIVEQ valoresAsig
    (62) varAsig -> . ID MASEQ valoresAsig
    (63) varAsig -> . ID MENOSEQ valoresAsig
    (64) varAsig -> . ID = valoresAsig
    (65) varAsig -> . ID . ID = valores
    (13) if -> . IF ( expBool ) bloque else
    (10) loop -> . WHILE ( expBool ) bloque
    (11) loop -> . DO bloque WHILE ( expBool ) ;
    (12) loop -> . FOR ( varAsig ; expBool ; varsOps ) bloque
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (49) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( eMat )
    (26) funcBool -> . COLINEALES ( vec , vec )

    RETURN          shift and go to state 2
    }               reduce using rule 30 (empty -> .)
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 6
    DO              shift and go to state 1
    FOR             shift and go to state 14
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    CAPITALIZAR     shift and go to state 23
    COLINEALES      shift and go to state 13

    funcBool                       shift and go to state 3
    ctrl                           shift and go to state 4
    funcInt                        shift and go to state 5
    loop                           shift and go to state 7
    vecVal                         shift and go to state 9
    if                             shift and go to state 10
    sentencia                      shift and go to state 11
    empty                          shift and go to state 25
    funcVoid                       shift and go to state 12
    func                           shift and go to state 15
    varAsig                        shift and go to state 18
    g                              shift and go to state 61
    funcString                     shift and go to state 20
    funcReturn                     shift and go to state 22
    varsOps                        shift and go to state 27
    varYVals                       shift and go to state 28

state 33

    (7) sentencia -> RETURN ; .

    ;               reduce using rule 7 (sentencia -> RETURN ; .)
    $end            reduce using rule 7 (sentencia -> RETURN ; .)
    }               reduce using rule 7 (sentencia -> RETURN ; .)


state 34

    (2) g -> ctrl g .

    $end            reduce using rule 2 (g -> ctrl g .)
    }               reduce using rule 2 (g -> ctrl g .)


state 35

    (10) loop -> WHILE ( . expBool ) bloque
    (109) expBool -> . or ? expBool : expBool
    (110) expBool -> . valoresBool ? expBool : expBool
    (111) expBool -> . or ? valoresBool : valoresBool
    (112) expBool -> . valoresBool ? valoresBool : valoresBool
    (113) expBool -> . or
    (114) or -> . or OR and
    (115) or -> . valoresBool OR and
    (116) or -> . or OR valoresBool
    (117) or -> . valoresBool OR valoresBool
    (118) or -> . and
    (105) valoresBool -> . BOOL
    (106) valoresBool -> . funcBool
    (107) valoresBool -> . varYVals
    (108) valoresBool -> . varsOps
    (119) and -> . and AND eq
    (120) and -> . valoresBool AND eq
    (121) and -> . and AND valoresBool
    (122) and -> . valoresBool AND valoresBool
    (123) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (124) eq -> . eq EQEQ parenBool
    (125) eq -> . eq DISTINTO parenBool
    (126) eq -> . valoresBool EQEQ parenBool
    (127) eq -> . valoresBool DISTINTO parenBool
    (128) eq -> . eq EQEQ valoresBool
    (129) eq -> . eq DISTINTO valoresBool
    (130) eq -> . valoresBool EQEQ valoresBool
    (131) eq -> . valoresBool DISTINTO valoresBool
    (132) eq -> . mayor
    (49) vecVal -> . ID m
    (136) mayor -> . tCompare > tCompare
    (137) mayor -> . menor
    (133) tCompare -> . eMat
    (134) tCompare -> . varsOps
    (135) tCompare -> . varYVals
    (138) menor -> . tCompare < tCompare
    (139) menor -> . not
    (72) eMat -> . eMat + p
    (73) eMat -> . eMat - p
    (74) eMat -> . valoresMat + p
    (75) eMat -> . valoresMat - p
    (76) eMat -> . eMat + valoresMat
    (77) eMat -> . eMat - valoresMat
    (78) eMat -> . valoresMat + valoresMat
    (79) eMat -> . valoresMat - valoresMat
    (80) eMat -> . p
    (140) not -> . NOT not
    (141) not -> . NOT valoresBool
    (142) not -> . parenBool
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (81) p -> . p * exp
    (82) p -> . p / exp
    (83) p -> . p % exp
    (84) p -> . valoresMat * exp
    (85) p -> . valoresMat / exp
    (86) p -> . valoresMat % exp
    (87) p -> . p * valoresMat
    (88) p -> . p / valoresMat
    (89) p -> . p % valoresMat
    (90) p -> . valoresMat * valoresMat
    (91) p -> . valoresMat / valoresMat
    (92) p -> . valoresMat % valoresMat
    (93) p -> . exp
    (143) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (104) paren -> . ( eMat )

    BOOL            shift and go to state 82
    COLINEALES      shift and go to state 13
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 86
    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 69
    (               shift and go to state 71
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 73
    +               shift and go to state 72

    and                            shift and go to state 62
    funcBool                       shift and go to state 63
    funcInt                        shift and go to state 64
    menor                          shift and go to state 80
    valoresMat                     shift and go to state 66
    eq                             shift and go to state 67
    valoresBool                    shift and go to state 68
    eMat                           shift and go to state 70
    vecVal                         shift and go to state 9
    paren                          shift and go to state 76
    iSing                          shift and go to state 74
    tCompare                       shift and go to state 75
    not                            shift and go to state 77
    varYVals                       shift and go to state 87
    or                             shift and go to state 88
    p                              shift and go to state 81
    varsOps                        shift and go to state 83
    exp                            shift and go to state 84
    mayor                          shift and go to state 65
    parenBool                      shift and go to state 85
    expBool                        shift and go to state 89

state 36

    (27) funcVoid -> PRINT ( . valores )
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . reg
    (37) valores -> . INT
    (38) valores -> . STRING
    (39) valores -> . BOOL
    (40) valores -> . varYVals
    (41) valores -> . varsOps
    (42) valores -> . ID . valoresCampos
    (43) valores -> . RES
    (72) eMat -> . eMat + p
    (73) eMat -> . eMat - p
    (74) eMat -> . valoresMat + p
    (75) eMat -> . valoresMat - p
    (76) eMat -> . eMat + valoresMat
    (77) eMat -> . eMat - valoresMat
    (78) eMat -> . valoresMat + valoresMat
    (79) eMat -> . valoresMat - valoresMat
    (80) eMat -> . p
    (109) expBool -> . or ? expBool : expBool
    (110) expBool -> . valoresBool ? expBool : expBool
    (111) expBool -> . or ? valoresBool : valoresBool
    (112) expBool -> . valoresBool ? valoresBool : valoresBool
    (113) expBool -> . or
    (52) reg -> . { campos }
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (81) p -> . p * exp
    (82) p -> . p / exp
    (83) p -> . p % exp
    (84) p -> . valoresMat * exp
    (85) p -> . valoresMat / exp
    (86) p -> . valoresMat % exp
    (87) p -> . p * valoresMat
    (88) p -> . p / valoresMat
    (89) p -> . p % valoresMat
    (90) p -> . valoresMat * valoresMat
    (91) p -> . valoresMat / valoresMat
    (92) p -> . valoresMat % valoresMat
    (93) p -> . exp
    (114) or -> . or OR and
    (115) or -> . valoresBool OR and
    (116) or -> . or OR valoresBool
    (117) or -> . valoresBool OR valoresBool
    (118) or -> . and
    (105) valoresBool -> . BOOL
    (106) valoresBool -> . funcBool
    (107) valoresBool -> . varYVals
    (108) valoresBool -> . varsOps
    (49) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (119) and -> . and AND eq
    (120) and -> . valoresBool AND eq
    (121) and -> . and AND valoresBool
    (122) and -> . valoresBool AND valoresBool
    (123) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (124) eq -> . eq EQEQ parenBool
    (125) eq -> . eq DISTINTO parenBool
    (126) eq -> . valoresBool EQEQ parenBool
    (127) eq -> . valoresBool DISTINTO parenBool
    (128) eq -> . eq EQEQ valoresBool
    (129) eq -> . eq DISTINTO valoresBool
    (130) eq -> . valoresBool EQEQ valoresBool
    (131) eq -> . valoresBool DISTINTO valoresBool
    (132) eq -> . mayor
    (104) paren -> . ( eMat )
    (136) mayor -> . tCompare > tCompare
    (137) mayor -> . menor
    (133) tCompare -> . eMat
    (134) tCompare -> . varsOps
    (135) tCompare -> . varYVals
    (138) menor -> . tCompare < tCompare
    (139) menor -> . not
    (140) not -> . NOT not
    (141) not -> . NOT valoresBool
    (142) not -> . parenBool
    (143) parenBool -> . ( expBool )

    INT             shift and go to state 96
    STRING          shift and go to state 94
    BOOL            shift and go to state 98
    ID              shift and go to state 95
    RES             shift and go to state 90
    {               shift and go to state 100
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    FLOAT           shift and go to state 79
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 73
    +               shift and go to state 72
    (               shift and go to state 92
    NOT             shift and go to state 86

    and                            shift and go to state 62
    funcBool                       shift and go to state 63
    funcInt                        shift and go to state 64
    menor                          shift and go to state 80
    mayor                          shift and go to state 65
    valoresMat                     shift and go to state 66
    eq                             shift and go to state 67
    valoresBool                    shift and go to state 68
    eMat                           shift and go to state 91
    vecVal                         shift and go to state 9
    paren                          shift and go to state 76
    reg                            shift and go to state 93
    varsOps                        shift and go to state 99
    exp                            shift and go to state 84
    tCompare                       shift and go to state 75
    not                            shift and go to state 77
    valores                        shift and go to state 97
    parenBool                      shift and go to state 85
    p                              shift and go to state 81
    iSing                          shift and go to state 74
    varYVals                       shift and go to state 101
    or                             shift and go to state 88
    expBool                        shift and go to state 102

state 37

    (26) funcBool -> COLINEALES ( . vec , vec )
    (31) vec -> . [ elem ]

    [               shift and go to state 104

    vec                            shift and go to state 103

state 38

    (12) loop -> FOR ( . varAsig ; expBool ; varsOps ) bloque
    (60) varAsig -> . ID MULEQ valoresAsig
    (61) varAsig -> . ID DIVEQ valoresAsig
    (62) varAsig -> . ID MASEQ valoresAsig
    (63) varAsig -> . ID MENOSEQ valoresAsig
    (64) varAsig -> . ID = valoresAsig
    (65) varAsig -> . ID . ID = valores

    ID              shift and go to state 106

    varAsig                        shift and go to state 105

state 39

    (5) sentencia -> func ; .

    ;               reduce using rule 5 (sentencia -> func ; .)
    $end            reduce using rule 5 (sentencia -> func ; .)
    }               reduce using rule 5 (sentencia -> func ; .)


state 40

    (63) varAsig -> ID MENOSEQ . valoresAsig
    (59) valoresAsig -> . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . reg
    (37) valores -> . INT
    (38) valores -> . STRING
    (39) valores -> . BOOL
    (40) valores -> . varYVals
    (41) valores -> . varsOps
    (42) valores -> . ID . valoresCampos
    (43) valores -> . RES
    (72) eMat -> . eMat + p
    (73) eMat -> . eMat - p
    (74) eMat -> . valoresMat + p
    (75) eMat -> . valoresMat - p
    (76) eMat -> . eMat + valoresMat
    (77) eMat -> . eMat - valoresMat
    (78) eMat -> . valoresMat + valoresMat
    (79) eMat -> . valoresMat - valoresMat
    (80) eMat -> . p
    (109) expBool -> . or ? expBool : expBool
    (110) expBool -> . valoresBool ? expBool : expBool
    (111) expBool -> . or ? valoresBool : valoresBool
    (112) expBool -> . valoresBool ? valoresBool : valoresBool
    (113) expBool -> . or
    (52) reg -> . { campos }
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (81) p -> . p * exp
    (82) p -> . p / exp
    (83) p -> . p % exp
    (84) p -> . valoresMat * exp
    (85) p -> . valoresMat / exp
    (86) p -> . valoresMat % exp
    (87) p -> . p * valoresMat
    (88) p -> . p / valoresMat
    (89) p -> . p % valoresMat
    (90) p -> . valoresMat * valoresMat
    (91) p -> . valoresMat / valoresMat
    (92) p -> . valoresMat % valoresMat
    (93) p -> . exp
    (114) or -> . or OR and
    (115) or -> . valoresBool OR and
    (116) or -> . or OR valoresBool
    (117) or -> . valoresBool OR valoresBool
    (118) or -> . and
    (105) valoresBool -> . BOOL
    (106) valoresBool -> . funcBool
    (107) valoresBool -> . varYVals
    (108) valoresBool -> . varsOps
    (49) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (119) and -> . and AND eq
    (120) and -> . valoresBool AND eq
    (121) and -> . and AND valoresBool
    (122) and -> . valoresBool AND valoresBool
    (123) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (124) eq -> . eq EQEQ parenBool
    (125) eq -> . eq DISTINTO parenBool
    (126) eq -> . valoresBool EQEQ parenBool
    (127) eq -> . valoresBool DISTINTO parenBool
    (128) eq -> . eq EQEQ valoresBool
    (129) eq -> . eq DISTINTO valoresBool
    (130) eq -> . valoresBool EQEQ valoresBool
    (131) eq -> . valoresBool DISTINTO valoresBool
    (132) eq -> . mayor
    (104) paren -> . ( eMat )
    (136) mayor -> . tCompare > tCompare
    (137) mayor -> . menor
    (133) tCompare -> . eMat
    (134) tCompare -> . varsOps
    (135) tCompare -> . varYVals
    (138) menor -> . tCompare < tCompare
    (139) menor -> . not
    (140) not -> . NOT not
    (141) not -> . NOT valoresBool
    (142) not -> . parenBool
    (143) parenBool -> . ( expBool )

    INT             shift and go to state 96
    STRING          shift and go to state 94
    BOOL            shift and go to state 98
    ID              shift and go to state 95
    RES             shift and go to state 90
    {               shift and go to state 100
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    FLOAT           shift and go to state 79
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 73
    +               shift and go to state 72
    (               shift and go to state 92
    NOT             shift and go to state 86

    and                            shift and go to state 62
    funcBool                       shift and go to state 63
    funcInt                        shift and go to state 64
    menor                          shift and go to state 80
    mayor                          shift and go to state 65
    valoresMat                     shift and go to state 66
    eq                             shift and go to state 67
    valoresBool                    shift and go to state 68
    eMat                           shift and go to state 91
    vecVal                         shift and go to state 9
    paren                          shift and go to state 76
    reg                            shift and go to state 93
    varsOps                        shift and go to state 99
    exp                            shift and go to state 84
    tCompare                       shift and go to state 75
    not                            shift and go to state 77
    valoresAsig                    shift and go to state 107
    valores                        shift and go to state 108
    parenBool                      shift and go to state 85
    p                              shift and go to state 81
    iSing                          shift and go to state 74
    varYVals                       shift and go to state 101
    or                             shift and go to state 88
    expBool                        shift and go to state 102

state 41

    (62) varAsig -> ID MASEQ . valoresAsig
    (59) valoresAsig -> . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . reg
    (37) valores -> . INT
    (38) valores -> . STRING
    (39) valores -> . BOOL
    (40) valores -> . varYVals
    (41) valores -> . varsOps
    (42) valores -> . ID . valoresCampos
    (43) valores -> . RES
    (72) eMat -> . eMat + p
    (73) eMat -> . eMat - p
    (74) eMat -> . valoresMat + p
    (75) eMat -> . valoresMat - p
    (76) eMat -> . eMat + valoresMat
    (77) eMat -> . eMat - valoresMat
    (78) eMat -> . valoresMat + valoresMat
    (79) eMat -> . valoresMat - valoresMat
    (80) eMat -> . p
    (109) expBool -> . or ? expBool : expBool
    (110) expBool -> . valoresBool ? expBool : expBool
    (111) expBool -> . or ? valoresBool : valoresBool
    (112) expBool -> . valoresBool ? valoresBool : valoresBool
    (113) expBool -> . or
    (52) reg -> . { campos }
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (81) p -> . p * exp
    (82) p -> . p / exp
    (83) p -> . p % exp
    (84) p -> . valoresMat * exp
    (85) p -> . valoresMat / exp
    (86) p -> . valoresMat % exp
    (87) p -> . p * valoresMat
    (88) p -> . p / valoresMat
    (89) p -> . p % valoresMat
    (90) p -> . valoresMat * valoresMat
    (91) p -> . valoresMat / valoresMat
    (92) p -> . valoresMat % valoresMat
    (93) p -> . exp
    (114) or -> . or OR and
    (115) or -> . valoresBool OR and
    (116) or -> . or OR valoresBool
    (117) or -> . valoresBool OR valoresBool
    (118) or -> . and
    (105) valoresBool -> . BOOL
    (106) valoresBool -> . funcBool
    (107) valoresBool -> . varYVals
    (108) valoresBool -> . varsOps
    (49) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (119) and -> . and AND eq
    (120) and -> . valoresBool AND eq
    (121) and -> . and AND valoresBool
    (122) and -> . valoresBool AND valoresBool
    (123) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (124) eq -> . eq EQEQ parenBool
    (125) eq -> . eq DISTINTO parenBool
    (126) eq -> . valoresBool EQEQ parenBool
    (127) eq -> . valoresBool DISTINTO parenBool
    (128) eq -> . eq EQEQ valoresBool
    (129) eq -> . eq DISTINTO valoresBool
    (130) eq -> . valoresBool EQEQ valoresBool
    (131) eq -> . valoresBool DISTINTO valoresBool
    (132) eq -> . mayor
    (104) paren -> . ( eMat )
    (136) mayor -> . tCompare > tCompare
    (137) mayor -> . menor
    (133) tCompare -> . eMat
    (134) tCompare -> . varsOps
    (135) tCompare -> . varYVals
    (138) menor -> . tCompare < tCompare
    (139) menor -> . not
    (140) not -> . NOT not
    (141) not -> . NOT valoresBool
    (142) not -> . parenBool
    (143) parenBool -> . ( expBool )

    INT             shift and go to state 96
    STRING          shift and go to state 94
    BOOL            shift and go to state 98
    ID              shift and go to state 95
    RES             shift and go to state 90
    {               shift and go to state 100
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    FLOAT           shift and go to state 79
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 73
    +               shift and go to state 72
    (               shift and go to state 92
    NOT             shift and go to state 86

    and                            shift and go to state 62
    funcBool                       shift and go to state 63
    funcInt                        shift and go to state 64
    menor                          shift and go to state 80
    mayor                          shift and go to state 65
    valoresMat                     shift and go to state 66
    eq                             shift and go to state 67
    valoresBool                    shift and go to state 68
    eMat                           shift and go to state 91
    vecVal                         shift and go to state 9
    paren                          shift and go to state 76
    reg                            shift and go to state 93
    varsOps                        shift and go to state 99
    exp                            shift and go to state 84
    tCompare                       shift and go to state 75
    not                            shift and go to state 77
    valoresAsig                    shift and go to state 109
    valores                        shift and go to state 108
    parenBool                      shift and go to state 85
    p                              shift and go to state 81
    iSing                          shift and go to state 74
    varYVals                       shift and go to state 101
    or                             shift and go to state 88
    expBool                        shift and go to state 102

state 42

    (49) vecVal -> ID m .

    MASMAS          reduce using rule 49 (vecVal -> ID m .)
    MENOSMENOS      reduce using rule 49 (vecVal -> ID m .)
    )               reduce using rule 49 (vecVal -> ID m .)
    +               reduce using rule 49 (vecVal -> ID m .)
    -               reduce using rule 49 (vecVal -> ID m .)
    *               reduce using rule 49 (vecVal -> ID m .)
    /               reduce using rule 49 (vecVal -> ID m .)
    %               reduce using rule 49 (vecVal -> ID m .)
    ^               reduce using rule 49 (vecVal -> ID m .)
    ?               reduce using rule 49 (vecVal -> ID m .)
    OR              reduce using rule 49 (vecVal -> ID m .)
    AND             reduce using rule 49 (vecVal -> ID m .)
    EQEQ            reduce using rule 49 (vecVal -> ID m .)
    DISTINTO        reduce using rule 49 (vecVal -> ID m .)
    >               reduce using rule 49 (vecVal -> ID m .)
    <               reduce using rule 49 (vecVal -> ID m .)
    ;               reduce using rule 49 (vecVal -> ID m .)
    }               reduce using rule 49 (vecVal -> ID m .)
    ,               reduce using rule 49 (vecVal -> ID m .)
    ]               reduce using rule 49 (vecVal -> ID m .)
    :               reduce using rule 49 (vecVal -> ID m .)


state 43

    (65) varAsig -> ID . . ID = valores

    ID              shift and go to state 110


state 44

    (60) varAsig -> ID MULEQ . valoresAsig
    (59) valoresAsig -> . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . reg
    (37) valores -> . INT
    (38) valores -> . STRING
    (39) valores -> . BOOL
    (40) valores -> . varYVals
    (41) valores -> . varsOps
    (42) valores -> . ID . valoresCampos
    (43) valores -> . RES
    (72) eMat -> . eMat + p
    (73) eMat -> . eMat - p
    (74) eMat -> . valoresMat + p
    (75) eMat -> . valoresMat - p
    (76) eMat -> . eMat + valoresMat
    (77) eMat -> . eMat - valoresMat
    (78) eMat -> . valoresMat + valoresMat
    (79) eMat -> . valoresMat - valoresMat
    (80) eMat -> . p
    (109) expBool -> . or ? expBool : expBool
    (110) expBool -> . valoresBool ? expBool : expBool
    (111) expBool -> . or ? valoresBool : valoresBool
    (112) expBool -> . valoresBool ? valoresBool : valoresBool
    (113) expBool -> . or
    (52) reg -> . { campos }
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (81) p -> . p * exp
    (82) p -> . p / exp
    (83) p -> . p % exp
    (84) p -> . valoresMat * exp
    (85) p -> . valoresMat / exp
    (86) p -> . valoresMat % exp
    (87) p -> . p * valoresMat
    (88) p -> . p / valoresMat
    (89) p -> . p % valoresMat
    (90) p -> . valoresMat * valoresMat
    (91) p -> . valoresMat / valoresMat
    (92) p -> . valoresMat % valoresMat
    (93) p -> . exp
    (114) or -> . or OR and
    (115) or -> . valoresBool OR and
    (116) or -> . or OR valoresBool
    (117) or -> . valoresBool OR valoresBool
    (118) or -> . and
    (105) valoresBool -> . BOOL
    (106) valoresBool -> . funcBool
    (107) valoresBool -> . varYVals
    (108) valoresBool -> . varsOps
    (49) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (119) and -> . and AND eq
    (120) and -> . valoresBool AND eq
    (121) and -> . and AND valoresBool
    (122) and -> . valoresBool AND valoresBool
    (123) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (124) eq -> . eq EQEQ parenBool
    (125) eq -> . eq DISTINTO parenBool
    (126) eq -> . valoresBool EQEQ parenBool
    (127) eq -> . valoresBool DISTINTO parenBool
    (128) eq -> . eq EQEQ valoresBool
    (129) eq -> . eq DISTINTO valoresBool
    (130) eq -> . valoresBool EQEQ valoresBool
    (131) eq -> . valoresBool DISTINTO valoresBool
    (132) eq -> . mayor
    (104) paren -> . ( eMat )
    (136) mayor -> . tCompare > tCompare
    (137) mayor -> . menor
    (133) tCompare -> . eMat
    (134) tCompare -> . varsOps
    (135) tCompare -> . varYVals
    (138) menor -> . tCompare < tCompare
    (139) menor -> . not
    (140) not -> . NOT not
    (141) not -> . NOT valoresBool
    (142) not -> . parenBool
    (143) parenBool -> . ( expBool )

    INT             shift and go to state 96
    STRING          shift and go to state 94
    BOOL            shift and go to state 98
    ID              shift and go to state 95
    RES             shift and go to state 90
    {               shift and go to state 100
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    FLOAT           shift and go to state 79
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 73
    +               shift and go to state 72
    (               shift and go to state 92
    NOT             shift and go to state 86

    and                            shift and go to state 62
    funcBool                       shift and go to state 63
    funcInt                        shift and go to state 64
    menor                          shift and go to state 80
    mayor                          shift and go to state 65
    valoresMat                     shift and go to state 66
    eq                             shift and go to state 67
    valoresBool                    shift and go to state 68
    eMat                           shift and go to state 91
    vecVal                         shift and go to state 9
    paren                          shift and go to state 76
    reg                            shift and go to state 93
    varsOps                        shift and go to state 99
    exp                            shift and go to state 84
    tCompare                       shift and go to state 75
    not                            shift and go to state 77
    valoresAsig                    shift and go to state 111
    valores                        shift and go to state 108
    parenBool                      shift and go to state 85
    p                              shift and go to state 81
    iSing                          shift and go to state 74
    varYVals                       shift and go to state 101
    or                             shift and go to state 88
    expBool                        shift and go to state 102

state 45

    (50) m -> [ . INT ]
    (51) m -> [ . INT ] m

    INT             shift and go to state 112


state 46

    (64) varAsig -> ID = . valoresAsig
    (59) valoresAsig -> . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . reg
    (37) valores -> . INT
    (38) valores -> . STRING
    (39) valores -> . BOOL
    (40) valores -> . varYVals
    (41) valores -> . varsOps
    (42) valores -> . ID . valoresCampos
    (43) valores -> . RES
    (72) eMat -> . eMat + p
    (73) eMat -> . eMat - p
    (74) eMat -> . valoresMat + p
    (75) eMat -> . valoresMat - p
    (76) eMat -> . eMat + valoresMat
    (77) eMat -> . eMat - valoresMat
    (78) eMat -> . valoresMat + valoresMat
    (79) eMat -> . valoresMat - valoresMat
    (80) eMat -> . p
    (109) expBool -> . or ? expBool : expBool
    (110) expBool -> . valoresBool ? expBool : expBool
    (111) expBool -> . or ? valoresBool : valoresBool
    (112) expBool -> . valoresBool ? valoresBool : valoresBool
    (113) expBool -> . or
    (52) reg -> . { campos }
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (81) p -> . p * exp
    (82) p -> . p / exp
    (83) p -> . p % exp
    (84) p -> . valoresMat * exp
    (85) p -> . valoresMat / exp
    (86) p -> . valoresMat % exp
    (87) p -> . p * valoresMat
    (88) p -> . p / valoresMat
    (89) p -> . p % valoresMat
    (90) p -> . valoresMat * valoresMat
    (91) p -> . valoresMat / valoresMat
    (92) p -> . valoresMat % valoresMat
    (93) p -> . exp
    (114) or -> . or OR and
    (115) or -> . valoresBool OR and
    (116) or -> . or OR valoresBool
    (117) or -> . valoresBool OR valoresBool
    (118) or -> . and
    (105) valoresBool -> . BOOL
    (106) valoresBool -> . funcBool
    (107) valoresBool -> . varYVals
    (108) valoresBool -> . varsOps
    (49) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (119) and -> . and AND eq
    (120) and -> . valoresBool AND eq
    (121) and -> . and AND valoresBool
    (122) and -> . valoresBool AND valoresBool
    (123) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (124) eq -> . eq EQEQ parenBool
    (125) eq -> . eq DISTINTO parenBool
    (126) eq -> . valoresBool EQEQ parenBool
    (127) eq -> . valoresBool DISTINTO parenBool
    (128) eq -> . eq EQEQ valoresBool
    (129) eq -> . eq DISTINTO valoresBool
    (130) eq -> . valoresBool EQEQ valoresBool
    (131) eq -> . valoresBool DISTINTO valoresBool
    (132) eq -> . mayor
    (104) paren -> . ( eMat )
    (136) mayor -> . tCompare > tCompare
    (137) mayor -> . menor
    (133) tCompare -> . eMat
    (134) tCompare -> . varsOps
    (135) tCompare -> . varYVals
    (138) menor -> . tCompare < tCompare
    (139) menor -> . not
    (140) not -> . NOT not
    (141) not -> . NOT valoresBool
    (142) not -> . parenBool
    (143) parenBool -> . ( expBool )

    INT             shift and go to state 96
    STRING          shift and go to state 94
    BOOL            shift and go to state 98
    ID              shift and go to state 95
    RES             shift and go to state 90
    {               shift and go to state 100
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    FLOAT           shift and go to state 79
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 73
    +               shift and go to state 72
    (               shift and go to state 92
    NOT             shift and go to state 86

    and                            shift and go to state 62
    funcBool                       shift and go to state 63
    funcInt                        shift and go to state 64
    menor                          shift and go to state 80
    mayor                          shift and go to state 65
    valoresMat                     shift and go to state 66
    eq                             shift and go to state 67
    valoresBool                    shift and go to state 68
    eMat                           shift and go to state 91
    vecVal                         shift and go to state 9
    paren                          shift and go to state 76
    reg                            shift and go to state 93
    varsOps                        shift and go to state 99
    exp                            shift and go to state 84
    tCompare                       shift and go to state 75
    not                            shift and go to state 77
    valoresAsig                    shift and go to state 113
    valores                        shift and go to state 108
    parenBool                      shift and go to state 85
    p                              shift and go to state 81
    iSing                          shift and go to state 74
    varYVals                       shift and go to state 101
    or                             shift and go to state 88
    expBool                        shift and go to state 102

state 47

    (61) varAsig -> ID DIVEQ . valoresAsig
    (59) valoresAsig -> . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . reg
    (37) valores -> . INT
    (38) valores -> . STRING
    (39) valores -> . BOOL
    (40) valores -> . varYVals
    (41) valores -> . varsOps
    (42) valores -> . ID . valoresCampos
    (43) valores -> . RES
    (72) eMat -> . eMat + p
    (73) eMat -> . eMat - p
    (74) eMat -> . valoresMat + p
    (75) eMat -> . valoresMat - p
    (76) eMat -> . eMat + valoresMat
    (77) eMat -> . eMat - valoresMat
    (78) eMat -> . valoresMat + valoresMat
    (79) eMat -> . valoresMat - valoresMat
    (80) eMat -> . p
    (109) expBool -> . or ? expBool : expBool
    (110) expBool -> . valoresBool ? expBool : expBool
    (111) expBool -> . or ? valoresBool : valoresBool
    (112) expBool -> . valoresBool ? valoresBool : valoresBool
    (113) expBool -> . or
    (52) reg -> . { campos }
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (81) p -> . p * exp
    (82) p -> . p / exp
    (83) p -> . p % exp
    (84) p -> . valoresMat * exp
    (85) p -> . valoresMat / exp
    (86) p -> . valoresMat % exp
    (87) p -> . p * valoresMat
    (88) p -> . p / valoresMat
    (89) p -> . p % valoresMat
    (90) p -> . valoresMat * valoresMat
    (91) p -> . valoresMat / valoresMat
    (92) p -> . valoresMat % valoresMat
    (93) p -> . exp
    (114) or -> . or OR and
    (115) or -> . valoresBool OR and
    (116) or -> . or OR valoresBool
    (117) or -> . valoresBool OR valoresBool
    (118) or -> . and
    (105) valoresBool -> . BOOL
    (106) valoresBool -> . funcBool
    (107) valoresBool -> . varYVals
    (108) valoresBool -> . varsOps
    (49) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (119) and -> . and AND eq
    (120) and -> . valoresBool AND eq
    (121) and -> . and AND valoresBool
    (122) and -> . valoresBool AND valoresBool
    (123) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (124) eq -> . eq EQEQ parenBool
    (125) eq -> . eq DISTINTO parenBool
    (126) eq -> . valoresBool EQEQ parenBool
    (127) eq -> . valoresBool DISTINTO parenBool
    (128) eq -> . eq EQEQ valoresBool
    (129) eq -> . eq DISTINTO valoresBool
    (130) eq -> . valoresBool EQEQ valoresBool
    (131) eq -> . valoresBool DISTINTO valoresBool
    (132) eq -> . mayor
    (104) paren -> . ( eMat )
    (136) mayor -> . tCompare > tCompare
    (137) mayor -> . menor
    (133) tCompare -> . eMat
    (134) tCompare -> . varsOps
    (135) tCompare -> . varYVals
    (138) menor -> . tCompare < tCompare
    (139) menor -> . not
    (140) not -> . NOT not
    (141) not -> . NOT valoresBool
    (142) not -> . parenBool
    (143) parenBool -> . ( expBool )

    INT             shift and go to state 96
    STRING          shift and go to state 94
    BOOL            shift and go to state 98
    ID              shift and go to state 95
    RES             shift and go to state 90
    {               shift and go to state 100
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    FLOAT           shift and go to state 79
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 73
    +               shift and go to state 72
    (               shift and go to state 92
    NOT             shift and go to state 86

    and                            shift and go to state 62
    funcBool                       shift and go to state 63
    funcInt                        shift and go to state 64
    menor                          shift and go to state 80
    mayor                          shift and go to state 65
    valoresMat                     shift and go to state 66
    eq                             shift and go to state 67
    valoresBool                    shift and go to state 68
    eMat                           shift and go to state 91
    vecVal                         shift and go to state 9
    paren                          shift and go to state 76
    reg                            shift and go to state 93
    varsOps                        shift and go to state 99
    exp                            shift and go to state 84
    tCompare                       shift and go to state 75
    not                            shift and go to state 77
    valoresAsig                    shift and go to state 114
    valores                        shift and go to state 108
    parenBool                      shift and go to state 85
    p                              shift and go to state 81
    iSing                          shift and go to state 74
    varYVals                       shift and go to state 101
    or                             shift and go to state 88
    expBool                        shift and go to state 102

state 48

    (13) if -> IF ( . expBool ) bloque else
    (109) expBool -> . or ? expBool : expBool
    (110) expBool -> . valoresBool ? expBool : expBool
    (111) expBool -> . or ? valoresBool : valoresBool
    (112) expBool -> . valoresBool ? valoresBool : valoresBool
    (113) expBool -> . or
    (114) or -> . or OR and
    (115) or -> . valoresBool OR and
    (116) or -> . or OR valoresBool
    (117) or -> . valoresBool OR valoresBool
    (118) or -> . and
    (105) valoresBool -> . BOOL
    (106) valoresBool -> . funcBool
    (107) valoresBool -> . varYVals
    (108) valoresBool -> . varsOps
    (119) and -> . and AND eq
    (120) and -> . valoresBool AND eq
    (121) and -> . and AND valoresBool
    (122) and -> . valoresBool AND valoresBool
    (123) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (124) eq -> . eq EQEQ parenBool
    (125) eq -> . eq DISTINTO parenBool
    (126) eq -> . valoresBool EQEQ parenBool
    (127) eq -> . valoresBool DISTINTO parenBool
    (128) eq -> . eq EQEQ valoresBool
    (129) eq -> . eq DISTINTO valoresBool
    (130) eq -> . valoresBool EQEQ valoresBool
    (131) eq -> . valoresBool DISTINTO valoresBool
    (132) eq -> . mayor
    (49) vecVal -> . ID m
    (136) mayor -> . tCompare > tCompare
    (137) mayor -> . menor
    (133) tCompare -> . eMat
    (134) tCompare -> . varsOps
    (135) tCompare -> . varYVals
    (138) menor -> . tCompare < tCompare
    (139) menor -> . not
    (72) eMat -> . eMat + p
    (73) eMat -> . eMat - p
    (74) eMat -> . valoresMat + p
    (75) eMat -> . valoresMat - p
    (76) eMat -> . eMat + valoresMat
    (77) eMat -> . eMat - valoresMat
    (78) eMat -> . valoresMat + valoresMat
    (79) eMat -> . valoresMat - valoresMat
    (80) eMat -> . p
    (140) not -> . NOT not
    (141) not -> . NOT valoresBool
    (142) not -> . parenBool
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (81) p -> . p * exp
    (82) p -> . p / exp
    (83) p -> . p % exp
    (84) p -> . valoresMat * exp
    (85) p -> . valoresMat / exp
    (86) p -> . valoresMat % exp
    (87) p -> . p * valoresMat
    (88) p -> . p / valoresMat
    (89) p -> . p % valoresMat
    (90) p -> . valoresMat * valoresMat
    (91) p -> . valoresMat / valoresMat
    (92) p -> . valoresMat % valoresMat
    (93) p -> . exp
    (143) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (104) paren -> . ( eMat )

    BOOL            shift and go to state 82
    COLINEALES      shift and go to state 13
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 86
    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 69
    (               shift and go to state 71
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 73
    +               shift and go to state 72

    and                            shift and go to state 62
    funcBool                       shift and go to state 63
    funcInt                        shift and go to state 64
    menor                          shift and go to state 80
    valoresMat                     shift and go to state 66
    eq                             shift and go to state 67
    mayor                          shift and go to state 65
    valoresBool                    shift and go to state 68
    eMat                           shift and go to state 70
    vecVal                         shift and go to state 9
    paren                          shift and go to state 76
    iSing                          shift and go to state 74
    tCompare                       shift and go to state 75
    not                            shift and go to state 77
    parenBool                      shift and go to state 85
    p                              shift and go to state 81
    varsOps                        shift and go to state 83
    exp                            shift and go to state 84
    varYVals                       shift and go to state 87
    or                             shift and go to state 88
    expBool                        shift and go to state 115

state 49

    (6) sentencia -> varAsig ; .

    ;               reduce using rule 6 (sentencia -> varAsig ; .)
    $end            reduce using rule 6 (sentencia -> varAsig ; .)
    }               reduce using rule 6 (sentencia -> varAsig ; .)


state 50

    (23) funcInt -> MULTIESCALAR ( . vec , eMat , param )
    (31) vec -> . [ elem ]

    [               shift and go to state 104

    vec                            shift and go to state 116

state 51

    (25) funcString -> CAPITALIZAR ( . eMat )
    (72) eMat -> . eMat + p
    (73) eMat -> . eMat - p
    (74) eMat -> . valoresMat + p
    (75) eMat -> . valoresMat - p
    (76) eMat -> . eMat + valoresMat
    (77) eMat -> . eMat - valoresMat
    (78) eMat -> . valoresMat + valoresMat
    (79) eMat -> . valoresMat - valoresMat
    (80) eMat -> . p
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (81) p -> . p * exp
    (82) p -> . p / exp
    (83) p -> . p % exp
    (84) p -> . valoresMat * exp
    (85) p -> . valoresMat / exp
    (86) p -> . valoresMat % exp
    (87) p -> . p * valoresMat
    (88) p -> . p / valoresMat
    (89) p -> . p % valoresMat
    (90) p -> . valoresMat * valoresMat
    (91) p -> . valoresMat / valoresMat
    (92) p -> . valoresMat % valoresMat
    (93) p -> . exp
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (49) vecVal -> . ID m
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (104) paren -> . ( eMat )

    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 69
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    -               shift and go to state 73
    +               shift and go to state 72
    (               shift and go to state 118

    eMat                           shift and go to state 117
    funcInt                        shift and go to state 64
    iSing                          shift and go to state 74
    p                              shift and go to state 81
    varsOps                        shift and go to state 119
    valoresMat                     shift and go to state 66
    paren                          shift and go to state 76
    exp                            shift and go to state 84
    varYVals                       shift and go to state 120
    vecVal                         shift and go to state 9

state 52

    (24) funcInt -> LENGTH ( . vec )
    (31) vec -> . [ elem ]

    [               shift and go to state 104

    vec                            shift and go to state 121

state 53

    (56) varsOps -> MASMAS varYVals .

    ^               reduce using rule 56 (varsOps -> MASMAS varYVals .)
    *               reduce using rule 56 (varsOps -> MASMAS varYVals .)
    /               reduce using rule 56 (varsOps -> MASMAS varYVals .)
    %               reduce using rule 56 (varsOps -> MASMAS varYVals .)
    +               reduce using rule 56 (varsOps -> MASMAS varYVals .)
    -               reduce using rule 56 (varsOps -> MASMAS varYVals .)
    >               reduce using rule 56 (varsOps -> MASMAS varYVals .)
    <               reduce using rule 56 (varsOps -> MASMAS varYVals .)
    )               reduce using rule 56 (varsOps -> MASMAS varYVals .)
    ;               reduce using rule 56 (varsOps -> MASMAS varYVals .)
    }               reduce using rule 56 (varsOps -> MASMAS varYVals .)
    ,               reduce using rule 56 (varsOps -> MASMAS varYVals .)
    ]               reduce using rule 56 (varsOps -> MASMAS varYVals .)
    EQEQ            reduce using rule 56 (varsOps -> MASMAS varYVals .)
    DISTINTO        reduce using rule 56 (varsOps -> MASMAS varYVals .)
    AND             reduce using rule 56 (varsOps -> MASMAS varYVals .)
    ?               reduce using rule 56 (varsOps -> MASMAS varYVals .)
    OR              reduce using rule 56 (varsOps -> MASMAS varYVals .)
    :               reduce using rule 56 (varsOps -> MASMAS varYVals .)


state 54

    (47) varYVals -> ID .
    (49) vecVal -> ID . m
    (50) m -> . [ INT ]
    (51) m -> . [ INT ] m

    MASMAS          reduce using rule 47 (varYVals -> ID .)
    MENOSMENOS      reduce using rule 47 (varYVals -> ID .)
    +               reduce using rule 47 (varYVals -> ID .)
    -               reduce using rule 47 (varYVals -> ID .)
    *               reduce using rule 47 (varYVals -> ID .)
    /               reduce using rule 47 (varYVals -> ID .)
    %               reduce using rule 47 (varYVals -> ID .)
    ^               reduce using rule 47 (varYVals -> ID .)
    ?               reduce using rule 47 (varYVals -> ID .)
    OR              reduce using rule 47 (varYVals -> ID .)
    AND             reduce using rule 47 (varYVals -> ID .)
    EQEQ            reduce using rule 47 (varYVals -> ID .)
    DISTINTO        reduce using rule 47 (varYVals -> ID .)
    >               reduce using rule 47 (varYVals -> ID .)
    <               reduce using rule 47 (varYVals -> ID .)
    )               reduce using rule 47 (varYVals -> ID .)
    ;               reduce using rule 47 (varYVals -> ID .)
    }               reduce using rule 47 (varYVals -> ID .)
    ,               reduce using rule 47 (varYVals -> ID .)
    ]               reduce using rule 47 (varYVals -> ID .)
    :               reduce using rule 47 (varYVals -> ID .)
    [               shift and go to state 45

    m                              shift and go to state 42

state 55

    (4) sentencia -> varsOps ; .

    ;               reduce using rule 4 (sentencia -> varsOps ; .)
    $end            reduce using rule 4 (sentencia -> varsOps ; .)
    }               reduce using rule 4 (sentencia -> varsOps ; .)


state 56

    (57) varsOps -> varYVals MASMAS .

    ^               reduce using rule 57 (varsOps -> varYVals MASMAS .)
    *               reduce using rule 57 (varsOps -> varYVals MASMAS .)
    /               reduce using rule 57 (varsOps -> varYVals MASMAS .)
    %               reduce using rule 57 (varsOps -> varYVals MASMAS .)
    +               reduce using rule 57 (varsOps -> varYVals MASMAS .)
    -               reduce using rule 57 (varsOps -> varYVals MASMAS .)
    >               reduce using rule 57 (varsOps -> varYVals MASMAS .)
    <               reduce using rule 57 (varsOps -> varYVals MASMAS .)
    )               reduce using rule 57 (varsOps -> varYVals MASMAS .)
    ;               reduce using rule 57 (varsOps -> varYVals MASMAS .)
    }               reduce using rule 57 (varsOps -> varYVals MASMAS .)
    ,               reduce using rule 57 (varsOps -> varYVals MASMAS .)
    ]               reduce using rule 57 (varsOps -> varYVals MASMAS .)
    EQEQ            reduce using rule 57 (varsOps -> varYVals MASMAS .)
    DISTINTO        reduce using rule 57 (varsOps -> varYVals MASMAS .)
    AND             reduce using rule 57 (varsOps -> varYVals MASMAS .)
    ?               reduce using rule 57 (varsOps -> varYVals MASMAS .)
    OR              reduce using rule 57 (varsOps -> varYVals MASMAS .)
    :               reduce using rule 57 (varsOps -> varYVals MASMAS .)


state 57

    (58) varsOps -> varYVals MENOSMENOS .

    ^               reduce using rule 58 (varsOps -> varYVals MENOSMENOS .)
    *               reduce using rule 58 (varsOps -> varYVals MENOSMENOS .)
    /               reduce using rule 58 (varsOps -> varYVals MENOSMENOS .)
    %               reduce using rule 58 (varsOps -> varYVals MENOSMENOS .)
    +               reduce using rule 58 (varsOps -> varYVals MENOSMENOS .)
    -               reduce using rule 58 (varsOps -> varYVals MENOSMENOS .)
    >               reduce using rule 58 (varsOps -> varYVals MENOSMENOS .)
    <               reduce using rule 58 (varsOps -> varYVals MENOSMENOS .)
    )               reduce using rule 58 (varsOps -> varYVals MENOSMENOS .)
    ;               reduce using rule 58 (varsOps -> varYVals MENOSMENOS .)
    }               reduce using rule 58 (varsOps -> varYVals MENOSMENOS .)
    ,               reduce using rule 58 (varsOps -> varYVals MENOSMENOS .)
    ]               reduce using rule 58 (varsOps -> varYVals MENOSMENOS .)
    EQEQ            reduce using rule 58 (varsOps -> varYVals MENOSMENOS .)
    DISTINTO        reduce using rule 58 (varsOps -> varYVals MENOSMENOS .)
    AND             reduce using rule 58 (varsOps -> varYVals MENOSMENOS .)
    ?               reduce using rule 58 (varsOps -> varYVals MENOSMENOS .)
    OR              reduce using rule 58 (varsOps -> varYVals MENOSMENOS .)
    :               reduce using rule 58 (varsOps -> varYVals MENOSMENOS .)


state 58

    (55) varsOps -> MENOSMENOS varYVals .

    ^               reduce using rule 55 (varsOps -> MENOSMENOS varYVals .)
    *               reduce using rule 55 (varsOps -> MENOSMENOS varYVals .)
    /               reduce using rule 55 (varsOps -> MENOSMENOS varYVals .)
    %               reduce using rule 55 (varsOps -> MENOSMENOS varYVals .)
    +               reduce using rule 55 (varsOps -> MENOSMENOS varYVals .)
    -               reduce using rule 55 (varsOps -> MENOSMENOS varYVals .)
    >               reduce using rule 55 (varsOps -> MENOSMENOS varYVals .)
    <               reduce using rule 55 (varsOps -> MENOSMENOS varYVals .)
    )               reduce using rule 55 (varsOps -> MENOSMENOS varYVals .)
    ;               reduce using rule 55 (varsOps -> MENOSMENOS varYVals .)
    }               reduce using rule 55 (varsOps -> MENOSMENOS varYVals .)
    ,               reduce using rule 55 (varsOps -> MENOSMENOS varYVals .)
    ]               reduce using rule 55 (varsOps -> MENOSMENOS varYVals .)
    EQEQ            reduce using rule 55 (varsOps -> MENOSMENOS varYVals .)
    DISTINTO        reduce using rule 55 (varsOps -> MENOSMENOS varYVals .)
    AND             reduce using rule 55 (varsOps -> MENOSMENOS varYVals .)
    ?               reduce using rule 55 (varsOps -> MENOSMENOS varYVals .)
    OR              reduce using rule 55 (varsOps -> MENOSMENOS varYVals .)
    :               reduce using rule 55 (varsOps -> MENOSMENOS varYVals .)


state 59

    (11) loop -> DO bloque WHILE . ( expBool ) ;

    (               shift and go to state 122


state 60

    (16) bloque -> sentencia ; .

    RETURN          reduce using rule 16 (bloque -> sentencia ; .)
    MENOSMENOS      reduce using rule 16 (bloque -> sentencia ; .)
    MASMAS          reduce using rule 16 (bloque -> sentencia ; .)
    ID              reduce using rule 16 (bloque -> sentencia ; .)
    IF              reduce using rule 16 (bloque -> sentencia ; .)
    WHILE           reduce using rule 16 (bloque -> sentencia ; .)
    DO              reduce using rule 16 (bloque -> sentencia ; .)
    FOR             reduce using rule 16 (bloque -> sentencia ; .)
    PRINT           reduce using rule 16 (bloque -> sentencia ; .)
    MULTIESCALAR    reduce using rule 16 (bloque -> sentencia ; .)
    LENGTH          reduce using rule 16 (bloque -> sentencia ; .)
    CAPITALIZAR     reduce using rule 16 (bloque -> sentencia ; .)
    COLINEALES      reduce using rule 16 (bloque -> sentencia ; .)
    $end            reduce using rule 16 (bloque -> sentencia ; .)
    }               reduce using rule 16 (bloque -> sentencia ; .)
    ELSE            reduce using rule 16 (bloque -> sentencia ; .)


state 61

    (17) bloque -> { g . }

    }               shift and go to state 123


state 62

    (118) or -> and .
    (119) and -> and . AND eq
    (121) and -> and . AND valoresBool

    ?               reduce using rule 118 (or -> and .)
    OR              reduce using rule 118 (or -> and .)
    ;               reduce using rule 118 (or -> and .)
    )               reduce using rule 118 (or -> and .)
    :               reduce using rule 118 (or -> and .)
    ,               reduce using rule 118 (or -> and .)
    ]               reduce using rule 118 (or -> and .)
    }               reduce using rule 118 (or -> and .)
    AND             shift and go to state 124


state 63

    (106) valoresBool -> funcBool .

    EQEQ            reduce using rule 106 (valoresBool -> funcBool .)
    DISTINTO        reduce using rule 106 (valoresBool -> funcBool .)
    AND             reduce using rule 106 (valoresBool -> funcBool .)
    ?               reduce using rule 106 (valoresBool -> funcBool .)
    OR              reduce using rule 106 (valoresBool -> funcBool .)
    )               reduce using rule 106 (valoresBool -> funcBool .)
    ;               reduce using rule 106 (valoresBool -> funcBool .)
    }               reduce using rule 106 (valoresBool -> funcBool .)
    ,               reduce using rule 106 (valoresBool -> funcBool .)
    ]               reduce using rule 106 (valoresBool -> funcBool .)
    :               reduce using rule 106 (valoresBool -> funcBool .)


state 64

    (68) valoresMat -> funcInt .

    *               reduce using rule 68 (valoresMat -> funcInt .)
    /               reduce using rule 68 (valoresMat -> funcInt .)
    %               reduce using rule 68 (valoresMat -> funcInt .)
    ^               reduce using rule 68 (valoresMat -> funcInt .)
    +               reduce using rule 68 (valoresMat -> funcInt .)
    -               reduce using rule 68 (valoresMat -> funcInt .)
    >               reduce using rule 68 (valoresMat -> funcInt .)
    <               reduce using rule 68 (valoresMat -> funcInt .)
    )               reduce using rule 68 (valoresMat -> funcInt .)
    ;               reduce using rule 68 (valoresMat -> funcInt .)
    }               reduce using rule 68 (valoresMat -> funcInt .)
    ,               reduce using rule 68 (valoresMat -> funcInt .)
    ]               reduce using rule 68 (valoresMat -> funcInt .)
    EQEQ            reduce using rule 68 (valoresMat -> funcInt .)
    DISTINTO        reduce using rule 68 (valoresMat -> funcInt .)
    AND             reduce using rule 68 (valoresMat -> funcInt .)
    ?               reduce using rule 68 (valoresMat -> funcInt .)
    OR              reduce using rule 68 (valoresMat -> funcInt .)
    :               reduce using rule 68 (valoresMat -> funcInt .)


state 65

    (132) eq -> mayor .

    EQEQ            reduce using rule 132 (eq -> mayor .)
    DISTINTO        reduce using rule 132 (eq -> mayor .)
    AND             reduce using rule 132 (eq -> mayor .)
    ?               reduce using rule 132 (eq -> mayor .)
    OR              reduce using rule 132 (eq -> mayor .)
    )               reduce using rule 132 (eq -> mayor .)
    ;               reduce using rule 132 (eq -> mayor .)
    }               reduce using rule 132 (eq -> mayor .)
    ,               reduce using rule 132 (eq -> mayor .)
    ]               reduce using rule 132 (eq -> mayor .)
    :               reduce using rule 132 (eq -> mayor .)


state 66

    (74) eMat -> valoresMat . + p
    (75) eMat -> valoresMat . - p
    (78) eMat -> valoresMat . + valoresMat
    (79) eMat -> valoresMat . - valoresMat
    (84) p -> valoresMat . * exp
    (85) p -> valoresMat . / exp
    (86) p -> valoresMat . % exp
    (90) p -> valoresMat . * valoresMat
    (91) p -> valoresMat . / valoresMat
    (92) p -> valoresMat . % valoresMat
    (95) exp -> valoresMat . ^ iSing
    (97) exp -> valoresMat . ^ valoresMat

    +               shift and go to state 126
    -               shift and go to state 128
    *               shift and go to state 127
    /               shift and go to state 129
    %               shift and go to state 125
    ^               shift and go to state 130


state 67

    (123) and -> eq .
    (124) eq -> eq . EQEQ parenBool
    (125) eq -> eq . DISTINTO parenBool
    (128) eq -> eq . EQEQ valoresBool
    (129) eq -> eq . DISTINTO valoresBool

    AND             reduce using rule 123 (and -> eq .)
    ?               reduce using rule 123 (and -> eq .)
    OR              reduce using rule 123 (and -> eq .)
    ,               reduce using rule 123 (and -> eq .)
    ]               reduce using rule 123 (and -> eq .)
    ;               reduce using rule 123 (and -> eq .)
    }               reduce using rule 123 (and -> eq .)
    )               reduce using rule 123 (and -> eq .)
    :               reduce using rule 123 (and -> eq .)
    EQEQ            shift and go to state 131
    DISTINTO        shift and go to state 132


state 68

    (110) expBool -> valoresBool . ? expBool : expBool
    (112) expBool -> valoresBool . ? valoresBool : valoresBool
    (115) or -> valoresBool . OR and
    (117) or -> valoresBool . OR valoresBool
    (120) and -> valoresBool . AND eq
    (122) and -> valoresBool . AND valoresBool
    (126) eq -> valoresBool . EQEQ parenBool
    (127) eq -> valoresBool . DISTINTO parenBool
    (130) eq -> valoresBool . EQEQ valoresBool
    (131) eq -> valoresBool . DISTINTO valoresBool

    ?               shift and go to state 137
    OR              shift and go to state 136
    AND             shift and go to state 133
    EQEQ            shift and go to state 135
    DISTINTO        shift and go to state 134


state 69

    (71) valoresMat -> STRING .

    *               reduce using rule 71 (valoresMat -> STRING .)
    /               reduce using rule 71 (valoresMat -> STRING .)
    %               reduce using rule 71 (valoresMat -> STRING .)
    ^               reduce using rule 71 (valoresMat -> STRING .)
    +               reduce using rule 71 (valoresMat -> STRING .)
    -               reduce using rule 71 (valoresMat -> STRING .)
    >               reduce using rule 71 (valoresMat -> STRING .)
    <               reduce using rule 71 (valoresMat -> STRING .)
    )               reduce using rule 71 (valoresMat -> STRING .)
    ;               reduce using rule 71 (valoresMat -> STRING .)
    }               reduce using rule 71 (valoresMat -> STRING .)
    ,               reduce using rule 71 (valoresMat -> STRING .)
    ]               reduce using rule 71 (valoresMat -> STRING .)
    EQEQ            reduce using rule 71 (valoresMat -> STRING .)
    DISTINTO        reduce using rule 71 (valoresMat -> STRING .)
    AND             reduce using rule 71 (valoresMat -> STRING .)
    ?               reduce using rule 71 (valoresMat -> STRING .)
    OR              reduce using rule 71 (valoresMat -> STRING .)
    :               reduce using rule 71 (valoresMat -> STRING .)


state 70

    (133) tCompare -> eMat .
    (72) eMat -> eMat . + p
    (73) eMat -> eMat . - p
    (76) eMat -> eMat . + valoresMat
    (77) eMat -> eMat . - valoresMat

    >               reduce using rule 133 (tCompare -> eMat .)
    <               reduce using rule 133 (tCompare -> eMat .)
    EQEQ            reduce using rule 133 (tCompare -> eMat .)
    DISTINTO        reduce using rule 133 (tCompare -> eMat .)
    AND             reduce using rule 133 (tCompare -> eMat .)
    ?               reduce using rule 133 (tCompare -> eMat .)
    OR              reduce using rule 133 (tCompare -> eMat .)
    )               reduce using rule 133 (tCompare -> eMat .)
    ;               reduce using rule 133 (tCompare -> eMat .)
    }               reduce using rule 133 (tCompare -> eMat .)
    ,               reduce using rule 133 (tCompare -> eMat .)
    ]               reduce using rule 133 (tCompare -> eMat .)
    :               reduce using rule 133 (tCompare -> eMat .)
    +               shift and go to state 138
    -               shift and go to state 139


state 71

    (143) parenBool -> ( . expBool )
    (104) paren -> ( . eMat )
    (109) expBool -> . or ? expBool : expBool
    (110) expBool -> . valoresBool ? expBool : expBool
    (111) expBool -> . or ? valoresBool : valoresBool
    (112) expBool -> . valoresBool ? valoresBool : valoresBool
    (113) expBool -> . or
    (72) eMat -> . eMat + p
    (73) eMat -> . eMat - p
    (74) eMat -> . valoresMat + p
    (75) eMat -> . valoresMat - p
    (76) eMat -> . eMat + valoresMat
    (77) eMat -> . eMat - valoresMat
    (78) eMat -> . valoresMat + valoresMat
    (79) eMat -> . valoresMat - valoresMat
    (80) eMat -> . p
    (114) or -> . or OR and
    (115) or -> . valoresBool OR and
    (116) or -> . or OR valoresBool
    (117) or -> . valoresBool OR valoresBool
    (118) or -> . and
    (105) valoresBool -> . BOOL
    (106) valoresBool -> . funcBool
    (107) valoresBool -> . varYVals
    (108) valoresBool -> . varsOps
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (81) p -> . p * exp
    (82) p -> . p / exp
    (83) p -> . p % exp
    (84) p -> . valoresMat * exp
    (85) p -> . valoresMat / exp
    (86) p -> . valoresMat % exp
    (87) p -> . p * valoresMat
    (88) p -> . p / valoresMat
    (89) p -> . p % valoresMat
    (90) p -> . valoresMat * valoresMat
    (91) p -> . valoresMat / valoresMat
    (92) p -> . valoresMat % valoresMat
    (93) p -> . exp
    (119) and -> . and AND eq
    (120) and -> . valoresBool AND eq
    (121) and -> . and AND valoresBool
    (122) and -> . valoresBool AND valoresBool
    (123) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (124) eq -> . eq EQEQ parenBool
    (125) eq -> . eq DISTINTO parenBool
    (126) eq -> . valoresBool EQEQ parenBool
    (127) eq -> . valoresBool DISTINTO parenBool
    (128) eq -> . eq EQEQ valoresBool
    (129) eq -> . eq DISTINTO valoresBool
    (130) eq -> . valoresBool EQEQ valoresBool
    (131) eq -> . valoresBool DISTINTO valoresBool
    (132) eq -> . mayor
    (49) vecVal -> . ID m
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (136) mayor -> . tCompare > tCompare
    (137) mayor -> . menor
    (104) paren -> . ( eMat )
    (133) tCompare -> . eMat
    (134) tCompare -> . varsOps
    (135) tCompare -> . varYVals
    (138) menor -> . tCompare < tCompare
    (139) menor -> . not
    (140) not -> . NOT not
    (141) not -> . NOT valoresBool
    (142) not -> . parenBool
    (143) parenBool -> . ( expBool )

    BOOL            shift and go to state 82
    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 69
    COLINEALES      shift and go to state 13
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 73
    +               shift and go to state 72
    (               shift and go to state 92
    NOT             shift and go to state 86

    and                            shift and go to state 62
    funcBool                       shift and go to state 63
    funcInt                        shift and go to state 64
    menor                          shift and go to state 80
    valoresMat                     shift and go to state 66
    eq                             shift and go to state 67
    vecVal                         shift and go to state 9
    valoresBool                    shift and go to state 68
    eMat                           shift and go to state 140
    mayor                          shift and go to state 65
    paren                          shift and go to state 76
    varsOps                        shift and go to state 141
    tCompare                       shift and go to state 75
    not                            shift and go to state 77
    parenBool                      shift and go to state 85
    p                              shift and go to state 81
    iSing                          shift and go to state 74
    exp                            shift and go to state 84
    varYVals                       shift and go to state 142
    or                             shift and go to state 88
    expBool                        shift and go to state 143

state 72

    (100) iSing -> + . paren
    (102) iSing -> + . valoresMat
    (104) paren -> . ( eMat )
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (49) vecVal -> . ID m

    (               shift and go to state 118
    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 69
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26

    funcInt                        shift and go to state 64
    varsOps                        shift and go to state 119
    valoresMat                     shift and go to state 144
    paren                          shift and go to state 145
    varYVals                       shift and go to state 120
    vecVal                         shift and go to state 9

state 73

    (99) iSing -> - . paren
    (101) iSing -> - . valoresMat
    (104) paren -> . ( eMat )
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (49) vecVal -> . ID m

    (               shift and go to state 118
    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 69
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26

    funcInt                        shift and go to state 64
    varsOps                        shift and go to state 119
    valoresMat                     shift and go to state 146
    paren                          shift and go to state 147
    varYVals                       shift and go to state 120
    vecVal                         shift and go to state 9

state 74

    (98) exp -> iSing .

    ^               reduce using rule 98 (exp -> iSing .)
    *               reduce using rule 98 (exp -> iSing .)
    /               reduce using rule 98 (exp -> iSing .)
    %               reduce using rule 98 (exp -> iSing .)
    +               reduce using rule 98 (exp -> iSing .)
    -               reduce using rule 98 (exp -> iSing .)
    >               reduce using rule 98 (exp -> iSing .)
    <               reduce using rule 98 (exp -> iSing .)
    )               reduce using rule 98 (exp -> iSing .)
    ;               reduce using rule 98 (exp -> iSing .)
    }               reduce using rule 98 (exp -> iSing .)
    ,               reduce using rule 98 (exp -> iSing .)
    ]               reduce using rule 98 (exp -> iSing .)
    EQEQ            reduce using rule 98 (exp -> iSing .)
    DISTINTO        reduce using rule 98 (exp -> iSing .)
    AND             reduce using rule 98 (exp -> iSing .)
    ?               reduce using rule 98 (exp -> iSing .)
    OR              reduce using rule 98 (exp -> iSing .)
    :               reduce using rule 98 (exp -> iSing .)


state 75

    (136) mayor -> tCompare . > tCompare
    (138) menor -> tCompare . < tCompare

    >               shift and go to state 149
    <               shift and go to state 148


state 76

    (103) iSing -> paren .

    ^               reduce using rule 103 (iSing -> paren .)
    *               reduce using rule 103 (iSing -> paren .)
    /               reduce using rule 103 (iSing -> paren .)
    %               reduce using rule 103 (iSing -> paren .)
    +               reduce using rule 103 (iSing -> paren .)
    -               reduce using rule 103 (iSing -> paren .)
    >               reduce using rule 103 (iSing -> paren .)
    <               reduce using rule 103 (iSing -> paren .)
    )               reduce using rule 103 (iSing -> paren .)
    ;               reduce using rule 103 (iSing -> paren .)
    }               reduce using rule 103 (iSing -> paren .)
    ,               reduce using rule 103 (iSing -> paren .)
    ]               reduce using rule 103 (iSing -> paren .)
    EQEQ            reduce using rule 103 (iSing -> paren .)
    DISTINTO        reduce using rule 103 (iSing -> paren .)
    AND             reduce using rule 103 (iSing -> paren .)
    ?               reduce using rule 103 (iSing -> paren .)
    OR              reduce using rule 103 (iSing -> paren .)
    :               reduce using rule 103 (iSing -> paren .)


state 77

    (139) menor -> not .

    EQEQ            reduce using rule 139 (menor -> not .)
    DISTINTO        reduce using rule 139 (menor -> not .)
    AND             reduce using rule 139 (menor -> not .)
    ?               reduce using rule 139 (menor -> not .)
    OR              reduce using rule 139 (menor -> not .)
    )               reduce using rule 139 (menor -> not .)
    ;               reduce using rule 139 (menor -> not .)
    }               reduce using rule 139 (menor -> not .)
    ,               reduce using rule 139 (menor -> not .)
    ]               reduce using rule 139 (menor -> not .)
    :               reduce using rule 139 (menor -> not .)


state 78

    (66) valoresMat -> INT .

    *               reduce using rule 66 (valoresMat -> INT .)
    /               reduce using rule 66 (valoresMat -> INT .)
    %               reduce using rule 66 (valoresMat -> INT .)
    ^               reduce using rule 66 (valoresMat -> INT .)
    +               reduce using rule 66 (valoresMat -> INT .)
    -               reduce using rule 66 (valoresMat -> INT .)
    >               reduce using rule 66 (valoresMat -> INT .)
    <               reduce using rule 66 (valoresMat -> INT .)
    )               reduce using rule 66 (valoresMat -> INT .)
    ;               reduce using rule 66 (valoresMat -> INT .)
    }               reduce using rule 66 (valoresMat -> INT .)
    ,               reduce using rule 66 (valoresMat -> INT .)
    ]               reduce using rule 66 (valoresMat -> INT .)
    EQEQ            reduce using rule 66 (valoresMat -> INT .)
    DISTINTO        reduce using rule 66 (valoresMat -> INT .)
    AND             reduce using rule 66 (valoresMat -> INT .)
    ?               reduce using rule 66 (valoresMat -> INT .)
    OR              reduce using rule 66 (valoresMat -> INT .)
    :               reduce using rule 66 (valoresMat -> INT .)


state 79

    (67) valoresMat -> FLOAT .

    *               reduce using rule 67 (valoresMat -> FLOAT .)
    /               reduce using rule 67 (valoresMat -> FLOAT .)
    %               reduce using rule 67 (valoresMat -> FLOAT .)
    ^               reduce using rule 67 (valoresMat -> FLOAT .)
    +               reduce using rule 67 (valoresMat -> FLOAT .)
    -               reduce using rule 67 (valoresMat -> FLOAT .)
    >               reduce using rule 67 (valoresMat -> FLOAT .)
    <               reduce using rule 67 (valoresMat -> FLOAT .)
    )               reduce using rule 67 (valoresMat -> FLOAT .)
    ;               reduce using rule 67 (valoresMat -> FLOAT .)
    }               reduce using rule 67 (valoresMat -> FLOAT .)
    ,               reduce using rule 67 (valoresMat -> FLOAT .)
    ]               reduce using rule 67 (valoresMat -> FLOAT .)
    EQEQ            reduce using rule 67 (valoresMat -> FLOAT .)
    DISTINTO        reduce using rule 67 (valoresMat -> FLOAT .)
    AND             reduce using rule 67 (valoresMat -> FLOAT .)
    ?               reduce using rule 67 (valoresMat -> FLOAT .)
    OR              reduce using rule 67 (valoresMat -> FLOAT .)
    :               reduce using rule 67 (valoresMat -> FLOAT .)


state 80

    (137) mayor -> menor .

    EQEQ            reduce using rule 137 (mayor -> menor .)
    DISTINTO        reduce using rule 137 (mayor -> menor .)
    AND             reduce using rule 137 (mayor -> menor .)
    ?               reduce using rule 137 (mayor -> menor .)
    OR              reduce using rule 137 (mayor -> menor .)
    )               reduce using rule 137 (mayor -> menor .)
    ;               reduce using rule 137 (mayor -> menor .)
    }               reduce using rule 137 (mayor -> menor .)
    ,               reduce using rule 137 (mayor -> menor .)
    ]               reduce using rule 137 (mayor -> menor .)
    :               reduce using rule 137 (mayor -> menor .)


state 81

    (80) eMat -> p .
    (81) p -> p . * exp
    (82) p -> p . / exp
    (83) p -> p . % exp
    (87) p -> p . * valoresMat
    (88) p -> p . / valoresMat
    (89) p -> p . % valoresMat

    +               reduce using rule 80 (eMat -> p .)
    -               reduce using rule 80 (eMat -> p .)
    >               reduce using rule 80 (eMat -> p .)
    <               reduce using rule 80 (eMat -> p .)
    )               reduce using rule 80 (eMat -> p .)
    EQEQ            reduce using rule 80 (eMat -> p .)
    DISTINTO        reduce using rule 80 (eMat -> p .)
    AND             reduce using rule 80 (eMat -> p .)
    ?               reduce using rule 80 (eMat -> p .)
    OR              reduce using rule 80 (eMat -> p .)
    ;               reduce using rule 80 (eMat -> p .)
    }               reduce using rule 80 (eMat -> p .)
    ,               reduce using rule 80 (eMat -> p .)
    ]               reduce using rule 80 (eMat -> p .)
    :               reduce using rule 80 (eMat -> p .)
    *               shift and go to state 151
    /               shift and go to state 152
    %               shift and go to state 150


state 82

    (105) valoresBool -> BOOL .

    EQEQ            reduce using rule 105 (valoresBool -> BOOL .)
    DISTINTO        reduce using rule 105 (valoresBool -> BOOL .)
    AND             reduce using rule 105 (valoresBool -> BOOL .)
    ?               reduce using rule 105 (valoresBool -> BOOL .)
    OR              reduce using rule 105 (valoresBool -> BOOL .)
    )               reduce using rule 105 (valoresBool -> BOOL .)
    ;               reduce using rule 105 (valoresBool -> BOOL .)
    }               reduce using rule 105 (valoresBool -> BOOL .)
    ,               reduce using rule 105 (valoresBool -> BOOL .)
    ]               reduce using rule 105 (valoresBool -> BOOL .)
    :               reduce using rule 105 (valoresBool -> BOOL .)


state 83

    (108) valoresBool -> varsOps .
    (134) tCompare -> varsOps .
    (70) valoresMat -> varsOps .

    AND             reduce using rule 108 (valoresBool -> varsOps .)
    EQEQ            reduce using rule 108 (valoresBool -> varsOps .)
    DISTINTO        reduce using rule 108 (valoresBool -> varsOps .)
    ?               reduce using rule 108 (valoresBool -> varsOps .)
    OR              reduce using rule 108 (valoresBool -> varsOps .)
    )               reduce using rule 108 (valoresBool -> varsOps .)
    ;               reduce using rule 108 (valoresBool -> varsOps .)
    }               reduce using rule 108 (valoresBool -> varsOps .)
    ,               reduce using rule 108 (valoresBool -> varsOps .)
    ]               reduce using rule 108 (valoresBool -> varsOps .)
    :               reduce using rule 108 (valoresBool -> varsOps .)
    >               reduce using rule 134 (tCompare -> varsOps .)
    <               reduce using rule 134 (tCompare -> varsOps .)
    +               reduce using rule 70 (valoresMat -> varsOps .)
    -               reduce using rule 70 (valoresMat -> varsOps .)
    *               reduce using rule 70 (valoresMat -> varsOps .)
    /               reduce using rule 70 (valoresMat -> varsOps .)
    %               reduce using rule 70 (valoresMat -> varsOps .)
    ^               reduce using rule 70 (valoresMat -> varsOps .)


state 84

    (93) p -> exp .
    (94) exp -> exp . ^ iSing
    (96) exp -> exp . ^ valoresMat

    *               reduce using rule 93 (p -> exp .)
    /               reduce using rule 93 (p -> exp .)
    %               reduce using rule 93 (p -> exp .)
    +               reduce using rule 93 (p -> exp .)
    -               reduce using rule 93 (p -> exp .)
    >               reduce using rule 93 (p -> exp .)
    <               reduce using rule 93 (p -> exp .)
    ,               reduce using rule 93 (p -> exp .)
    EQEQ            reduce using rule 93 (p -> exp .)
    DISTINTO        reduce using rule 93 (p -> exp .)
    AND             reduce using rule 93 (p -> exp .)
    ?               reduce using rule 93 (p -> exp .)
    OR              reduce using rule 93 (p -> exp .)
    )               reduce using rule 93 (p -> exp .)
    ;               reduce using rule 93 (p -> exp .)
    }               reduce using rule 93 (p -> exp .)
    ]               reduce using rule 93 (p -> exp .)
    :               reduce using rule 93 (p -> exp .)
    ^               shift and go to state 153


state 85

    (142) not -> parenBool .

    EQEQ            reduce using rule 142 (not -> parenBool .)
    DISTINTO        reduce using rule 142 (not -> parenBool .)
    AND             reduce using rule 142 (not -> parenBool .)
    ?               reduce using rule 142 (not -> parenBool .)
    OR              reduce using rule 142 (not -> parenBool .)
    ;               reduce using rule 142 (not -> parenBool .)
    )               reduce using rule 142 (not -> parenBool .)
    }               reduce using rule 142 (not -> parenBool .)
    ,               reduce using rule 142 (not -> parenBool .)
    ]               reduce using rule 142 (not -> parenBool .)
    :               reduce using rule 142 (not -> parenBool .)


state 86

    (140) not -> NOT . not
    (141) not -> NOT . valoresBool
    (140) not -> . NOT not
    (141) not -> . NOT valoresBool
    (142) not -> . parenBool
    (105) valoresBool -> . BOOL
    (106) valoresBool -> . funcBool
    (107) valoresBool -> . varYVals
    (108) valoresBool -> . varsOps
    (143) parenBool -> . ( expBool )
    (26) funcBool -> . COLINEALES ( vec , vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (49) vecVal -> . ID m

    NOT             shift and go to state 86
    BOOL            shift and go to state 82
    (               shift and go to state 154
    COLINEALES      shift and go to state 13
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26

    funcBool                       shift and go to state 63
    parenBool                      shift and go to state 85
    varsOps                        shift and go to state 156
    vecVal                         shift and go to state 9
    not                            shift and go to state 155
    varYVals                       shift and go to state 157
    valoresBool                    shift and go to state 158

state 87

    (107) valoresBool -> varYVals .
    (57) varsOps -> varYVals . MASMAS
    (58) varsOps -> varYVals . MENOSMENOS
    (135) tCompare -> varYVals .
    (69) valoresMat -> varYVals .

    AND             reduce using rule 107 (valoresBool -> varYVals .)
    EQEQ            reduce using rule 107 (valoresBool -> varYVals .)
    DISTINTO        reduce using rule 107 (valoresBool -> varYVals .)
    ?               reduce using rule 107 (valoresBool -> varYVals .)
    OR              reduce using rule 107 (valoresBool -> varYVals .)
    )               reduce using rule 107 (valoresBool -> varYVals .)
    ;               reduce using rule 107 (valoresBool -> varYVals .)
    }               reduce using rule 107 (valoresBool -> varYVals .)
    ,               reduce using rule 107 (valoresBool -> varYVals .)
    ]               reduce using rule 107 (valoresBool -> varYVals .)
    :               reduce using rule 107 (valoresBool -> varYVals .)
    MASMAS          shift and go to state 56
    MENOSMENOS      shift and go to state 57
    >               reduce using rule 135 (tCompare -> varYVals .)
    <               reduce using rule 135 (tCompare -> varYVals .)
    +               reduce using rule 69 (valoresMat -> varYVals .)
    -               reduce using rule 69 (valoresMat -> varYVals .)
    *               reduce using rule 69 (valoresMat -> varYVals .)
    /               reduce using rule 69 (valoresMat -> varYVals .)
    %               reduce using rule 69 (valoresMat -> varYVals .)
    ^               reduce using rule 69 (valoresMat -> varYVals .)


state 88

    (109) expBool -> or . ? expBool : expBool
    (111) expBool -> or . ? valoresBool : valoresBool
    (113) expBool -> or .
    (114) or -> or . OR and
    (116) or -> or . OR valoresBool

    ?               shift and go to state 159
    ;               reduce using rule 113 (expBool -> or .)
    )               reduce using rule 113 (expBool -> or .)
    }               reduce using rule 113 (expBool -> or .)
    ,               reduce using rule 113 (expBool -> or .)
    ]               reduce using rule 113 (expBool -> or .)
    :               reduce using rule 113 (expBool -> or .)
    OR              shift and go to state 160


state 89

    (10) loop -> WHILE ( expBool . ) bloque

    )               shift and go to state 161


state 90

    (43) valores -> RES .

    ,               reduce using rule 43 (valores -> RES .)
    )               reduce using rule 43 (valores -> RES .)
    }               reduce using rule 43 (valores -> RES .)
    ;               reduce using rule 43 (valores -> RES .)
    ]               reduce using rule 43 (valores -> RES .)


state 91

    (34) valores -> eMat .
    (72) eMat -> eMat . + p
    (73) eMat -> eMat . - p
    (76) eMat -> eMat . + valoresMat
    (77) eMat -> eMat . - valoresMat
    (133) tCompare -> eMat .

    ,               reduce using rule 34 (valores -> eMat .)
    )               reduce using rule 34 (valores -> eMat .)
    }               reduce using rule 34 (valores -> eMat .)
    ;               reduce using rule 34 (valores -> eMat .)
    ]               reduce using rule 34 (valores -> eMat .)
    +               shift and go to state 138
    -               shift and go to state 139
    >               reduce using rule 133 (tCompare -> eMat .)
    <               reduce using rule 133 (tCompare -> eMat .)


state 92

    (104) paren -> ( . eMat )
    (143) parenBool -> ( . expBool )
    (72) eMat -> . eMat + p
    (73) eMat -> . eMat - p
    (74) eMat -> . valoresMat + p
    (75) eMat -> . valoresMat - p
    (76) eMat -> . eMat + valoresMat
    (77) eMat -> . eMat - valoresMat
    (78) eMat -> . valoresMat + valoresMat
    (79) eMat -> . valoresMat - valoresMat
    (80) eMat -> . p
    (109) expBool -> . or ? expBool : expBool
    (110) expBool -> . valoresBool ? expBool : expBool
    (111) expBool -> . or ? valoresBool : valoresBool
    (112) expBool -> . valoresBool ? valoresBool : valoresBool
    (113) expBool -> . or
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (81) p -> . p * exp
    (82) p -> . p / exp
    (83) p -> . p % exp
    (84) p -> . valoresMat * exp
    (85) p -> . valoresMat / exp
    (86) p -> . valoresMat % exp
    (87) p -> . p * valoresMat
    (88) p -> . p / valoresMat
    (89) p -> . p % valoresMat
    (90) p -> . valoresMat * valoresMat
    (91) p -> . valoresMat / valoresMat
    (92) p -> . valoresMat % valoresMat
    (93) p -> . exp
    (114) or -> . or OR and
    (115) or -> . valoresBool OR and
    (116) or -> . or OR valoresBool
    (117) or -> . valoresBool OR valoresBool
    (118) or -> . and
    (105) valoresBool -> . BOOL
    (106) valoresBool -> . funcBool
    (107) valoresBool -> . varYVals
    (108) valoresBool -> . varsOps
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (119) and -> . and AND eq
    (120) and -> . valoresBool AND eq
    (121) and -> . and AND valoresBool
    (122) and -> . valoresBool AND valoresBool
    (123) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (49) vecVal -> . ID m
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (124) eq -> . eq EQEQ parenBool
    (125) eq -> . eq DISTINTO parenBool
    (126) eq -> . valoresBool EQEQ parenBool
    (127) eq -> . valoresBool DISTINTO parenBool
    (128) eq -> . eq EQEQ valoresBool
    (129) eq -> . eq DISTINTO valoresBool
    (130) eq -> . valoresBool EQEQ valoresBool
    (131) eq -> . valoresBool DISTINTO valoresBool
    (132) eq -> . mayor
    (104) paren -> . ( eMat )
    (136) mayor -> . tCompare > tCompare
    (137) mayor -> . menor
    (133) tCompare -> . eMat
    (134) tCompare -> . varsOps
    (135) tCompare -> . varYVals
    (138) menor -> . tCompare < tCompare
    (139) menor -> . not
    (140) not -> . NOT not
    (141) not -> . NOT valoresBool
    (142) not -> . parenBool
    (143) parenBool -> . ( expBool )

    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 69
    BOOL            shift and go to state 82
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    COLINEALES      shift and go to state 13
    -               shift and go to state 73
    +               shift and go to state 72
    (               shift and go to state 92
    NOT             shift and go to state 86

    and                            shift and go to state 62
    funcBool                       shift and go to state 63
    funcInt                        shift and go to state 64
    menor                          shift and go to state 80
    valoresMat                     shift and go to state 66
    eq                             shift and go to state 67
    vecVal                         shift and go to state 9
    valoresBool                    shift and go to state 68
    eMat                           shift and go to state 140
    mayor                          shift and go to state 65
    paren                          shift and go to state 76
    varsOps                        shift and go to state 162
    tCompare                       shift and go to state 75
    not                            shift and go to state 77
    parenBool                      shift and go to state 85
    p                              shift and go to state 81
    iSing                          shift and go to state 74
    exp                            shift and go to state 84
    varYVals                       shift and go to state 163
    or                             shift and go to state 88
    expBool                        shift and go to state 143

state 93

    (36) valores -> reg .

    ,               reduce using rule 36 (valores -> reg .)
    )               reduce using rule 36 (valores -> reg .)
    }               reduce using rule 36 (valores -> reg .)
    ;               reduce using rule 36 (valores -> reg .)
    ]               reduce using rule 36 (valores -> reg .)


state 94

    (38) valores -> STRING .
    (71) valoresMat -> STRING .

    ,               reduce using rule 38 (valores -> STRING .)
    )               reduce using rule 38 (valores -> STRING .)
    }               reduce using rule 38 (valores -> STRING .)
    ;               reduce using rule 38 (valores -> STRING .)
    ]               reduce using rule 38 (valores -> STRING .)
    +               reduce using rule 71 (valoresMat -> STRING .)
    -               reduce using rule 71 (valoresMat -> STRING .)
    *               reduce using rule 71 (valoresMat -> STRING .)
    /               reduce using rule 71 (valoresMat -> STRING .)
    %               reduce using rule 71 (valoresMat -> STRING .)
    ^               reduce using rule 71 (valoresMat -> STRING .)


state 95

    (42) valores -> ID . . valoresCampos
    (47) varYVals -> ID .
    (49) vecVal -> ID . m
    (50) m -> . [ INT ]
    (51) m -> . [ INT ] m

    .               shift and go to state 164
    MASMAS          reduce using rule 47 (varYVals -> ID .)
    MENOSMENOS      reduce using rule 47 (varYVals -> ID .)
    ,               reduce using rule 47 (varYVals -> ID .)
    +               reduce using rule 47 (varYVals -> ID .)
    -               reduce using rule 47 (varYVals -> ID .)
    *               reduce using rule 47 (varYVals -> ID .)
    /               reduce using rule 47 (varYVals -> ID .)
    %               reduce using rule 47 (varYVals -> ID .)
    ^               reduce using rule 47 (varYVals -> ID .)
    ?               reduce using rule 47 (varYVals -> ID .)
    OR              reduce using rule 47 (varYVals -> ID .)
    AND             reduce using rule 47 (varYVals -> ID .)
    EQEQ            reduce using rule 47 (varYVals -> ID .)
    DISTINTO        reduce using rule 47 (varYVals -> ID .)
    >               reduce using rule 47 (varYVals -> ID .)
    <               reduce using rule 47 (varYVals -> ID .)
    ;               reduce using rule 47 (varYVals -> ID .)
    )               reduce using rule 47 (varYVals -> ID .)
    ]               reduce using rule 47 (varYVals -> ID .)
    [               shift and go to state 45

    m                              shift and go to state 42

state 96

    (37) valores -> INT .
    (66) valoresMat -> INT .

    ,               reduce using rule 37 (valores -> INT .)
    )               reduce using rule 37 (valores -> INT .)
    }               reduce using rule 37 (valores -> INT .)
    ;               reduce using rule 37 (valores -> INT .)
    ]               reduce using rule 37 (valores -> INT .)
    +               reduce using rule 66 (valoresMat -> INT .)
    -               reduce using rule 66 (valoresMat -> INT .)
    *               reduce using rule 66 (valoresMat -> INT .)
    /               reduce using rule 66 (valoresMat -> INT .)
    %               reduce using rule 66 (valoresMat -> INT .)
    ^               reduce using rule 66 (valoresMat -> INT .)


state 97

    (27) funcVoid -> PRINT ( valores . )

    )               shift and go to state 165


state 98

    (39) valores -> BOOL .
    (105) valoresBool -> BOOL .

    ,               reduce using rule 39 (valores -> BOOL .)
    )               reduce using rule 39 (valores -> BOOL .)
    }               reduce using rule 39 (valores -> BOOL .)
    ;               reduce using rule 39 (valores -> BOOL .)
    ]               reduce using rule 39 (valores -> BOOL .)
    ?               reduce using rule 105 (valoresBool -> BOOL .)
    OR              reduce using rule 105 (valoresBool -> BOOL .)
    AND             reduce using rule 105 (valoresBool -> BOOL .)
    EQEQ            reduce using rule 105 (valoresBool -> BOOL .)
    DISTINTO        reduce using rule 105 (valoresBool -> BOOL .)


state 99

    (41) valores -> varsOps .
    (70) valoresMat -> varsOps .
    (108) valoresBool -> varsOps .
    (134) tCompare -> varsOps .

    ,               reduce using rule 41 (valores -> varsOps .)
    )               reduce using rule 41 (valores -> varsOps .)
    }               reduce using rule 41 (valores -> varsOps .)
    ;               reduce using rule 41 (valores -> varsOps .)
    ]               reduce using rule 41 (valores -> varsOps .)
    +               reduce using rule 70 (valoresMat -> varsOps .)
    -               reduce using rule 70 (valoresMat -> varsOps .)
    *               reduce using rule 70 (valoresMat -> varsOps .)
    /               reduce using rule 70 (valoresMat -> varsOps .)
    %               reduce using rule 70 (valoresMat -> varsOps .)
    ^               reduce using rule 70 (valoresMat -> varsOps .)
    ?               reduce using rule 108 (valoresBool -> varsOps .)
    OR              reduce using rule 108 (valoresBool -> varsOps .)
    AND             reduce using rule 108 (valoresBool -> varsOps .)
    EQEQ            reduce using rule 108 (valoresBool -> varsOps .)
    DISTINTO        reduce using rule 108 (valoresBool -> varsOps .)
    >               reduce using rule 134 (tCompare -> varsOps .)
    <               reduce using rule 134 (tCompare -> varsOps .)


state 100

    (52) reg -> { . campos }
    (53) campos -> . ID : valores , campos
    (54) campos -> . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . reg
    (37) valores -> . INT
    (38) valores -> . STRING
    (39) valores -> . BOOL
    (40) valores -> . varYVals
    (41) valores -> . varsOps
    (42) valores -> . ID . valoresCampos
    (43) valores -> . RES
    (72) eMat -> . eMat + p
    (73) eMat -> . eMat - p
    (74) eMat -> . valoresMat + p
    (75) eMat -> . valoresMat - p
    (76) eMat -> . eMat + valoresMat
    (77) eMat -> . eMat - valoresMat
    (78) eMat -> . valoresMat + valoresMat
    (79) eMat -> . valoresMat - valoresMat
    (80) eMat -> . p
    (109) expBool -> . or ? expBool : expBool
    (110) expBool -> . valoresBool ? expBool : expBool
    (111) expBool -> . or ? valoresBool : valoresBool
    (112) expBool -> . valoresBool ? valoresBool : valoresBool
    (113) expBool -> . or
    (52) reg -> . { campos }
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (81) p -> . p * exp
    (82) p -> . p / exp
    (83) p -> . p % exp
    (84) p -> . valoresMat * exp
    (85) p -> . valoresMat / exp
    (86) p -> . valoresMat % exp
    (87) p -> . p * valoresMat
    (88) p -> . p / valoresMat
    (89) p -> . p % valoresMat
    (90) p -> . valoresMat * valoresMat
    (91) p -> . valoresMat / valoresMat
    (92) p -> . valoresMat % valoresMat
    (93) p -> . exp
    (114) or -> . or OR and
    (115) or -> . valoresBool OR and
    (116) or -> . or OR valoresBool
    (117) or -> . valoresBool OR valoresBool
    (118) or -> . and
    (105) valoresBool -> . BOOL
    (106) valoresBool -> . funcBool
    (107) valoresBool -> . varYVals
    (108) valoresBool -> . varsOps
    (49) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (119) and -> . and AND eq
    (120) and -> . valoresBool AND eq
    (121) and -> . and AND valoresBool
    (122) and -> . valoresBool AND valoresBool
    (123) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (124) eq -> . eq EQEQ parenBool
    (125) eq -> . eq DISTINTO parenBool
    (126) eq -> . valoresBool EQEQ parenBool
    (127) eq -> . valoresBool DISTINTO parenBool
    (128) eq -> . eq EQEQ valoresBool
    (129) eq -> . eq DISTINTO valoresBool
    (130) eq -> . valoresBool EQEQ valoresBool
    (131) eq -> . valoresBool DISTINTO valoresBool
    (132) eq -> . mayor
    (104) paren -> . ( eMat )
    (136) mayor -> . tCompare > tCompare
    (137) mayor -> . menor
    (133) tCompare -> . eMat
    (134) tCompare -> . varsOps
    (135) tCompare -> . varYVals
    (138) menor -> . tCompare < tCompare
    (139) menor -> . not
    (140) not -> . NOT not
    (141) not -> . NOT valoresBool
    (142) not -> . parenBool
    (143) parenBool -> . ( expBool )

    ID              shift and go to state 167
    INT             shift and go to state 96
    STRING          shift and go to state 94
    BOOL            shift and go to state 98
    RES             shift and go to state 90
    {               shift and go to state 100
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    FLOAT           shift and go to state 79
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 73
    +               shift and go to state 72
    (               shift and go to state 92
    NOT             shift and go to state 86

    and                            shift and go to state 62
    funcBool                       shift and go to state 63
    funcInt                        shift and go to state 64
    menor                          shift and go to state 80
    mayor                          shift and go to state 65
    valoresMat                     shift and go to state 66
    eq                             shift and go to state 67
    valoresBool                    shift and go to state 68
    eMat                           shift and go to state 91
    vecVal                         shift and go to state 9
    paren                          shift and go to state 76
    reg                            shift and go to state 93
    varsOps                        shift and go to state 99
    exp                            shift and go to state 84
    tCompare                       shift and go to state 75
    campos                         shift and go to state 166
    not                            shift and go to state 77
    valores                        shift and go to state 168
    parenBool                      shift and go to state 85
    p                              shift and go to state 81
    iSing                          shift and go to state 74
    varYVals                       shift and go to state 101
    or                             shift and go to state 88
    expBool                        shift and go to state 102

state 101

    (40) valores -> varYVals .
    (57) varsOps -> varYVals . MASMAS
    (58) varsOps -> varYVals . MENOSMENOS
    (69) valoresMat -> varYVals .
    (107) valoresBool -> varYVals .
    (135) tCompare -> varYVals .

    ,               reduce using rule 40 (valores -> varYVals .)
    )               reduce using rule 40 (valores -> varYVals .)
    }               reduce using rule 40 (valores -> varYVals .)
    ;               reduce using rule 40 (valores -> varYVals .)
    ]               reduce using rule 40 (valores -> varYVals .)
    MASMAS          shift and go to state 56
    MENOSMENOS      shift and go to state 57
    +               reduce using rule 69 (valoresMat -> varYVals .)
    -               reduce using rule 69 (valoresMat -> varYVals .)
    *               reduce using rule 69 (valoresMat -> varYVals .)
    /               reduce using rule 69 (valoresMat -> varYVals .)
    %               reduce using rule 69 (valoresMat -> varYVals .)
    ^               reduce using rule 69 (valoresMat -> varYVals .)
    ?               reduce using rule 107 (valoresBool -> varYVals .)
    OR              reduce using rule 107 (valoresBool -> varYVals .)
    AND             reduce using rule 107 (valoresBool -> varYVals .)
    EQEQ            reduce using rule 107 (valoresBool -> varYVals .)
    DISTINTO        reduce using rule 107 (valoresBool -> varYVals .)
    >               reduce using rule 135 (tCompare -> varYVals .)
    <               reduce using rule 135 (tCompare -> varYVals .)


state 102

    (35) valores -> expBool .

    ,               reduce using rule 35 (valores -> expBool .)
    )               reduce using rule 35 (valores -> expBool .)
    }               reduce using rule 35 (valores -> expBool .)
    ;               reduce using rule 35 (valores -> expBool .)
    ]               reduce using rule 35 (valores -> expBool .)


state 103

    (26) funcBool -> COLINEALES ( vec . , vec )

    ,               shift and go to state 169


state 104

    (31) vec -> [ . elem ]
    (32) elem -> . valores , elem
    (33) elem -> . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . reg
    (37) valores -> . INT
    (38) valores -> . STRING
    (39) valores -> . BOOL
    (40) valores -> . varYVals
    (41) valores -> . varsOps
    (42) valores -> . ID . valoresCampos
    (43) valores -> . RES
    (72) eMat -> . eMat + p
    (73) eMat -> . eMat - p
    (74) eMat -> . valoresMat + p
    (75) eMat -> . valoresMat - p
    (76) eMat -> . eMat + valoresMat
    (77) eMat -> . eMat - valoresMat
    (78) eMat -> . valoresMat + valoresMat
    (79) eMat -> . valoresMat - valoresMat
    (80) eMat -> . p
    (109) expBool -> . or ? expBool : expBool
    (110) expBool -> . valoresBool ? expBool : expBool
    (111) expBool -> . or ? valoresBool : valoresBool
    (112) expBool -> . valoresBool ? valoresBool : valoresBool
    (113) expBool -> . or
    (52) reg -> . { campos }
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (81) p -> . p * exp
    (82) p -> . p / exp
    (83) p -> . p % exp
    (84) p -> . valoresMat * exp
    (85) p -> . valoresMat / exp
    (86) p -> . valoresMat % exp
    (87) p -> . p * valoresMat
    (88) p -> . p / valoresMat
    (89) p -> . p % valoresMat
    (90) p -> . valoresMat * valoresMat
    (91) p -> . valoresMat / valoresMat
    (92) p -> . valoresMat % valoresMat
    (93) p -> . exp
    (114) or -> . or OR and
    (115) or -> . valoresBool OR and
    (116) or -> . or OR valoresBool
    (117) or -> . valoresBool OR valoresBool
    (118) or -> . and
    (105) valoresBool -> . BOOL
    (106) valoresBool -> . funcBool
    (107) valoresBool -> . varYVals
    (108) valoresBool -> . varsOps
    (49) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (119) and -> . and AND eq
    (120) and -> . valoresBool AND eq
    (121) and -> . and AND valoresBool
    (122) and -> . valoresBool AND valoresBool
    (123) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (124) eq -> . eq EQEQ parenBool
    (125) eq -> . eq DISTINTO parenBool
    (126) eq -> . valoresBool EQEQ parenBool
    (127) eq -> . valoresBool DISTINTO parenBool
    (128) eq -> . eq EQEQ valoresBool
    (129) eq -> . eq DISTINTO valoresBool
    (130) eq -> . valoresBool EQEQ valoresBool
    (131) eq -> . valoresBool DISTINTO valoresBool
    (132) eq -> . mayor
    (104) paren -> . ( eMat )
    (136) mayor -> . tCompare > tCompare
    (137) mayor -> . menor
    (133) tCompare -> . eMat
    (134) tCompare -> . varsOps
    (135) tCompare -> . varYVals
    (138) menor -> . tCompare < tCompare
    (139) menor -> . not
    (140) not -> . NOT not
    (141) not -> . NOT valoresBool
    (142) not -> . parenBool
    (143) parenBool -> . ( expBool )

    INT             shift and go to state 96
    STRING          shift and go to state 94
    BOOL            shift and go to state 98
    ID              shift and go to state 95
    RES             shift and go to state 90
    {               shift and go to state 100
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    FLOAT           shift and go to state 79
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 73
    +               shift and go to state 72
    (               shift and go to state 92
    NOT             shift and go to state 86

    and                            shift and go to state 62
    funcBool                       shift and go to state 63
    funcInt                        shift and go to state 64
    valores                        shift and go to state 170
    menor                          shift and go to state 80
    mayor                          shift and go to state 65
    valoresMat                     shift and go to state 66
    eq                             shift and go to state 67
    valoresBool                    shift and go to state 68
    eMat                           shift and go to state 91
    vecVal                         shift and go to state 9
    paren                          shift and go to state 76
    reg                            shift and go to state 93
    varsOps                        shift and go to state 99
    exp                            shift and go to state 84
    tCompare                       shift and go to state 75
    not                            shift and go to state 77
    elem                           shift and go to state 171
    parenBool                      shift and go to state 85
    p                              shift and go to state 81
    iSing                          shift and go to state 74
    varYVals                       shift and go to state 101
    or                             shift and go to state 88
    expBool                        shift and go to state 102

state 105

    (12) loop -> FOR ( varAsig . ; expBool ; varsOps ) bloque

    ;               shift and go to state 172


state 106

    (60) varAsig -> ID . MULEQ valoresAsig
    (61) varAsig -> ID . DIVEQ valoresAsig
    (62) varAsig -> ID . MASEQ valoresAsig
    (63) varAsig -> ID . MENOSEQ valoresAsig
    (64) varAsig -> ID . = valoresAsig
    (65) varAsig -> ID . . ID = valores

    MULEQ           shift and go to state 44
    DIVEQ           shift and go to state 47
    MASEQ           shift and go to state 41
    MENOSEQ         shift and go to state 40
    =               shift and go to state 46
    .               shift and go to state 43


state 107

    (63) varAsig -> ID MENOSEQ valoresAsig .

    ;               reduce using rule 63 (varAsig -> ID MENOSEQ valoresAsig .)


state 108

    (59) valoresAsig -> valores .

    ;               reduce using rule 59 (valoresAsig -> valores .)


state 109

    (62) varAsig -> ID MASEQ valoresAsig .

    ;               reduce using rule 62 (varAsig -> ID MASEQ valoresAsig .)


state 110

    (65) varAsig -> ID . ID . = valores

    =               shift and go to state 173


state 111

    (60) varAsig -> ID MULEQ valoresAsig .

    ;               reduce using rule 60 (varAsig -> ID MULEQ valoresAsig .)


state 112

    (50) m -> [ INT . ]
    (51) m -> [ INT . ] m

    ]               shift and go to state 174


state 113

    (64) varAsig -> ID = valoresAsig .

    ;               reduce using rule 64 (varAsig -> ID = valoresAsig .)


state 114

    (61) varAsig -> ID DIVEQ valoresAsig .

    ;               reduce using rule 61 (varAsig -> ID DIVEQ valoresAsig .)


state 115

    (13) if -> IF ( expBool . ) bloque else

    )               shift and go to state 175


state 116

    (23) funcInt -> MULTIESCALAR ( vec . , eMat , param )

    ,               shift and go to state 176


state 117

    (25) funcString -> CAPITALIZAR ( eMat . )
    (72) eMat -> eMat . + p
    (73) eMat -> eMat . - p
    (76) eMat -> eMat . + valoresMat
    (77) eMat -> eMat . - valoresMat

    )               shift and go to state 177
    +               shift and go to state 138
    -               shift and go to state 139


state 118

    (104) paren -> ( . eMat )
    (72) eMat -> . eMat + p
    (73) eMat -> . eMat - p
    (74) eMat -> . valoresMat + p
    (75) eMat -> . valoresMat - p
    (76) eMat -> . eMat + valoresMat
    (77) eMat -> . eMat - valoresMat
    (78) eMat -> . valoresMat + valoresMat
    (79) eMat -> . valoresMat - valoresMat
    (80) eMat -> . p
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (81) p -> . p * exp
    (82) p -> . p / exp
    (83) p -> . p % exp
    (84) p -> . valoresMat * exp
    (85) p -> . valoresMat / exp
    (86) p -> . valoresMat % exp
    (87) p -> . p * valoresMat
    (88) p -> . p / valoresMat
    (89) p -> . p % valoresMat
    (90) p -> . valoresMat * valoresMat
    (91) p -> . valoresMat / valoresMat
    (92) p -> . valoresMat % valoresMat
    (93) p -> . exp
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (49) vecVal -> . ID m
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (104) paren -> . ( eMat )

    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 69
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    -               shift and go to state 73
    +               shift and go to state 72
    (               shift and go to state 118

    eMat                           shift and go to state 178
    funcInt                        shift and go to state 64
    iSing                          shift and go to state 74
    p                              shift and go to state 81
    varsOps                        shift and go to state 119
    valoresMat                     shift and go to state 66
    paren                          shift and go to state 76
    exp                            shift and go to state 84
    varYVals                       shift and go to state 120
    vecVal                         shift and go to state 9

state 119

    (70) valoresMat -> varsOps .

    *               reduce using rule 70 (valoresMat -> varsOps .)
    /               reduce using rule 70 (valoresMat -> varsOps .)
    %               reduce using rule 70 (valoresMat -> varsOps .)
    ^               reduce using rule 70 (valoresMat -> varsOps .)
    +               reduce using rule 70 (valoresMat -> varsOps .)
    -               reduce using rule 70 (valoresMat -> varsOps .)
    >               reduce using rule 70 (valoresMat -> varsOps .)
    <               reduce using rule 70 (valoresMat -> varsOps .)
    )               reduce using rule 70 (valoresMat -> varsOps .)
    ;               reduce using rule 70 (valoresMat -> varsOps .)
    }               reduce using rule 70 (valoresMat -> varsOps .)
    ,               reduce using rule 70 (valoresMat -> varsOps .)
    ]               reduce using rule 70 (valoresMat -> varsOps .)
    EQEQ            reduce using rule 70 (valoresMat -> varsOps .)
    DISTINTO        reduce using rule 70 (valoresMat -> varsOps .)
    AND             reduce using rule 70 (valoresMat -> varsOps .)
    ?               reduce using rule 70 (valoresMat -> varsOps .)
    OR              reduce using rule 70 (valoresMat -> varsOps .)
    :               reduce using rule 70 (valoresMat -> varsOps .)


state 120

    (69) valoresMat -> varYVals .
    (57) varsOps -> varYVals . MASMAS
    (58) varsOps -> varYVals . MENOSMENOS

    *               reduce using rule 69 (valoresMat -> varYVals .)
    /               reduce using rule 69 (valoresMat -> varYVals .)
    %               reduce using rule 69 (valoresMat -> varYVals .)
    ^               reduce using rule 69 (valoresMat -> varYVals .)
    +               reduce using rule 69 (valoresMat -> varYVals .)
    -               reduce using rule 69 (valoresMat -> varYVals .)
    >               reduce using rule 69 (valoresMat -> varYVals .)
    <               reduce using rule 69 (valoresMat -> varYVals .)
    )               reduce using rule 69 (valoresMat -> varYVals .)
    ;               reduce using rule 69 (valoresMat -> varYVals .)
    }               reduce using rule 69 (valoresMat -> varYVals .)
    ,               reduce using rule 69 (valoresMat -> varYVals .)
    ]               reduce using rule 69 (valoresMat -> varYVals .)
    EQEQ            reduce using rule 69 (valoresMat -> varYVals .)
    DISTINTO        reduce using rule 69 (valoresMat -> varYVals .)
    AND             reduce using rule 69 (valoresMat -> varYVals .)
    ?               reduce using rule 69 (valoresMat -> varYVals .)
    OR              reduce using rule 69 (valoresMat -> varYVals .)
    :               reduce using rule 69 (valoresMat -> varYVals .)
    MASMAS          shift and go to state 56
    MENOSMENOS      shift and go to state 57


state 121

    (24) funcInt -> LENGTH ( vec . )

    )               shift and go to state 179


state 122

    (11) loop -> DO bloque WHILE ( . expBool ) ;
    (109) expBool -> . or ? expBool : expBool
    (110) expBool -> . valoresBool ? expBool : expBool
    (111) expBool -> . or ? valoresBool : valoresBool
    (112) expBool -> . valoresBool ? valoresBool : valoresBool
    (113) expBool -> . or
    (114) or -> . or OR and
    (115) or -> . valoresBool OR and
    (116) or -> . or OR valoresBool
    (117) or -> . valoresBool OR valoresBool
    (118) or -> . and
    (105) valoresBool -> . BOOL
    (106) valoresBool -> . funcBool
    (107) valoresBool -> . varYVals
    (108) valoresBool -> . varsOps
    (119) and -> . and AND eq
    (120) and -> . valoresBool AND eq
    (121) and -> . and AND valoresBool
    (122) and -> . valoresBool AND valoresBool
    (123) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (124) eq -> . eq EQEQ parenBool
    (125) eq -> . eq DISTINTO parenBool
    (126) eq -> . valoresBool EQEQ parenBool
    (127) eq -> . valoresBool DISTINTO parenBool
    (128) eq -> . eq EQEQ valoresBool
    (129) eq -> . eq DISTINTO valoresBool
    (130) eq -> . valoresBool EQEQ valoresBool
    (131) eq -> . valoresBool DISTINTO valoresBool
    (132) eq -> . mayor
    (49) vecVal -> . ID m
    (136) mayor -> . tCompare > tCompare
    (137) mayor -> . menor
    (133) tCompare -> . eMat
    (134) tCompare -> . varsOps
    (135) tCompare -> . varYVals
    (138) menor -> . tCompare < tCompare
    (139) menor -> . not
    (72) eMat -> . eMat + p
    (73) eMat -> . eMat - p
    (74) eMat -> . valoresMat + p
    (75) eMat -> . valoresMat - p
    (76) eMat -> . eMat + valoresMat
    (77) eMat -> . eMat - valoresMat
    (78) eMat -> . valoresMat + valoresMat
    (79) eMat -> . valoresMat - valoresMat
    (80) eMat -> . p
    (140) not -> . NOT not
    (141) not -> . NOT valoresBool
    (142) not -> . parenBool
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (81) p -> . p * exp
    (82) p -> . p / exp
    (83) p -> . p % exp
    (84) p -> . valoresMat * exp
    (85) p -> . valoresMat / exp
    (86) p -> . valoresMat % exp
    (87) p -> . p * valoresMat
    (88) p -> . p / valoresMat
    (89) p -> . p % valoresMat
    (90) p -> . valoresMat * valoresMat
    (91) p -> . valoresMat / valoresMat
    (92) p -> . valoresMat % valoresMat
    (93) p -> . exp
    (143) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (104) paren -> . ( eMat )

    BOOL            shift and go to state 82
    COLINEALES      shift and go to state 13
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 86
    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 69
    (               shift and go to state 71
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 73
    +               shift and go to state 72

    and                            shift and go to state 62
    funcBool                       shift and go to state 63
    funcInt                        shift and go to state 64
    menor                          shift and go to state 80
    valoresMat                     shift and go to state 66
    eq                             shift and go to state 67
    valoresBool                    shift and go to state 68
    eMat                           shift and go to state 70
    vecVal                         shift and go to state 9
    paren                          shift and go to state 76
    iSing                          shift and go to state 74
    tCompare                       shift and go to state 75
    not                            shift and go to state 77
    varYVals                       shift and go to state 87
    or                             shift and go to state 88
    p                              shift and go to state 81
    varsOps                        shift and go to state 83
    exp                            shift and go to state 84
    mayor                          shift and go to state 65
    parenBool                      shift and go to state 85
    expBool                        shift and go to state 180

state 123

    (17) bloque -> { g } .

    RETURN          reduce using rule 17 (bloque -> { g } .)
    MENOSMENOS      reduce using rule 17 (bloque -> { g } .)
    MASMAS          reduce using rule 17 (bloque -> { g } .)
    ID              reduce using rule 17 (bloque -> { g } .)
    IF              reduce using rule 17 (bloque -> { g } .)
    WHILE           reduce using rule 17 (bloque -> { g } .)
    DO              reduce using rule 17 (bloque -> { g } .)
    FOR             reduce using rule 17 (bloque -> { g } .)
    PRINT           reduce using rule 17 (bloque -> { g } .)
    MULTIESCALAR    reduce using rule 17 (bloque -> { g } .)
    LENGTH          reduce using rule 17 (bloque -> { g } .)
    CAPITALIZAR     reduce using rule 17 (bloque -> { g } .)
    COLINEALES      reduce using rule 17 (bloque -> { g } .)
    $end            reduce using rule 17 (bloque -> { g } .)
    }               reduce using rule 17 (bloque -> { g } .)
    ELSE            reduce using rule 17 (bloque -> { g } .)


state 124

    (119) and -> and AND . eq
    (121) and -> and AND . valoresBool
    (124) eq -> . eq EQEQ parenBool
    (125) eq -> . eq DISTINTO parenBool
    (126) eq -> . valoresBool EQEQ parenBool
    (127) eq -> . valoresBool DISTINTO parenBool
    (128) eq -> . eq EQEQ valoresBool
    (129) eq -> . eq DISTINTO valoresBool
    (130) eq -> . valoresBool EQEQ valoresBool
    (131) eq -> . valoresBool DISTINTO valoresBool
    (132) eq -> . mayor
    (105) valoresBool -> . BOOL
    (106) valoresBool -> . funcBool
    (107) valoresBool -> . varYVals
    (108) valoresBool -> . varsOps
    (136) mayor -> . tCompare > tCompare
    (137) mayor -> . menor
    (26) funcBool -> . COLINEALES ( vec , vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (133) tCompare -> . eMat
    (134) tCompare -> . varsOps
    (135) tCompare -> . varYVals
    (138) menor -> . tCompare < tCompare
    (139) menor -> . not
    (49) vecVal -> . ID m
    (72) eMat -> . eMat + p
    (73) eMat -> . eMat - p
    (74) eMat -> . valoresMat + p
    (75) eMat -> . valoresMat - p
    (76) eMat -> . eMat + valoresMat
    (77) eMat -> . eMat - valoresMat
    (78) eMat -> . valoresMat + valoresMat
    (79) eMat -> . valoresMat - valoresMat
    (80) eMat -> . p
    (140) not -> . NOT not
    (141) not -> . NOT valoresBool
    (142) not -> . parenBool
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (81) p -> . p * exp
    (82) p -> . p / exp
    (83) p -> . p % exp
    (84) p -> . valoresMat * exp
    (85) p -> . valoresMat / exp
    (86) p -> . valoresMat % exp
    (87) p -> . p * valoresMat
    (88) p -> . p / valoresMat
    (89) p -> . p % valoresMat
    (90) p -> . valoresMat * valoresMat
    (91) p -> . valoresMat / valoresMat
    (92) p -> . valoresMat % valoresMat
    (93) p -> . exp
    (143) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (104) paren -> . ( eMat )

    BOOL            shift and go to state 82
    COLINEALES      shift and go to state 13
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 86
    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 69
    (               shift and go to state 71
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 73
    +               shift and go to state 72

    funcBool                       shift and go to state 63
    funcInt                        shift and go to state 64
    menor                          shift and go to state 80
    mayor                          shift and go to state 65
    valoresMat                     shift and go to state 66
    eq                             shift and go to state 181
    valoresBool                    shift and go to state 182
    eMat                           shift and go to state 70
    vecVal                         shift and go to state 9
    paren                          shift and go to state 76
    varsOps                        shift and go to state 83
    tCompare                       shift and go to state 75
    not                            shift and go to state 77
    p                              shift and go to state 81
    iSing                          shift and go to state 74
    exp                            shift and go to state 84
    varYVals                       shift and go to state 87
    parenBool                      shift and go to state 85

state 125

    (86) p -> valoresMat % . exp
    (92) p -> valoresMat % . valoresMat
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (104) paren -> . ( eMat )
    (49) vecVal -> . ID m

    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 69
    -               shift and go to state 73
    +               shift and go to state 72
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    (               shift and go to state 118

    valoresMat                     shift and go to state 183
    funcInt                        shift and go to state 64
    vecVal                         shift and go to state 9
    varsOps                        shift and go to state 119
    exp                            shift and go to state 184
    paren                          shift and go to state 76
    varYVals                       shift and go to state 120
    iSing                          shift and go to state 74

state 126

    (74) eMat -> valoresMat + . p
    (78) eMat -> valoresMat + . valoresMat
    (81) p -> . p * exp
    (82) p -> . p / exp
    (83) p -> . p % exp
    (84) p -> . valoresMat * exp
    (85) p -> . valoresMat / exp
    (86) p -> . valoresMat % exp
    (87) p -> . p * valoresMat
    (88) p -> . p / valoresMat
    (89) p -> . p % valoresMat
    (90) p -> . valoresMat * valoresMat
    (91) p -> . valoresMat / valoresMat
    (92) p -> . valoresMat % valoresMat
    (93) p -> . exp
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (49) vecVal -> . ID m
    (104) paren -> . ( eMat )

    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 69
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    -               shift and go to state 73
    +               shift and go to state 72
    (               shift and go to state 118

    valoresMat                     shift and go to state 185
    funcInt                        shift and go to state 64
    vecVal                         shift and go to state 9
    p                              shift and go to state 186
    varsOps                        shift and go to state 119
    exp                            shift and go to state 84
    paren                          shift and go to state 76
    varYVals                       shift and go to state 120
    iSing                          shift and go to state 74

state 127

    (84) p -> valoresMat * . exp
    (90) p -> valoresMat * . valoresMat
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (104) paren -> . ( eMat )
    (49) vecVal -> . ID m

    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 69
    -               shift and go to state 73
    +               shift and go to state 72
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    (               shift and go to state 118

    valoresMat                     shift and go to state 187
    funcInt                        shift and go to state 64
    vecVal                         shift and go to state 9
    varsOps                        shift and go to state 119
    exp                            shift and go to state 188
    paren                          shift and go to state 76
    varYVals                       shift and go to state 120
    iSing                          shift and go to state 74

state 128

    (75) eMat -> valoresMat - . p
    (79) eMat -> valoresMat - . valoresMat
    (81) p -> . p * exp
    (82) p -> . p / exp
    (83) p -> . p % exp
    (84) p -> . valoresMat * exp
    (85) p -> . valoresMat / exp
    (86) p -> . valoresMat % exp
    (87) p -> . p * valoresMat
    (88) p -> . p / valoresMat
    (89) p -> . p % valoresMat
    (90) p -> . valoresMat * valoresMat
    (91) p -> . valoresMat / valoresMat
    (92) p -> . valoresMat % valoresMat
    (93) p -> . exp
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (49) vecVal -> . ID m
    (104) paren -> . ( eMat )

    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 69
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    -               shift and go to state 73
    +               shift and go to state 72
    (               shift and go to state 118

    valoresMat                     shift and go to state 189
    funcInt                        shift and go to state 64
    vecVal                         shift and go to state 9
    p                              shift and go to state 190
    varsOps                        shift and go to state 119
    exp                            shift and go to state 84
    paren                          shift and go to state 76
    varYVals                       shift and go to state 120
    iSing                          shift and go to state 74

state 129

    (85) p -> valoresMat / . exp
    (91) p -> valoresMat / . valoresMat
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (104) paren -> . ( eMat )
    (49) vecVal -> . ID m

    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 69
    -               shift and go to state 73
    +               shift and go to state 72
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    (               shift and go to state 118

    valoresMat                     shift and go to state 191
    funcInt                        shift and go to state 64
    vecVal                         shift and go to state 9
    varsOps                        shift and go to state 119
    exp                            shift and go to state 192
    paren                          shift and go to state 76
    varYVals                       shift and go to state 120
    iSing                          shift and go to state 74

state 130

    (95) exp -> valoresMat ^ . iSing
    (97) exp -> valoresMat ^ . valoresMat
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (104) paren -> . ( eMat )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (49) vecVal -> . ID m

    -               shift and go to state 73
    +               shift and go to state 72
    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 69
    (               shift and go to state 118
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26

    funcInt                        shift and go to state 64
    vecVal                         shift and go to state 9
    iSing                          shift and go to state 194
    valoresMat                     shift and go to state 193
    paren                          shift and go to state 76
    varYVals                       shift and go to state 120
    varsOps                        shift and go to state 119

state 131

    (124) eq -> eq EQEQ . parenBool
    (128) eq -> eq EQEQ . valoresBool
    (143) parenBool -> . ( expBool )
    (105) valoresBool -> . BOOL
    (106) valoresBool -> . funcBool
    (107) valoresBool -> . varYVals
    (108) valoresBool -> . varsOps
    (26) funcBool -> . COLINEALES ( vec , vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (49) vecVal -> . ID m

    (               shift and go to state 154
    BOOL            shift and go to state 82
    COLINEALES      shift and go to state 13
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26

    funcBool                       shift and go to state 63
    valoresBool                    shift and go to state 195
    varsOps                        shift and go to state 156
    vecVal                         shift and go to state 9
    varYVals                       shift and go to state 157
    parenBool                      shift and go to state 196

state 132

    (125) eq -> eq DISTINTO . parenBool
    (129) eq -> eq DISTINTO . valoresBool
    (143) parenBool -> . ( expBool )
    (105) valoresBool -> . BOOL
    (106) valoresBool -> . funcBool
    (107) valoresBool -> . varYVals
    (108) valoresBool -> . varsOps
    (26) funcBool -> . COLINEALES ( vec , vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (49) vecVal -> . ID m

    (               shift and go to state 154
    BOOL            shift and go to state 82
    COLINEALES      shift and go to state 13
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26

    funcBool                       shift and go to state 63
    valoresBool                    shift and go to state 197
    varsOps                        shift and go to state 156
    vecVal                         shift and go to state 9
    varYVals                       shift and go to state 157
    parenBool                      shift and go to state 198

state 133

    (120) and -> valoresBool AND . eq
    (122) and -> valoresBool AND . valoresBool
    (124) eq -> . eq EQEQ parenBool
    (125) eq -> . eq DISTINTO parenBool
    (126) eq -> . valoresBool EQEQ parenBool
    (127) eq -> . valoresBool DISTINTO parenBool
    (128) eq -> . eq EQEQ valoresBool
    (129) eq -> . eq DISTINTO valoresBool
    (130) eq -> . valoresBool EQEQ valoresBool
    (131) eq -> . valoresBool DISTINTO valoresBool
    (132) eq -> . mayor
    (105) valoresBool -> . BOOL
    (106) valoresBool -> . funcBool
    (107) valoresBool -> . varYVals
    (108) valoresBool -> . varsOps
    (136) mayor -> . tCompare > tCompare
    (137) mayor -> . menor
    (26) funcBool -> . COLINEALES ( vec , vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (133) tCompare -> . eMat
    (134) tCompare -> . varsOps
    (135) tCompare -> . varYVals
    (138) menor -> . tCompare < tCompare
    (139) menor -> . not
    (49) vecVal -> . ID m
    (72) eMat -> . eMat + p
    (73) eMat -> . eMat - p
    (74) eMat -> . valoresMat + p
    (75) eMat -> . valoresMat - p
    (76) eMat -> . eMat + valoresMat
    (77) eMat -> . eMat - valoresMat
    (78) eMat -> . valoresMat + valoresMat
    (79) eMat -> . valoresMat - valoresMat
    (80) eMat -> . p
    (140) not -> . NOT not
    (141) not -> . NOT valoresBool
    (142) not -> . parenBool
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (81) p -> . p * exp
    (82) p -> . p / exp
    (83) p -> . p % exp
    (84) p -> . valoresMat * exp
    (85) p -> . valoresMat / exp
    (86) p -> . valoresMat % exp
    (87) p -> . p * valoresMat
    (88) p -> . p / valoresMat
    (89) p -> . p % valoresMat
    (90) p -> . valoresMat * valoresMat
    (91) p -> . valoresMat / valoresMat
    (92) p -> . valoresMat % valoresMat
    (93) p -> . exp
    (143) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (104) paren -> . ( eMat )

    BOOL            shift and go to state 82
    COLINEALES      shift and go to state 13
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 86
    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 69
    (               shift and go to state 71
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 73
    +               shift and go to state 72

    funcBool                       shift and go to state 63
    funcInt                        shift and go to state 64
    menor                          shift and go to state 80
    mayor                          shift and go to state 65
    valoresMat                     shift and go to state 66
    eq                             shift and go to state 199
    valoresBool                    shift and go to state 200
    eMat                           shift and go to state 70
    vecVal                         shift and go to state 9
    paren                          shift and go to state 76
    varsOps                        shift and go to state 83
    tCompare                       shift and go to state 75
    not                            shift and go to state 77
    p                              shift and go to state 81
    iSing                          shift and go to state 74
    exp                            shift and go to state 84
    varYVals                       shift and go to state 87
    parenBool                      shift and go to state 85

state 134

    (127) eq -> valoresBool DISTINTO . parenBool
    (131) eq -> valoresBool DISTINTO . valoresBool
    (143) parenBool -> . ( expBool )
    (105) valoresBool -> . BOOL
    (106) valoresBool -> . funcBool
    (107) valoresBool -> . varYVals
    (108) valoresBool -> . varsOps
    (26) funcBool -> . COLINEALES ( vec , vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (49) vecVal -> . ID m

    (               shift and go to state 154
    BOOL            shift and go to state 82
    COLINEALES      shift and go to state 13
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26

    funcBool                       shift and go to state 63
    parenBool                      shift and go to state 201
    varsOps                        shift and go to state 156
    vecVal                         shift and go to state 9
    varYVals                       shift and go to state 157
    valoresBool                    shift and go to state 202

state 135

    (126) eq -> valoresBool EQEQ . parenBool
    (130) eq -> valoresBool EQEQ . valoresBool
    (143) parenBool -> . ( expBool )
    (105) valoresBool -> . BOOL
    (106) valoresBool -> . funcBool
    (107) valoresBool -> . varYVals
    (108) valoresBool -> . varsOps
    (26) funcBool -> . COLINEALES ( vec , vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (49) vecVal -> . ID m

    (               shift and go to state 154
    BOOL            shift and go to state 82
    COLINEALES      shift and go to state 13
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26

    funcBool                       shift and go to state 63
    parenBool                      shift and go to state 203
    varsOps                        shift and go to state 156
    vecVal                         shift and go to state 9
    varYVals                       shift and go to state 157
    valoresBool                    shift and go to state 204

state 136

    (115) or -> valoresBool OR . and
    (117) or -> valoresBool OR . valoresBool
    (119) and -> . and AND eq
    (120) and -> . valoresBool AND eq
    (121) and -> . and AND valoresBool
    (122) and -> . valoresBool AND valoresBool
    (123) and -> . eq
    (105) valoresBool -> . BOOL
    (106) valoresBool -> . funcBool
    (107) valoresBool -> . varYVals
    (108) valoresBool -> . varsOps
    (124) eq -> . eq EQEQ parenBool
    (125) eq -> . eq DISTINTO parenBool
    (126) eq -> . valoresBool EQEQ parenBool
    (127) eq -> . valoresBool DISTINTO parenBool
    (128) eq -> . eq EQEQ valoresBool
    (129) eq -> . eq DISTINTO valoresBool
    (130) eq -> . valoresBool EQEQ valoresBool
    (131) eq -> . valoresBool DISTINTO valoresBool
    (132) eq -> . mayor
    (26) funcBool -> . COLINEALES ( vec , vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (136) mayor -> . tCompare > tCompare
    (137) mayor -> . menor
    (49) vecVal -> . ID m
    (133) tCompare -> . eMat
    (134) tCompare -> . varsOps
    (135) tCompare -> . varYVals
    (138) menor -> . tCompare < tCompare
    (139) menor -> . not
    (72) eMat -> . eMat + p
    (73) eMat -> . eMat - p
    (74) eMat -> . valoresMat + p
    (75) eMat -> . valoresMat - p
    (76) eMat -> . eMat + valoresMat
    (77) eMat -> . eMat - valoresMat
    (78) eMat -> . valoresMat + valoresMat
    (79) eMat -> . valoresMat - valoresMat
    (80) eMat -> . p
    (140) not -> . NOT not
    (141) not -> . NOT valoresBool
    (142) not -> . parenBool
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (81) p -> . p * exp
    (82) p -> . p / exp
    (83) p -> . p % exp
    (84) p -> . valoresMat * exp
    (85) p -> . valoresMat / exp
    (86) p -> . valoresMat % exp
    (87) p -> . p * valoresMat
    (88) p -> . p / valoresMat
    (89) p -> . p % valoresMat
    (90) p -> . valoresMat * valoresMat
    (91) p -> . valoresMat / valoresMat
    (92) p -> . valoresMat % valoresMat
    (93) p -> . exp
    (143) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (104) paren -> . ( eMat )

    BOOL            shift and go to state 82
    COLINEALES      shift and go to state 13
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 86
    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 69
    (               shift and go to state 71
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 73
    +               shift and go to state 72

    and                            shift and go to state 205
    funcBool                       shift and go to state 63
    funcInt                        shift and go to state 64
    menor                          shift and go to state 80
    valoresMat                     shift and go to state 66
    eq                             shift and go to state 67
    vecVal                         shift and go to state 9
    valoresBool                    shift and go to state 206
    eMat                           shift and go to state 70
    mayor                          shift and go to state 65
    paren                          shift and go to state 76
    varsOps                        shift and go to state 83
    tCompare                       shift and go to state 75
    not                            shift and go to state 77
    p                              shift and go to state 81
    iSing                          shift and go to state 74
    exp                            shift and go to state 84
    varYVals                       shift and go to state 87
    parenBool                      shift and go to state 85

state 137

    (110) expBool -> valoresBool ? . expBool : expBool
    (112) expBool -> valoresBool ? . valoresBool : valoresBool
    (109) expBool -> . or ? expBool : expBool
    (110) expBool -> . valoresBool ? expBool : expBool
    (111) expBool -> . or ? valoresBool : valoresBool
    (112) expBool -> . valoresBool ? valoresBool : valoresBool
    (113) expBool -> . or
    (105) valoresBool -> . BOOL
    (106) valoresBool -> . funcBool
    (107) valoresBool -> . varYVals
    (108) valoresBool -> . varsOps
    (114) or -> . or OR and
    (115) or -> . valoresBool OR and
    (116) or -> . or OR valoresBool
    (117) or -> . valoresBool OR valoresBool
    (118) or -> . and
    (26) funcBool -> . COLINEALES ( vec , vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (119) and -> . and AND eq
    (120) and -> . valoresBool AND eq
    (121) and -> . and AND valoresBool
    (122) and -> . valoresBool AND valoresBool
    (123) and -> . eq
    (49) vecVal -> . ID m
    (124) eq -> . eq EQEQ parenBool
    (125) eq -> . eq DISTINTO parenBool
    (126) eq -> . valoresBool EQEQ parenBool
    (127) eq -> . valoresBool DISTINTO parenBool
    (128) eq -> . eq EQEQ valoresBool
    (129) eq -> . eq DISTINTO valoresBool
    (130) eq -> . valoresBool EQEQ valoresBool
    (131) eq -> . valoresBool DISTINTO valoresBool
    (132) eq -> . mayor
    (136) mayor -> . tCompare > tCompare
    (137) mayor -> . menor
    (133) tCompare -> . eMat
    (134) tCompare -> . varsOps
    (135) tCompare -> . varYVals
    (138) menor -> . tCompare < tCompare
    (139) menor -> . not
    (72) eMat -> . eMat + p
    (73) eMat -> . eMat - p
    (74) eMat -> . valoresMat + p
    (75) eMat -> . valoresMat - p
    (76) eMat -> . eMat + valoresMat
    (77) eMat -> . eMat - valoresMat
    (78) eMat -> . valoresMat + valoresMat
    (79) eMat -> . valoresMat - valoresMat
    (80) eMat -> . p
    (140) not -> . NOT not
    (141) not -> . NOT valoresBool
    (142) not -> . parenBool
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (81) p -> . p * exp
    (82) p -> . p / exp
    (83) p -> . p % exp
    (84) p -> . valoresMat * exp
    (85) p -> . valoresMat / exp
    (86) p -> . valoresMat % exp
    (87) p -> . p * valoresMat
    (88) p -> . p / valoresMat
    (89) p -> . p % valoresMat
    (90) p -> . valoresMat * valoresMat
    (91) p -> . valoresMat / valoresMat
    (92) p -> . valoresMat % valoresMat
    (93) p -> . exp
    (143) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (104) paren -> . ( eMat )

    BOOL            shift and go to state 82
    COLINEALES      shift and go to state 13
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 86
    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 69
    (               shift and go to state 71
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 73
    +               shift and go to state 72

    and                            shift and go to state 62
    funcBool                       shift and go to state 63
    funcInt                        shift and go to state 64
    menor                          shift and go to state 80
    valoresMat                     shift and go to state 66
    eq                             shift and go to state 67
    vecVal                         shift and go to state 9
    valoresBool                    shift and go to state 207
    eMat                           shift and go to state 70
    mayor                          shift and go to state 65
    paren                          shift and go to state 76
    iSing                          shift and go to state 74
    tCompare                       shift and go to state 75
    not                            shift and go to state 77
    parenBool                      shift and go to state 85
    p                              shift and go to state 81
    varsOps                        shift and go to state 83
    exp                            shift and go to state 84
    varYVals                       shift and go to state 87
    or                             shift and go to state 88
    expBool                        shift and go to state 208

state 138

    (72) eMat -> eMat + . p
    (76) eMat -> eMat + . valoresMat
    (81) p -> . p * exp
    (82) p -> . p / exp
    (83) p -> . p % exp
    (84) p -> . valoresMat * exp
    (85) p -> . valoresMat / exp
    (86) p -> . valoresMat % exp
    (87) p -> . p * valoresMat
    (88) p -> . p / valoresMat
    (89) p -> . p % valoresMat
    (90) p -> . valoresMat * valoresMat
    (91) p -> . valoresMat / valoresMat
    (92) p -> . valoresMat % valoresMat
    (93) p -> . exp
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (49) vecVal -> . ID m
    (104) paren -> . ( eMat )

    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 69
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    -               shift and go to state 73
    +               shift and go to state 72
    (               shift and go to state 118

    valoresMat                     shift and go to state 209
    funcInt                        shift and go to state 64
    vecVal                         shift and go to state 9
    p                              shift and go to state 210
    varsOps                        shift and go to state 119
    exp                            shift and go to state 84
    paren                          shift and go to state 76
    varYVals                       shift and go to state 120
    iSing                          shift and go to state 74

state 139

    (73) eMat -> eMat - . p
    (77) eMat -> eMat - . valoresMat
    (81) p -> . p * exp
    (82) p -> . p / exp
    (83) p -> . p % exp
    (84) p -> . valoresMat * exp
    (85) p -> . valoresMat / exp
    (86) p -> . valoresMat % exp
    (87) p -> . p * valoresMat
    (88) p -> . p / valoresMat
    (89) p -> . p % valoresMat
    (90) p -> . valoresMat * valoresMat
    (91) p -> . valoresMat / valoresMat
    (92) p -> . valoresMat % valoresMat
    (93) p -> . exp
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (49) vecVal -> . ID m
    (104) paren -> . ( eMat )

    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 69
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    -               shift and go to state 73
    +               shift and go to state 72
    (               shift and go to state 118

    valoresMat                     shift and go to state 211
    funcInt                        shift and go to state 64
    vecVal                         shift and go to state 9
    p                              shift and go to state 212
    varsOps                        shift and go to state 119
    exp                            shift and go to state 84
    paren                          shift and go to state 76
    varYVals                       shift and go to state 120
    iSing                          shift and go to state 74

state 140

    (104) paren -> ( eMat . )
    (72) eMat -> eMat . + p
    (73) eMat -> eMat . - p
    (76) eMat -> eMat . + valoresMat
    (77) eMat -> eMat . - valoresMat
    (133) tCompare -> eMat .

    )               shift and go to state 213
    +               shift and go to state 138
    -               shift and go to state 139
    >               reduce using rule 133 (tCompare -> eMat .)
    <               reduce using rule 133 (tCompare -> eMat .)


state 141

    (108) valoresBool -> varsOps .
    (70) valoresMat -> varsOps .
    (134) tCompare -> varsOps .

    ?               reduce using rule 108 (valoresBool -> varsOps .)
    OR              reduce using rule 108 (valoresBool -> varsOps .)
    AND             reduce using rule 108 (valoresBool -> varsOps .)
    EQEQ            reduce using rule 108 (valoresBool -> varsOps .)
    DISTINTO        reduce using rule 108 (valoresBool -> varsOps .)
    +               reduce using rule 70 (valoresMat -> varsOps .)
    -               reduce using rule 70 (valoresMat -> varsOps .)
    *               reduce using rule 70 (valoresMat -> varsOps .)
    /               reduce using rule 70 (valoresMat -> varsOps .)
    %               reduce using rule 70 (valoresMat -> varsOps .)
    ^               reduce using rule 70 (valoresMat -> varsOps .)
    >               reduce using rule 134 (tCompare -> varsOps .)
    <               reduce using rule 134 (tCompare -> varsOps .)


state 142

    (107) valoresBool -> varYVals .
    (69) valoresMat -> varYVals .
    (57) varsOps -> varYVals . MASMAS
    (58) varsOps -> varYVals . MENOSMENOS
    (135) tCompare -> varYVals .

    ?               reduce using rule 107 (valoresBool -> varYVals .)
    OR              reduce using rule 107 (valoresBool -> varYVals .)
    AND             reduce using rule 107 (valoresBool -> varYVals .)
    EQEQ            reduce using rule 107 (valoresBool -> varYVals .)
    DISTINTO        reduce using rule 107 (valoresBool -> varYVals .)
    +               reduce using rule 69 (valoresMat -> varYVals .)
    -               reduce using rule 69 (valoresMat -> varYVals .)
    *               reduce using rule 69 (valoresMat -> varYVals .)
    /               reduce using rule 69 (valoresMat -> varYVals .)
    %               reduce using rule 69 (valoresMat -> varYVals .)
    ^               reduce using rule 69 (valoresMat -> varYVals .)
    MASMAS          shift and go to state 56
    MENOSMENOS      shift and go to state 57
    >               reduce using rule 135 (tCompare -> varYVals .)
    <               reduce using rule 135 (tCompare -> varYVals .)


state 143

    (143) parenBool -> ( expBool . )

    )               shift and go to state 214


state 144

    (102) iSing -> + valoresMat .

    ^               reduce using rule 102 (iSing -> + valoresMat .)
    *               reduce using rule 102 (iSing -> + valoresMat .)
    /               reduce using rule 102 (iSing -> + valoresMat .)
    %               reduce using rule 102 (iSing -> + valoresMat .)
    +               reduce using rule 102 (iSing -> + valoresMat .)
    -               reduce using rule 102 (iSing -> + valoresMat .)
    >               reduce using rule 102 (iSing -> + valoresMat .)
    <               reduce using rule 102 (iSing -> + valoresMat .)
    )               reduce using rule 102 (iSing -> + valoresMat .)
    ;               reduce using rule 102 (iSing -> + valoresMat .)
    }               reduce using rule 102 (iSing -> + valoresMat .)
    ,               reduce using rule 102 (iSing -> + valoresMat .)
    ]               reduce using rule 102 (iSing -> + valoresMat .)
    EQEQ            reduce using rule 102 (iSing -> + valoresMat .)
    DISTINTO        reduce using rule 102 (iSing -> + valoresMat .)
    AND             reduce using rule 102 (iSing -> + valoresMat .)
    ?               reduce using rule 102 (iSing -> + valoresMat .)
    OR              reduce using rule 102 (iSing -> + valoresMat .)
    :               reduce using rule 102 (iSing -> + valoresMat .)


state 145

    (100) iSing -> + paren .

    ^               reduce using rule 100 (iSing -> + paren .)
    *               reduce using rule 100 (iSing -> + paren .)
    /               reduce using rule 100 (iSing -> + paren .)
    %               reduce using rule 100 (iSing -> + paren .)
    +               reduce using rule 100 (iSing -> + paren .)
    -               reduce using rule 100 (iSing -> + paren .)
    >               reduce using rule 100 (iSing -> + paren .)
    <               reduce using rule 100 (iSing -> + paren .)
    )               reduce using rule 100 (iSing -> + paren .)
    ;               reduce using rule 100 (iSing -> + paren .)
    }               reduce using rule 100 (iSing -> + paren .)
    ,               reduce using rule 100 (iSing -> + paren .)
    ]               reduce using rule 100 (iSing -> + paren .)
    EQEQ            reduce using rule 100 (iSing -> + paren .)
    DISTINTO        reduce using rule 100 (iSing -> + paren .)
    AND             reduce using rule 100 (iSing -> + paren .)
    ?               reduce using rule 100 (iSing -> + paren .)
    OR              reduce using rule 100 (iSing -> + paren .)
    :               reduce using rule 100 (iSing -> + paren .)


state 146

    (101) iSing -> - valoresMat .

    ^               reduce using rule 101 (iSing -> - valoresMat .)
    *               reduce using rule 101 (iSing -> - valoresMat .)
    /               reduce using rule 101 (iSing -> - valoresMat .)
    %               reduce using rule 101 (iSing -> - valoresMat .)
    +               reduce using rule 101 (iSing -> - valoresMat .)
    -               reduce using rule 101 (iSing -> - valoresMat .)
    >               reduce using rule 101 (iSing -> - valoresMat .)
    <               reduce using rule 101 (iSing -> - valoresMat .)
    )               reduce using rule 101 (iSing -> - valoresMat .)
    ;               reduce using rule 101 (iSing -> - valoresMat .)
    }               reduce using rule 101 (iSing -> - valoresMat .)
    ,               reduce using rule 101 (iSing -> - valoresMat .)
    ]               reduce using rule 101 (iSing -> - valoresMat .)
    EQEQ            reduce using rule 101 (iSing -> - valoresMat .)
    DISTINTO        reduce using rule 101 (iSing -> - valoresMat .)
    AND             reduce using rule 101 (iSing -> - valoresMat .)
    ?               reduce using rule 101 (iSing -> - valoresMat .)
    OR              reduce using rule 101 (iSing -> - valoresMat .)
    :               reduce using rule 101 (iSing -> - valoresMat .)


state 147

    (99) iSing -> - paren .

    ^               reduce using rule 99 (iSing -> - paren .)
    *               reduce using rule 99 (iSing -> - paren .)
    /               reduce using rule 99 (iSing -> - paren .)
    %               reduce using rule 99 (iSing -> - paren .)
    +               reduce using rule 99 (iSing -> - paren .)
    -               reduce using rule 99 (iSing -> - paren .)
    >               reduce using rule 99 (iSing -> - paren .)
    <               reduce using rule 99 (iSing -> - paren .)
    )               reduce using rule 99 (iSing -> - paren .)
    ;               reduce using rule 99 (iSing -> - paren .)
    }               reduce using rule 99 (iSing -> - paren .)
    ,               reduce using rule 99 (iSing -> - paren .)
    ]               reduce using rule 99 (iSing -> - paren .)
    EQEQ            reduce using rule 99 (iSing -> - paren .)
    DISTINTO        reduce using rule 99 (iSing -> - paren .)
    AND             reduce using rule 99 (iSing -> - paren .)
    ?               reduce using rule 99 (iSing -> - paren .)
    OR              reduce using rule 99 (iSing -> - paren .)
    :               reduce using rule 99 (iSing -> - paren .)


state 148

    (138) menor -> tCompare < . tCompare
    (133) tCompare -> . eMat
    (134) tCompare -> . varsOps
    (135) tCompare -> . varYVals
    (72) eMat -> . eMat + p
    (73) eMat -> . eMat - p
    (74) eMat -> . valoresMat + p
    (75) eMat -> . valoresMat - p
    (76) eMat -> . eMat + valoresMat
    (77) eMat -> . eMat - valoresMat
    (78) eMat -> . valoresMat + valoresMat
    (79) eMat -> . valoresMat - valoresMat
    (80) eMat -> . p
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (81) p -> . p * exp
    (82) p -> . p / exp
    (83) p -> . p % exp
    (84) p -> . valoresMat * exp
    (85) p -> . valoresMat / exp
    (86) p -> . valoresMat % exp
    (87) p -> . p * valoresMat
    (88) p -> . p / valoresMat
    (89) p -> . p % valoresMat
    (90) p -> . valoresMat * valoresMat
    (91) p -> . valoresMat / valoresMat
    (92) p -> . valoresMat % valoresMat
    (93) p -> . exp
    (49) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (104) paren -> . ( eMat )

    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    ID              shift and go to state 54
    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 69
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 73
    +               shift and go to state 72
    (               shift and go to state 118

    eMat                           shift and go to state 70
    p                              shift and go to state 81
    funcInt                        shift and go to state 64
    iSing                          shift and go to state 74
    tCompare                       shift and go to state 215
    varsOps                        shift and go to state 216
    valoresMat                     shift and go to state 66
    paren                          shift and go to state 76
    exp                            shift and go to state 84
    varYVals                       shift and go to state 217
    vecVal                         shift and go to state 9

state 149

    (136) mayor -> tCompare > . tCompare
    (133) tCompare -> . eMat
    (134) tCompare -> . varsOps
    (135) tCompare -> . varYVals
    (72) eMat -> . eMat + p
    (73) eMat -> . eMat - p
    (74) eMat -> . valoresMat + p
    (75) eMat -> . valoresMat - p
    (76) eMat -> . eMat + valoresMat
    (77) eMat -> . eMat - valoresMat
    (78) eMat -> . valoresMat + valoresMat
    (79) eMat -> . valoresMat - valoresMat
    (80) eMat -> . p
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (81) p -> . p * exp
    (82) p -> . p / exp
    (83) p -> . p % exp
    (84) p -> . valoresMat * exp
    (85) p -> . valoresMat / exp
    (86) p -> . valoresMat % exp
    (87) p -> . p * valoresMat
    (88) p -> . p / valoresMat
    (89) p -> . p % valoresMat
    (90) p -> . valoresMat * valoresMat
    (91) p -> . valoresMat / valoresMat
    (92) p -> . valoresMat % valoresMat
    (93) p -> . exp
    (49) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (104) paren -> . ( eMat )

    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    ID              shift and go to state 54
    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 69
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 73
    +               shift and go to state 72
    (               shift and go to state 118

    eMat                           shift and go to state 70
    p                              shift and go to state 81
    funcInt                        shift and go to state 64
    iSing                          shift and go to state 74
    tCompare                       shift and go to state 218
    varsOps                        shift and go to state 216
    valoresMat                     shift and go to state 66
    paren                          shift and go to state 76
    exp                            shift and go to state 84
    varYVals                       shift and go to state 217
    vecVal                         shift and go to state 9

state 150

    (83) p -> p % . exp
    (89) p -> p % . valoresMat
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (104) paren -> . ( eMat )
    (49) vecVal -> . ID m

    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 69
    -               shift and go to state 73
    +               shift and go to state 72
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    (               shift and go to state 118

    exp                            shift and go to state 220
    funcInt                        shift and go to state 64
    vecVal                         shift and go to state 9
    iSing                          shift and go to state 74
    valoresMat                     shift and go to state 219
    paren                          shift and go to state 76
    varYVals                       shift and go to state 120
    varsOps                        shift and go to state 119

state 151

    (81) p -> p * . exp
    (87) p -> p * . valoresMat
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (104) paren -> . ( eMat )
    (49) vecVal -> . ID m

    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 69
    -               shift and go to state 73
    +               shift and go to state 72
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    (               shift and go to state 118

    exp                            shift and go to state 222
    funcInt                        shift and go to state 64
    vecVal                         shift and go to state 9
    iSing                          shift and go to state 74
    valoresMat                     shift and go to state 221
    paren                          shift and go to state 76
    varYVals                       shift and go to state 120
    varsOps                        shift and go to state 119

state 152

    (82) p -> p / . exp
    (88) p -> p / . valoresMat
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (104) paren -> . ( eMat )
    (49) vecVal -> . ID m

    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 69
    -               shift and go to state 73
    +               shift and go to state 72
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    (               shift and go to state 118

    exp                            shift and go to state 224
    funcInt                        shift and go to state 64
    vecVal                         shift and go to state 9
    iSing                          shift and go to state 74
    valoresMat                     shift and go to state 223
    paren                          shift and go to state 76
    varYVals                       shift and go to state 120
    varsOps                        shift and go to state 119

state 153

    (94) exp -> exp ^ . iSing
    (96) exp -> exp ^ . valoresMat
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (104) paren -> . ( eMat )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (49) vecVal -> . ID m

    -               shift and go to state 73
    +               shift and go to state 72
    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 69
    (               shift and go to state 118
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26

    funcInt                        shift and go to state 64
    vecVal                         shift and go to state 9
    iSing                          shift and go to state 226
    valoresMat                     shift and go to state 225
    paren                          shift and go to state 76
    varYVals                       shift and go to state 120
    varsOps                        shift and go to state 119

state 154

    (143) parenBool -> ( . expBool )
    (109) expBool -> . or ? expBool : expBool
    (110) expBool -> . valoresBool ? expBool : expBool
    (111) expBool -> . or ? valoresBool : valoresBool
    (112) expBool -> . valoresBool ? valoresBool : valoresBool
    (113) expBool -> . or
    (114) or -> . or OR and
    (115) or -> . valoresBool OR and
    (116) or -> . or OR valoresBool
    (117) or -> . valoresBool OR valoresBool
    (118) or -> . and
    (105) valoresBool -> . BOOL
    (106) valoresBool -> . funcBool
    (107) valoresBool -> . varYVals
    (108) valoresBool -> . varsOps
    (119) and -> . and AND eq
    (120) and -> . valoresBool AND eq
    (121) and -> . and AND valoresBool
    (122) and -> . valoresBool AND valoresBool
    (123) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (124) eq -> . eq EQEQ parenBool
    (125) eq -> . eq DISTINTO parenBool
    (126) eq -> . valoresBool EQEQ parenBool
    (127) eq -> . valoresBool DISTINTO parenBool
    (128) eq -> . eq EQEQ valoresBool
    (129) eq -> . eq DISTINTO valoresBool
    (130) eq -> . valoresBool EQEQ valoresBool
    (131) eq -> . valoresBool DISTINTO valoresBool
    (132) eq -> . mayor
    (49) vecVal -> . ID m
    (136) mayor -> . tCompare > tCompare
    (137) mayor -> . menor
    (133) tCompare -> . eMat
    (134) tCompare -> . varsOps
    (135) tCompare -> . varYVals
    (138) menor -> . tCompare < tCompare
    (139) menor -> . not
    (72) eMat -> . eMat + p
    (73) eMat -> . eMat - p
    (74) eMat -> . valoresMat + p
    (75) eMat -> . valoresMat - p
    (76) eMat -> . eMat + valoresMat
    (77) eMat -> . eMat - valoresMat
    (78) eMat -> . valoresMat + valoresMat
    (79) eMat -> . valoresMat - valoresMat
    (80) eMat -> . p
    (140) not -> . NOT not
    (141) not -> . NOT valoresBool
    (142) not -> . parenBool
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (81) p -> . p * exp
    (82) p -> . p / exp
    (83) p -> . p % exp
    (84) p -> . valoresMat * exp
    (85) p -> . valoresMat / exp
    (86) p -> . valoresMat % exp
    (87) p -> . p * valoresMat
    (88) p -> . p / valoresMat
    (89) p -> . p % valoresMat
    (90) p -> . valoresMat * valoresMat
    (91) p -> . valoresMat / valoresMat
    (92) p -> . valoresMat % valoresMat
    (93) p -> . exp
    (143) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (104) paren -> . ( eMat )

    BOOL            shift and go to state 82
    COLINEALES      shift and go to state 13
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 86
    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 69
    (               shift and go to state 71
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 73
    +               shift and go to state 72

    and                            shift and go to state 62
    funcBool                       shift and go to state 63
    funcInt                        shift and go to state 64
    menor                          shift and go to state 80
    valoresMat                     shift and go to state 66
    eq                             shift and go to state 67
    valoresBool                    shift and go to state 68
    eMat                           shift and go to state 70
    vecVal                         shift and go to state 9
    paren                          shift and go to state 76
    iSing                          shift and go to state 74
    tCompare                       shift and go to state 75
    not                            shift and go to state 77
    varYVals                       shift and go to state 87
    or                             shift and go to state 88
    p                              shift and go to state 81
    varsOps                        shift and go to state 83
    exp                            shift and go to state 84
    mayor                          shift and go to state 65
    parenBool                      shift and go to state 85
    expBool                        shift and go to state 143

state 155

    (140) not -> NOT not .

    EQEQ            reduce using rule 140 (not -> NOT not .)
    DISTINTO        reduce using rule 140 (not -> NOT not .)
    AND             reduce using rule 140 (not -> NOT not .)
    ?               reduce using rule 140 (not -> NOT not .)
    OR              reduce using rule 140 (not -> NOT not .)
    ;               reduce using rule 140 (not -> NOT not .)
    )               reduce using rule 140 (not -> NOT not .)
    }               reduce using rule 140 (not -> NOT not .)
    ,               reduce using rule 140 (not -> NOT not .)
    ]               reduce using rule 140 (not -> NOT not .)
    :               reduce using rule 140 (not -> NOT not .)


state 156

    (108) valoresBool -> varsOps .

    EQEQ            reduce using rule 108 (valoresBool -> varsOps .)
    DISTINTO        reduce using rule 108 (valoresBool -> varsOps .)
    AND             reduce using rule 108 (valoresBool -> varsOps .)
    ?               reduce using rule 108 (valoresBool -> varsOps .)
    OR              reduce using rule 108 (valoresBool -> varsOps .)
    )               reduce using rule 108 (valoresBool -> varsOps .)
    ;               reduce using rule 108 (valoresBool -> varsOps .)
    }               reduce using rule 108 (valoresBool -> varsOps .)
    ,               reduce using rule 108 (valoresBool -> varsOps .)
    ]               reduce using rule 108 (valoresBool -> varsOps .)
    :               reduce using rule 108 (valoresBool -> varsOps .)


state 157

    (107) valoresBool -> varYVals .
    (57) varsOps -> varYVals . MASMAS
    (58) varsOps -> varYVals . MENOSMENOS

    EQEQ            reduce using rule 107 (valoresBool -> varYVals .)
    DISTINTO        reduce using rule 107 (valoresBool -> varYVals .)
    AND             reduce using rule 107 (valoresBool -> varYVals .)
    ?               reduce using rule 107 (valoresBool -> varYVals .)
    OR              reduce using rule 107 (valoresBool -> varYVals .)
    )               reduce using rule 107 (valoresBool -> varYVals .)
    ;               reduce using rule 107 (valoresBool -> varYVals .)
    }               reduce using rule 107 (valoresBool -> varYVals .)
    ,               reduce using rule 107 (valoresBool -> varYVals .)
    ]               reduce using rule 107 (valoresBool -> varYVals .)
    :               reduce using rule 107 (valoresBool -> varYVals .)
    MASMAS          shift and go to state 56
    MENOSMENOS      shift and go to state 57


state 158

    (141) not -> NOT valoresBool .

    EQEQ            reduce using rule 141 (not -> NOT valoresBool .)
    DISTINTO        reduce using rule 141 (not -> NOT valoresBool .)
    AND             reduce using rule 141 (not -> NOT valoresBool .)
    ?               reduce using rule 141 (not -> NOT valoresBool .)
    OR              reduce using rule 141 (not -> NOT valoresBool .)
    ;               reduce using rule 141 (not -> NOT valoresBool .)
    )               reduce using rule 141 (not -> NOT valoresBool .)
    }               reduce using rule 141 (not -> NOT valoresBool .)
    ,               reduce using rule 141 (not -> NOT valoresBool .)
    ]               reduce using rule 141 (not -> NOT valoresBool .)
    :               reduce using rule 141 (not -> NOT valoresBool .)


state 159

    (109) expBool -> or ? . expBool : expBool
    (111) expBool -> or ? . valoresBool : valoresBool
    (109) expBool -> . or ? expBool : expBool
    (110) expBool -> . valoresBool ? expBool : expBool
    (111) expBool -> . or ? valoresBool : valoresBool
    (112) expBool -> . valoresBool ? valoresBool : valoresBool
    (113) expBool -> . or
    (105) valoresBool -> . BOOL
    (106) valoresBool -> . funcBool
    (107) valoresBool -> . varYVals
    (108) valoresBool -> . varsOps
    (114) or -> . or OR and
    (115) or -> . valoresBool OR and
    (116) or -> . or OR valoresBool
    (117) or -> . valoresBool OR valoresBool
    (118) or -> . and
    (26) funcBool -> . COLINEALES ( vec , vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (119) and -> . and AND eq
    (120) and -> . valoresBool AND eq
    (121) and -> . and AND valoresBool
    (122) and -> . valoresBool AND valoresBool
    (123) and -> . eq
    (49) vecVal -> . ID m
    (124) eq -> . eq EQEQ parenBool
    (125) eq -> . eq DISTINTO parenBool
    (126) eq -> . valoresBool EQEQ parenBool
    (127) eq -> . valoresBool DISTINTO parenBool
    (128) eq -> . eq EQEQ valoresBool
    (129) eq -> . eq DISTINTO valoresBool
    (130) eq -> . valoresBool EQEQ valoresBool
    (131) eq -> . valoresBool DISTINTO valoresBool
    (132) eq -> . mayor
    (136) mayor -> . tCompare > tCompare
    (137) mayor -> . menor
    (133) tCompare -> . eMat
    (134) tCompare -> . varsOps
    (135) tCompare -> . varYVals
    (138) menor -> . tCompare < tCompare
    (139) menor -> . not
    (72) eMat -> . eMat + p
    (73) eMat -> . eMat - p
    (74) eMat -> . valoresMat + p
    (75) eMat -> . valoresMat - p
    (76) eMat -> . eMat + valoresMat
    (77) eMat -> . eMat - valoresMat
    (78) eMat -> . valoresMat + valoresMat
    (79) eMat -> . valoresMat - valoresMat
    (80) eMat -> . p
    (140) not -> . NOT not
    (141) not -> . NOT valoresBool
    (142) not -> . parenBool
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (81) p -> . p * exp
    (82) p -> . p / exp
    (83) p -> . p % exp
    (84) p -> . valoresMat * exp
    (85) p -> . valoresMat / exp
    (86) p -> . valoresMat % exp
    (87) p -> . p * valoresMat
    (88) p -> . p / valoresMat
    (89) p -> . p % valoresMat
    (90) p -> . valoresMat * valoresMat
    (91) p -> . valoresMat / valoresMat
    (92) p -> . valoresMat % valoresMat
    (93) p -> . exp
    (143) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (104) paren -> . ( eMat )

    BOOL            shift and go to state 82
    COLINEALES      shift and go to state 13
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 86
    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 69
    (               shift and go to state 71
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 73
    +               shift and go to state 72

    and                            shift and go to state 62
    funcBool                       shift and go to state 63
    funcInt                        shift and go to state 64
    menor                          shift and go to state 80
    valoresMat                     shift and go to state 66
    eq                             shift and go to state 67
    valoresBool                    shift and go to state 227
    eMat                           shift and go to state 70
    vecVal                         shift and go to state 9
    paren                          shift and go to state 76
    iSing                          shift and go to state 74
    tCompare                       shift and go to state 75
    not                            shift and go to state 77
    varYVals                       shift and go to state 87
    or                             shift and go to state 88
    p                              shift and go to state 81
    varsOps                        shift and go to state 83
    exp                            shift and go to state 84
    mayor                          shift and go to state 65
    parenBool                      shift and go to state 85
    expBool                        shift and go to state 228

state 160

    (114) or -> or OR . and
    (116) or -> or OR . valoresBool
    (119) and -> . and AND eq
    (120) and -> . valoresBool AND eq
    (121) and -> . and AND valoresBool
    (122) and -> . valoresBool AND valoresBool
    (123) and -> . eq
    (105) valoresBool -> . BOOL
    (106) valoresBool -> . funcBool
    (107) valoresBool -> . varYVals
    (108) valoresBool -> . varsOps
    (124) eq -> . eq EQEQ parenBool
    (125) eq -> . eq DISTINTO parenBool
    (126) eq -> . valoresBool EQEQ parenBool
    (127) eq -> . valoresBool DISTINTO parenBool
    (128) eq -> . eq EQEQ valoresBool
    (129) eq -> . eq DISTINTO valoresBool
    (130) eq -> . valoresBool EQEQ valoresBool
    (131) eq -> . valoresBool DISTINTO valoresBool
    (132) eq -> . mayor
    (26) funcBool -> . COLINEALES ( vec , vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (136) mayor -> . tCompare > tCompare
    (137) mayor -> . menor
    (49) vecVal -> . ID m
    (133) tCompare -> . eMat
    (134) tCompare -> . varsOps
    (135) tCompare -> . varYVals
    (138) menor -> . tCompare < tCompare
    (139) menor -> . not
    (72) eMat -> . eMat + p
    (73) eMat -> . eMat - p
    (74) eMat -> . valoresMat + p
    (75) eMat -> . valoresMat - p
    (76) eMat -> . eMat + valoresMat
    (77) eMat -> . eMat - valoresMat
    (78) eMat -> . valoresMat + valoresMat
    (79) eMat -> . valoresMat - valoresMat
    (80) eMat -> . p
    (140) not -> . NOT not
    (141) not -> . NOT valoresBool
    (142) not -> . parenBool
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (81) p -> . p * exp
    (82) p -> . p / exp
    (83) p -> . p % exp
    (84) p -> . valoresMat * exp
    (85) p -> . valoresMat / exp
    (86) p -> . valoresMat % exp
    (87) p -> . p * valoresMat
    (88) p -> . p / valoresMat
    (89) p -> . p % valoresMat
    (90) p -> . valoresMat * valoresMat
    (91) p -> . valoresMat / valoresMat
    (92) p -> . valoresMat % valoresMat
    (93) p -> . exp
    (143) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (104) paren -> . ( eMat )

    BOOL            shift and go to state 82
    COLINEALES      shift and go to state 13
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 86
    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 69
    (               shift and go to state 71
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 73
    +               shift and go to state 72

    and                            shift and go to state 229
    funcBool                       shift and go to state 63
    funcInt                        shift and go to state 64
    menor                          shift and go to state 80
    valoresMat                     shift and go to state 66
    eq                             shift and go to state 67
    valoresBool                    shift and go to state 230
    eMat                           shift and go to state 70
    vecVal                         shift and go to state 9
    paren                          shift and go to state 76
    iSing                          shift and go to state 74
    tCompare                       shift and go to state 75
    not                            shift and go to state 77
    varYVals                       shift and go to state 87
    p                              shift and go to state 81
    varsOps                        shift and go to state 83
    exp                            shift and go to state 84
    mayor                          shift and go to state 65
    parenBool                      shift and go to state 85

state 161

    (10) loop -> WHILE ( expBool ) . bloque
    (16) bloque -> . sentencia ;
    (17) bloque -> . { g }
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (60) varAsig -> . ID MULEQ valoresAsig
    (61) varAsig -> . ID DIVEQ valoresAsig
    (62) varAsig -> . ID MASEQ valoresAsig
    (63) varAsig -> . ID MENOSEQ valoresAsig
    (64) varAsig -> . ID = valoresAsig
    (65) varAsig -> . ID . ID = valores
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (49) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( eMat )
    (26) funcBool -> . COLINEALES ( vec , vec )

    {               shift and go to state 32
    RETURN          shift and go to state 2
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    ID              shift and go to state 16
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    CAPITALIZAR     shift and go to state 23
    COLINEALES      shift and go to state 13

    varAsig                        shift and go to state 18
    sentencia                      shift and go to state 31
    funcInt                        shift and go to state 5
    funcString                     shift and go to state 20
    funcVoid                       shift and go to state 12
    funcReturn                     shift and go to state 22
    funcBool                       shift and go to state 3
    varsOps                        shift and go to state 27
    func                           shift and go to state 15
    bloque                         shift and go to state 231
    varYVals                       shift and go to state 28
    vecVal                         shift and go to state 9

state 162

    (70) valoresMat -> varsOps .
    (108) valoresBool -> varsOps .
    (134) tCompare -> varsOps .

    +               reduce using rule 70 (valoresMat -> varsOps .)
    -               reduce using rule 70 (valoresMat -> varsOps .)
    *               reduce using rule 70 (valoresMat -> varsOps .)
    /               reduce using rule 70 (valoresMat -> varsOps .)
    %               reduce using rule 70 (valoresMat -> varsOps .)
    ^               reduce using rule 70 (valoresMat -> varsOps .)
    ?               reduce using rule 108 (valoresBool -> varsOps .)
    OR              reduce using rule 108 (valoresBool -> varsOps .)
    AND             reduce using rule 108 (valoresBool -> varsOps .)
    EQEQ            reduce using rule 108 (valoresBool -> varsOps .)
    DISTINTO        reduce using rule 108 (valoresBool -> varsOps .)
    >               reduce using rule 134 (tCompare -> varsOps .)
    <               reduce using rule 134 (tCompare -> varsOps .)


state 163

    (69) valoresMat -> varYVals .
    (107) valoresBool -> varYVals .
    (57) varsOps -> varYVals . MASMAS
    (58) varsOps -> varYVals . MENOSMENOS
    (135) tCompare -> varYVals .

    +               reduce using rule 69 (valoresMat -> varYVals .)
    -               reduce using rule 69 (valoresMat -> varYVals .)
    *               reduce using rule 69 (valoresMat -> varYVals .)
    /               reduce using rule 69 (valoresMat -> varYVals .)
    %               reduce using rule 69 (valoresMat -> varYVals .)
    ^               reduce using rule 69 (valoresMat -> varYVals .)
    ?               reduce using rule 107 (valoresBool -> varYVals .)
    OR              reduce using rule 107 (valoresBool -> varYVals .)
    AND             reduce using rule 107 (valoresBool -> varYVals .)
    EQEQ            reduce using rule 107 (valoresBool -> varYVals .)
    DISTINTO        reduce using rule 107 (valoresBool -> varYVals .)
    MASMAS          shift and go to state 56
    MENOSMENOS      shift and go to state 57
    >               reduce using rule 135 (tCompare -> varYVals .)
    <               reduce using rule 135 (tCompare -> varYVals .)


state 164

    (42) valores -> ID . . valoresCampos
    (44) valoresCampos -> . ID
    (45) valoresCampos -> . END
    (46) valoresCampos -> . BEGIN

    ID              shift and go to state 234
    END             shift and go to state 233
    BEGIN           shift and go to state 232

    valoresCampos                  shift and go to state 235

state 165

    (27) funcVoid -> PRINT ( valores ) .

    ;               reduce using rule 27 (funcVoid -> PRINT ( valores ) .)


state 166

    (52) reg -> { campos . }

    }               shift and go to state 236


state 167

    (53) campos -> ID . : valores , campos
    (42) valores -> ID . . valoresCampos
    (47) varYVals -> ID .
    (49) vecVal -> ID . m
    (50) m -> . [ INT ]
    (51) m -> . [ INT ] m

    :               shift and go to state 237
    .               shift and go to state 164
    MASMAS          reduce using rule 47 (varYVals -> ID .)
    MENOSMENOS      reduce using rule 47 (varYVals -> ID .)
    }               reduce using rule 47 (varYVals -> ID .)
    +               reduce using rule 47 (varYVals -> ID .)
    -               reduce using rule 47 (varYVals -> ID .)
    *               reduce using rule 47 (varYVals -> ID .)
    /               reduce using rule 47 (varYVals -> ID .)
    %               reduce using rule 47 (varYVals -> ID .)
    ^               reduce using rule 47 (varYVals -> ID .)
    ?               reduce using rule 47 (varYVals -> ID .)
    OR              reduce using rule 47 (varYVals -> ID .)
    AND             reduce using rule 47 (varYVals -> ID .)
    EQEQ            reduce using rule 47 (varYVals -> ID .)
    DISTINTO        reduce using rule 47 (varYVals -> ID .)
    >               reduce using rule 47 (varYVals -> ID .)
    <               reduce using rule 47 (varYVals -> ID .)
    [               shift and go to state 45

    m                              shift and go to state 42

state 168

    (54) campos -> valores .

    }               reduce using rule 54 (campos -> valores .)


state 169

    (26) funcBool -> COLINEALES ( vec , . vec )
    (31) vec -> . [ elem ]

    [               shift and go to state 104

    vec                            shift and go to state 238

state 170

    (32) elem -> valores . , elem
    (33) elem -> valores .

    ,               shift and go to state 239
    ]               reduce using rule 33 (elem -> valores .)


state 171

    (31) vec -> [ elem . ]

    ]               shift and go to state 240


state 172

    (12) loop -> FOR ( varAsig ; . expBool ; varsOps ) bloque
    (109) expBool -> . or ? expBool : expBool
    (110) expBool -> . valoresBool ? expBool : expBool
    (111) expBool -> . or ? valoresBool : valoresBool
    (112) expBool -> . valoresBool ? valoresBool : valoresBool
    (113) expBool -> . or
    (114) or -> . or OR and
    (115) or -> . valoresBool OR and
    (116) or -> . or OR valoresBool
    (117) or -> . valoresBool OR valoresBool
    (118) or -> . and
    (105) valoresBool -> . BOOL
    (106) valoresBool -> . funcBool
    (107) valoresBool -> . varYVals
    (108) valoresBool -> . varsOps
    (119) and -> . and AND eq
    (120) and -> . valoresBool AND eq
    (121) and -> . and AND valoresBool
    (122) and -> . valoresBool AND valoresBool
    (123) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (124) eq -> . eq EQEQ parenBool
    (125) eq -> . eq DISTINTO parenBool
    (126) eq -> . valoresBool EQEQ parenBool
    (127) eq -> . valoresBool DISTINTO parenBool
    (128) eq -> . eq EQEQ valoresBool
    (129) eq -> . eq DISTINTO valoresBool
    (130) eq -> . valoresBool EQEQ valoresBool
    (131) eq -> . valoresBool DISTINTO valoresBool
    (132) eq -> . mayor
    (49) vecVal -> . ID m
    (136) mayor -> . tCompare > tCompare
    (137) mayor -> . menor
    (133) tCompare -> . eMat
    (134) tCompare -> . varsOps
    (135) tCompare -> . varYVals
    (138) menor -> . tCompare < tCompare
    (139) menor -> . not
    (72) eMat -> . eMat + p
    (73) eMat -> . eMat - p
    (74) eMat -> . valoresMat + p
    (75) eMat -> . valoresMat - p
    (76) eMat -> . eMat + valoresMat
    (77) eMat -> . eMat - valoresMat
    (78) eMat -> . valoresMat + valoresMat
    (79) eMat -> . valoresMat - valoresMat
    (80) eMat -> . p
    (140) not -> . NOT not
    (141) not -> . NOT valoresBool
    (142) not -> . parenBool
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (81) p -> . p * exp
    (82) p -> . p / exp
    (83) p -> . p % exp
    (84) p -> . valoresMat * exp
    (85) p -> . valoresMat / exp
    (86) p -> . valoresMat % exp
    (87) p -> . p * valoresMat
    (88) p -> . p / valoresMat
    (89) p -> . p % valoresMat
    (90) p -> . valoresMat * valoresMat
    (91) p -> . valoresMat / valoresMat
    (92) p -> . valoresMat % valoresMat
    (93) p -> . exp
    (143) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (104) paren -> . ( eMat )

    BOOL            shift and go to state 82
    COLINEALES      shift and go to state 13
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 86
    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 69
    (               shift and go to state 71
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 73
    +               shift and go to state 72

    and                            shift and go to state 62
    funcBool                       shift and go to state 63
    funcInt                        shift and go to state 64
    menor                          shift and go to state 80
    valoresMat                     shift and go to state 66
    eq                             shift and go to state 67
    vecVal                         shift and go to state 9
    valoresBool                    shift and go to state 68
    eMat                           shift and go to state 70
    mayor                          shift and go to state 65
    paren                          shift and go to state 76
    iSing                          shift and go to state 74
    tCompare                       shift and go to state 75
    not                            shift and go to state 77
    parenBool                      shift and go to state 85
    p                              shift and go to state 81
    varsOps                        shift and go to state 83
    exp                            shift and go to state 84
    varYVals                       shift and go to state 87
    or                             shift and go to state 88
    expBool                        shift and go to state 241

state 173

    (65) varAsig -> ID . ID = . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . reg
    (37) valores -> . INT
    (38) valores -> . STRING
    (39) valores -> . BOOL
    (40) valores -> . varYVals
    (41) valores -> . varsOps
    (42) valores -> . ID . valoresCampos
    (43) valores -> . RES
    (72) eMat -> . eMat + p
    (73) eMat -> . eMat - p
    (74) eMat -> . valoresMat + p
    (75) eMat -> . valoresMat - p
    (76) eMat -> . eMat + valoresMat
    (77) eMat -> . eMat - valoresMat
    (78) eMat -> . valoresMat + valoresMat
    (79) eMat -> . valoresMat - valoresMat
    (80) eMat -> . p
    (109) expBool -> . or ? expBool : expBool
    (110) expBool -> . valoresBool ? expBool : expBool
    (111) expBool -> . or ? valoresBool : valoresBool
    (112) expBool -> . valoresBool ? valoresBool : valoresBool
    (113) expBool -> . or
    (52) reg -> . { campos }
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (81) p -> . p * exp
    (82) p -> . p / exp
    (83) p -> . p % exp
    (84) p -> . valoresMat * exp
    (85) p -> . valoresMat / exp
    (86) p -> . valoresMat % exp
    (87) p -> . p * valoresMat
    (88) p -> . p / valoresMat
    (89) p -> . p % valoresMat
    (90) p -> . valoresMat * valoresMat
    (91) p -> . valoresMat / valoresMat
    (92) p -> . valoresMat % valoresMat
    (93) p -> . exp
    (114) or -> . or OR and
    (115) or -> . valoresBool OR and
    (116) or -> . or OR valoresBool
    (117) or -> . valoresBool OR valoresBool
    (118) or -> . and
    (105) valoresBool -> . BOOL
    (106) valoresBool -> . funcBool
    (107) valoresBool -> . varYVals
    (108) valoresBool -> . varsOps
    (49) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (119) and -> . and AND eq
    (120) and -> . valoresBool AND eq
    (121) and -> . and AND valoresBool
    (122) and -> . valoresBool AND valoresBool
    (123) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (124) eq -> . eq EQEQ parenBool
    (125) eq -> . eq DISTINTO parenBool
    (126) eq -> . valoresBool EQEQ parenBool
    (127) eq -> . valoresBool DISTINTO parenBool
    (128) eq -> . eq EQEQ valoresBool
    (129) eq -> . eq DISTINTO valoresBool
    (130) eq -> . valoresBool EQEQ valoresBool
    (131) eq -> . valoresBool DISTINTO valoresBool
    (132) eq -> . mayor
    (104) paren -> . ( eMat )
    (136) mayor -> . tCompare > tCompare
    (137) mayor -> . menor
    (133) tCompare -> . eMat
    (134) tCompare -> . varsOps
    (135) tCompare -> . varYVals
    (138) menor -> . tCompare < tCompare
    (139) menor -> . not
    (140) not -> . NOT not
    (141) not -> . NOT valoresBool
    (142) not -> . parenBool
    (143) parenBool -> . ( expBool )

    INT             shift and go to state 96
    STRING          shift and go to state 94
    BOOL            shift and go to state 98
    ID              shift and go to state 95
    RES             shift and go to state 90
    {               shift and go to state 100
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    FLOAT           shift and go to state 79
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 73
    +               shift and go to state 72
    (               shift and go to state 92
    NOT             shift and go to state 86

    and                            shift and go to state 62
    funcBool                       shift and go to state 63
    funcInt                        shift and go to state 64
    menor                          shift and go to state 80
    mayor                          shift and go to state 65
    valoresMat                     shift and go to state 66
    eq                             shift and go to state 67
    valoresBool                    shift and go to state 68
    eMat                           shift and go to state 91
    vecVal                         shift and go to state 9
    paren                          shift and go to state 76
    reg                            shift and go to state 93
    varsOps                        shift and go to state 99
    exp                            shift and go to state 84
    tCompare                       shift and go to state 75
    not                            shift and go to state 77
    valores                        shift and go to state 242
    parenBool                      shift and go to state 85
    p                              shift and go to state 81
    iSing                          shift and go to state 74
    varYVals                       shift and go to state 101
    or                             shift and go to state 88
    expBool                        shift and go to state 102

state 174

    (50) m -> [ INT ] .
    (51) m -> [ INT ] . m
    (50) m -> . [ INT ]
    (51) m -> . [ INT ] m

    MASMAS          reduce using rule 50 (m -> [ INT ] .)
    MENOSMENOS      reduce using rule 50 (m -> [ INT ] .)
    )               reduce using rule 50 (m -> [ INT ] .)
    +               reduce using rule 50 (m -> [ INT ] .)
    -               reduce using rule 50 (m -> [ INT ] .)
    *               reduce using rule 50 (m -> [ INT ] .)
    /               reduce using rule 50 (m -> [ INT ] .)
    %               reduce using rule 50 (m -> [ INT ] .)
    ^               reduce using rule 50 (m -> [ INT ] .)
    ?               reduce using rule 50 (m -> [ INT ] .)
    OR              reduce using rule 50 (m -> [ INT ] .)
    AND             reduce using rule 50 (m -> [ INT ] .)
    EQEQ            reduce using rule 50 (m -> [ INT ] .)
    DISTINTO        reduce using rule 50 (m -> [ INT ] .)
    >               reduce using rule 50 (m -> [ INT ] .)
    <               reduce using rule 50 (m -> [ INT ] .)
    ;               reduce using rule 50 (m -> [ INT ] .)
    ,               reduce using rule 50 (m -> [ INT ] .)
    ]               reduce using rule 50 (m -> [ INT ] .)
    }               reduce using rule 50 (m -> [ INT ] .)
    :               reduce using rule 50 (m -> [ INT ] .)
    [               shift and go to state 45

    m                              shift and go to state 243

state 175

    (13) if -> IF ( expBool ) . bloque else
    (16) bloque -> . sentencia ;
    (17) bloque -> . { g }
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (60) varAsig -> . ID MULEQ valoresAsig
    (61) varAsig -> . ID DIVEQ valoresAsig
    (62) varAsig -> . ID MASEQ valoresAsig
    (63) varAsig -> . ID MENOSEQ valoresAsig
    (64) varAsig -> . ID = valoresAsig
    (65) varAsig -> . ID . ID = valores
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (49) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( eMat )
    (26) funcBool -> . COLINEALES ( vec , vec )

    {               shift and go to state 32
    RETURN          shift and go to state 2
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    ID              shift and go to state 16
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    CAPITALIZAR     shift and go to state 23
    COLINEALES      shift and go to state 13

    varAsig                        shift and go to state 18
    sentencia                      shift and go to state 31
    funcInt                        shift and go to state 5
    funcString                     shift and go to state 20
    funcVoid                       shift and go to state 12
    funcReturn                     shift and go to state 22
    funcBool                       shift and go to state 3
    varsOps                        shift and go to state 27
    func                           shift and go to state 15
    bloque                         shift and go to state 244
    varYVals                       shift and go to state 28
    vecVal                         shift and go to state 9

state 176

    (23) funcInt -> MULTIESCALAR ( vec , . eMat , param )
    (72) eMat -> . eMat + p
    (73) eMat -> . eMat - p
    (74) eMat -> . valoresMat + p
    (75) eMat -> . valoresMat - p
    (76) eMat -> . eMat + valoresMat
    (77) eMat -> . eMat - valoresMat
    (78) eMat -> . valoresMat + valoresMat
    (79) eMat -> . valoresMat - valoresMat
    (80) eMat -> . p
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (81) p -> . p * exp
    (82) p -> . p / exp
    (83) p -> . p % exp
    (84) p -> . valoresMat * exp
    (85) p -> . valoresMat / exp
    (86) p -> . valoresMat % exp
    (87) p -> . p * valoresMat
    (88) p -> . p / valoresMat
    (89) p -> . p % valoresMat
    (90) p -> . valoresMat * valoresMat
    (91) p -> . valoresMat / valoresMat
    (92) p -> . valoresMat % valoresMat
    (93) p -> . exp
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (49) vecVal -> . ID m
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (104) paren -> . ( eMat )

    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 69
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    -               shift and go to state 73
    +               shift and go to state 72
    (               shift and go to state 118

    eMat                           shift and go to state 245
    funcInt                        shift and go to state 64
    iSing                          shift and go to state 74
    p                              shift and go to state 81
    valoresMat                     shift and go to state 66
    paren                          shift and go to state 76
    exp                            shift and go to state 84
    varYVals                       shift and go to state 120
    vecVal                         shift and go to state 9
    varsOps                        shift and go to state 119

state 177

    (25) funcString -> CAPITALIZAR ( eMat ) .

    ;               reduce using rule 25 (funcString -> CAPITALIZAR ( eMat ) .)


state 178

    (104) paren -> ( eMat . )
    (72) eMat -> eMat . + p
    (73) eMat -> eMat . - p
    (76) eMat -> eMat . + valoresMat
    (77) eMat -> eMat . - valoresMat

    )               shift and go to state 213
    +               shift and go to state 138
    -               shift and go to state 139


state 179

    (24) funcInt -> LENGTH ( vec ) .

    +               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    -               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    *               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    /               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    %               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    ^               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    ;               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    >               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    <               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    )               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    }               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    ,               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    ]               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    EQEQ            reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    DISTINTO        reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    AND             reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    ?               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    OR              reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    :               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)


state 180

    (11) loop -> DO bloque WHILE ( expBool . ) ;

    )               shift and go to state 246


state 181

    (119) and -> and AND eq .
    (124) eq -> eq . EQEQ parenBool
    (125) eq -> eq . DISTINTO parenBool
    (128) eq -> eq . EQEQ valoresBool
    (129) eq -> eq . DISTINTO valoresBool

    AND             reduce using rule 119 (and -> and AND eq .)
    ?               reduce using rule 119 (and -> and AND eq .)
    OR              reduce using rule 119 (and -> and AND eq .)
    ,               reduce using rule 119 (and -> and AND eq .)
    ]               reduce using rule 119 (and -> and AND eq .)
    ;               reduce using rule 119 (and -> and AND eq .)
    }               reduce using rule 119 (and -> and AND eq .)
    )               reduce using rule 119 (and -> and AND eq .)
    :               reduce using rule 119 (and -> and AND eq .)
    EQEQ            shift and go to state 131
    DISTINTO        shift and go to state 132


state 182

    (121) and -> and AND valoresBool .
    (126) eq -> valoresBool . EQEQ parenBool
    (127) eq -> valoresBool . DISTINTO parenBool
    (130) eq -> valoresBool . EQEQ valoresBool
    (131) eq -> valoresBool . DISTINTO valoresBool

    AND             reduce using rule 121 (and -> and AND valoresBool .)
    ?               reduce using rule 121 (and -> and AND valoresBool .)
    OR              reduce using rule 121 (and -> and AND valoresBool .)
    ,               reduce using rule 121 (and -> and AND valoresBool .)
    ]               reduce using rule 121 (and -> and AND valoresBool .)
    ;               reduce using rule 121 (and -> and AND valoresBool .)
    }               reduce using rule 121 (and -> and AND valoresBool .)
    )               reduce using rule 121 (and -> and AND valoresBool .)
    :               reduce using rule 121 (and -> and AND valoresBool .)
    EQEQ            shift and go to state 135
    DISTINTO        shift and go to state 134


state 183

    (92) p -> valoresMat % valoresMat .
    (95) exp -> valoresMat . ^ iSing
    (97) exp -> valoresMat . ^ valoresMat

    *               reduce using rule 92 (p -> valoresMat % valoresMat .)
    /               reduce using rule 92 (p -> valoresMat % valoresMat .)
    %               reduce using rule 92 (p -> valoresMat % valoresMat .)
    +               reduce using rule 92 (p -> valoresMat % valoresMat .)
    -               reduce using rule 92 (p -> valoresMat % valoresMat .)
    >               reduce using rule 92 (p -> valoresMat % valoresMat .)
    <               reduce using rule 92 (p -> valoresMat % valoresMat .)
    ,               reduce using rule 92 (p -> valoresMat % valoresMat .)
    EQEQ            reduce using rule 92 (p -> valoresMat % valoresMat .)
    DISTINTO        reduce using rule 92 (p -> valoresMat % valoresMat .)
    AND             reduce using rule 92 (p -> valoresMat % valoresMat .)
    ?               reduce using rule 92 (p -> valoresMat % valoresMat .)
    OR              reduce using rule 92 (p -> valoresMat % valoresMat .)
    )               reduce using rule 92 (p -> valoresMat % valoresMat .)
    ;               reduce using rule 92 (p -> valoresMat % valoresMat .)
    }               reduce using rule 92 (p -> valoresMat % valoresMat .)
    ]               reduce using rule 92 (p -> valoresMat % valoresMat .)
    :               reduce using rule 92 (p -> valoresMat % valoresMat .)
    ^               shift and go to state 130


state 184

    (86) p -> valoresMat % exp .
    (94) exp -> exp . ^ iSing
    (96) exp -> exp . ^ valoresMat

    *               reduce using rule 86 (p -> valoresMat % exp .)
    /               reduce using rule 86 (p -> valoresMat % exp .)
    %               reduce using rule 86 (p -> valoresMat % exp .)
    +               reduce using rule 86 (p -> valoresMat % exp .)
    -               reduce using rule 86 (p -> valoresMat % exp .)
    >               reduce using rule 86 (p -> valoresMat % exp .)
    <               reduce using rule 86 (p -> valoresMat % exp .)
    ,               reduce using rule 86 (p -> valoresMat % exp .)
    EQEQ            reduce using rule 86 (p -> valoresMat % exp .)
    DISTINTO        reduce using rule 86 (p -> valoresMat % exp .)
    AND             reduce using rule 86 (p -> valoresMat % exp .)
    ?               reduce using rule 86 (p -> valoresMat % exp .)
    OR              reduce using rule 86 (p -> valoresMat % exp .)
    )               reduce using rule 86 (p -> valoresMat % exp .)
    ;               reduce using rule 86 (p -> valoresMat % exp .)
    }               reduce using rule 86 (p -> valoresMat % exp .)
    ]               reduce using rule 86 (p -> valoresMat % exp .)
    :               reduce using rule 86 (p -> valoresMat % exp .)
    ^               shift and go to state 153


state 185

    (78) eMat -> valoresMat + valoresMat .
    (84) p -> valoresMat . * exp
    (85) p -> valoresMat . / exp
    (86) p -> valoresMat . % exp
    (90) p -> valoresMat . * valoresMat
    (91) p -> valoresMat . / valoresMat
    (92) p -> valoresMat . % valoresMat
    (95) exp -> valoresMat . ^ iSing
    (97) exp -> valoresMat . ^ valoresMat

    +               reduce using rule 78 (eMat -> valoresMat + valoresMat .)
    -               reduce using rule 78 (eMat -> valoresMat + valoresMat .)
    >               reduce using rule 78 (eMat -> valoresMat + valoresMat .)
    <               reduce using rule 78 (eMat -> valoresMat + valoresMat .)
    )               reduce using rule 78 (eMat -> valoresMat + valoresMat .)
    EQEQ            reduce using rule 78 (eMat -> valoresMat + valoresMat .)
    DISTINTO        reduce using rule 78 (eMat -> valoresMat + valoresMat .)
    AND             reduce using rule 78 (eMat -> valoresMat + valoresMat .)
    ?               reduce using rule 78 (eMat -> valoresMat + valoresMat .)
    OR              reduce using rule 78 (eMat -> valoresMat + valoresMat .)
    ;               reduce using rule 78 (eMat -> valoresMat + valoresMat .)
    }               reduce using rule 78 (eMat -> valoresMat + valoresMat .)
    ,               reduce using rule 78 (eMat -> valoresMat + valoresMat .)
    ]               reduce using rule 78 (eMat -> valoresMat + valoresMat .)
    :               reduce using rule 78 (eMat -> valoresMat + valoresMat .)
    *               shift and go to state 127
    /               shift and go to state 129
    %               shift and go to state 125
    ^               shift and go to state 130


state 186

    (74) eMat -> valoresMat + p .
    (81) p -> p . * exp
    (82) p -> p . / exp
    (83) p -> p . % exp
    (87) p -> p . * valoresMat
    (88) p -> p . / valoresMat
    (89) p -> p . % valoresMat

    +               reduce using rule 74 (eMat -> valoresMat + p .)
    -               reduce using rule 74 (eMat -> valoresMat + p .)
    >               reduce using rule 74 (eMat -> valoresMat + p .)
    <               reduce using rule 74 (eMat -> valoresMat + p .)
    )               reduce using rule 74 (eMat -> valoresMat + p .)
    EQEQ            reduce using rule 74 (eMat -> valoresMat + p .)
    DISTINTO        reduce using rule 74 (eMat -> valoresMat + p .)
    AND             reduce using rule 74 (eMat -> valoresMat + p .)
    ?               reduce using rule 74 (eMat -> valoresMat + p .)
    OR              reduce using rule 74 (eMat -> valoresMat + p .)
    ;               reduce using rule 74 (eMat -> valoresMat + p .)
    }               reduce using rule 74 (eMat -> valoresMat + p .)
    ,               reduce using rule 74 (eMat -> valoresMat + p .)
    ]               reduce using rule 74 (eMat -> valoresMat + p .)
    :               reduce using rule 74 (eMat -> valoresMat + p .)
    *               shift and go to state 151
    /               shift and go to state 152
    %               shift and go to state 150


state 187

    (90) p -> valoresMat * valoresMat .
    (95) exp -> valoresMat . ^ iSing
    (97) exp -> valoresMat . ^ valoresMat

    *               reduce using rule 90 (p -> valoresMat * valoresMat .)
    /               reduce using rule 90 (p -> valoresMat * valoresMat .)
    %               reduce using rule 90 (p -> valoresMat * valoresMat .)
    +               reduce using rule 90 (p -> valoresMat * valoresMat .)
    -               reduce using rule 90 (p -> valoresMat * valoresMat .)
    >               reduce using rule 90 (p -> valoresMat * valoresMat .)
    <               reduce using rule 90 (p -> valoresMat * valoresMat .)
    ,               reduce using rule 90 (p -> valoresMat * valoresMat .)
    EQEQ            reduce using rule 90 (p -> valoresMat * valoresMat .)
    DISTINTO        reduce using rule 90 (p -> valoresMat * valoresMat .)
    AND             reduce using rule 90 (p -> valoresMat * valoresMat .)
    ?               reduce using rule 90 (p -> valoresMat * valoresMat .)
    OR              reduce using rule 90 (p -> valoresMat * valoresMat .)
    )               reduce using rule 90 (p -> valoresMat * valoresMat .)
    ;               reduce using rule 90 (p -> valoresMat * valoresMat .)
    }               reduce using rule 90 (p -> valoresMat * valoresMat .)
    ]               reduce using rule 90 (p -> valoresMat * valoresMat .)
    :               reduce using rule 90 (p -> valoresMat * valoresMat .)
    ^               shift and go to state 130


state 188

    (84) p -> valoresMat * exp .
    (94) exp -> exp . ^ iSing
    (96) exp -> exp . ^ valoresMat

    *               reduce using rule 84 (p -> valoresMat * exp .)
    /               reduce using rule 84 (p -> valoresMat * exp .)
    %               reduce using rule 84 (p -> valoresMat * exp .)
    +               reduce using rule 84 (p -> valoresMat * exp .)
    -               reduce using rule 84 (p -> valoresMat * exp .)
    >               reduce using rule 84 (p -> valoresMat * exp .)
    <               reduce using rule 84 (p -> valoresMat * exp .)
    ,               reduce using rule 84 (p -> valoresMat * exp .)
    EQEQ            reduce using rule 84 (p -> valoresMat * exp .)
    DISTINTO        reduce using rule 84 (p -> valoresMat * exp .)
    AND             reduce using rule 84 (p -> valoresMat * exp .)
    ?               reduce using rule 84 (p -> valoresMat * exp .)
    OR              reduce using rule 84 (p -> valoresMat * exp .)
    )               reduce using rule 84 (p -> valoresMat * exp .)
    ;               reduce using rule 84 (p -> valoresMat * exp .)
    }               reduce using rule 84 (p -> valoresMat * exp .)
    ]               reduce using rule 84 (p -> valoresMat * exp .)
    :               reduce using rule 84 (p -> valoresMat * exp .)
    ^               shift and go to state 153


state 189

    (79) eMat -> valoresMat - valoresMat .
    (84) p -> valoresMat . * exp
    (85) p -> valoresMat . / exp
    (86) p -> valoresMat . % exp
    (90) p -> valoresMat . * valoresMat
    (91) p -> valoresMat . / valoresMat
    (92) p -> valoresMat . % valoresMat
    (95) exp -> valoresMat . ^ iSing
    (97) exp -> valoresMat . ^ valoresMat

    +               reduce using rule 79 (eMat -> valoresMat - valoresMat .)
    -               reduce using rule 79 (eMat -> valoresMat - valoresMat .)
    >               reduce using rule 79 (eMat -> valoresMat - valoresMat .)
    <               reduce using rule 79 (eMat -> valoresMat - valoresMat .)
    )               reduce using rule 79 (eMat -> valoresMat - valoresMat .)
    EQEQ            reduce using rule 79 (eMat -> valoresMat - valoresMat .)
    DISTINTO        reduce using rule 79 (eMat -> valoresMat - valoresMat .)
    AND             reduce using rule 79 (eMat -> valoresMat - valoresMat .)
    ?               reduce using rule 79 (eMat -> valoresMat - valoresMat .)
    OR              reduce using rule 79 (eMat -> valoresMat - valoresMat .)
    ;               reduce using rule 79 (eMat -> valoresMat - valoresMat .)
    }               reduce using rule 79 (eMat -> valoresMat - valoresMat .)
    ,               reduce using rule 79 (eMat -> valoresMat - valoresMat .)
    ]               reduce using rule 79 (eMat -> valoresMat - valoresMat .)
    :               reduce using rule 79 (eMat -> valoresMat - valoresMat .)
    *               shift and go to state 127
    /               shift and go to state 129
    %               shift and go to state 125
    ^               shift and go to state 130


state 190

    (75) eMat -> valoresMat - p .
    (81) p -> p . * exp
    (82) p -> p . / exp
    (83) p -> p . % exp
    (87) p -> p . * valoresMat
    (88) p -> p . / valoresMat
    (89) p -> p . % valoresMat

    +               reduce using rule 75 (eMat -> valoresMat - p .)
    -               reduce using rule 75 (eMat -> valoresMat - p .)
    >               reduce using rule 75 (eMat -> valoresMat - p .)
    <               reduce using rule 75 (eMat -> valoresMat - p .)
    )               reduce using rule 75 (eMat -> valoresMat - p .)
    EQEQ            reduce using rule 75 (eMat -> valoresMat - p .)
    DISTINTO        reduce using rule 75 (eMat -> valoresMat - p .)
    AND             reduce using rule 75 (eMat -> valoresMat - p .)
    ?               reduce using rule 75 (eMat -> valoresMat - p .)
    OR              reduce using rule 75 (eMat -> valoresMat - p .)
    ;               reduce using rule 75 (eMat -> valoresMat - p .)
    }               reduce using rule 75 (eMat -> valoresMat - p .)
    ,               reduce using rule 75 (eMat -> valoresMat - p .)
    ]               reduce using rule 75 (eMat -> valoresMat - p .)
    :               reduce using rule 75 (eMat -> valoresMat - p .)
    *               shift and go to state 151
    /               shift and go to state 152
    %               shift and go to state 150


state 191

    (91) p -> valoresMat / valoresMat .
    (95) exp -> valoresMat . ^ iSing
    (97) exp -> valoresMat . ^ valoresMat

    *               reduce using rule 91 (p -> valoresMat / valoresMat .)
    /               reduce using rule 91 (p -> valoresMat / valoresMat .)
    %               reduce using rule 91 (p -> valoresMat / valoresMat .)
    +               reduce using rule 91 (p -> valoresMat / valoresMat .)
    -               reduce using rule 91 (p -> valoresMat / valoresMat .)
    >               reduce using rule 91 (p -> valoresMat / valoresMat .)
    <               reduce using rule 91 (p -> valoresMat / valoresMat .)
    ,               reduce using rule 91 (p -> valoresMat / valoresMat .)
    EQEQ            reduce using rule 91 (p -> valoresMat / valoresMat .)
    DISTINTO        reduce using rule 91 (p -> valoresMat / valoresMat .)
    AND             reduce using rule 91 (p -> valoresMat / valoresMat .)
    ?               reduce using rule 91 (p -> valoresMat / valoresMat .)
    OR              reduce using rule 91 (p -> valoresMat / valoresMat .)
    )               reduce using rule 91 (p -> valoresMat / valoresMat .)
    ;               reduce using rule 91 (p -> valoresMat / valoresMat .)
    }               reduce using rule 91 (p -> valoresMat / valoresMat .)
    ]               reduce using rule 91 (p -> valoresMat / valoresMat .)
    :               reduce using rule 91 (p -> valoresMat / valoresMat .)
    ^               shift and go to state 130


state 192

    (85) p -> valoresMat / exp .
    (94) exp -> exp . ^ iSing
    (96) exp -> exp . ^ valoresMat

    *               reduce using rule 85 (p -> valoresMat / exp .)
    /               reduce using rule 85 (p -> valoresMat / exp .)
    %               reduce using rule 85 (p -> valoresMat / exp .)
    +               reduce using rule 85 (p -> valoresMat / exp .)
    -               reduce using rule 85 (p -> valoresMat / exp .)
    >               reduce using rule 85 (p -> valoresMat / exp .)
    <               reduce using rule 85 (p -> valoresMat / exp .)
    ,               reduce using rule 85 (p -> valoresMat / exp .)
    EQEQ            reduce using rule 85 (p -> valoresMat / exp .)
    DISTINTO        reduce using rule 85 (p -> valoresMat / exp .)
    AND             reduce using rule 85 (p -> valoresMat / exp .)
    ?               reduce using rule 85 (p -> valoresMat / exp .)
    OR              reduce using rule 85 (p -> valoresMat / exp .)
    )               reduce using rule 85 (p -> valoresMat / exp .)
    ;               reduce using rule 85 (p -> valoresMat / exp .)
    }               reduce using rule 85 (p -> valoresMat / exp .)
    ]               reduce using rule 85 (p -> valoresMat / exp .)
    :               reduce using rule 85 (p -> valoresMat / exp .)
    ^               shift and go to state 153


state 193

    (97) exp -> valoresMat ^ valoresMat .

    ^               reduce using rule 97 (exp -> valoresMat ^ valoresMat .)
    *               reduce using rule 97 (exp -> valoresMat ^ valoresMat .)
    /               reduce using rule 97 (exp -> valoresMat ^ valoresMat .)
    %               reduce using rule 97 (exp -> valoresMat ^ valoresMat .)
    +               reduce using rule 97 (exp -> valoresMat ^ valoresMat .)
    -               reduce using rule 97 (exp -> valoresMat ^ valoresMat .)
    >               reduce using rule 97 (exp -> valoresMat ^ valoresMat .)
    <               reduce using rule 97 (exp -> valoresMat ^ valoresMat .)
    )               reduce using rule 97 (exp -> valoresMat ^ valoresMat .)
    ;               reduce using rule 97 (exp -> valoresMat ^ valoresMat .)
    }               reduce using rule 97 (exp -> valoresMat ^ valoresMat .)
    ,               reduce using rule 97 (exp -> valoresMat ^ valoresMat .)
    ]               reduce using rule 97 (exp -> valoresMat ^ valoresMat .)
    EQEQ            reduce using rule 97 (exp -> valoresMat ^ valoresMat .)
    DISTINTO        reduce using rule 97 (exp -> valoresMat ^ valoresMat .)
    AND             reduce using rule 97 (exp -> valoresMat ^ valoresMat .)
    ?               reduce using rule 97 (exp -> valoresMat ^ valoresMat .)
    OR              reduce using rule 97 (exp -> valoresMat ^ valoresMat .)
    :               reduce using rule 97 (exp -> valoresMat ^ valoresMat .)


state 194

    (95) exp -> valoresMat ^ iSing .

    ^               reduce using rule 95 (exp -> valoresMat ^ iSing .)
    *               reduce using rule 95 (exp -> valoresMat ^ iSing .)
    /               reduce using rule 95 (exp -> valoresMat ^ iSing .)
    %               reduce using rule 95 (exp -> valoresMat ^ iSing .)
    +               reduce using rule 95 (exp -> valoresMat ^ iSing .)
    -               reduce using rule 95 (exp -> valoresMat ^ iSing .)
    >               reduce using rule 95 (exp -> valoresMat ^ iSing .)
    <               reduce using rule 95 (exp -> valoresMat ^ iSing .)
    )               reduce using rule 95 (exp -> valoresMat ^ iSing .)
    ;               reduce using rule 95 (exp -> valoresMat ^ iSing .)
    }               reduce using rule 95 (exp -> valoresMat ^ iSing .)
    ,               reduce using rule 95 (exp -> valoresMat ^ iSing .)
    ]               reduce using rule 95 (exp -> valoresMat ^ iSing .)
    EQEQ            reduce using rule 95 (exp -> valoresMat ^ iSing .)
    DISTINTO        reduce using rule 95 (exp -> valoresMat ^ iSing .)
    AND             reduce using rule 95 (exp -> valoresMat ^ iSing .)
    ?               reduce using rule 95 (exp -> valoresMat ^ iSing .)
    OR              reduce using rule 95 (exp -> valoresMat ^ iSing .)
    :               reduce using rule 95 (exp -> valoresMat ^ iSing .)


state 195

    (128) eq -> eq EQEQ valoresBool .

    EQEQ            reduce using rule 128 (eq -> eq EQEQ valoresBool .)
    DISTINTO        reduce using rule 128 (eq -> eq EQEQ valoresBool .)
    AND             reduce using rule 128 (eq -> eq EQEQ valoresBool .)
    ?               reduce using rule 128 (eq -> eq EQEQ valoresBool .)
    OR              reduce using rule 128 (eq -> eq EQEQ valoresBool .)
    )               reduce using rule 128 (eq -> eq EQEQ valoresBool .)
    ;               reduce using rule 128 (eq -> eq EQEQ valoresBool .)
    }               reduce using rule 128 (eq -> eq EQEQ valoresBool .)
    ,               reduce using rule 128 (eq -> eq EQEQ valoresBool .)
    ]               reduce using rule 128 (eq -> eq EQEQ valoresBool .)
    :               reduce using rule 128 (eq -> eq EQEQ valoresBool .)


state 196

    (124) eq -> eq EQEQ parenBool .

    EQEQ            reduce using rule 124 (eq -> eq EQEQ parenBool .)
    DISTINTO        reduce using rule 124 (eq -> eq EQEQ parenBool .)
    AND             reduce using rule 124 (eq -> eq EQEQ parenBool .)
    ?               reduce using rule 124 (eq -> eq EQEQ parenBool .)
    OR              reduce using rule 124 (eq -> eq EQEQ parenBool .)
    )               reduce using rule 124 (eq -> eq EQEQ parenBool .)
    ;               reduce using rule 124 (eq -> eq EQEQ parenBool .)
    }               reduce using rule 124 (eq -> eq EQEQ parenBool .)
    ,               reduce using rule 124 (eq -> eq EQEQ parenBool .)
    ]               reduce using rule 124 (eq -> eq EQEQ parenBool .)
    :               reduce using rule 124 (eq -> eq EQEQ parenBool .)


state 197

    (129) eq -> eq DISTINTO valoresBool .

    EQEQ            reduce using rule 129 (eq -> eq DISTINTO valoresBool .)
    DISTINTO        reduce using rule 129 (eq -> eq DISTINTO valoresBool .)
    AND             reduce using rule 129 (eq -> eq DISTINTO valoresBool .)
    ?               reduce using rule 129 (eq -> eq DISTINTO valoresBool .)
    OR              reduce using rule 129 (eq -> eq DISTINTO valoresBool .)
    )               reduce using rule 129 (eq -> eq DISTINTO valoresBool .)
    ;               reduce using rule 129 (eq -> eq DISTINTO valoresBool .)
    }               reduce using rule 129 (eq -> eq DISTINTO valoresBool .)
    ,               reduce using rule 129 (eq -> eq DISTINTO valoresBool .)
    ]               reduce using rule 129 (eq -> eq DISTINTO valoresBool .)
    :               reduce using rule 129 (eq -> eq DISTINTO valoresBool .)


state 198

    (125) eq -> eq DISTINTO parenBool .

    EQEQ            reduce using rule 125 (eq -> eq DISTINTO parenBool .)
    DISTINTO        reduce using rule 125 (eq -> eq DISTINTO parenBool .)
    AND             reduce using rule 125 (eq -> eq DISTINTO parenBool .)
    ?               reduce using rule 125 (eq -> eq DISTINTO parenBool .)
    OR              reduce using rule 125 (eq -> eq DISTINTO parenBool .)
    )               reduce using rule 125 (eq -> eq DISTINTO parenBool .)
    ;               reduce using rule 125 (eq -> eq DISTINTO parenBool .)
    }               reduce using rule 125 (eq -> eq DISTINTO parenBool .)
    ,               reduce using rule 125 (eq -> eq DISTINTO parenBool .)
    ]               reduce using rule 125 (eq -> eq DISTINTO parenBool .)
    :               reduce using rule 125 (eq -> eq DISTINTO parenBool .)


state 199

    (120) and -> valoresBool AND eq .
    (124) eq -> eq . EQEQ parenBool
    (125) eq -> eq . DISTINTO parenBool
    (128) eq -> eq . EQEQ valoresBool
    (129) eq -> eq . DISTINTO valoresBool

    AND             reduce using rule 120 (and -> valoresBool AND eq .)
    ?               reduce using rule 120 (and -> valoresBool AND eq .)
    OR              reduce using rule 120 (and -> valoresBool AND eq .)
    ,               reduce using rule 120 (and -> valoresBool AND eq .)
    ]               reduce using rule 120 (and -> valoresBool AND eq .)
    ;               reduce using rule 120 (and -> valoresBool AND eq .)
    }               reduce using rule 120 (and -> valoresBool AND eq .)
    )               reduce using rule 120 (and -> valoresBool AND eq .)
    :               reduce using rule 120 (and -> valoresBool AND eq .)
    EQEQ            shift and go to state 131
    DISTINTO        shift and go to state 132


state 200

    (122) and -> valoresBool AND valoresBool .
    (126) eq -> valoresBool . EQEQ parenBool
    (127) eq -> valoresBool . DISTINTO parenBool
    (130) eq -> valoresBool . EQEQ valoresBool
    (131) eq -> valoresBool . DISTINTO valoresBool

    AND             reduce using rule 122 (and -> valoresBool AND valoresBool .)
    ?               reduce using rule 122 (and -> valoresBool AND valoresBool .)
    OR              reduce using rule 122 (and -> valoresBool AND valoresBool .)
    ,               reduce using rule 122 (and -> valoresBool AND valoresBool .)
    ]               reduce using rule 122 (and -> valoresBool AND valoresBool .)
    ;               reduce using rule 122 (and -> valoresBool AND valoresBool .)
    }               reduce using rule 122 (and -> valoresBool AND valoresBool .)
    )               reduce using rule 122 (and -> valoresBool AND valoresBool .)
    :               reduce using rule 122 (and -> valoresBool AND valoresBool .)
    EQEQ            shift and go to state 135
    DISTINTO        shift and go to state 134


state 201

    (127) eq -> valoresBool DISTINTO parenBool .

    EQEQ            reduce using rule 127 (eq -> valoresBool DISTINTO parenBool .)
    DISTINTO        reduce using rule 127 (eq -> valoresBool DISTINTO parenBool .)
    AND             reduce using rule 127 (eq -> valoresBool DISTINTO parenBool .)
    ?               reduce using rule 127 (eq -> valoresBool DISTINTO parenBool .)
    OR              reduce using rule 127 (eq -> valoresBool DISTINTO parenBool .)
    )               reduce using rule 127 (eq -> valoresBool DISTINTO parenBool .)
    ;               reduce using rule 127 (eq -> valoresBool DISTINTO parenBool .)
    }               reduce using rule 127 (eq -> valoresBool DISTINTO parenBool .)
    ,               reduce using rule 127 (eq -> valoresBool DISTINTO parenBool .)
    ]               reduce using rule 127 (eq -> valoresBool DISTINTO parenBool .)
    :               reduce using rule 127 (eq -> valoresBool DISTINTO parenBool .)


state 202

    (131) eq -> valoresBool DISTINTO valoresBool .

    EQEQ            reduce using rule 131 (eq -> valoresBool DISTINTO valoresBool .)
    DISTINTO        reduce using rule 131 (eq -> valoresBool DISTINTO valoresBool .)
    AND             reduce using rule 131 (eq -> valoresBool DISTINTO valoresBool .)
    ?               reduce using rule 131 (eq -> valoresBool DISTINTO valoresBool .)
    OR              reduce using rule 131 (eq -> valoresBool DISTINTO valoresBool .)
    )               reduce using rule 131 (eq -> valoresBool DISTINTO valoresBool .)
    ;               reduce using rule 131 (eq -> valoresBool DISTINTO valoresBool .)
    }               reduce using rule 131 (eq -> valoresBool DISTINTO valoresBool .)
    ,               reduce using rule 131 (eq -> valoresBool DISTINTO valoresBool .)
    ]               reduce using rule 131 (eq -> valoresBool DISTINTO valoresBool .)
    :               reduce using rule 131 (eq -> valoresBool DISTINTO valoresBool .)


state 203

    (126) eq -> valoresBool EQEQ parenBool .

    EQEQ            reduce using rule 126 (eq -> valoresBool EQEQ parenBool .)
    DISTINTO        reduce using rule 126 (eq -> valoresBool EQEQ parenBool .)
    AND             reduce using rule 126 (eq -> valoresBool EQEQ parenBool .)
    ?               reduce using rule 126 (eq -> valoresBool EQEQ parenBool .)
    OR              reduce using rule 126 (eq -> valoresBool EQEQ parenBool .)
    )               reduce using rule 126 (eq -> valoresBool EQEQ parenBool .)
    ;               reduce using rule 126 (eq -> valoresBool EQEQ parenBool .)
    }               reduce using rule 126 (eq -> valoresBool EQEQ parenBool .)
    ,               reduce using rule 126 (eq -> valoresBool EQEQ parenBool .)
    ]               reduce using rule 126 (eq -> valoresBool EQEQ parenBool .)
    :               reduce using rule 126 (eq -> valoresBool EQEQ parenBool .)


state 204

    (130) eq -> valoresBool EQEQ valoresBool .

    EQEQ            reduce using rule 130 (eq -> valoresBool EQEQ valoresBool .)
    DISTINTO        reduce using rule 130 (eq -> valoresBool EQEQ valoresBool .)
    AND             reduce using rule 130 (eq -> valoresBool EQEQ valoresBool .)
    ?               reduce using rule 130 (eq -> valoresBool EQEQ valoresBool .)
    OR              reduce using rule 130 (eq -> valoresBool EQEQ valoresBool .)
    )               reduce using rule 130 (eq -> valoresBool EQEQ valoresBool .)
    ;               reduce using rule 130 (eq -> valoresBool EQEQ valoresBool .)
    }               reduce using rule 130 (eq -> valoresBool EQEQ valoresBool .)
    ,               reduce using rule 130 (eq -> valoresBool EQEQ valoresBool .)
    ]               reduce using rule 130 (eq -> valoresBool EQEQ valoresBool .)
    :               reduce using rule 130 (eq -> valoresBool EQEQ valoresBool .)


state 205

    (115) or -> valoresBool OR and .
    (119) and -> and . AND eq
    (121) and -> and . AND valoresBool

    ?               reduce using rule 115 (or -> valoresBool OR and .)
    OR              reduce using rule 115 (or -> valoresBool OR and .)
    ;               reduce using rule 115 (or -> valoresBool OR and .)
    )               reduce using rule 115 (or -> valoresBool OR and .)
    :               reduce using rule 115 (or -> valoresBool OR and .)
    ,               reduce using rule 115 (or -> valoresBool OR and .)
    ]               reduce using rule 115 (or -> valoresBool OR and .)
    }               reduce using rule 115 (or -> valoresBool OR and .)
    AND             shift and go to state 124


state 206

    (117) or -> valoresBool OR valoresBool .
    (120) and -> valoresBool . AND eq
    (122) and -> valoresBool . AND valoresBool
    (126) eq -> valoresBool . EQEQ parenBool
    (127) eq -> valoresBool . DISTINTO parenBool
    (130) eq -> valoresBool . EQEQ valoresBool
    (131) eq -> valoresBool . DISTINTO valoresBool

    ?               reduce using rule 117 (or -> valoresBool OR valoresBool .)
    OR              reduce using rule 117 (or -> valoresBool OR valoresBool .)
    ;               reduce using rule 117 (or -> valoresBool OR valoresBool .)
    )               reduce using rule 117 (or -> valoresBool OR valoresBool .)
    :               reduce using rule 117 (or -> valoresBool OR valoresBool .)
    ,               reduce using rule 117 (or -> valoresBool OR valoresBool .)
    ]               reduce using rule 117 (or -> valoresBool OR valoresBool .)
    }               reduce using rule 117 (or -> valoresBool OR valoresBool .)
    AND             shift and go to state 133
    EQEQ            shift and go to state 135
    DISTINTO        shift and go to state 134


state 207

    (112) expBool -> valoresBool ? valoresBool . : valoresBool
    (110) expBool -> valoresBool . ? expBool : expBool
    (112) expBool -> valoresBool . ? valoresBool : valoresBool
    (115) or -> valoresBool . OR and
    (117) or -> valoresBool . OR valoresBool
    (120) and -> valoresBool . AND eq
    (122) and -> valoresBool . AND valoresBool
    (126) eq -> valoresBool . EQEQ parenBool
    (127) eq -> valoresBool . DISTINTO parenBool
    (130) eq -> valoresBool . EQEQ valoresBool
    (131) eq -> valoresBool . DISTINTO valoresBool

    :               shift and go to state 247
    ?               shift and go to state 137
    OR              shift and go to state 136
    AND             shift and go to state 133
    EQEQ            shift and go to state 135
    DISTINTO        shift and go to state 134


state 208

    (110) expBool -> valoresBool ? expBool . : expBool

    :               shift and go to state 248


state 209

    (76) eMat -> eMat + valoresMat .
    (84) p -> valoresMat . * exp
    (85) p -> valoresMat . / exp
    (86) p -> valoresMat . % exp
    (90) p -> valoresMat . * valoresMat
    (91) p -> valoresMat . / valoresMat
    (92) p -> valoresMat . % valoresMat
    (95) exp -> valoresMat . ^ iSing
    (97) exp -> valoresMat . ^ valoresMat

    +               reduce using rule 76 (eMat -> eMat + valoresMat .)
    -               reduce using rule 76 (eMat -> eMat + valoresMat .)
    >               reduce using rule 76 (eMat -> eMat + valoresMat .)
    <               reduce using rule 76 (eMat -> eMat + valoresMat .)
    )               reduce using rule 76 (eMat -> eMat + valoresMat .)
    EQEQ            reduce using rule 76 (eMat -> eMat + valoresMat .)
    DISTINTO        reduce using rule 76 (eMat -> eMat + valoresMat .)
    AND             reduce using rule 76 (eMat -> eMat + valoresMat .)
    ?               reduce using rule 76 (eMat -> eMat + valoresMat .)
    OR              reduce using rule 76 (eMat -> eMat + valoresMat .)
    ;               reduce using rule 76 (eMat -> eMat + valoresMat .)
    }               reduce using rule 76 (eMat -> eMat + valoresMat .)
    ,               reduce using rule 76 (eMat -> eMat + valoresMat .)
    ]               reduce using rule 76 (eMat -> eMat + valoresMat .)
    :               reduce using rule 76 (eMat -> eMat + valoresMat .)
    *               shift and go to state 127
    /               shift and go to state 129
    %               shift and go to state 125
    ^               shift and go to state 130


state 210

    (72) eMat -> eMat + p .
    (81) p -> p . * exp
    (82) p -> p . / exp
    (83) p -> p . % exp
    (87) p -> p . * valoresMat
    (88) p -> p . / valoresMat
    (89) p -> p . % valoresMat

    +               reduce using rule 72 (eMat -> eMat + p .)
    -               reduce using rule 72 (eMat -> eMat + p .)
    >               reduce using rule 72 (eMat -> eMat + p .)
    <               reduce using rule 72 (eMat -> eMat + p .)
    )               reduce using rule 72 (eMat -> eMat + p .)
    EQEQ            reduce using rule 72 (eMat -> eMat + p .)
    DISTINTO        reduce using rule 72 (eMat -> eMat + p .)
    AND             reduce using rule 72 (eMat -> eMat + p .)
    ?               reduce using rule 72 (eMat -> eMat + p .)
    OR              reduce using rule 72 (eMat -> eMat + p .)
    ;               reduce using rule 72 (eMat -> eMat + p .)
    }               reduce using rule 72 (eMat -> eMat + p .)
    ,               reduce using rule 72 (eMat -> eMat + p .)
    ]               reduce using rule 72 (eMat -> eMat + p .)
    :               reduce using rule 72 (eMat -> eMat + p .)
    *               shift and go to state 151
    /               shift and go to state 152
    %               shift and go to state 150


state 211

    (77) eMat -> eMat - valoresMat .
    (84) p -> valoresMat . * exp
    (85) p -> valoresMat . / exp
    (86) p -> valoresMat . % exp
    (90) p -> valoresMat . * valoresMat
    (91) p -> valoresMat . / valoresMat
    (92) p -> valoresMat . % valoresMat
    (95) exp -> valoresMat . ^ iSing
    (97) exp -> valoresMat . ^ valoresMat

    +               reduce using rule 77 (eMat -> eMat - valoresMat .)
    -               reduce using rule 77 (eMat -> eMat - valoresMat .)
    >               reduce using rule 77 (eMat -> eMat - valoresMat .)
    <               reduce using rule 77 (eMat -> eMat - valoresMat .)
    )               reduce using rule 77 (eMat -> eMat - valoresMat .)
    EQEQ            reduce using rule 77 (eMat -> eMat - valoresMat .)
    DISTINTO        reduce using rule 77 (eMat -> eMat - valoresMat .)
    AND             reduce using rule 77 (eMat -> eMat - valoresMat .)
    ?               reduce using rule 77 (eMat -> eMat - valoresMat .)
    OR              reduce using rule 77 (eMat -> eMat - valoresMat .)
    ;               reduce using rule 77 (eMat -> eMat - valoresMat .)
    }               reduce using rule 77 (eMat -> eMat - valoresMat .)
    ,               reduce using rule 77 (eMat -> eMat - valoresMat .)
    ]               reduce using rule 77 (eMat -> eMat - valoresMat .)
    :               reduce using rule 77 (eMat -> eMat - valoresMat .)
    *               shift and go to state 127
    /               shift and go to state 129
    %               shift and go to state 125
    ^               shift and go to state 130


state 212

    (73) eMat -> eMat - p .
    (81) p -> p . * exp
    (82) p -> p . / exp
    (83) p -> p . % exp
    (87) p -> p . * valoresMat
    (88) p -> p . / valoresMat
    (89) p -> p . % valoresMat

    +               reduce using rule 73 (eMat -> eMat - p .)
    -               reduce using rule 73 (eMat -> eMat - p .)
    >               reduce using rule 73 (eMat -> eMat - p .)
    <               reduce using rule 73 (eMat -> eMat - p .)
    )               reduce using rule 73 (eMat -> eMat - p .)
    EQEQ            reduce using rule 73 (eMat -> eMat - p .)
    DISTINTO        reduce using rule 73 (eMat -> eMat - p .)
    AND             reduce using rule 73 (eMat -> eMat - p .)
    ?               reduce using rule 73 (eMat -> eMat - p .)
    OR              reduce using rule 73 (eMat -> eMat - p .)
    ;               reduce using rule 73 (eMat -> eMat - p .)
    }               reduce using rule 73 (eMat -> eMat - p .)
    ,               reduce using rule 73 (eMat -> eMat - p .)
    ]               reduce using rule 73 (eMat -> eMat - p .)
    :               reduce using rule 73 (eMat -> eMat - p .)
    *               shift and go to state 151
    /               shift and go to state 152
    %               shift and go to state 150


state 213

    (104) paren -> ( eMat ) .

    ^               reduce using rule 104 (paren -> ( eMat ) .)
    *               reduce using rule 104 (paren -> ( eMat ) .)
    /               reduce using rule 104 (paren -> ( eMat ) .)
    %               reduce using rule 104 (paren -> ( eMat ) .)
    +               reduce using rule 104 (paren -> ( eMat ) .)
    -               reduce using rule 104 (paren -> ( eMat ) .)
    EQEQ            reduce using rule 104 (paren -> ( eMat ) .)
    DISTINTO        reduce using rule 104 (paren -> ( eMat ) .)
    AND             reduce using rule 104 (paren -> ( eMat ) .)
    ?               reduce using rule 104 (paren -> ( eMat ) .)
    OR              reduce using rule 104 (paren -> ( eMat ) .)
    )               reduce using rule 104 (paren -> ( eMat ) .)
    ;               reduce using rule 104 (paren -> ( eMat ) .)
    }               reduce using rule 104 (paren -> ( eMat ) .)
    ,               reduce using rule 104 (paren -> ( eMat ) .)
    ]               reduce using rule 104 (paren -> ( eMat ) .)
    :               reduce using rule 104 (paren -> ( eMat ) .)
    >               reduce using rule 104 (paren -> ( eMat ) .)
    <               reduce using rule 104 (paren -> ( eMat ) .)


state 214

    (143) parenBool -> ( expBool ) .

    EQEQ            reduce using rule 143 (parenBool -> ( expBool ) .)
    DISTINTO        reduce using rule 143 (parenBool -> ( expBool ) .)
    AND             reduce using rule 143 (parenBool -> ( expBool ) .)
    ?               reduce using rule 143 (parenBool -> ( expBool ) .)
    OR              reduce using rule 143 (parenBool -> ( expBool ) .)
    )               reduce using rule 143 (parenBool -> ( expBool ) .)
    ;               reduce using rule 143 (parenBool -> ( expBool ) .)
    }               reduce using rule 143 (parenBool -> ( expBool ) .)
    ,               reduce using rule 143 (parenBool -> ( expBool ) .)
    ]               reduce using rule 143 (parenBool -> ( expBool ) .)
    :               reduce using rule 143 (parenBool -> ( expBool ) .)


state 215

    (138) menor -> tCompare < tCompare .

    EQEQ            reduce using rule 138 (menor -> tCompare < tCompare .)
    DISTINTO        reduce using rule 138 (menor -> tCompare < tCompare .)
    AND             reduce using rule 138 (menor -> tCompare < tCompare .)
    ?               reduce using rule 138 (menor -> tCompare < tCompare .)
    OR              reduce using rule 138 (menor -> tCompare < tCompare .)
    )               reduce using rule 138 (menor -> tCompare < tCompare .)
    ;               reduce using rule 138 (menor -> tCompare < tCompare .)
    }               reduce using rule 138 (menor -> tCompare < tCompare .)
    ,               reduce using rule 138 (menor -> tCompare < tCompare .)
    ]               reduce using rule 138 (menor -> tCompare < tCompare .)
    :               reduce using rule 138 (menor -> tCompare < tCompare .)


state 216

    (134) tCompare -> varsOps .
    (70) valoresMat -> varsOps .

    EQEQ            reduce using rule 134 (tCompare -> varsOps .)
    DISTINTO        reduce using rule 134 (tCompare -> varsOps .)
    AND             reduce using rule 134 (tCompare -> varsOps .)
    ?               reduce using rule 134 (tCompare -> varsOps .)
    OR              reduce using rule 134 (tCompare -> varsOps .)
    )               reduce using rule 134 (tCompare -> varsOps .)
    ;               reduce using rule 134 (tCompare -> varsOps .)
    }               reduce using rule 134 (tCompare -> varsOps .)
    ,               reduce using rule 134 (tCompare -> varsOps .)
    ]               reduce using rule 134 (tCompare -> varsOps .)
    :               reduce using rule 134 (tCompare -> varsOps .)
    +               reduce using rule 70 (valoresMat -> varsOps .)
    -               reduce using rule 70 (valoresMat -> varsOps .)
    *               reduce using rule 70 (valoresMat -> varsOps .)
    /               reduce using rule 70 (valoresMat -> varsOps .)
    %               reduce using rule 70 (valoresMat -> varsOps .)
    ^               reduce using rule 70 (valoresMat -> varsOps .)


state 217

    (135) tCompare -> varYVals .
    (57) varsOps -> varYVals . MASMAS
    (58) varsOps -> varYVals . MENOSMENOS
    (69) valoresMat -> varYVals .

    EQEQ            reduce using rule 135 (tCompare -> varYVals .)
    DISTINTO        reduce using rule 135 (tCompare -> varYVals .)
    AND             reduce using rule 135 (tCompare -> varYVals .)
    ?               reduce using rule 135 (tCompare -> varYVals .)
    OR              reduce using rule 135 (tCompare -> varYVals .)
    )               reduce using rule 135 (tCompare -> varYVals .)
    ;               reduce using rule 135 (tCompare -> varYVals .)
    }               reduce using rule 135 (tCompare -> varYVals .)
    ,               reduce using rule 135 (tCompare -> varYVals .)
    ]               reduce using rule 135 (tCompare -> varYVals .)
    :               reduce using rule 135 (tCompare -> varYVals .)
    MASMAS          shift and go to state 56
    MENOSMENOS      shift and go to state 57
    +               reduce using rule 69 (valoresMat -> varYVals .)
    -               reduce using rule 69 (valoresMat -> varYVals .)
    *               reduce using rule 69 (valoresMat -> varYVals .)
    /               reduce using rule 69 (valoresMat -> varYVals .)
    %               reduce using rule 69 (valoresMat -> varYVals .)
    ^               reduce using rule 69 (valoresMat -> varYVals .)


state 218

    (136) mayor -> tCompare > tCompare .

    EQEQ            reduce using rule 136 (mayor -> tCompare > tCompare .)
    DISTINTO        reduce using rule 136 (mayor -> tCompare > tCompare .)
    AND             reduce using rule 136 (mayor -> tCompare > tCompare .)
    ?               reduce using rule 136 (mayor -> tCompare > tCompare .)
    OR              reduce using rule 136 (mayor -> tCompare > tCompare .)
    )               reduce using rule 136 (mayor -> tCompare > tCompare .)
    ;               reduce using rule 136 (mayor -> tCompare > tCompare .)
    }               reduce using rule 136 (mayor -> tCompare > tCompare .)
    ,               reduce using rule 136 (mayor -> tCompare > tCompare .)
    ]               reduce using rule 136 (mayor -> tCompare > tCompare .)
    :               reduce using rule 136 (mayor -> tCompare > tCompare .)


state 219

    (89) p -> p % valoresMat .
    (95) exp -> valoresMat . ^ iSing
    (97) exp -> valoresMat . ^ valoresMat

    *               reduce using rule 89 (p -> p % valoresMat .)
    /               reduce using rule 89 (p -> p % valoresMat .)
    %               reduce using rule 89 (p -> p % valoresMat .)
    +               reduce using rule 89 (p -> p % valoresMat .)
    -               reduce using rule 89 (p -> p % valoresMat .)
    >               reduce using rule 89 (p -> p % valoresMat .)
    <               reduce using rule 89 (p -> p % valoresMat .)
    ,               reduce using rule 89 (p -> p % valoresMat .)
    EQEQ            reduce using rule 89 (p -> p % valoresMat .)
    DISTINTO        reduce using rule 89 (p -> p % valoresMat .)
    AND             reduce using rule 89 (p -> p % valoresMat .)
    ?               reduce using rule 89 (p -> p % valoresMat .)
    OR              reduce using rule 89 (p -> p % valoresMat .)
    )               reduce using rule 89 (p -> p % valoresMat .)
    ;               reduce using rule 89 (p -> p % valoresMat .)
    }               reduce using rule 89 (p -> p % valoresMat .)
    ]               reduce using rule 89 (p -> p % valoresMat .)
    :               reduce using rule 89 (p -> p % valoresMat .)
    ^               shift and go to state 130


state 220

    (83) p -> p % exp .
    (94) exp -> exp . ^ iSing
    (96) exp -> exp . ^ valoresMat

    *               reduce using rule 83 (p -> p % exp .)
    /               reduce using rule 83 (p -> p % exp .)
    %               reduce using rule 83 (p -> p % exp .)
    +               reduce using rule 83 (p -> p % exp .)
    -               reduce using rule 83 (p -> p % exp .)
    >               reduce using rule 83 (p -> p % exp .)
    <               reduce using rule 83 (p -> p % exp .)
    ,               reduce using rule 83 (p -> p % exp .)
    EQEQ            reduce using rule 83 (p -> p % exp .)
    DISTINTO        reduce using rule 83 (p -> p % exp .)
    AND             reduce using rule 83 (p -> p % exp .)
    ?               reduce using rule 83 (p -> p % exp .)
    OR              reduce using rule 83 (p -> p % exp .)
    )               reduce using rule 83 (p -> p % exp .)
    ;               reduce using rule 83 (p -> p % exp .)
    }               reduce using rule 83 (p -> p % exp .)
    ]               reduce using rule 83 (p -> p % exp .)
    :               reduce using rule 83 (p -> p % exp .)
    ^               shift and go to state 153


state 221

    (87) p -> p * valoresMat .
    (95) exp -> valoresMat . ^ iSing
    (97) exp -> valoresMat . ^ valoresMat

    *               reduce using rule 87 (p -> p * valoresMat .)
    /               reduce using rule 87 (p -> p * valoresMat .)
    %               reduce using rule 87 (p -> p * valoresMat .)
    +               reduce using rule 87 (p -> p * valoresMat .)
    -               reduce using rule 87 (p -> p * valoresMat .)
    >               reduce using rule 87 (p -> p * valoresMat .)
    <               reduce using rule 87 (p -> p * valoresMat .)
    ,               reduce using rule 87 (p -> p * valoresMat .)
    EQEQ            reduce using rule 87 (p -> p * valoresMat .)
    DISTINTO        reduce using rule 87 (p -> p * valoresMat .)
    AND             reduce using rule 87 (p -> p * valoresMat .)
    ?               reduce using rule 87 (p -> p * valoresMat .)
    OR              reduce using rule 87 (p -> p * valoresMat .)
    )               reduce using rule 87 (p -> p * valoresMat .)
    ;               reduce using rule 87 (p -> p * valoresMat .)
    }               reduce using rule 87 (p -> p * valoresMat .)
    ]               reduce using rule 87 (p -> p * valoresMat .)
    :               reduce using rule 87 (p -> p * valoresMat .)
    ^               shift and go to state 130


state 222

    (81) p -> p * exp .
    (94) exp -> exp . ^ iSing
    (96) exp -> exp . ^ valoresMat

    *               reduce using rule 81 (p -> p * exp .)
    /               reduce using rule 81 (p -> p * exp .)
    %               reduce using rule 81 (p -> p * exp .)
    +               reduce using rule 81 (p -> p * exp .)
    -               reduce using rule 81 (p -> p * exp .)
    >               reduce using rule 81 (p -> p * exp .)
    <               reduce using rule 81 (p -> p * exp .)
    ,               reduce using rule 81 (p -> p * exp .)
    EQEQ            reduce using rule 81 (p -> p * exp .)
    DISTINTO        reduce using rule 81 (p -> p * exp .)
    AND             reduce using rule 81 (p -> p * exp .)
    ?               reduce using rule 81 (p -> p * exp .)
    OR              reduce using rule 81 (p -> p * exp .)
    )               reduce using rule 81 (p -> p * exp .)
    ;               reduce using rule 81 (p -> p * exp .)
    }               reduce using rule 81 (p -> p * exp .)
    ]               reduce using rule 81 (p -> p * exp .)
    :               reduce using rule 81 (p -> p * exp .)
    ^               shift and go to state 153


state 223

    (88) p -> p / valoresMat .
    (95) exp -> valoresMat . ^ iSing
    (97) exp -> valoresMat . ^ valoresMat

    *               reduce using rule 88 (p -> p / valoresMat .)
    /               reduce using rule 88 (p -> p / valoresMat .)
    %               reduce using rule 88 (p -> p / valoresMat .)
    +               reduce using rule 88 (p -> p / valoresMat .)
    -               reduce using rule 88 (p -> p / valoresMat .)
    >               reduce using rule 88 (p -> p / valoresMat .)
    <               reduce using rule 88 (p -> p / valoresMat .)
    ,               reduce using rule 88 (p -> p / valoresMat .)
    EQEQ            reduce using rule 88 (p -> p / valoresMat .)
    DISTINTO        reduce using rule 88 (p -> p / valoresMat .)
    AND             reduce using rule 88 (p -> p / valoresMat .)
    ?               reduce using rule 88 (p -> p / valoresMat .)
    OR              reduce using rule 88 (p -> p / valoresMat .)
    )               reduce using rule 88 (p -> p / valoresMat .)
    ;               reduce using rule 88 (p -> p / valoresMat .)
    }               reduce using rule 88 (p -> p / valoresMat .)
    ]               reduce using rule 88 (p -> p / valoresMat .)
    :               reduce using rule 88 (p -> p / valoresMat .)
    ^               shift and go to state 130


state 224

    (82) p -> p / exp .
    (94) exp -> exp . ^ iSing
    (96) exp -> exp . ^ valoresMat

    *               reduce using rule 82 (p -> p / exp .)
    /               reduce using rule 82 (p -> p / exp .)
    %               reduce using rule 82 (p -> p / exp .)
    +               reduce using rule 82 (p -> p / exp .)
    -               reduce using rule 82 (p -> p / exp .)
    >               reduce using rule 82 (p -> p / exp .)
    <               reduce using rule 82 (p -> p / exp .)
    ,               reduce using rule 82 (p -> p / exp .)
    EQEQ            reduce using rule 82 (p -> p / exp .)
    DISTINTO        reduce using rule 82 (p -> p / exp .)
    AND             reduce using rule 82 (p -> p / exp .)
    ?               reduce using rule 82 (p -> p / exp .)
    OR              reduce using rule 82 (p -> p / exp .)
    )               reduce using rule 82 (p -> p / exp .)
    ;               reduce using rule 82 (p -> p / exp .)
    }               reduce using rule 82 (p -> p / exp .)
    ]               reduce using rule 82 (p -> p / exp .)
    :               reduce using rule 82 (p -> p / exp .)
    ^               shift and go to state 153


state 225

    (96) exp -> exp ^ valoresMat .

    ^               reduce using rule 96 (exp -> exp ^ valoresMat .)
    *               reduce using rule 96 (exp -> exp ^ valoresMat .)
    /               reduce using rule 96 (exp -> exp ^ valoresMat .)
    %               reduce using rule 96 (exp -> exp ^ valoresMat .)
    +               reduce using rule 96 (exp -> exp ^ valoresMat .)
    -               reduce using rule 96 (exp -> exp ^ valoresMat .)
    >               reduce using rule 96 (exp -> exp ^ valoresMat .)
    <               reduce using rule 96 (exp -> exp ^ valoresMat .)
    )               reduce using rule 96 (exp -> exp ^ valoresMat .)
    ;               reduce using rule 96 (exp -> exp ^ valoresMat .)
    }               reduce using rule 96 (exp -> exp ^ valoresMat .)
    ,               reduce using rule 96 (exp -> exp ^ valoresMat .)
    ]               reduce using rule 96 (exp -> exp ^ valoresMat .)
    EQEQ            reduce using rule 96 (exp -> exp ^ valoresMat .)
    DISTINTO        reduce using rule 96 (exp -> exp ^ valoresMat .)
    AND             reduce using rule 96 (exp -> exp ^ valoresMat .)
    ?               reduce using rule 96 (exp -> exp ^ valoresMat .)
    OR              reduce using rule 96 (exp -> exp ^ valoresMat .)
    :               reduce using rule 96 (exp -> exp ^ valoresMat .)


state 226

    (94) exp -> exp ^ iSing .

    ^               reduce using rule 94 (exp -> exp ^ iSing .)
    *               reduce using rule 94 (exp -> exp ^ iSing .)
    /               reduce using rule 94 (exp -> exp ^ iSing .)
    %               reduce using rule 94 (exp -> exp ^ iSing .)
    +               reduce using rule 94 (exp -> exp ^ iSing .)
    -               reduce using rule 94 (exp -> exp ^ iSing .)
    >               reduce using rule 94 (exp -> exp ^ iSing .)
    <               reduce using rule 94 (exp -> exp ^ iSing .)
    )               reduce using rule 94 (exp -> exp ^ iSing .)
    ;               reduce using rule 94 (exp -> exp ^ iSing .)
    }               reduce using rule 94 (exp -> exp ^ iSing .)
    ,               reduce using rule 94 (exp -> exp ^ iSing .)
    ]               reduce using rule 94 (exp -> exp ^ iSing .)
    EQEQ            reduce using rule 94 (exp -> exp ^ iSing .)
    DISTINTO        reduce using rule 94 (exp -> exp ^ iSing .)
    AND             reduce using rule 94 (exp -> exp ^ iSing .)
    ?               reduce using rule 94 (exp -> exp ^ iSing .)
    OR              reduce using rule 94 (exp -> exp ^ iSing .)
    :               reduce using rule 94 (exp -> exp ^ iSing .)


state 227

    (111) expBool -> or ? valoresBool . : valoresBool
    (110) expBool -> valoresBool . ? expBool : expBool
    (112) expBool -> valoresBool . ? valoresBool : valoresBool
    (115) or -> valoresBool . OR and
    (117) or -> valoresBool . OR valoresBool
    (120) and -> valoresBool . AND eq
    (122) and -> valoresBool . AND valoresBool
    (126) eq -> valoresBool . EQEQ parenBool
    (127) eq -> valoresBool . DISTINTO parenBool
    (130) eq -> valoresBool . EQEQ valoresBool
    (131) eq -> valoresBool . DISTINTO valoresBool

    :               shift and go to state 249
    ?               shift and go to state 137
    OR              shift and go to state 136
    AND             shift and go to state 133
    EQEQ            shift and go to state 135
    DISTINTO        shift and go to state 134


state 228

    (109) expBool -> or ? expBool . : expBool

    :               shift and go to state 250


state 229

    (114) or -> or OR and .
    (119) and -> and . AND eq
    (121) and -> and . AND valoresBool

    ?               reduce using rule 114 (or -> or OR and .)
    OR              reduce using rule 114 (or -> or OR and .)
    ;               reduce using rule 114 (or -> or OR and .)
    )               reduce using rule 114 (or -> or OR and .)
    :               reduce using rule 114 (or -> or OR and .)
    ,               reduce using rule 114 (or -> or OR and .)
    ]               reduce using rule 114 (or -> or OR and .)
    }               reduce using rule 114 (or -> or OR and .)
    AND             shift and go to state 124


state 230

    (116) or -> or OR valoresBool .
    (120) and -> valoresBool . AND eq
    (122) and -> valoresBool . AND valoresBool
    (126) eq -> valoresBool . EQEQ parenBool
    (127) eq -> valoresBool . DISTINTO parenBool
    (130) eq -> valoresBool . EQEQ valoresBool
    (131) eq -> valoresBool . DISTINTO valoresBool

    ?               reduce using rule 116 (or -> or OR valoresBool .)
    OR              reduce using rule 116 (or -> or OR valoresBool .)
    ;               reduce using rule 116 (or -> or OR valoresBool .)
    )               reduce using rule 116 (or -> or OR valoresBool .)
    :               reduce using rule 116 (or -> or OR valoresBool .)
    ,               reduce using rule 116 (or -> or OR valoresBool .)
    ]               reduce using rule 116 (or -> or OR valoresBool .)
    }               reduce using rule 116 (or -> or OR valoresBool .)
    AND             shift and go to state 133
    EQEQ            shift and go to state 135
    DISTINTO        shift and go to state 134


state 231

    (10) loop -> WHILE ( expBool ) bloque .

    RETURN          reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    MENOSMENOS      reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    MASMAS          reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    ID              reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    IF              reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    WHILE           reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    DO              reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    FOR             reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    PRINT           reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    MULTIESCALAR    reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    LENGTH          reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    CAPITALIZAR     reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    COLINEALES      reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    }               reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    $end            reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)


state 232

    (46) valoresCampos -> BEGIN .

    )               reduce using rule 46 (valoresCampos -> BEGIN .)
    ;               reduce using rule 46 (valoresCampos -> BEGIN .)
    }               reduce using rule 46 (valoresCampos -> BEGIN .)
    ,               reduce using rule 46 (valoresCampos -> BEGIN .)
    ]               reduce using rule 46 (valoresCampos -> BEGIN .)


state 233

    (45) valoresCampos -> END .

    )               reduce using rule 45 (valoresCampos -> END .)
    ;               reduce using rule 45 (valoresCampos -> END .)
    }               reduce using rule 45 (valoresCampos -> END .)
    ,               reduce using rule 45 (valoresCampos -> END .)
    ]               reduce using rule 45 (valoresCampos -> END .)


state 234

    (44) valoresCampos -> ID .

    )               reduce using rule 44 (valoresCampos -> ID .)
    ;               reduce using rule 44 (valoresCampos -> ID .)
    }               reduce using rule 44 (valoresCampos -> ID .)
    ,               reduce using rule 44 (valoresCampos -> ID .)
    ]               reduce using rule 44 (valoresCampos -> ID .)


state 235

    (42) valores -> ID . valoresCampos .

    ,               reduce using rule 42 (valores -> ID . valoresCampos .)
    )               reduce using rule 42 (valores -> ID . valoresCampos .)
    }               reduce using rule 42 (valores -> ID . valoresCampos .)
    ;               reduce using rule 42 (valores -> ID . valoresCampos .)
    ]               reduce using rule 42 (valores -> ID . valoresCampos .)


state 236

    (52) reg -> { campos } .

    ,               reduce using rule 52 (reg -> { campos } .)
    ]               reduce using rule 52 (reg -> { campos } .)
    )               reduce using rule 52 (reg -> { campos } .)
    ;               reduce using rule 52 (reg -> { campos } .)
    }               reduce using rule 52 (reg -> { campos } .)


state 237

    (53) campos -> ID : . valores , campos
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . reg
    (37) valores -> . INT
    (38) valores -> . STRING
    (39) valores -> . BOOL
    (40) valores -> . varYVals
    (41) valores -> . varsOps
    (42) valores -> . ID . valoresCampos
    (43) valores -> . RES
    (72) eMat -> . eMat + p
    (73) eMat -> . eMat - p
    (74) eMat -> . valoresMat + p
    (75) eMat -> . valoresMat - p
    (76) eMat -> . eMat + valoresMat
    (77) eMat -> . eMat - valoresMat
    (78) eMat -> . valoresMat + valoresMat
    (79) eMat -> . valoresMat - valoresMat
    (80) eMat -> . p
    (109) expBool -> . or ? expBool : expBool
    (110) expBool -> . valoresBool ? expBool : expBool
    (111) expBool -> . or ? valoresBool : valoresBool
    (112) expBool -> . valoresBool ? valoresBool : valoresBool
    (113) expBool -> . or
    (52) reg -> . { campos }
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (81) p -> . p * exp
    (82) p -> . p / exp
    (83) p -> . p % exp
    (84) p -> . valoresMat * exp
    (85) p -> . valoresMat / exp
    (86) p -> . valoresMat % exp
    (87) p -> . p * valoresMat
    (88) p -> . p / valoresMat
    (89) p -> . p % valoresMat
    (90) p -> . valoresMat * valoresMat
    (91) p -> . valoresMat / valoresMat
    (92) p -> . valoresMat % valoresMat
    (93) p -> . exp
    (114) or -> . or OR and
    (115) or -> . valoresBool OR and
    (116) or -> . or OR valoresBool
    (117) or -> . valoresBool OR valoresBool
    (118) or -> . and
    (105) valoresBool -> . BOOL
    (106) valoresBool -> . funcBool
    (107) valoresBool -> . varYVals
    (108) valoresBool -> . varsOps
    (49) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (119) and -> . and AND eq
    (120) and -> . valoresBool AND eq
    (121) and -> . and AND valoresBool
    (122) and -> . valoresBool AND valoresBool
    (123) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (124) eq -> . eq EQEQ parenBool
    (125) eq -> . eq DISTINTO parenBool
    (126) eq -> . valoresBool EQEQ parenBool
    (127) eq -> . valoresBool DISTINTO parenBool
    (128) eq -> . eq EQEQ valoresBool
    (129) eq -> . eq DISTINTO valoresBool
    (130) eq -> . valoresBool EQEQ valoresBool
    (131) eq -> . valoresBool DISTINTO valoresBool
    (132) eq -> . mayor
    (104) paren -> . ( eMat )
    (136) mayor -> . tCompare > tCompare
    (137) mayor -> . menor
    (133) tCompare -> . eMat
    (134) tCompare -> . varsOps
    (135) tCompare -> . varYVals
    (138) menor -> . tCompare < tCompare
    (139) menor -> . not
    (140) not -> . NOT not
    (141) not -> . NOT valoresBool
    (142) not -> . parenBool
    (143) parenBool -> . ( expBool )

    INT             shift and go to state 96
    STRING          shift and go to state 94
    BOOL            shift and go to state 98
    ID              shift and go to state 95
    RES             shift and go to state 90
    {               shift and go to state 100
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    FLOAT           shift and go to state 79
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 73
    +               shift and go to state 72
    (               shift and go to state 92
    NOT             shift and go to state 86

    and                            shift and go to state 62
    funcBool                       shift and go to state 63
    funcInt                        shift and go to state 64
    menor                          shift and go to state 80
    mayor                          shift and go to state 65
    valoresMat                     shift and go to state 66
    eq                             shift and go to state 67
    valoresBool                    shift and go to state 68
    eMat                           shift and go to state 91
    vecVal                         shift and go to state 9
    paren                          shift and go to state 76
    reg                            shift and go to state 93
    varsOps                        shift and go to state 99
    exp                            shift and go to state 84
    tCompare                       shift and go to state 75
    not                            shift and go to state 77
    valores                        shift and go to state 251
    parenBool                      shift and go to state 85
    p                              shift and go to state 81
    iSing                          shift and go to state 74
    varYVals                       shift and go to state 101
    or                             shift and go to state 88
    expBool                        shift and go to state 102

state 238

    (26) funcBool -> COLINEALES ( vec , vec . )

    )               shift and go to state 252


state 239

    (32) elem -> valores , . elem
    (32) elem -> . valores , elem
    (33) elem -> . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . reg
    (37) valores -> . INT
    (38) valores -> . STRING
    (39) valores -> . BOOL
    (40) valores -> . varYVals
    (41) valores -> . varsOps
    (42) valores -> . ID . valoresCampos
    (43) valores -> . RES
    (72) eMat -> . eMat + p
    (73) eMat -> . eMat - p
    (74) eMat -> . valoresMat + p
    (75) eMat -> . valoresMat - p
    (76) eMat -> . eMat + valoresMat
    (77) eMat -> . eMat - valoresMat
    (78) eMat -> . valoresMat + valoresMat
    (79) eMat -> . valoresMat - valoresMat
    (80) eMat -> . p
    (109) expBool -> . or ? expBool : expBool
    (110) expBool -> . valoresBool ? expBool : expBool
    (111) expBool -> . or ? valoresBool : valoresBool
    (112) expBool -> . valoresBool ? valoresBool : valoresBool
    (113) expBool -> . or
    (52) reg -> . { campos }
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (81) p -> . p * exp
    (82) p -> . p / exp
    (83) p -> . p % exp
    (84) p -> . valoresMat * exp
    (85) p -> . valoresMat / exp
    (86) p -> . valoresMat % exp
    (87) p -> . p * valoresMat
    (88) p -> . p / valoresMat
    (89) p -> . p % valoresMat
    (90) p -> . valoresMat * valoresMat
    (91) p -> . valoresMat / valoresMat
    (92) p -> . valoresMat % valoresMat
    (93) p -> . exp
    (114) or -> . or OR and
    (115) or -> . valoresBool OR and
    (116) or -> . or OR valoresBool
    (117) or -> . valoresBool OR valoresBool
    (118) or -> . and
    (105) valoresBool -> . BOOL
    (106) valoresBool -> . funcBool
    (107) valoresBool -> . varYVals
    (108) valoresBool -> . varsOps
    (49) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (119) and -> . and AND eq
    (120) and -> . valoresBool AND eq
    (121) and -> . and AND valoresBool
    (122) and -> . valoresBool AND valoresBool
    (123) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (124) eq -> . eq EQEQ parenBool
    (125) eq -> . eq DISTINTO parenBool
    (126) eq -> . valoresBool EQEQ parenBool
    (127) eq -> . valoresBool DISTINTO parenBool
    (128) eq -> . eq EQEQ valoresBool
    (129) eq -> . eq DISTINTO valoresBool
    (130) eq -> . valoresBool EQEQ valoresBool
    (131) eq -> . valoresBool DISTINTO valoresBool
    (132) eq -> . mayor
    (104) paren -> . ( eMat )
    (136) mayor -> . tCompare > tCompare
    (137) mayor -> . menor
    (133) tCompare -> . eMat
    (134) tCompare -> . varsOps
    (135) tCompare -> . varYVals
    (138) menor -> . tCompare < tCompare
    (139) menor -> . not
    (140) not -> . NOT not
    (141) not -> . NOT valoresBool
    (142) not -> . parenBool
    (143) parenBool -> . ( expBool )

    INT             shift and go to state 96
    STRING          shift and go to state 94
    BOOL            shift and go to state 98
    ID              shift and go to state 95
    RES             shift and go to state 90
    {               shift and go to state 100
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    FLOAT           shift and go to state 79
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 73
    +               shift and go to state 72
    (               shift and go to state 92
    NOT             shift and go to state 86

    and                            shift and go to state 62
    funcBool                       shift and go to state 63
    funcInt                        shift and go to state 64
    elem                           shift and go to state 253
    menor                          shift and go to state 80
    mayor                          shift and go to state 65
    valoresMat                     shift and go to state 66
    eq                             shift and go to state 67
    valoresBool                    shift and go to state 68
    eMat                           shift and go to state 91
    vecVal                         shift and go to state 9
    paren                          shift and go to state 76
    reg                            shift and go to state 93
    varsOps                        shift and go to state 99
    exp                            shift and go to state 84
    tCompare                       shift and go to state 75
    not                            shift and go to state 77
    valores                        shift and go to state 170
    parenBool                      shift and go to state 85
    p                              shift and go to state 81
    iSing                          shift and go to state 74
    varYVals                       shift and go to state 101
    or                             shift and go to state 88
    expBool                        shift and go to state 102

state 240

    (31) vec -> [ elem ] .

    )               reduce using rule 31 (vec -> [ elem ] .)
    ,               reduce using rule 31 (vec -> [ elem ] .)


state 241

    (12) loop -> FOR ( varAsig ; expBool . ; varsOps ) bloque

    ;               shift and go to state 254


state 242

    (65) varAsig -> ID . ID = valores .

    ;               reduce using rule 65 (varAsig -> ID . ID = valores .)


state 243

    (51) m -> [ INT ] m .

    MASMAS          reduce using rule 51 (m -> [ INT ] m .)
    MENOSMENOS      reduce using rule 51 (m -> [ INT ] m .)
    )               reduce using rule 51 (m -> [ INT ] m .)
    +               reduce using rule 51 (m -> [ INT ] m .)
    -               reduce using rule 51 (m -> [ INT ] m .)
    *               reduce using rule 51 (m -> [ INT ] m .)
    /               reduce using rule 51 (m -> [ INT ] m .)
    %               reduce using rule 51 (m -> [ INT ] m .)
    ^               reduce using rule 51 (m -> [ INT ] m .)
    ?               reduce using rule 51 (m -> [ INT ] m .)
    OR              reduce using rule 51 (m -> [ INT ] m .)
    AND             reduce using rule 51 (m -> [ INT ] m .)
    EQEQ            reduce using rule 51 (m -> [ INT ] m .)
    DISTINTO        reduce using rule 51 (m -> [ INT ] m .)
    >               reduce using rule 51 (m -> [ INT ] m .)
    <               reduce using rule 51 (m -> [ INT ] m .)
    ;               reduce using rule 51 (m -> [ INT ] m .)
    ,               reduce using rule 51 (m -> [ INT ] m .)
    ]               reduce using rule 51 (m -> [ INT ] m .)
    }               reduce using rule 51 (m -> [ INT ] m .)
    :               reduce using rule 51 (m -> [ INT ] m .)


state 244

    (13) if -> IF ( expBool ) bloque . else
    (14) else -> . ELSE bloque
    (15) else -> . empty
    (30) empty -> .

    ELSE            shift and go to state 257
    RETURN          reduce using rule 30 (empty -> .)
    MENOSMENOS      reduce using rule 30 (empty -> .)
    MASMAS          reduce using rule 30 (empty -> .)
    ID              reduce using rule 30 (empty -> .)
    IF              reduce using rule 30 (empty -> .)
    WHILE           reduce using rule 30 (empty -> .)
    DO              reduce using rule 30 (empty -> .)
    FOR             reduce using rule 30 (empty -> .)
    PRINT           reduce using rule 30 (empty -> .)
    MULTIESCALAR    reduce using rule 30 (empty -> .)
    LENGTH          reduce using rule 30 (empty -> .)
    CAPITALIZAR     reduce using rule 30 (empty -> .)
    COLINEALES      reduce using rule 30 (empty -> .)
    $end            reduce using rule 30 (empty -> .)
    }               reduce using rule 30 (empty -> .)

    empty                          shift and go to state 256
    else                           shift and go to state 255

state 245

    (23) funcInt -> MULTIESCALAR ( vec , eMat . , param )
    (72) eMat -> eMat . + p
    (73) eMat -> eMat . - p
    (76) eMat -> eMat . + valoresMat
    (77) eMat -> eMat . - valoresMat

    ,               shift and go to state 258
    +               shift and go to state 138
    -               shift and go to state 139


state 246

    (11) loop -> DO bloque WHILE ( expBool ) . ;

    ;               shift and go to state 259


state 247

    (112) expBool -> valoresBool ? valoresBool : . valoresBool
    (105) valoresBool -> . BOOL
    (106) valoresBool -> . funcBool
    (107) valoresBool -> . varYVals
    (108) valoresBool -> . varsOps
    (26) funcBool -> . COLINEALES ( vec , vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (49) vecVal -> . ID m

    BOOL            shift and go to state 82
    COLINEALES      shift and go to state 13
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26

    funcBool                       shift and go to state 63
    valoresBool                    shift and go to state 260
    varYVals                       shift and go to state 157
    vecVal                         shift and go to state 9
    varsOps                        shift and go to state 156

state 248

    (110) expBool -> valoresBool ? expBool : . expBool
    (109) expBool -> . or ? expBool : expBool
    (110) expBool -> . valoresBool ? expBool : expBool
    (111) expBool -> . or ? valoresBool : valoresBool
    (112) expBool -> . valoresBool ? valoresBool : valoresBool
    (113) expBool -> . or
    (114) or -> . or OR and
    (115) or -> . valoresBool OR and
    (116) or -> . or OR valoresBool
    (117) or -> . valoresBool OR valoresBool
    (118) or -> . and
    (105) valoresBool -> . BOOL
    (106) valoresBool -> . funcBool
    (107) valoresBool -> . varYVals
    (108) valoresBool -> . varsOps
    (119) and -> . and AND eq
    (120) and -> . valoresBool AND eq
    (121) and -> . and AND valoresBool
    (122) and -> . valoresBool AND valoresBool
    (123) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (124) eq -> . eq EQEQ parenBool
    (125) eq -> . eq DISTINTO parenBool
    (126) eq -> . valoresBool EQEQ parenBool
    (127) eq -> . valoresBool DISTINTO parenBool
    (128) eq -> . eq EQEQ valoresBool
    (129) eq -> . eq DISTINTO valoresBool
    (130) eq -> . valoresBool EQEQ valoresBool
    (131) eq -> . valoresBool DISTINTO valoresBool
    (132) eq -> . mayor
    (49) vecVal -> . ID m
    (136) mayor -> . tCompare > tCompare
    (137) mayor -> . menor
    (133) tCompare -> . eMat
    (134) tCompare -> . varsOps
    (135) tCompare -> . varYVals
    (138) menor -> . tCompare < tCompare
    (139) menor -> . not
    (72) eMat -> . eMat + p
    (73) eMat -> . eMat - p
    (74) eMat -> . valoresMat + p
    (75) eMat -> . valoresMat - p
    (76) eMat -> . eMat + valoresMat
    (77) eMat -> . eMat - valoresMat
    (78) eMat -> . valoresMat + valoresMat
    (79) eMat -> . valoresMat - valoresMat
    (80) eMat -> . p
    (140) not -> . NOT not
    (141) not -> . NOT valoresBool
    (142) not -> . parenBool
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (81) p -> . p * exp
    (82) p -> . p / exp
    (83) p -> . p % exp
    (84) p -> . valoresMat * exp
    (85) p -> . valoresMat / exp
    (86) p -> . valoresMat % exp
    (87) p -> . p * valoresMat
    (88) p -> . p / valoresMat
    (89) p -> . p % valoresMat
    (90) p -> . valoresMat * valoresMat
    (91) p -> . valoresMat / valoresMat
    (92) p -> . valoresMat % valoresMat
    (93) p -> . exp
    (143) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (104) paren -> . ( eMat )

    BOOL            shift and go to state 82
    COLINEALES      shift and go to state 13
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 86
    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 69
    (               shift and go to state 71
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 73
    +               shift and go to state 72

    and                            shift and go to state 62
    funcBool                       shift and go to state 63
    funcInt                        shift and go to state 64
    menor                          shift and go to state 80
    valoresMat                     shift and go to state 66
    eq                             shift and go to state 67
    vecVal                         shift and go to state 9
    valoresBool                    shift and go to state 68
    eMat                           shift and go to state 70
    mayor                          shift and go to state 65
    paren                          shift and go to state 76
    iSing                          shift and go to state 74
    tCompare                       shift and go to state 75
    not                            shift and go to state 77
    parenBool                      shift and go to state 85
    p                              shift and go to state 81
    varsOps                        shift and go to state 83
    exp                            shift and go to state 84
    varYVals                       shift and go to state 87
    or                             shift and go to state 88
    expBool                        shift and go to state 261

state 249

    (111) expBool -> or ? valoresBool : . valoresBool
    (105) valoresBool -> . BOOL
    (106) valoresBool -> . funcBool
    (107) valoresBool -> . varYVals
    (108) valoresBool -> . varsOps
    (26) funcBool -> . COLINEALES ( vec , vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (49) vecVal -> . ID m

    BOOL            shift and go to state 82
    COLINEALES      shift and go to state 13
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26

    funcBool                       shift and go to state 63
    valoresBool                    shift and go to state 262
    vecVal                         shift and go to state 9
    varYVals                       shift and go to state 157
    varsOps                        shift and go to state 156

state 250

    (109) expBool -> or ? expBool : . expBool
    (109) expBool -> . or ? expBool : expBool
    (110) expBool -> . valoresBool ? expBool : expBool
    (111) expBool -> . or ? valoresBool : valoresBool
    (112) expBool -> . valoresBool ? valoresBool : valoresBool
    (113) expBool -> . or
    (114) or -> . or OR and
    (115) or -> . valoresBool OR and
    (116) or -> . or OR valoresBool
    (117) or -> . valoresBool OR valoresBool
    (118) or -> . and
    (105) valoresBool -> . BOOL
    (106) valoresBool -> . funcBool
    (107) valoresBool -> . varYVals
    (108) valoresBool -> . varsOps
    (119) and -> . and AND eq
    (120) and -> . valoresBool AND eq
    (121) and -> . and AND valoresBool
    (122) and -> . valoresBool AND valoresBool
    (123) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (124) eq -> . eq EQEQ parenBool
    (125) eq -> . eq DISTINTO parenBool
    (126) eq -> . valoresBool EQEQ parenBool
    (127) eq -> . valoresBool DISTINTO parenBool
    (128) eq -> . eq EQEQ valoresBool
    (129) eq -> . eq DISTINTO valoresBool
    (130) eq -> . valoresBool EQEQ valoresBool
    (131) eq -> . valoresBool DISTINTO valoresBool
    (132) eq -> . mayor
    (49) vecVal -> . ID m
    (136) mayor -> . tCompare > tCompare
    (137) mayor -> . menor
    (133) tCompare -> . eMat
    (134) tCompare -> . varsOps
    (135) tCompare -> . varYVals
    (138) menor -> . tCompare < tCompare
    (139) menor -> . not
    (72) eMat -> . eMat + p
    (73) eMat -> . eMat - p
    (74) eMat -> . valoresMat + p
    (75) eMat -> . valoresMat - p
    (76) eMat -> . eMat + valoresMat
    (77) eMat -> . eMat - valoresMat
    (78) eMat -> . valoresMat + valoresMat
    (79) eMat -> . valoresMat - valoresMat
    (80) eMat -> . p
    (140) not -> . NOT not
    (141) not -> . NOT valoresBool
    (142) not -> . parenBool
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (81) p -> . p * exp
    (82) p -> . p / exp
    (83) p -> . p % exp
    (84) p -> . valoresMat * exp
    (85) p -> . valoresMat / exp
    (86) p -> . valoresMat % exp
    (87) p -> . p * valoresMat
    (88) p -> . p / valoresMat
    (89) p -> . p % valoresMat
    (90) p -> . valoresMat * valoresMat
    (91) p -> . valoresMat / valoresMat
    (92) p -> . valoresMat % valoresMat
    (93) p -> . exp
    (143) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (104) paren -> . ( eMat )

    BOOL            shift and go to state 82
    COLINEALES      shift and go to state 13
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 86
    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 69
    (               shift and go to state 71
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 73
    +               shift and go to state 72

    and                            shift and go to state 62
    funcBool                       shift and go to state 63
    funcInt                        shift and go to state 64
    menor                          shift and go to state 80
    valoresMat                     shift and go to state 66
    eq                             shift and go to state 67
    valoresBool                    shift and go to state 68
    eMat                           shift and go to state 70
    vecVal                         shift and go to state 9
    paren                          shift and go to state 76
    iSing                          shift and go to state 74
    tCompare                       shift and go to state 75
    not                            shift and go to state 77
    varYVals                       shift and go to state 87
    or                             shift and go to state 88
    p                              shift and go to state 81
    varsOps                        shift and go to state 83
    exp                            shift and go to state 84
    mayor                          shift and go to state 65
    parenBool                      shift and go to state 85
    expBool                        shift and go to state 263

state 251

    (53) campos -> ID : valores . , campos

    ,               shift and go to state 264


state 252

    (26) funcBool -> COLINEALES ( vec , vec ) .

    AND             reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    EQEQ            reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    DISTINTO        reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    ?               reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    OR              reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    )               reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    ;               reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    }               reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    ,               reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    ]               reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    :               reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)


state 253

    (32) elem -> valores , elem .

    ]               reduce using rule 32 (elem -> valores , elem .)


state 254

    (12) loop -> FOR ( varAsig ; expBool ; . varsOps ) bloque
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (49) vecVal -> . ID m

    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    ID              shift and go to state 54

    varsOps                        shift and go to state 265
    varYVals                       shift and go to state 28
    vecVal                         shift and go to state 9

state 255

    (13) if -> IF ( expBool ) bloque else .

    RETURN          reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    MENOSMENOS      reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    MASMAS          reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    ID              reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    IF              reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    WHILE           reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    DO              reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    FOR             reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    PRINT           reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    MULTIESCALAR    reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    LENGTH          reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    CAPITALIZAR     reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    COLINEALES      reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    }               reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    $end            reduce using rule 13 (if -> IF ( expBool ) bloque else .)


state 256

    (15) else -> empty .

    RETURN          reduce using rule 15 (else -> empty .)
    MENOSMENOS      reduce using rule 15 (else -> empty .)
    MASMAS          reduce using rule 15 (else -> empty .)
    ID              reduce using rule 15 (else -> empty .)
    IF              reduce using rule 15 (else -> empty .)
    WHILE           reduce using rule 15 (else -> empty .)
    DO              reduce using rule 15 (else -> empty .)
    FOR             reduce using rule 15 (else -> empty .)
    PRINT           reduce using rule 15 (else -> empty .)
    MULTIESCALAR    reduce using rule 15 (else -> empty .)
    LENGTH          reduce using rule 15 (else -> empty .)
    CAPITALIZAR     reduce using rule 15 (else -> empty .)
    COLINEALES      reduce using rule 15 (else -> empty .)
    $end            reduce using rule 15 (else -> empty .)
    }               reduce using rule 15 (else -> empty .)


state 257

    (14) else -> ELSE . bloque
    (16) bloque -> . sentencia ;
    (17) bloque -> . { g }
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (60) varAsig -> . ID MULEQ valoresAsig
    (61) varAsig -> . ID DIVEQ valoresAsig
    (62) varAsig -> . ID MASEQ valoresAsig
    (63) varAsig -> . ID MENOSEQ valoresAsig
    (64) varAsig -> . ID = valoresAsig
    (65) varAsig -> . ID . ID = valores
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (49) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( eMat )
    (26) funcBool -> . COLINEALES ( vec , vec )

    {               shift and go to state 32
    RETURN          shift and go to state 2
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    ID              shift and go to state 16
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    CAPITALIZAR     shift and go to state 23
    COLINEALES      shift and go to state 13

    varAsig                        shift and go to state 18
    sentencia                      shift and go to state 31
    funcInt                        shift and go to state 5
    funcString                     shift and go to state 20
    funcVoid                       shift and go to state 12
    funcReturn                     shift and go to state 22
    funcBool                       shift and go to state 3
    varsOps                        shift and go to state 27
    func                           shift and go to state 15
    bloque                         shift and go to state 266
    varYVals                       shift and go to state 28
    vecVal                         shift and go to state 9

state 258

    (23) funcInt -> MULTIESCALAR ( vec , eMat , . param )
    (28) param -> . expBool
    (29) param -> . empty
    (109) expBool -> . or ? expBool : expBool
    (110) expBool -> . valoresBool ? expBool : expBool
    (111) expBool -> . or ? valoresBool : valoresBool
    (112) expBool -> . valoresBool ? valoresBool : valoresBool
    (113) expBool -> . or
    (30) empty -> .
    (114) or -> . or OR and
    (115) or -> . valoresBool OR and
    (116) or -> . or OR valoresBool
    (117) or -> . valoresBool OR valoresBool
    (118) or -> . and
    (105) valoresBool -> . BOOL
    (106) valoresBool -> . funcBool
    (107) valoresBool -> . varYVals
    (108) valoresBool -> . varsOps
    (119) and -> . and AND eq
    (120) and -> . valoresBool AND eq
    (121) and -> . and AND valoresBool
    (122) and -> . valoresBool AND valoresBool
    (123) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (124) eq -> . eq EQEQ parenBool
    (125) eq -> . eq DISTINTO parenBool
    (126) eq -> . valoresBool EQEQ parenBool
    (127) eq -> . valoresBool DISTINTO parenBool
    (128) eq -> . eq EQEQ valoresBool
    (129) eq -> . eq DISTINTO valoresBool
    (130) eq -> . valoresBool EQEQ valoresBool
    (131) eq -> . valoresBool DISTINTO valoresBool
    (132) eq -> . mayor
    (49) vecVal -> . ID m
    (136) mayor -> . tCompare > tCompare
    (137) mayor -> . menor
    (133) tCompare -> . eMat
    (134) tCompare -> . varsOps
    (135) tCompare -> . varYVals
    (138) menor -> . tCompare < tCompare
    (139) menor -> . not
    (72) eMat -> . eMat + p
    (73) eMat -> . eMat - p
    (74) eMat -> . valoresMat + p
    (75) eMat -> . valoresMat - p
    (76) eMat -> . eMat + valoresMat
    (77) eMat -> . eMat - valoresMat
    (78) eMat -> . valoresMat + valoresMat
    (79) eMat -> . valoresMat - valoresMat
    (80) eMat -> . p
    (140) not -> . NOT not
    (141) not -> . NOT valoresBool
    (142) not -> . parenBool
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (81) p -> . p * exp
    (82) p -> . p / exp
    (83) p -> . p % exp
    (84) p -> . valoresMat * exp
    (85) p -> . valoresMat / exp
    (86) p -> . valoresMat % exp
    (87) p -> . p * valoresMat
    (88) p -> . p / valoresMat
    (89) p -> . p % valoresMat
    (90) p -> . valoresMat * valoresMat
    (91) p -> . valoresMat / valoresMat
    (92) p -> . valoresMat % valoresMat
    (93) p -> . exp
    (143) parenBool -> . ( expBool )
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (104) paren -> . ( eMat )

    )               reduce using rule 30 (empty -> .)
    BOOL            shift and go to state 82
    COLINEALES      shift and go to state 13
    ID              shift and go to state 54
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    NOT             shift and go to state 86
    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 69
    (               shift and go to state 71
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    -               shift and go to state 73
    +               shift and go to state 72

    and                            shift and go to state 62
    funcBool                       shift and go to state 63
    funcInt                        shift and go to state 64
    menor                          shift and go to state 80
    valoresMat                     shift and go to state 66
    vecVal                         shift and go to state 9
    eq                             shift and go to state 67
    mayor                          shift and go to state 65
    eMat                           shift and go to state 70
    param                          shift and go to state 267
    valoresBool                    shift and go to state 68
    paren                          shift and go to state 76
    empty                          shift and go to state 268
    iSing                          shift and go to state 74
    tCompare                       shift and go to state 75
    not                            shift and go to state 77
    or                             shift and go to state 88
    p                              shift and go to state 81
    varsOps                        shift and go to state 83
    exp                            shift and go to state 84
    varYVals                       shift and go to state 87
    parenBool                      shift and go to state 85
    expBool                        shift and go to state 269

state 259

    (11) loop -> DO bloque WHILE ( expBool ) ; .

    RETURN          reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    MENOSMENOS      reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    MASMAS          reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    ID              reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    IF              reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    WHILE           reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    DO              reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    FOR             reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    PRINT           reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    MULTIESCALAR    reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    LENGTH          reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    CAPITALIZAR     reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    COLINEALES      reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    }               reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    $end            reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)


state 260

    (112) expBool -> valoresBool ? valoresBool : valoresBool .

    ;               reduce using rule 112 (expBool -> valoresBool ? valoresBool : valoresBool .)
    )               reduce using rule 112 (expBool -> valoresBool ? valoresBool : valoresBool .)
    }               reduce using rule 112 (expBool -> valoresBool ? valoresBool : valoresBool .)
    ,               reduce using rule 112 (expBool -> valoresBool ? valoresBool : valoresBool .)
    ]               reduce using rule 112 (expBool -> valoresBool ? valoresBool : valoresBool .)
    :               reduce using rule 112 (expBool -> valoresBool ? valoresBool : valoresBool .)


state 261

    (110) expBool -> valoresBool ? expBool : expBool .

    ;               reduce using rule 110 (expBool -> valoresBool ? expBool : expBool .)
    )               reduce using rule 110 (expBool -> valoresBool ? expBool : expBool .)
    }               reduce using rule 110 (expBool -> valoresBool ? expBool : expBool .)
    ,               reduce using rule 110 (expBool -> valoresBool ? expBool : expBool .)
    ]               reduce using rule 110 (expBool -> valoresBool ? expBool : expBool .)
    :               reduce using rule 110 (expBool -> valoresBool ? expBool : expBool .)


state 262

    (111) expBool -> or ? valoresBool : valoresBool .

    ;               reduce using rule 111 (expBool -> or ? valoresBool : valoresBool .)
    )               reduce using rule 111 (expBool -> or ? valoresBool : valoresBool .)
    }               reduce using rule 111 (expBool -> or ? valoresBool : valoresBool .)
    ,               reduce using rule 111 (expBool -> or ? valoresBool : valoresBool .)
    ]               reduce using rule 111 (expBool -> or ? valoresBool : valoresBool .)
    :               reduce using rule 111 (expBool -> or ? valoresBool : valoresBool .)


state 263

    (109) expBool -> or ? expBool : expBool .

    ;               reduce using rule 109 (expBool -> or ? expBool : expBool .)
    )               reduce using rule 109 (expBool -> or ? expBool : expBool .)
    }               reduce using rule 109 (expBool -> or ? expBool : expBool .)
    ,               reduce using rule 109 (expBool -> or ? expBool : expBool .)
    ]               reduce using rule 109 (expBool -> or ? expBool : expBool .)
    :               reduce using rule 109 (expBool -> or ? expBool : expBool .)


state 264

    (53) campos -> ID : valores , . campos
    (53) campos -> . ID : valores , campos
    (54) campos -> . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . reg
    (37) valores -> . INT
    (38) valores -> . STRING
    (39) valores -> . BOOL
    (40) valores -> . varYVals
    (41) valores -> . varsOps
    (42) valores -> . ID . valoresCampos
    (43) valores -> . RES
    (72) eMat -> . eMat + p
    (73) eMat -> . eMat - p
    (74) eMat -> . valoresMat + p
    (75) eMat -> . valoresMat - p
    (76) eMat -> . eMat + valoresMat
    (77) eMat -> . eMat - valoresMat
    (78) eMat -> . valoresMat + valoresMat
    (79) eMat -> . valoresMat - valoresMat
    (80) eMat -> . p
    (109) expBool -> . or ? expBool : expBool
    (110) expBool -> . valoresBool ? expBool : expBool
    (111) expBool -> . or ? valoresBool : valoresBool
    (112) expBool -> . valoresBool ? valoresBool : valoresBool
    (113) expBool -> . or
    (52) reg -> . { campos }
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (66) valoresMat -> . INT
    (67) valoresMat -> . FLOAT
    (68) valoresMat -> . funcInt
    (69) valoresMat -> . varYVals
    (70) valoresMat -> . varsOps
    (71) valoresMat -> . STRING
    (81) p -> . p * exp
    (82) p -> . p / exp
    (83) p -> . p % exp
    (84) p -> . valoresMat * exp
    (85) p -> . valoresMat / exp
    (86) p -> . valoresMat % exp
    (87) p -> . p * valoresMat
    (88) p -> . p / valoresMat
    (89) p -> . p % valoresMat
    (90) p -> . valoresMat * valoresMat
    (91) p -> . valoresMat / valoresMat
    (92) p -> . valoresMat % valoresMat
    (93) p -> . exp
    (114) or -> . or OR and
    (115) or -> . valoresBool OR and
    (116) or -> . or OR valoresBool
    (117) or -> . valoresBool OR valoresBool
    (118) or -> . and
    (105) valoresBool -> . BOOL
    (106) valoresBool -> . funcBool
    (107) valoresBool -> . varYVals
    (108) valoresBool -> . varsOps
    (49) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (94) exp -> . exp ^ iSing
    (95) exp -> . valoresMat ^ iSing
    (96) exp -> . exp ^ valoresMat
    (97) exp -> . valoresMat ^ valoresMat
    (98) exp -> . iSing
    (119) and -> . and AND eq
    (120) and -> . valoresBool AND eq
    (121) and -> . and AND valoresBool
    (122) and -> . valoresBool AND valoresBool
    (123) and -> . eq
    (26) funcBool -> . COLINEALES ( vec , vec )
    (99) iSing -> . - paren
    (100) iSing -> . + paren
    (101) iSing -> . - valoresMat
    (102) iSing -> . + valoresMat
    (103) iSing -> . paren
    (124) eq -> . eq EQEQ parenBool
    (125) eq -> . eq DISTINTO parenBool
    (126) eq -> . valoresBool EQEQ parenBool
    (127) eq -> . valoresBool DISTINTO parenBool
    (128) eq -> . eq EQEQ valoresBool
    (129) eq -> . eq DISTINTO valoresBool
    (130) eq -> . valoresBool EQEQ valoresBool
    (131) eq -> . valoresBool DISTINTO valoresBool
    (132) eq -> . mayor
    (104) paren -> . ( eMat )
    (136) mayor -> . tCompare > tCompare
    (137) mayor -> . menor
    (133) tCompare -> . eMat
    (134) tCompare -> . varsOps
    (135) tCompare -> . varYVals
    (138) menor -> . tCompare < tCompare
    (139) menor -> . not
    (140) not -> . NOT not
    (141) not -> . NOT valoresBool
    (142) not -> . parenBool
    (143) parenBool -> . ( expBool )

    ID              shift and go to state 167
    INT             shift and go to state 96
    STRING          shift and go to state 94
    BOOL            shift and go to state 98
    RES             shift and go to state 90
    {               shift and go to state 100
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    FLOAT           shift and go to state 79
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    COLINEALES      shift and go to state 13
    -               shift and go to state 73
    +               shift and go to state 72
    (               shift and go to state 92
    NOT             shift and go to state 86

    and                            shift and go to state 62
    funcBool                       shift and go to state 63
    funcInt                        shift and go to state 64
    menor                          shift and go to state 80
    mayor                          shift and go to state 65
    valoresMat                     shift and go to state 66
    eq                             shift and go to state 67
    valoresBool                    shift and go to state 68
    eMat                           shift and go to state 91
    vecVal                         shift and go to state 9
    paren                          shift and go to state 76
    reg                            shift and go to state 93
    varsOps                        shift and go to state 99
    exp                            shift and go to state 84
    tCompare                       shift and go to state 75
    campos                         shift and go to state 270
    not                            shift and go to state 77
    valores                        shift and go to state 168
    parenBool                      shift and go to state 85
    p                              shift and go to state 81
    iSing                          shift and go to state 74
    varYVals                       shift and go to state 101
    or                             shift and go to state 88
    expBool                        shift and go to state 102

state 265

    (12) loop -> FOR ( varAsig ; expBool ; varsOps . ) bloque

    )               shift and go to state 271


state 266

    (14) else -> ELSE bloque .

    RETURN          reduce using rule 14 (else -> ELSE bloque .)
    MENOSMENOS      reduce using rule 14 (else -> ELSE bloque .)
    MASMAS          reduce using rule 14 (else -> ELSE bloque .)
    ID              reduce using rule 14 (else -> ELSE bloque .)
    IF              reduce using rule 14 (else -> ELSE bloque .)
    WHILE           reduce using rule 14 (else -> ELSE bloque .)
    DO              reduce using rule 14 (else -> ELSE bloque .)
    FOR             reduce using rule 14 (else -> ELSE bloque .)
    PRINT           reduce using rule 14 (else -> ELSE bloque .)
    MULTIESCALAR    reduce using rule 14 (else -> ELSE bloque .)
    LENGTH          reduce using rule 14 (else -> ELSE bloque .)
    CAPITALIZAR     reduce using rule 14 (else -> ELSE bloque .)
    COLINEALES      reduce using rule 14 (else -> ELSE bloque .)
    $end            reduce using rule 14 (else -> ELSE bloque .)
    }               reduce using rule 14 (else -> ELSE bloque .)


state 267

    (23) funcInt -> MULTIESCALAR ( vec , eMat , param . )

    )               shift and go to state 272


state 268

    (29) param -> empty .

    )               reduce using rule 29 (param -> empty .)


state 269

    (28) param -> expBool .

    )               reduce using rule 28 (param -> expBool .)


state 270

    (53) campos -> ID : valores , campos .

    }               reduce using rule 53 (campos -> ID : valores , campos .)


state 271

    (12) loop -> FOR ( varAsig ; expBool ; varsOps ) . bloque
    (16) bloque -> . sentencia ;
    (17) bloque -> . { g }
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (55) varsOps -> . MENOSMENOS varYVals
    (56) varsOps -> . MASMAS varYVals
    (57) varsOps -> . varYVals MASMAS
    (58) varsOps -> . varYVals MENOSMENOS
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (60) varAsig -> . ID MULEQ valoresAsig
    (61) varAsig -> . ID DIVEQ valoresAsig
    (62) varAsig -> . ID MASEQ valoresAsig
    (63) varAsig -> . ID MENOSEQ valoresAsig
    (64) varAsig -> . ID = valoresAsig
    (65) varAsig -> . ID . ID = valores
    (47) varYVals -> . ID
    (48) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (49) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( eMat )
    (26) funcBool -> . COLINEALES ( vec , vec )

    {               shift and go to state 32
    RETURN          shift and go to state 2
    MENOSMENOS      shift and go to state 29
    MASMAS          shift and go to state 26
    ID              shift and go to state 16
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 21
    LENGTH          shift and go to state 24
    CAPITALIZAR     shift and go to state 23
    COLINEALES      shift and go to state 13

    varAsig                        shift and go to state 18
    sentencia                      shift and go to state 31
    funcInt                        shift and go to state 5
    funcString                     shift and go to state 20
    funcVoid                       shift and go to state 12
    funcReturn                     shift and go to state 22
    funcBool                       shift and go to state 3
    varsOps                        shift and go to state 27
    func                           shift and go to state 15
    bloque                         shift and go to state 273
    varYVals                       shift and go to state 28
    vecVal                         shift and go to state 9

state 272

    (23) funcInt -> MULTIESCALAR ( vec , eMat , param ) .

    +               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    -               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    *               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    /               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    %               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    ^               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    ;               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    >               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    <               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    )               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    }               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    ,               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    ]               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    EQEQ            reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    DISTINTO        reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    AND             reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    ?               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    OR              reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    :               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)


state 273

    (12) loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .

    RETURN          reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    MENOSMENOS      reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    MASMAS          reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    ID              reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    IF              reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    WHILE           reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    DO              reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    FOR             reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    PRINT           reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    MULTIESCALAR    reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    LENGTH          reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    CAPITALIZAR     reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    COLINEALES      reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    }               reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    $end            reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)

