Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> g
Rule 1     g -> linea g
Rule 2     linea -> com
Rule 3     linea -> sentencia
Rule 4     com -> COMMENT
Rule 5     g -> ctrl g
Rule 6     g -> empty
Rule 7     sentencia -> varsOps ;
Rule 8     sentencia -> func ;
Rule 9     sentencia -> varAsig ;
Rule 10    sentencia -> RETURN ;
Rule 11    ctrl -> if
Rule 12    ctrl -> loop
Rule 13    loop -> WHILE ( expBool ) bloque
Rule 14    loop -> DO bloque WHILE ( expBool ) ;
Rule 15    loop -> FOR ( primParam ; cosaBooleana ; tercerParam ) bloque
Rule 16    cosaBooleana -> expBool
Rule 17    cosaBooleana -> valoresBool
Rule 18    primParam -> varAsig
Rule 19    primParam -> empty
Rule 20    tercerParam -> varsOps
Rule 21    tercerParam -> varAsig
Rule 22    tercerParam -> func
Rule 23    tercerParam -> empty
Rule 24    if -> IF ( cosaBooleana ) bloque else
Rule 25    else -> ELSE bloque
Rule 26    else -> empty
Rule 27    bloque -> linea
Rule 28    bloque -> { g }
Rule 29    func -> funcReturn
Rule 30    func -> funcVoid
Rule 31    funcReturn -> funcInt
Rule 32    funcReturn -> funcString
Rule 33    funcReturn -> funcBool
Rule 34    funcInt -> MULTIESCALAR ( vec , eMat , param )
Rule 35    funcInt -> LENGTH ( vec )
Rule 36    funcString -> CAPITALIZAR ( eMat )
Rule 37    funcBool -> COLINEALES ( vec , vec )
Rule 38    funcVoid -> PRINT ( valores )
Rule 39    param -> expBool
Rule 40    param -> empty
Rule 41    empty -> <empty>
Rule 42    vec -> [ elem ]
Rule 43    elem -> valores , elem
Rule 44    elem -> valores
Rule 45    valores -> eMat
Rule 46    valores -> expBool
Rule 47    valores -> reg
Rule 48    valores -> INT
Rule 49    valores -> FLOAT
Rule 50    valores -> STRING
Rule 51    valores -> BOOL
Rule 52    valores -> varYVals
Rule 53    valores -> varsOps
Rule 54    valores -> vec
Rule 55    valores -> ID . valoresCampos
Rule 56    valores -> RES
Rule 57    valoresCampos -> ID
Rule 58    valoresCampos -> END
Rule 59    valoresCampos -> BEGIN
Rule 60    varYVals -> ID
Rule 61    varYVals -> vecVal
Rule 62    vecVal -> ID m
Rule 63    m -> [ INT ]
Rule 64    m -> [ INT ] m
Rule 65    m -> [ varYVals ] m
Rule 66    m -> [ varYVals ]
Rule 67    reg -> { campos }
Rule 68    campos -> ID : valores , campos
Rule 69    campos -> valores
Rule 70    varsOps -> MENOSMENOS varYVals
Rule 71    varsOps -> MASMAS varYVals
Rule 72    varsOps -> varYVals MASMAS
Rule 73    varsOps -> varYVals MENOSMENOS
Rule 74    valoresAsig -> valores
Rule 75    varAsig -> varYVals MULEQ valoresAsig
Rule 76    varAsig -> varYVals DIVEQ valoresAsig
Rule 77    varAsig -> varYVals MASEQ valoresAsig
Rule 78    varAsig -> varYVals MENOSEQ valoresAsig
Rule 79    varAsig -> varYVals = valoresAsig
Rule 80    varAsig -> ID . ID = valoresAsig
Rule 81    valoresMat -> INT
Rule 82    valoresMat -> FLOAT
Rule 83    valoresMat -> funcInt
Rule 84    valoresMat -> varYVals
Rule 85    valoresMat -> varsOps
Rule 86    valoresMat -> STRING
Rule 87    eMat -> eMat + p
Rule 88    eMat -> eMat - p
Rule 89    eMat -> valoresMat + p
Rule 90    eMat -> valoresMat - p
Rule 91    eMat -> eMat + valoresMat
Rule 92    eMat -> eMat - valoresMat
Rule 93    eMat -> valoresMat + valoresMat
Rule 94    eMat -> valoresMat - valoresMat
Rule 95    eMat -> p
Rule 96    p -> p * exp
Rule 97    p -> p / exp
Rule 98    p -> p % exp
Rule 99    p -> valoresMat * exp
Rule 100   p -> valoresMat / exp
Rule 101   p -> valoresMat % exp
Rule 102   p -> p * valoresMat
Rule 103   p -> p / valoresMat
Rule 104   p -> p % valoresMat
Rule 105   p -> valoresMat * valoresMat
Rule 106   p -> valoresMat / valoresMat
Rule 107   p -> valoresMat % valoresMat
Rule 108   p -> exp
Rule 109   exp -> exp ^ iSing
Rule 110   exp -> valoresMat ^ iSing
Rule 111   exp -> exp ^ valoresMat
Rule 112   exp -> valoresMat ^ valoresMat
Rule 113   exp -> iSing
Rule 114   iSing -> - paren
Rule 115   iSing -> + paren
Rule 116   iSing -> - valoresMat
Rule 117   iSing -> + valoresMat
Rule 118   iSing -> paren
Rule 119   paren -> ( eMat )
Rule 120   valoresBool -> BOOL
Rule 121   valoresBool -> funcBool
Rule 122   valoresBool -> varYVals
Rule 123   valoresBool -> varsOps
Rule 124   valoresBool -> eMat
Rule 125   valoresBool -> INT
Rule 126   valoresBool -> FLOAT
Rule 127   expBool -> or ? expBool : expBool
Rule 128   expBool -> or ? expBool : valoresBool
Rule 129   expBool -> or ? valoresBool : expBool
Rule 130   expBool -> or ? valoresBool : valoresBool
Rule 131   expBool -> valoresBool ? expBool : expBool
Rule 132   expBool -> valoresBool ? valoresBool : expBool
Rule 133   expBool -> valoresBool ? expBool : valoresBool
Rule 134   expBool -> valoresBool ? valoresBool : valoresBool
Rule 135   expBool -> or
Rule 136   or -> or OR and
Rule 137   or -> valoresBool OR and
Rule 138   or -> or OR valoresBool
Rule 139   or -> valoresBool OR valoresBool
Rule 140   or -> and
Rule 141   and -> and AND eq
Rule 142   and -> valoresBool AND eq
Rule 143   and -> and AND valoresBool
Rule 144   and -> valoresBool AND valoresBool
Rule 145   and -> eq
Rule 146   eq -> eq EQEQ parenBool
Rule 147   eq -> eq DISTINTO parenBool
Rule 148   eq -> valoresBool EQEQ parenBool
Rule 149   eq -> valoresBool DISTINTO parenBool
Rule 150   eq -> eq EQEQ valoresBool
Rule 151   eq -> eq DISTINTO valoresBool
Rule 152   eq -> valoresBool EQEQ valoresBool
Rule 153   eq -> valoresBool DISTINTO valoresBool
Rule 154   eq -> mayor
Rule 155   tCompare -> eMat
Rule 156   tCompare -> varsOps
Rule 157   tCompare -> varYVals
Rule 158   tCompare -> INT
Rule 159   tCompare -> FLOAT
Rule 160   mayor -> tCompare > tCompare
Rule 161   mayor -> menor
Rule 162   menor -> tCompare < tCompare
Rule 163   menor -> not
Rule 164   not -> NOT not
Rule 165   not -> NOT valoresBool
Rule 166   not -> parenBool
Rule 167   parenBool -> ( expBool )

Terminals, with rules where they appear

%                    : 98 101 104 107
(                    : 13 14 15 24 34 35 36 37 38 119 167
)                    : 13 14 15 24 34 35 36 37 38 119 167
*                    : 96 99 102 105
+                    : 87 89 91 93 115 117
,                    : 34 34 37 43 68
-                    : 88 90 92 94 114 116
.                    : 55 80
/                    : 97 100 103 106
:                    : 68 127 128 129 130 131 132 133 134
;                    : 7 8 9 10 14 15 15
<                    : 162
=                    : 79 80
>                    : 160
?                    : 127 128 129 130 131 132 133 134
AND                  : 141 142 143 144
BEGIN                : 59
BOOL                 : 51 120
CAPITALIZAR          : 36
COLINEALES           : 37
COMMENT              : 4
DISTINTO             : 147 149 151 153
DIVEQ                : 76
DO                   : 14
ELSE                 : 25
END                  : 58
EQEQ                 : 146 148 150 152
FLOAT                : 49 82 126 159
FOR                  : 15
ID                   : 55 57 60 62 68 80 80
IF                   : 24
INT                  : 48 63 64 81 125 158
LENGTH               : 35
MASEQ                : 77
MASMAS               : 71 72
MENOSEQ              : 78
MENOSMENOS           : 70 73
MULEQ                : 75
MULTIESCALAR         : 34
NOT                  : 164 165
OR                   : 136 137 138 139
PRINT                : 38
RES                  : 56
RETURN               : 10
STRING               : 50 86
WHILE                : 13 14
[                    : 42 63 64 65 66
]                    : 42 63 64 65 66
^                    : 109 110 111 112
error                : 
{                    : 28 67
}                    : 28 67

Nonterminals, with rules where they appear

and                  : 136 137 140 141 143
bloque               : 13 14 15 24 25
campos               : 67 68
com                  : 2
cosaBooleana         : 15 24
ctrl                 : 5
eMat                 : 34 36 45 87 88 91 92 119 124 155
elem                 : 42 43
else                 : 24
empty                : 6 19 23 26 40
eq                   : 141 142 145 146 147 150 151
exp                  : 96 97 98 99 100 101 108 109 111
expBool              : 13 14 16 39 46 127 127 128 129 131 131 132 133 167
func                 : 8 22
funcBool             : 33 121
funcInt              : 31 83
funcReturn           : 29
funcString           : 32
funcVoid             : 30
g                    : 1 5 28 0
iSing                : 109 110 113
if                   : 11
linea                : 1 27
loop                 : 12
m                    : 62 64 65
mayor                : 154
menor                : 161
not                  : 163 164
or                   : 127 128 129 130 135 136 138
p                    : 87 88 89 90 95 96 97 98 102 103 104
param                : 34
paren                : 114 115 118
parenBool            : 146 147 148 149 166
primParam            : 15
reg                  : 47
sentencia            : 3
tCompare             : 160 160 162 162
tercerParam          : 15
valores              : 38 43 44 68 69 74
valoresAsig          : 75 76 77 78 79 80
valoresBool          : 17 128 129 130 130 131 132 132 133 133 134 134 134 137 138 139 139 142 143 144 144 148 149 150 151 152 152 153 153 165
valoresCampos        : 55
valoresMat           : 89 90 91 92 93 93 94 94 99 100 101 102 103 104 105 105 106 106 107 107 110 111 112 112 116 117
varAsig              : 9 18 21
varYVals             : 52 65 66 70 71 72 73 75 76 77 78 79 84 122 157
varsOps              : 7 20 53 85 123 156
vec                  : 34 35 37 37 54
vecVal               : 61

Parsing method: LALR

state 0

    (0) S' -> . g
    (1) g -> . linea g
    (5) g -> . ctrl g
    (6) g -> . empty
    (2) linea -> . com
    (3) linea -> . sentencia
    (11) ctrl -> . if
    (12) ctrl -> . loop
    (41) empty -> .
    (4) com -> . COMMENT
    (7) sentencia -> . varsOps ;
    (8) sentencia -> . func ;
    (9) sentencia -> . varAsig ;
    (10) sentencia -> . RETURN ;
    (24) if -> . IF ( cosaBooleana ) bloque else
    (13) loop -> . WHILE ( expBool ) bloque
    (14) loop -> . DO bloque WHILE ( expBool ) ;
    (15) loop -> . FOR ( primParam ; cosaBooleana ; tercerParam ) bloque
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (29) func -> . funcReturn
    (30) func -> . funcVoid
    (75) varAsig -> . varYVals MULEQ valoresAsig
    (76) varAsig -> . varYVals DIVEQ valoresAsig
    (77) varAsig -> . varYVals MASEQ valoresAsig
    (78) varAsig -> . varYVals MENOSEQ valoresAsig
    (79) varAsig -> . varYVals = valoresAsig
    (80) varAsig -> . ID . ID = valoresAsig
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (31) funcReturn -> . funcInt
    (32) funcReturn -> . funcString
    (33) funcReturn -> . funcBool
    (38) funcVoid -> . PRINT ( valores )
    (62) vecVal -> . ID m
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (36) funcString -> . CAPITALIZAR ( eMat )
    (37) funcBool -> . COLINEALES ( vec , vec )

    $end            reduce using rule 41 (empty -> .)
    COMMENT         shift and go to state 11
    RETURN          shift and go to state 2
    IF              shift and go to state 21
    WHILE           shift and go to state 6
    DO              shift and go to state 1
    FOR             shift and go to state 18
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    ID              shift and go to state 20
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    CAPITALIZAR     shift and go to state 28
    COLINEALES      shift and go to state 16

    funcBool                       shift and go to state 3
    ctrl                           shift and go to state 4
    funcInt                        shift and go to state 5
    loop                           shift and go to state 7
    vecVal                         shift and go to state 9
    if                             shift and go to state 10
    sentencia                      shift and go to state 12
    empty                          shift and go to state 13
    varsOps                        shift and go to state 14
    funcVoid                       shift and go to state 15
    func                           shift and go to state 19
    varAsig                        shift and go to state 22
    g                              shift and go to state 23
    funcString                     shift and go to state 24
    com                            shift and go to state 32
    funcReturn                     shift and go to state 27
    linea                          shift and go to state 31
    varYVals                       shift and go to state 26

state 1

    (14) loop -> DO . bloque WHILE ( expBool ) ;
    (27) bloque -> . linea
    (28) bloque -> . { g }
    (2) linea -> . com
    (3) linea -> . sentencia
    (4) com -> . COMMENT
    (7) sentencia -> . varsOps ;
    (8) sentencia -> . func ;
    (9) sentencia -> . varAsig ;
    (10) sentencia -> . RETURN ;
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (29) func -> . funcReturn
    (30) func -> . funcVoid
    (75) varAsig -> . varYVals MULEQ valoresAsig
    (76) varAsig -> . varYVals DIVEQ valoresAsig
    (77) varAsig -> . varYVals MASEQ valoresAsig
    (78) varAsig -> . varYVals MENOSEQ valoresAsig
    (79) varAsig -> . varYVals = valoresAsig
    (80) varAsig -> . ID . ID = valoresAsig
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (31) funcReturn -> . funcInt
    (32) funcReturn -> . funcString
    (33) funcReturn -> . funcBool
    (38) funcVoid -> . PRINT ( valores )
    (62) vecVal -> . ID m
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (36) funcString -> . CAPITALIZAR ( eMat )
    (37) funcBool -> . COLINEALES ( vec , vec )

    {               shift and go to state 35
    COMMENT         shift and go to state 11
    RETURN          shift and go to state 2
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    ID              shift and go to state 20
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    CAPITALIZAR     shift and go to state 28
    COLINEALES      shift and go to state 16

    funcBool                       shift and go to state 3
    funcInt                        shift and go to state 5
    bloque                         shift and go to state 33
    vecVal                         shift and go to state 9
    sentencia                      shift and go to state 12
    varsOps                        shift and go to state 14
    funcVoid                       shift and go to state 15
    func                           shift and go to state 19
    varAsig                        shift and go to state 22
    funcString                     shift and go to state 24
    com                            shift and go to state 32
    funcReturn                     shift and go to state 27
    linea                          shift and go to state 34
    varYVals                       shift and go to state 26

state 2

    (10) sentencia -> RETURN . ;

    ;               shift and go to state 36


state 3

    (33) funcReturn -> funcBool .

    ;               reduce using rule 33 (funcReturn -> funcBool .)
    )               reduce using rule 33 (funcReturn -> funcBool .)


state 4

    (5) g -> ctrl . g
    (1) g -> . linea g
    (5) g -> . ctrl g
    (6) g -> . empty
    (2) linea -> . com
    (3) linea -> . sentencia
    (11) ctrl -> . if
    (12) ctrl -> . loop
    (41) empty -> .
    (4) com -> . COMMENT
    (7) sentencia -> . varsOps ;
    (8) sentencia -> . func ;
    (9) sentencia -> . varAsig ;
    (10) sentencia -> . RETURN ;
    (24) if -> . IF ( cosaBooleana ) bloque else
    (13) loop -> . WHILE ( expBool ) bloque
    (14) loop -> . DO bloque WHILE ( expBool ) ;
    (15) loop -> . FOR ( primParam ; cosaBooleana ; tercerParam ) bloque
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (29) func -> . funcReturn
    (30) func -> . funcVoid
    (75) varAsig -> . varYVals MULEQ valoresAsig
    (76) varAsig -> . varYVals DIVEQ valoresAsig
    (77) varAsig -> . varYVals MASEQ valoresAsig
    (78) varAsig -> . varYVals MENOSEQ valoresAsig
    (79) varAsig -> . varYVals = valoresAsig
    (80) varAsig -> . ID . ID = valoresAsig
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (31) funcReturn -> . funcInt
    (32) funcReturn -> . funcString
    (33) funcReturn -> . funcBool
    (38) funcVoid -> . PRINT ( valores )
    (62) vecVal -> . ID m
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (36) funcString -> . CAPITALIZAR ( eMat )
    (37) funcBool -> . COLINEALES ( vec , vec )

    $end            reduce using rule 41 (empty -> .)
    }               reduce using rule 41 (empty -> .)
    COMMENT         shift and go to state 11
    RETURN          shift and go to state 2
    IF              shift and go to state 21
    WHILE           shift and go to state 6
    DO              shift and go to state 1
    FOR             shift and go to state 18
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    ID              shift and go to state 20
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    CAPITALIZAR     shift and go to state 28
    COLINEALES      shift and go to state 16

    funcBool                       shift and go to state 3
    ctrl                           shift and go to state 4
    funcInt                        shift and go to state 5
    loop                           shift and go to state 7
    vecVal                         shift and go to state 9
    if                             shift and go to state 10
    sentencia                      shift and go to state 12
    empty                          shift and go to state 13
    varsOps                        shift and go to state 14
    funcVoid                       shift and go to state 15
    func                           shift and go to state 19
    varAsig                        shift and go to state 22
    g                              shift and go to state 37
    funcString                     shift and go to state 24
    com                            shift and go to state 32
    funcReturn                     shift and go to state 27
    linea                          shift and go to state 31
    varYVals                       shift and go to state 26

state 5

    (31) funcReturn -> funcInt .

    ;               reduce using rule 31 (funcReturn -> funcInt .)
    )               reduce using rule 31 (funcReturn -> funcInt .)


state 6

    (13) loop -> WHILE . ( expBool ) bloque

    (               shift and go to state 38


state 7

    (12) ctrl -> loop .

    COMMENT         reduce using rule 12 (ctrl -> loop .)
    RETURN          reduce using rule 12 (ctrl -> loop .)
    IF              reduce using rule 12 (ctrl -> loop .)
    WHILE           reduce using rule 12 (ctrl -> loop .)
    DO              reduce using rule 12 (ctrl -> loop .)
    FOR             reduce using rule 12 (ctrl -> loop .)
    MENOSMENOS      reduce using rule 12 (ctrl -> loop .)
    MASMAS          reduce using rule 12 (ctrl -> loop .)
    ID              reduce using rule 12 (ctrl -> loop .)
    PRINT           reduce using rule 12 (ctrl -> loop .)
    MULTIESCALAR    reduce using rule 12 (ctrl -> loop .)
    LENGTH          reduce using rule 12 (ctrl -> loop .)
    CAPITALIZAR     reduce using rule 12 (ctrl -> loop .)
    COLINEALES      reduce using rule 12 (ctrl -> loop .)
    $end            reduce using rule 12 (ctrl -> loop .)
    }               reduce using rule 12 (ctrl -> loop .)


state 8

    (38) funcVoid -> PRINT . ( valores )

    (               shift and go to state 39


state 9

    (61) varYVals -> vecVal .

    MASMAS          reduce using rule 61 (varYVals -> vecVal .)
    MENOSMENOS      reduce using rule 61 (varYVals -> vecVal .)
    MULEQ           reduce using rule 61 (varYVals -> vecVal .)
    DIVEQ           reduce using rule 61 (varYVals -> vecVal .)
    MASEQ           reduce using rule 61 (varYVals -> vecVal .)
    MENOSEQ         reduce using rule 61 (varYVals -> vecVal .)
    =               reduce using rule 61 (varYVals -> vecVal .)
    ?               reduce using rule 61 (varYVals -> vecVal .)
    OR              reduce using rule 61 (varYVals -> vecVal .)
    AND             reduce using rule 61 (varYVals -> vecVal .)
    EQEQ            reduce using rule 61 (varYVals -> vecVal .)
    DISTINTO        reduce using rule 61 (varYVals -> vecVal .)
    )               reduce using rule 61 (varYVals -> vecVal .)
    ;               reduce using rule 61 (varYVals -> vecVal .)
    ,               reduce using rule 61 (varYVals -> vecVal .)
    ]               reduce using rule 61 (varYVals -> vecVal .)
    }               reduce using rule 61 (varYVals -> vecVal .)
    :               reduce using rule 61 (varYVals -> vecVal .)
    +               reduce using rule 61 (varYVals -> vecVal .)
    -               reduce using rule 61 (varYVals -> vecVal .)
    *               reduce using rule 61 (varYVals -> vecVal .)
    /               reduce using rule 61 (varYVals -> vecVal .)
    %               reduce using rule 61 (varYVals -> vecVal .)
    ^               reduce using rule 61 (varYVals -> vecVal .)
    >               reduce using rule 61 (varYVals -> vecVal .)
    <               reduce using rule 61 (varYVals -> vecVal .)


state 10

    (11) ctrl -> if .

    COMMENT         reduce using rule 11 (ctrl -> if .)
    RETURN          reduce using rule 11 (ctrl -> if .)
    IF              reduce using rule 11 (ctrl -> if .)
    WHILE           reduce using rule 11 (ctrl -> if .)
    DO              reduce using rule 11 (ctrl -> if .)
    FOR             reduce using rule 11 (ctrl -> if .)
    MENOSMENOS      reduce using rule 11 (ctrl -> if .)
    MASMAS          reduce using rule 11 (ctrl -> if .)
    ID              reduce using rule 11 (ctrl -> if .)
    PRINT           reduce using rule 11 (ctrl -> if .)
    MULTIESCALAR    reduce using rule 11 (ctrl -> if .)
    LENGTH          reduce using rule 11 (ctrl -> if .)
    CAPITALIZAR     reduce using rule 11 (ctrl -> if .)
    COLINEALES      reduce using rule 11 (ctrl -> if .)
    $end            reduce using rule 11 (ctrl -> if .)
    }               reduce using rule 11 (ctrl -> if .)


state 11

    (4) com -> COMMENT .

    WHILE           reduce using rule 4 (com -> COMMENT .)
    ELSE            reduce using rule 4 (com -> COMMENT .)
    COMMENT         reduce using rule 4 (com -> COMMENT .)
    RETURN          reduce using rule 4 (com -> COMMENT .)
    IF              reduce using rule 4 (com -> COMMENT .)
    DO              reduce using rule 4 (com -> COMMENT .)
    FOR             reduce using rule 4 (com -> COMMENT .)
    MENOSMENOS      reduce using rule 4 (com -> COMMENT .)
    MASMAS          reduce using rule 4 (com -> COMMENT .)
    ID              reduce using rule 4 (com -> COMMENT .)
    PRINT           reduce using rule 4 (com -> COMMENT .)
    MULTIESCALAR    reduce using rule 4 (com -> COMMENT .)
    LENGTH          reduce using rule 4 (com -> COMMENT .)
    CAPITALIZAR     reduce using rule 4 (com -> COMMENT .)
    COLINEALES      reduce using rule 4 (com -> COMMENT .)
    $end            reduce using rule 4 (com -> COMMENT .)
    }               reduce using rule 4 (com -> COMMENT .)


state 12

    (3) linea -> sentencia .

    COMMENT         reduce using rule 3 (linea -> sentencia .)
    RETURN          reduce using rule 3 (linea -> sentencia .)
    IF              reduce using rule 3 (linea -> sentencia .)
    WHILE           reduce using rule 3 (linea -> sentencia .)
    DO              reduce using rule 3 (linea -> sentencia .)
    FOR             reduce using rule 3 (linea -> sentencia .)
    MENOSMENOS      reduce using rule 3 (linea -> sentencia .)
    MASMAS          reduce using rule 3 (linea -> sentencia .)
    ID              reduce using rule 3 (linea -> sentencia .)
    PRINT           reduce using rule 3 (linea -> sentencia .)
    MULTIESCALAR    reduce using rule 3 (linea -> sentencia .)
    LENGTH          reduce using rule 3 (linea -> sentencia .)
    CAPITALIZAR     reduce using rule 3 (linea -> sentencia .)
    COLINEALES      reduce using rule 3 (linea -> sentencia .)
    $end            reduce using rule 3 (linea -> sentencia .)
    }               reduce using rule 3 (linea -> sentencia .)
    ELSE            reduce using rule 3 (linea -> sentencia .)


state 13

    (6) g -> empty .

    $end            reduce using rule 6 (g -> empty .)
    }               reduce using rule 6 (g -> empty .)


state 14

    (7) sentencia -> varsOps . ;

    ;               shift and go to state 40


state 15

    (30) func -> funcVoid .

    ;               reduce using rule 30 (func -> funcVoid .)
    )               reduce using rule 30 (func -> funcVoid .)


state 16

    (37) funcBool -> COLINEALES . ( vec , vec )

    (               shift and go to state 41


state 17

    (70) varsOps -> MENOSMENOS . varYVals
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (62) vecVal -> . ID m

    ID              shift and go to state 43

    varYVals                       shift and go to state 42
    vecVal                         shift and go to state 9

state 18

    (15) loop -> FOR . ( primParam ; cosaBooleana ; tercerParam ) bloque

    (               shift and go to state 44


state 19

    (8) sentencia -> func . ;

    ;               shift and go to state 45


state 20

    (80) varAsig -> ID . . ID = valoresAsig
    (60) varYVals -> ID .
    (62) vecVal -> ID . m
    (63) m -> . [ INT ]
    (64) m -> . [ INT ] m
    (65) m -> . [ varYVals ] m
    (66) m -> . [ varYVals ]

    .               shift and go to state 47
    MASMAS          reduce using rule 60 (varYVals -> ID .)
    MENOSMENOS      reduce using rule 60 (varYVals -> ID .)
    MULEQ           reduce using rule 60 (varYVals -> ID .)
    DIVEQ           reduce using rule 60 (varYVals -> ID .)
    MASEQ           reduce using rule 60 (varYVals -> ID .)
    MENOSEQ         reduce using rule 60 (varYVals -> ID .)
    =               reduce using rule 60 (varYVals -> ID .)
    [               shift and go to state 48

    m                              shift and go to state 46

state 21

    (24) if -> IF . ( cosaBooleana ) bloque else

    (               shift and go to state 49


state 22

    (9) sentencia -> varAsig . ;

    ;               shift and go to state 50


state 23

    (0) S' -> g .



state 24

    (32) funcReturn -> funcString .

    ;               reduce using rule 32 (funcReturn -> funcString .)
    )               reduce using rule 32 (funcReturn -> funcString .)


state 25

    (34) funcInt -> MULTIESCALAR . ( vec , eMat , param )

    (               shift and go to state 51


state 26

    (72) varsOps -> varYVals . MASMAS
    (73) varsOps -> varYVals . MENOSMENOS
    (75) varAsig -> varYVals . MULEQ valoresAsig
    (76) varAsig -> varYVals . DIVEQ valoresAsig
    (77) varAsig -> varYVals . MASEQ valoresAsig
    (78) varAsig -> varYVals . MENOSEQ valoresAsig
    (79) varAsig -> varYVals . = valoresAsig

    MASMAS          shift and go to state 56
    MENOSMENOS      shift and go to state 53
    MULEQ           shift and go to state 57
    DIVEQ           shift and go to state 58
    MASEQ           shift and go to state 54
    MENOSEQ         shift and go to state 52
    =               shift and go to state 55


state 27

    (29) func -> funcReturn .

    ;               reduce using rule 29 (func -> funcReturn .)
    )               reduce using rule 29 (func -> funcReturn .)


state 28

    (36) funcString -> CAPITALIZAR . ( eMat )

    (               shift and go to state 59


state 29

    (35) funcInt -> LENGTH . ( vec )

    (               shift and go to state 60


state 30

    (71) varsOps -> MASMAS . varYVals
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (62) vecVal -> . ID m

    ID              shift and go to state 43

    varYVals                       shift and go to state 61
    vecVal                         shift and go to state 9

state 31

    (1) g -> linea . g
    (1) g -> . linea g
    (5) g -> . ctrl g
    (6) g -> . empty
    (2) linea -> . com
    (3) linea -> . sentencia
    (11) ctrl -> . if
    (12) ctrl -> . loop
    (41) empty -> .
    (4) com -> . COMMENT
    (7) sentencia -> . varsOps ;
    (8) sentencia -> . func ;
    (9) sentencia -> . varAsig ;
    (10) sentencia -> . RETURN ;
    (24) if -> . IF ( cosaBooleana ) bloque else
    (13) loop -> . WHILE ( expBool ) bloque
    (14) loop -> . DO bloque WHILE ( expBool ) ;
    (15) loop -> . FOR ( primParam ; cosaBooleana ; tercerParam ) bloque
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (29) func -> . funcReturn
    (30) func -> . funcVoid
    (75) varAsig -> . varYVals MULEQ valoresAsig
    (76) varAsig -> . varYVals DIVEQ valoresAsig
    (77) varAsig -> . varYVals MASEQ valoresAsig
    (78) varAsig -> . varYVals MENOSEQ valoresAsig
    (79) varAsig -> . varYVals = valoresAsig
    (80) varAsig -> . ID . ID = valoresAsig
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (31) funcReturn -> . funcInt
    (32) funcReturn -> . funcString
    (33) funcReturn -> . funcBool
    (38) funcVoid -> . PRINT ( valores )
    (62) vecVal -> . ID m
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (36) funcString -> . CAPITALIZAR ( eMat )
    (37) funcBool -> . COLINEALES ( vec , vec )

    $end            reduce using rule 41 (empty -> .)
    }               reduce using rule 41 (empty -> .)
    COMMENT         shift and go to state 11
    RETURN          shift and go to state 2
    IF              shift and go to state 21
    WHILE           shift and go to state 6
    DO              shift and go to state 1
    FOR             shift and go to state 18
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    ID              shift and go to state 20
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    CAPITALIZAR     shift and go to state 28
    COLINEALES      shift and go to state 16

    funcBool                       shift and go to state 3
    ctrl                           shift and go to state 4
    funcInt                        shift and go to state 5
    loop                           shift and go to state 7
    vecVal                         shift and go to state 9
    if                             shift and go to state 10
    sentencia                      shift and go to state 12
    empty                          shift and go to state 13
    varsOps                        shift and go to state 14
    funcVoid                       shift and go to state 15
    func                           shift and go to state 19
    varAsig                        shift and go to state 22
    g                              shift and go to state 62
    funcString                     shift and go to state 24
    com                            shift and go to state 32
    funcReturn                     shift and go to state 27
    linea                          shift and go to state 31
    varYVals                       shift and go to state 26

state 32

    (2) linea -> com .

    COMMENT         reduce using rule 2 (linea -> com .)
    RETURN          reduce using rule 2 (linea -> com .)
    IF              reduce using rule 2 (linea -> com .)
    WHILE           reduce using rule 2 (linea -> com .)
    DO              reduce using rule 2 (linea -> com .)
    FOR             reduce using rule 2 (linea -> com .)
    MENOSMENOS      reduce using rule 2 (linea -> com .)
    MASMAS          reduce using rule 2 (linea -> com .)
    ID              reduce using rule 2 (linea -> com .)
    PRINT           reduce using rule 2 (linea -> com .)
    MULTIESCALAR    reduce using rule 2 (linea -> com .)
    LENGTH          reduce using rule 2 (linea -> com .)
    CAPITALIZAR     reduce using rule 2 (linea -> com .)
    COLINEALES      reduce using rule 2 (linea -> com .)
    $end            reduce using rule 2 (linea -> com .)
    }               reduce using rule 2 (linea -> com .)
    ELSE            reduce using rule 2 (linea -> com .)


state 33

    (14) loop -> DO bloque . WHILE ( expBool ) ;

    WHILE           shift and go to state 63


state 34

    (27) bloque -> linea .

    ELSE            reduce using rule 27 (bloque -> linea .)
    COMMENT         reduce using rule 27 (bloque -> linea .)
    RETURN          reduce using rule 27 (bloque -> linea .)
    IF              reduce using rule 27 (bloque -> linea .)
    WHILE           reduce using rule 27 (bloque -> linea .)
    DO              reduce using rule 27 (bloque -> linea .)
    FOR             reduce using rule 27 (bloque -> linea .)
    MENOSMENOS      reduce using rule 27 (bloque -> linea .)
    MASMAS          reduce using rule 27 (bloque -> linea .)
    ID              reduce using rule 27 (bloque -> linea .)
    PRINT           reduce using rule 27 (bloque -> linea .)
    MULTIESCALAR    reduce using rule 27 (bloque -> linea .)
    LENGTH          reduce using rule 27 (bloque -> linea .)
    CAPITALIZAR     reduce using rule 27 (bloque -> linea .)
    COLINEALES      reduce using rule 27 (bloque -> linea .)
    $end            reduce using rule 27 (bloque -> linea .)
    }               reduce using rule 27 (bloque -> linea .)


state 35

    (28) bloque -> { . g }
    (1) g -> . linea g
    (5) g -> . ctrl g
    (6) g -> . empty
    (2) linea -> . com
    (3) linea -> . sentencia
    (11) ctrl -> . if
    (12) ctrl -> . loop
    (41) empty -> .
    (4) com -> . COMMENT
    (7) sentencia -> . varsOps ;
    (8) sentencia -> . func ;
    (9) sentencia -> . varAsig ;
    (10) sentencia -> . RETURN ;
    (24) if -> . IF ( cosaBooleana ) bloque else
    (13) loop -> . WHILE ( expBool ) bloque
    (14) loop -> . DO bloque WHILE ( expBool ) ;
    (15) loop -> . FOR ( primParam ; cosaBooleana ; tercerParam ) bloque
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (29) func -> . funcReturn
    (30) func -> . funcVoid
    (75) varAsig -> . varYVals MULEQ valoresAsig
    (76) varAsig -> . varYVals DIVEQ valoresAsig
    (77) varAsig -> . varYVals MASEQ valoresAsig
    (78) varAsig -> . varYVals MENOSEQ valoresAsig
    (79) varAsig -> . varYVals = valoresAsig
    (80) varAsig -> . ID . ID = valoresAsig
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (31) funcReturn -> . funcInt
    (32) funcReturn -> . funcString
    (33) funcReturn -> . funcBool
    (38) funcVoid -> . PRINT ( valores )
    (62) vecVal -> . ID m
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (36) funcString -> . CAPITALIZAR ( eMat )
    (37) funcBool -> . COLINEALES ( vec , vec )

    }               reduce using rule 41 (empty -> .)
    COMMENT         shift and go to state 11
    RETURN          shift and go to state 2
    IF              shift and go to state 21
    WHILE           shift and go to state 6
    DO              shift and go to state 1
    FOR             shift and go to state 18
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    ID              shift and go to state 20
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    CAPITALIZAR     shift and go to state 28
    COLINEALES      shift and go to state 16

    funcBool                       shift and go to state 3
    ctrl                           shift and go to state 4
    funcInt                        shift and go to state 5
    loop                           shift and go to state 7
    vecVal                         shift and go to state 9
    if                             shift and go to state 10
    sentencia                      shift and go to state 12
    empty                          shift and go to state 13
    varsOps                        shift and go to state 14
    funcVoid                       shift and go to state 15
    func                           shift and go to state 19
    varAsig                        shift and go to state 22
    g                              shift and go to state 64
    funcString                     shift and go to state 24
    com                            shift and go to state 32
    funcReturn                     shift and go to state 27
    linea                          shift and go to state 31
    varYVals                       shift and go to state 26

state 36

    (10) sentencia -> RETURN ; .

    COMMENT         reduce using rule 10 (sentencia -> RETURN ; .)
    RETURN          reduce using rule 10 (sentencia -> RETURN ; .)
    IF              reduce using rule 10 (sentencia -> RETURN ; .)
    WHILE           reduce using rule 10 (sentencia -> RETURN ; .)
    DO              reduce using rule 10 (sentencia -> RETURN ; .)
    FOR             reduce using rule 10 (sentencia -> RETURN ; .)
    MENOSMENOS      reduce using rule 10 (sentencia -> RETURN ; .)
    MASMAS          reduce using rule 10 (sentencia -> RETURN ; .)
    ID              reduce using rule 10 (sentencia -> RETURN ; .)
    PRINT           reduce using rule 10 (sentencia -> RETURN ; .)
    MULTIESCALAR    reduce using rule 10 (sentencia -> RETURN ; .)
    LENGTH          reduce using rule 10 (sentencia -> RETURN ; .)
    CAPITALIZAR     reduce using rule 10 (sentencia -> RETURN ; .)
    COLINEALES      reduce using rule 10 (sentencia -> RETURN ; .)
    $end            reduce using rule 10 (sentencia -> RETURN ; .)
    }               reduce using rule 10 (sentencia -> RETURN ; .)
    ELSE            reduce using rule 10 (sentencia -> RETURN ; .)


state 37

    (5) g -> ctrl g .

    $end            reduce using rule 5 (g -> ctrl g .)
    }               reduce using rule 5 (g -> ctrl g .)


state 38

    (13) loop -> WHILE ( . expBool ) bloque
    (127) expBool -> . or ? expBool : expBool
    (128) expBool -> . or ? expBool : valoresBool
    (129) expBool -> . or ? valoresBool : expBool
    (130) expBool -> . or ? valoresBool : valoresBool
    (131) expBool -> . valoresBool ? expBool : expBool
    (132) expBool -> . valoresBool ? valoresBool : expBool
    (133) expBool -> . valoresBool ? expBool : valoresBool
    (134) expBool -> . valoresBool ? valoresBool : valoresBool
    (135) expBool -> . or
    (136) or -> . or OR and
    (137) or -> . valoresBool OR and
    (138) or -> . or OR valoresBool
    (139) or -> . valoresBool OR valoresBool
    (140) or -> . and
    (120) valoresBool -> . BOOL
    (121) valoresBool -> . funcBool
    (122) valoresBool -> . varYVals
    (123) valoresBool -> . varsOps
    (124) valoresBool -> . eMat
    (125) valoresBool -> . INT
    (126) valoresBool -> . FLOAT
    (141) and -> . and AND eq
    (142) and -> . valoresBool AND eq
    (143) and -> . and AND valoresBool
    (144) and -> . valoresBool AND valoresBool
    (145) and -> . eq
    (37) funcBool -> . COLINEALES ( vec , vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (146) eq -> . eq EQEQ parenBool
    (147) eq -> . eq DISTINTO parenBool
    (148) eq -> . valoresBool EQEQ parenBool
    (149) eq -> . valoresBool DISTINTO parenBool
    (150) eq -> . eq EQEQ valoresBool
    (151) eq -> . eq DISTINTO valoresBool
    (152) eq -> . valoresBool EQEQ valoresBool
    (153) eq -> . valoresBool DISTINTO valoresBool
    (154) eq -> . mayor
    (62) vecVal -> . ID m
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (160) mayor -> . tCompare > tCompare
    (161) mayor -> . menor
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (155) tCompare -> . eMat
    (156) tCompare -> . varsOps
    (157) tCompare -> . varYVals
    (158) tCompare -> . INT
    (159) tCompare -> . FLOAT
    (162) menor -> . tCompare < tCompare
    (163) menor -> . not
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (164) not -> . NOT not
    (165) not -> . NOT valoresBool
    (166) not -> . parenBool
    (119) paren -> . ( eMat )
    (167) parenBool -> . ( expBool )

    BOOL            shift and go to state 85
    INT             shift and go to state 81
    FLOAT           shift and go to state 82
    COLINEALES      shift and go to state 16
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    STRING          shift and go to state 72
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    -               shift and go to state 76
    +               shift and go to state 75
    NOT             shift and go to state 89
    (               shift and go to state 74

    and                            shift and go to state 65
    funcBool                       shift and go to state 66
    funcInt                        shift and go to state 67
    menor                          shift and go to state 83
    valoresMat                     shift and go to state 69
    eq                             shift and go to state 70
    valoresBool                    shift and go to state 71
    eMat                           shift and go to state 73
    vecVal                         shift and go to state 9
    paren                          shift and go to state 79
    iSing                          shift and go to state 77
    tCompare                       shift and go to state 78
    not                            shift and go to state 80
    varYVals                       shift and go to state 90
    or                             shift and go to state 91
    p                              shift and go to state 84
    varsOps                        shift and go to state 86
    exp                            shift and go to state 87
    mayor                          shift and go to state 68
    parenBool                      shift and go to state 88
    expBool                        shift and go to state 92

state 39

    (38) funcVoid -> PRINT ( . valores )
    (45) valores -> . eMat
    (46) valores -> . expBool
    (47) valores -> . reg
    (48) valores -> . INT
    (49) valores -> . FLOAT
    (50) valores -> . STRING
    (51) valores -> . BOOL
    (52) valores -> . varYVals
    (53) valores -> . varsOps
    (54) valores -> . vec
    (55) valores -> . ID . valoresCampos
    (56) valores -> . RES
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (127) expBool -> . or ? expBool : expBool
    (128) expBool -> . or ? expBool : valoresBool
    (129) expBool -> . or ? valoresBool : expBool
    (130) expBool -> . or ? valoresBool : valoresBool
    (131) expBool -> . valoresBool ? expBool : expBool
    (132) expBool -> . valoresBool ? valoresBool : expBool
    (133) expBool -> . valoresBool ? expBool : valoresBool
    (134) expBool -> . valoresBool ? valoresBool : valoresBool
    (135) expBool -> . or
    (67) reg -> . { campos }
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (42) vec -> . [ elem ]
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (136) or -> . or OR and
    (137) or -> . valoresBool OR and
    (138) or -> . or OR valoresBool
    (139) or -> . valoresBool OR valoresBool
    (140) or -> . and
    (120) valoresBool -> . BOOL
    (121) valoresBool -> . funcBool
    (122) valoresBool -> . varYVals
    (123) valoresBool -> . varsOps
    (124) valoresBool -> . eMat
    (125) valoresBool -> . INT
    (126) valoresBool -> . FLOAT
    (62) vecVal -> . ID m
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (141) and -> . and AND eq
    (142) and -> . valoresBool AND eq
    (143) and -> . and AND valoresBool
    (144) and -> . valoresBool AND valoresBool
    (145) and -> . eq
    (37) funcBool -> . COLINEALES ( vec , vec )
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (146) eq -> . eq EQEQ parenBool
    (147) eq -> . eq DISTINTO parenBool
    (148) eq -> . valoresBool EQEQ parenBool
    (149) eq -> . valoresBool DISTINTO parenBool
    (150) eq -> . eq EQEQ valoresBool
    (151) eq -> . eq DISTINTO valoresBool
    (152) eq -> . valoresBool EQEQ valoresBool
    (153) eq -> . valoresBool DISTINTO valoresBool
    (154) eq -> . mayor
    (119) paren -> . ( eMat )
    (160) mayor -> . tCompare > tCompare
    (161) mayor -> . menor
    (155) tCompare -> . eMat
    (156) tCompare -> . varsOps
    (157) tCompare -> . varYVals
    (158) tCompare -> . INT
    (159) tCompare -> . FLOAT
    (162) menor -> . tCompare < tCompare
    (163) menor -> . not
    (164) not -> . NOT not
    (165) not -> . NOT valoresBool
    (166) not -> . parenBool
    (167) parenBool -> . ( expBool )

    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    STRING          shift and go to state 97
    BOOL            shift and go to state 103
    ID              shift and go to state 99
    RES             shift and go to state 93
    {               shift and go to state 105
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    [               shift and go to state 98
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    COLINEALES      shift and go to state 16
    -               shift and go to state 76
    +               shift and go to state 75
    (               shift and go to state 74
    NOT             shift and go to state 89

    and                            shift and go to state 65
    funcBool                       shift and go to state 66
    funcInt                        shift and go to state 67
    menor                          shift and go to state 83
    mayor                          shift and go to state 68
    valoresMat                     shift and go to state 69
    eq                             shift and go to state 70
    valoresBool                    shift and go to state 71
    eMat                           shift and go to state 94
    vecVal                         shift and go to state 9
    vec                            shift and go to state 95
    paren                          shift and go to state 79
    reg                            shift and go to state 96
    varsOps                        shift and go to state 104
    exp                            shift and go to state 87
    tCompare                       shift and go to state 78
    not                            shift and go to state 80
    valores                        shift and go to state 102
    parenBool                      shift and go to state 88
    p                              shift and go to state 84
    iSing                          shift and go to state 77
    varYVals                       shift and go to state 106
    or                             shift and go to state 91
    expBool                        shift and go to state 107

state 40

    (7) sentencia -> varsOps ; .

    COMMENT         reduce using rule 7 (sentencia -> varsOps ; .)
    RETURN          reduce using rule 7 (sentencia -> varsOps ; .)
    IF              reduce using rule 7 (sentencia -> varsOps ; .)
    WHILE           reduce using rule 7 (sentencia -> varsOps ; .)
    DO              reduce using rule 7 (sentencia -> varsOps ; .)
    FOR             reduce using rule 7 (sentencia -> varsOps ; .)
    MENOSMENOS      reduce using rule 7 (sentencia -> varsOps ; .)
    MASMAS          reduce using rule 7 (sentencia -> varsOps ; .)
    ID              reduce using rule 7 (sentencia -> varsOps ; .)
    PRINT           reduce using rule 7 (sentencia -> varsOps ; .)
    MULTIESCALAR    reduce using rule 7 (sentencia -> varsOps ; .)
    LENGTH          reduce using rule 7 (sentencia -> varsOps ; .)
    CAPITALIZAR     reduce using rule 7 (sentencia -> varsOps ; .)
    COLINEALES      reduce using rule 7 (sentencia -> varsOps ; .)
    $end            reduce using rule 7 (sentencia -> varsOps ; .)
    }               reduce using rule 7 (sentencia -> varsOps ; .)
    ELSE            reduce using rule 7 (sentencia -> varsOps ; .)


state 41

    (37) funcBool -> COLINEALES ( . vec , vec )
    (42) vec -> . [ elem ]

    [               shift and go to state 98

    vec                            shift and go to state 108

state 42

    (70) varsOps -> MENOSMENOS varYVals .

    AND             reduce using rule 70 (varsOps -> MENOSMENOS varYVals .)
    EQEQ            reduce using rule 70 (varsOps -> MENOSMENOS varYVals .)
    DISTINTO        reduce using rule 70 (varsOps -> MENOSMENOS varYVals .)
    ?               reduce using rule 70 (varsOps -> MENOSMENOS varYVals .)
    OR              reduce using rule 70 (varsOps -> MENOSMENOS varYVals .)
    )               reduce using rule 70 (varsOps -> MENOSMENOS varYVals .)
    ;               reduce using rule 70 (varsOps -> MENOSMENOS varYVals .)
    ,               reduce using rule 70 (varsOps -> MENOSMENOS varYVals .)
    ]               reduce using rule 70 (varsOps -> MENOSMENOS varYVals .)
    }               reduce using rule 70 (varsOps -> MENOSMENOS varYVals .)
    :               reduce using rule 70 (varsOps -> MENOSMENOS varYVals .)
    +               reduce using rule 70 (varsOps -> MENOSMENOS varYVals .)
    -               reduce using rule 70 (varsOps -> MENOSMENOS varYVals .)
    *               reduce using rule 70 (varsOps -> MENOSMENOS varYVals .)
    /               reduce using rule 70 (varsOps -> MENOSMENOS varYVals .)
    %               reduce using rule 70 (varsOps -> MENOSMENOS varYVals .)
    ^               reduce using rule 70 (varsOps -> MENOSMENOS varYVals .)
    >               reduce using rule 70 (varsOps -> MENOSMENOS varYVals .)
    <               reduce using rule 70 (varsOps -> MENOSMENOS varYVals .)


state 43

    (60) varYVals -> ID .
    (62) vecVal -> ID . m
    (63) m -> . [ INT ]
    (64) m -> . [ INT ] m
    (65) m -> . [ varYVals ] m
    (66) m -> . [ varYVals ]

    MASMAS          reduce using rule 60 (varYVals -> ID .)
    MENOSMENOS      reduce using rule 60 (varYVals -> ID .)
    ?               reduce using rule 60 (varYVals -> ID .)
    OR              reduce using rule 60 (varYVals -> ID .)
    AND             reduce using rule 60 (varYVals -> ID .)
    EQEQ            reduce using rule 60 (varYVals -> ID .)
    DISTINTO        reduce using rule 60 (varYVals -> ID .)
    )               reduce using rule 60 (varYVals -> ID .)
    ;               reduce using rule 60 (varYVals -> ID .)
    ,               reduce using rule 60 (varYVals -> ID .)
    ]               reduce using rule 60 (varYVals -> ID .)
    }               reduce using rule 60 (varYVals -> ID .)
    :               reduce using rule 60 (varYVals -> ID .)
    +               reduce using rule 60 (varYVals -> ID .)
    -               reduce using rule 60 (varYVals -> ID .)
    *               reduce using rule 60 (varYVals -> ID .)
    /               reduce using rule 60 (varYVals -> ID .)
    %               reduce using rule 60 (varYVals -> ID .)
    ^               reduce using rule 60 (varYVals -> ID .)
    >               reduce using rule 60 (varYVals -> ID .)
    <               reduce using rule 60 (varYVals -> ID .)
    [               shift and go to state 48

    m                              shift and go to state 46

state 44

    (15) loop -> FOR ( . primParam ; cosaBooleana ; tercerParam ) bloque
    (18) primParam -> . varAsig
    (19) primParam -> . empty
    (75) varAsig -> . varYVals MULEQ valoresAsig
    (76) varAsig -> . varYVals DIVEQ valoresAsig
    (77) varAsig -> . varYVals MASEQ valoresAsig
    (78) varAsig -> . varYVals MENOSEQ valoresAsig
    (79) varAsig -> . varYVals = valoresAsig
    (80) varAsig -> . ID . ID = valoresAsig
    (41) empty -> .
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (62) vecVal -> . ID m

    ID              shift and go to state 20
    ;               reduce using rule 41 (empty -> .)

    varAsig                        shift and go to state 109
    primParam                      shift and go to state 110
    varYVals                       shift and go to state 111
    vecVal                         shift and go to state 9
    empty                          shift and go to state 112

state 45

    (8) sentencia -> func ; .

    COMMENT         reduce using rule 8 (sentencia -> func ; .)
    RETURN          reduce using rule 8 (sentencia -> func ; .)
    IF              reduce using rule 8 (sentencia -> func ; .)
    WHILE           reduce using rule 8 (sentencia -> func ; .)
    DO              reduce using rule 8 (sentencia -> func ; .)
    FOR             reduce using rule 8 (sentencia -> func ; .)
    MENOSMENOS      reduce using rule 8 (sentencia -> func ; .)
    MASMAS          reduce using rule 8 (sentencia -> func ; .)
    ID              reduce using rule 8 (sentencia -> func ; .)
    PRINT           reduce using rule 8 (sentencia -> func ; .)
    MULTIESCALAR    reduce using rule 8 (sentencia -> func ; .)
    LENGTH          reduce using rule 8 (sentencia -> func ; .)
    CAPITALIZAR     reduce using rule 8 (sentencia -> func ; .)
    COLINEALES      reduce using rule 8 (sentencia -> func ; .)
    $end            reduce using rule 8 (sentencia -> func ; .)
    }               reduce using rule 8 (sentencia -> func ; .)
    ELSE            reduce using rule 8 (sentencia -> func ; .)


state 46

    (62) vecVal -> ID m .

    MASMAS          reduce using rule 62 (vecVal -> ID m .)
    MENOSMENOS      reduce using rule 62 (vecVal -> ID m .)
    EQEQ            reduce using rule 62 (vecVal -> ID m .)
    DISTINTO        reduce using rule 62 (vecVal -> ID m .)
    AND             reduce using rule 62 (vecVal -> ID m .)
    ?               reduce using rule 62 (vecVal -> ID m .)
    OR              reduce using rule 62 (vecVal -> ID m .)
    )               reduce using rule 62 (vecVal -> ID m .)
    ;               reduce using rule 62 (vecVal -> ID m .)
    ,               reduce using rule 62 (vecVal -> ID m .)
    ]               reduce using rule 62 (vecVal -> ID m .)
    }               reduce using rule 62 (vecVal -> ID m .)
    :               reduce using rule 62 (vecVal -> ID m .)
    +               reduce using rule 62 (vecVal -> ID m .)
    -               reduce using rule 62 (vecVal -> ID m .)
    *               reduce using rule 62 (vecVal -> ID m .)
    /               reduce using rule 62 (vecVal -> ID m .)
    %               reduce using rule 62 (vecVal -> ID m .)
    ^               reduce using rule 62 (vecVal -> ID m .)
    MULEQ           reduce using rule 62 (vecVal -> ID m .)
    DIVEQ           reduce using rule 62 (vecVal -> ID m .)
    MASEQ           reduce using rule 62 (vecVal -> ID m .)
    MENOSEQ         reduce using rule 62 (vecVal -> ID m .)
    =               reduce using rule 62 (vecVal -> ID m .)
    >               reduce using rule 62 (vecVal -> ID m .)
    <               reduce using rule 62 (vecVal -> ID m .)


state 47

    (80) varAsig -> ID . . ID = valoresAsig

    ID              shift and go to state 113


state 48

    (63) m -> [ . INT ]
    (64) m -> [ . INT ] m
    (65) m -> [ . varYVals ] m
    (66) m -> [ . varYVals ]
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (62) vecVal -> . ID m

    INT             shift and go to state 114
    ID              shift and go to state 43

    varYVals                       shift and go to state 115
    vecVal                         shift and go to state 9

state 49

    (24) if -> IF ( . cosaBooleana ) bloque else
    (16) cosaBooleana -> . expBool
    (17) cosaBooleana -> . valoresBool
    (127) expBool -> . or ? expBool : expBool
    (128) expBool -> . or ? expBool : valoresBool
    (129) expBool -> . or ? valoresBool : expBool
    (130) expBool -> . or ? valoresBool : valoresBool
    (131) expBool -> . valoresBool ? expBool : expBool
    (132) expBool -> . valoresBool ? valoresBool : expBool
    (133) expBool -> . valoresBool ? expBool : valoresBool
    (134) expBool -> . valoresBool ? valoresBool : valoresBool
    (135) expBool -> . or
    (120) valoresBool -> . BOOL
    (121) valoresBool -> . funcBool
    (122) valoresBool -> . varYVals
    (123) valoresBool -> . varsOps
    (124) valoresBool -> . eMat
    (125) valoresBool -> . INT
    (126) valoresBool -> . FLOAT
    (136) or -> . or OR and
    (137) or -> . valoresBool OR and
    (138) or -> . or OR valoresBool
    (139) or -> . valoresBool OR valoresBool
    (140) or -> . and
    (37) funcBool -> . COLINEALES ( vec , vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (141) and -> . and AND eq
    (142) and -> . valoresBool AND eq
    (143) and -> . and AND valoresBool
    (144) and -> . valoresBool AND valoresBool
    (145) and -> . eq
    (62) vecVal -> . ID m
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (146) eq -> . eq EQEQ parenBool
    (147) eq -> . eq DISTINTO parenBool
    (148) eq -> . valoresBool EQEQ parenBool
    (149) eq -> . valoresBool DISTINTO parenBool
    (150) eq -> . eq EQEQ valoresBool
    (151) eq -> . eq DISTINTO valoresBool
    (152) eq -> . valoresBool EQEQ valoresBool
    (153) eq -> . valoresBool DISTINTO valoresBool
    (154) eq -> . mayor
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (160) mayor -> . tCompare > tCompare
    (161) mayor -> . menor
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (155) tCompare -> . eMat
    (156) tCompare -> . varsOps
    (157) tCompare -> . varYVals
    (158) tCompare -> . INT
    (159) tCompare -> . FLOAT
    (162) menor -> . tCompare < tCompare
    (163) menor -> . not
    (119) paren -> . ( eMat )
    (164) not -> . NOT not
    (165) not -> . NOT valoresBool
    (166) not -> . parenBool
    (167) parenBool -> . ( expBool )

    BOOL            shift and go to state 85
    INT             shift and go to state 81
    FLOAT           shift and go to state 82
    COLINEALES      shift and go to state 16
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    STRING          shift and go to state 72
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    -               shift and go to state 76
    +               shift and go to state 75
    (               shift and go to state 74
    NOT             shift and go to state 89

    and                            shift and go to state 65
    funcBool                       shift and go to state 66
    funcInt                        shift and go to state 67
    not                            shift and go to state 80
    menor                          shift and go to state 83
    valoresMat                     shift and go to state 69
    eq                             shift and go to state 70
    mayor                          shift and go to state 68
    eMat                           shift and go to state 73
    valoresBool                    shift and go to state 116
    paren                          shift and go to state 79
    iSing                          shift and go to state 77
    tCompare                       shift and go to state 78
    vecVal                         shift and go to state 9
    cosaBooleana                   shift and go to state 117
    or                             shift and go to state 91
    p                              shift and go to state 84
    varsOps                        shift and go to state 86
    exp                            shift and go to state 87
    varYVals                       shift and go to state 90
    parenBool                      shift and go to state 88
    expBool                        shift and go to state 118

state 50

    (9) sentencia -> varAsig ; .

    COMMENT         reduce using rule 9 (sentencia -> varAsig ; .)
    RETURN          reduce using rule 9 (sentencia -> varAsig ; .)
    IF              reduce using rule 9 (sentencia -> varAsig ; .)
    WHILE           reduce using rule 9 (sentencia -> varAsig ; .)
    DO              reduce using rule 9 (sentencia -> varAsig ; .)
    FOR             reduce using rule 9 (sentencia -> varAsig ; .)
    MENOSMENOS      reduce using rule 9 (sentencia -> varAsig ; .)
    MASMAS          reduce using rule 9 (sentencia -> varAsig ; .)
    ID              reduce using rule 9 (sentencia -> varAsig ; .)
    PRINT           reduce using rule 9 (sentencia -> varAsig ; .)
    MULTIESCALAR    reduce using rule 9 (sentencia -> varAsig ; .)
    LENGTH          reduce using rule 9 (sentencia -> varAsig ; .)
    CAPITALIZAR     reduce using rule 9 (sentencia -> varAsig ; .)
    COLINEALES      reduce using rule 9 (sentencia -> varAsig ; .)
    $end            reduce using rule 9 (sentencia -> varAsig ; .)
    }               reduce using rule 9 (sentencia -> varAsig ; .)
    ELSE            reduce using rule 9 (sentencia -> varAsig ; .)


state 51

    (34) funcInt -> MULTIESCALAR ( . vec , eMat , param )
    (42) vec -> . [ elem ]

    [               shift and go to state 98

    vec                            shift and go to state 119

state 52

    (78) varAsig -> varYVals MENOSEQ . valoresAsig
    (74) valoresAsig -> . valores
    (45) valores -> . eMat
    (46) valores -> . expBool
    (47) valores -> . reg
    (48) valores -> . INT
    (49) valores -> . FLOAT
    (50) valores -> . STRING
    (51) valores -> . BOOL
    (52) valores -> . varYVals
    (53) valores -> . varsOps
    (54) valores -> . vec
    (55) valores -> . ID . valoresCampos
    (56) valores -> . RES
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (127) expBool -> . or ? expBool : expBool
    (128) expBool -> . or ? expBool : valoresBool
    (129) expBool -> . or ? valoresBool : expBool
    (130) expBool -> . or ? valoresBool : valoresBool
    (131) expBool -> . valoresBool ? expBool : expBool
    (132) expBool -> . valoresBool ? valoresBool : expBool
    (133) expBool -> . valoresBool ? expBool : valoresBool
    (134) expBool -> . valoresBool ? valoresBool : valoresBool
    (135) expBool -> . or
    (67) reg -> . { campos }
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (42) vec -> . [ elem ]
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (136) or -> . or OR and
    (137) or -> . valoresBool OR and
    (138) or -> . or OR valoresBool
    (139) or -> . valoresBool OR valoresBool
    (140) or -> . and
    (120) valoresBool -> . BOOL
    (121) valoresBool -> . funcBool
    (122) valoresBool -> . varYVals
    (123) valoresBool -> . varsOps
    (124) valoresBool -> . eMat
    (125) valoresBool -> . INT
    (126) valoresBool -> . FLOAT
    (62) vecVal -> . ID m
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (141) and -> . and AND eq
    (142) and -> . valoresBool AND eq
    (143) and -> . and AND valoresBool
    (144) and -> . valoresBool AND valoresBool
    (145) and -> . eq
    (37) funcBool -> . COLINEALES ( vec , vec )
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (146) eq -> . eq EQEQ parenBool
    (147) eq -> . eq DISTINTO parenBool
    (148) eq -> . valoresBool EQEQ parenBool
    (149) eq -> . valoresBool DISTINTO parenBool
    (150) eq -> . eq EQEQ valoresBool
    (151) eq -> . eq DISTINTO valoresBool
    (152) eq -> . valoresBool EQEQ valoresBool
    (153) eq -> . valoresBool DISTINTO valoresBool
    (154) eq -> . mayor
    (119) paren -> . ( eMat )
    (160) mayor -> . tCompare > tCompare
    (161) mayor -> . menor
    (155) tCompare -> . eMat
    (156) tCompare -> . varsOps
    (157) tCompare -> . varYVals
    (158) tCompare -> . INT
    (159) tCompare -> . FLOAT
    (162) menor -> . tCompare < tCompare
    (163) menor -> . not
    (164) not -> . NOT not
    (165) not -> . NOT valoresBool
    (166) not -> . parenBool
    (167) parenBool -> . ( expBool )

    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    STRING          shift and go to state 97
    BOOL            shift and go to state 103
    ID              shift and go to state 99
    RES             shift and go to state 93
    {               shift and go to state 105
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    [               shift and go to state 98
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    COLINEALES      shift and go to state 16
    -               shift and go to state 76
    +               shift and go to state 75
    (               shift and go to state 74
    NOT             shift and go to state 89

    and                            shift and go to state 65
    funcBool                       shift and go to state 66
    funcInt                        shift and go to state 67
    menor                          shift and go to state 83
    mayor                          shift and go to state 68
    valoresMat                     shift and go to state 69
    eq                             shift and go to state 70
    valoresBool                    shift and go to state 71
    eMat                           shift and go to state 94
    vecVal                         shift and go to state 9
    vec                            shift and go to state 95
    paren                          shift and go to state 79
    reg                            shift and go to state 96
    iSing                          shift and go to state 77
    exp                            shift and go to state 87
    tCompare                       shift and go to state 78
    not                            shift and go to state 80
    valoresAsig                    shift and go to state 120
    valores                        shift and go to state 121
    parenBool                      shift and go to state 88
    p                              shift and go to state 84
    varsOps                        shift and go to state 104
    varYVals                       shift and go to state 106
    or                             shift and go to state 91
    expBool                        shift and go to state 107

state 53

    (73) varsOps -> varYVals MENOSMENOS .

    AND             reduce using rule 73 (varsOps -> varYVals MENOSMENOS .)
    EQEQ            reduce using rule 73 (varsOps -> varYVals MENOSMENOS .)
    DISTINTO        reduce using rule 73 (varsOps -> varYVals MENOSMENOS .)
    ?               reduce using rule 73 (varsOps -> varYVals MENOSMENOS .)
    OR              reduce using rule 73 (varsOps -> varYVals MENOSMENOS .)
    )               reduce using rule 73 (varsOps -> varYVals MENOSMENOS .)
    ;               reduce using rule 73 (varsOps -> varYVals MENOSMENOS .)
    ,               reduce using rule 73 (varsOps -> varYVals MENOSMENOS .)
    ]               reduce using rule 73 (varsOps -> varYVals MENOSMENOS .)
    }               reduce using rule 73 (varsOps -> varYVals MENOSMENOS .)
    :               reduce using rule 73 (varsOps -> varYVals MENOSMENOS .)
    +               reduce using rule 73 (varsOps -> varYVals MENOSMENOS .)
    -               reduce using rule 73 (varsOps -> varYVals MENOSMENOS .)
    *               reduce using rule 73 (varsOps -> varYVals MENOSMENOS .)
    /               reduce using rule 73 (varsOps -> varYVals MENOSMENOS .)
    %               reduce using rule 73 (varsOps -> varYVals MENOSMENOS .)
    ^               reduce using rule 73 (varsOps -> varYVals MENOSMENOS .)
    >               reduce using rule 73 (varsOps -> varYVals MENOSMENOS .)
    <               reduce using rule 73 (varsOps -> varYVals MENOSMENOS .)


state 54

    (77) varAsig -> varYVals MASEQ . valoresAsig
    (74) valoresAsig -> . valores
    (45) valores -> . eMat
    (46) valores -> . expBool
    (47) valores -> . reg
    (48) valores -> . INT
    (49) valores -> . FLOAT
    (50) valores -> . STRING
    (51) valores -> . BOOL
    (52) valores -> . varYVals
    (53) valores -> . varsOps
    (54) valores -> . vec
    (55) valores -> . ID . valoresCampos
    (56) valores -> . RES
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (127) expBool -> . or ? expBool : expBool
    (128) expBool -> . or ? expBool : valoresBool
    (129) expBool -> . or ? valoresBool : expBool
    (130) expBool -> . or ? valoresBool : valoresBool
    (131) expBool -> . valoresBool ? expBool : expBool
    (132) expBool -> . valoresBool ? valoresBool : expBool
    (133) expBool -> . valoresBool ? expBool : valoresBool
    (134) expBool -> . valoresBool ? valoresBool : valoresBool
    (135) expBool -> . or
    (67) reg -> . { campos }
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (42) vec -> . [ elem ]
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (136) or -> . or OR and
    (137) or -> . valoresBool OR and
    (138) or -> . or OR valoresBool
    (139) or -> . valoresBool OR valoresBool
    (140) or -> . and
    (120) valoresBool -> . BOOL
    (121) valoresBool -> . funcBool
    (122) valoresBool -> . varYVals
    (123) valoresBool -> . varsOps
    (124) valoresBool -> . eMat
    (125) valoresBool -> . INT
    (126) valoresBool -> . FLOAT
    (62) vecVal -> . ID m
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (141) and -> . and AND eq
    (142) and -> . valoresBool AND eq
    (143) and -> . and AND valoresBool
    (144) and -> . valoresBool AND valoresBool
    (145) and -> . eq
    (37) funcBool -> . COLINEALES ( vec , vec )
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (146) eq -> . eq EQEQ parenBool
    (147) eq -> . eq DISTINTO parenBool
    (148) eq -> . valoresBool EQEQ parenBool
    (149) eq -> . valoresBool DISTINTO parenBool
    (150) eq -> . eq EQEQ valoresBool
    (151) eq -> . eq DISTINTO valoresBool
    (152) eq -> . valoresBool EQEQ valoresBool
    (153) eq -> . valoresBool DISTINTO valoresBool
    (154) eq -> . mayor
    (119) paren -> . ( eMat )
    (160) mayor -> . tCompare > tCompare
    (161) mayor -> . menor
    (155) tCompare -> . eMat
    (156) tCompare -> . varsOps
    (157) tCompare -> . varYVals
    (158) tCompare -> . INT
    (159) tCompare -> . FLOAT
    (162) menor -> . tCompare < tCompare
    (163) menor -> . not
    (164) not -> . NOT not
    (165) not -> . NOT valoresBool
    (166) not -> . parenBool
    (167) parenBool -> . ( expBool )

    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    STRING          shift and go to state 97
    BOOL            shift and go to state 103
    ID              shift and go to state 99
    RES             shift and go to state 93
    {               shift and go to state 105
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    [               shift and go to state 98
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    COLINEALES      shift and go to state 16
    -               shift and go to state 76
    +               shift and go to state 75
    (               shift and go to state 74
    NOT             shift and go to state 89

    and                            shift and go to state 65
    funcBool                       shift and go to state 66
    funcInt                        shift and go to state 67
    menor                          shift and go to state 83
    mayor                          shift and go to state 68
    valoresMat                     shift and go to state 69
    eq                             shift and go to state 70
    valoresBool                    shift and go to state 71
    eMat                           shift and go to state 94
    vecVal                         shift and go to state 9
    vec                            shift and go to state 95
    paren                          shift and go to state 79
    reg                            shift and go to state 96
    iSing                          shift and go to state 77
    exp                            shift and go to state 87
    tCompare                       shift and go to state 78
    not                            shift and go to state 80
    valoresAsig                    shift and go to state 122
    valores                        shift and go to state 121
    parenBool                      shift and go to state 88
    p                              shift and go to state 84
    varsOps                        shift and go to state 104
    varYVals                       shift and go to state 106
    or                             shift and go to state 91
    expBool                        shift and go to state 107

state 55

    (79) varAsig -> varYVals = . valoresAsig
    (74) valoresAsig -> . valores
    (45) valores -> . eMat
    (46) valores -> . expBool
    (47) valores -> . reg
    (48) valores -> . INT
    (49) valores -> . FLOAT
    (50) valores -> . STRING
    (51) valores -> . BOOL
    (52) valores -> . varYVals
    (53) valores -> . varsOps
    (54) valores -> . vec
    (55) valores -> . ID . valoresCampos
    (56) valores -> . RES
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (127) expBool -> . or ? expBool : expBool
    (128) expBool -> . or ? expBool : valoresBool
    (129) expBool -> . or ? valoresBool : expBool
    (130) expBool -> . or ? valoresBool : valoresBool
    (131) expBool -> . valoresBool ? expBool : expBool
    (132) expBool -> . valoresBool ? valoresBool : expBool
    (133) expBool -> . valoresBool ? expBool : valoresBool
    (134) expBool -> . valoresBool ? valoresBool : valoresBool
    (135) expBool -> . or
    (67) reg -> . { campos }
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (42) vec -> . [ elem ]
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (136) or -> . or OR and
    (137) or -> . valoresBool OR and
    (138) or -> . or OR valoresBool
    (139) or -> . valoresBool OR valoresBool
    (140) or -> . and
    (120) valoresBool -> . BOOL
    (121) valoresBool -> . funcBool
    (122) valoresBool -> . varYVals
    (123) valoresBool -> . varsOps
    (124) valoresBool -> . eMat
    (125) valoresBool -> . INT
    (126) valoresBool -> . FLOAT
    (62) vecVal -> . ID m
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (141) and -> . and AND eq
    (142) and -> . valoresBool AND eq
    (143) and -> . and AND valoresBool
    (144) and -> . valoresBool AND valoresBool
    (145) and -> . eq
    (37) funcBool -> . COLINEALES ( vec , vec )
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (146) eq -> . eq EQEQ parenBool
    (147) eq -> . eq DISTINTO parenBool
    (148) eq -> . valoresBool EQEQ parenBool
    (149) eq -> . valoresBool DISTINTO parenBool
    (150) eq -> . eq EQEQ valoresBool
    (151) eq -> . eq DISTINTO valoresBool
    (152) eq -> . valoresBool EQEQ valoresBool
    (153) eq -> . valoresBool DISTINTO valoresBool
    (154) eq -> . mayor
    (119) paren -> . ( eMat )
    (160) mayor -> . tCompare > tCompare
    (161) mayor -> . menor
    (155) tCompare -> . eMat
    (156) tCompare -> . varsOps
    (157) tCompare -> . varYVals
    (158) tCompare -> . INT
    (159) tCompare -> . FLOAT
    (162) menor -> . tCompare < tCompare
    (163) menor -> . not
    (164) not -> . NOT not
    (165) not -> . NOT valoresBool
    (166) not -> . parenBool
    (167) parenBool -> . ( expBool )

    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    STRING          shift and go to state 97
    BOOL            shift and go to state 103
    ID              shift and go to state 99
    RES             shift and go to state 93
    {               shift and go to state 105
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    [               shift and go to state 98
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    COLINEALES      shift and go to state 16
    -               shift and go to state 76
    +               shift and go to state 75
    (               shift and go to state 74
    NOT             shift and go to state 89

    and                            shift and go to state 65
    funcBool                       shift and go to state 66
    funcInt                        shift and go to state 67
    menor                          shift and go to state 83
    mayor                          shift and go to state 68
    valoresMat                     shift and go to state 69
    eq                             shift and go to state 70
    valoresBool                    shift and go to state 71
    eMat                           shift and go to state 94
    vecVal                         shift and go to state 9
    vec                            shift and go to state 95
    paren                          shift and go to state 79
    reg                            shift and go to state 96
    iSing                          shift and go to state 77
    exp                            shift and go to state 87
    tCompare                       shift and go to state 78
    not                            shift and go to state 80
    valoresAsig                    shift and go to state 123
    valores                        shift and go to state 121
    parenBool                      shift and go to state 88
    p                              shift and go to state 84
    varsOps                        shift and go to state 104
    varYVals                       shift and go to state 106
    or                             shift and go to state 91
    expBool                        shift and go to state 107

state 56

    (72) varsOps -> varYVals MASMAS .

    AND             reduce using rule 72 (varsOps -> varYVals MASMAS .)
    EQEQ            reduce using rule 72 (varsOps -> varYVals MASMAS .)
    DISTINTO        reduce using rule 72 (varsOps -> varYVals MASMAS .)
    ?               reduce using rule 72 (varsOps -> varYVals MASMAS .)
    OR              reduce using rule 72 (varsOps -> varYVals MASMAS .)
    )               reduce using rule 72 (varsOps -> varYVals MASMAS .)
    ;               reduce using rule 72 (varsOps -> varYVals MASMAS .)
    ,               reduce using rule 72 (varsOps -> varYVals MASMAS .)
    ]               reduce using rule 72 (varsOps -> varYVals MASMAS .)
    }               reduce using rule 72 (varsOps -> varYVals MASMAS .)
    :               reduce using rule 72 (varsOps -> varYVals MASMAS .)
    +               reduce using rule 72 (varsOps -> varYVals MASMAS .)
    -               reduce using rule 72 (varsOps -> varYVals MASMAS .)
    *               reduce using rule 72 (varsOps -> varYVals MASMAS .)
    /               reduce using rule 72 (varsOps -> varYVals MASMAS .)
    %               reduce using rule 72 (varsOps -> varYVals MASMAS .)
    ^               reduce using rule 72 (varsOps -> varYVals MASMAS .)
    >               reduce using rule 72 (varsOps -> varYVals MASMAS .)
    <               reduce using rule 72 (varsOps -> varYVals MASMAS .)


state 57

    (75) varAsig -> varYVals MULEQ . valoresAsig
    (74) valoresAsig -> . valores
    (45) valores -> . eMat
    (46) valores -> . expBool
    (47) valores -> . reg
    (48) valores -> . INT
    (49) valores -> . FLOAT
    (50) valores -> . STRING
    (51) valores -> . BOOL
    (52) valores -> . varYVals
    (53) valores -> . varsOps
    (54) valores -> . vec
    (55) valores -> . ID . valoresCampos
    (56) valores -> . RES
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (127) expBool -> . or ? expBool : expBool
    (128) expBool -> . or ? expBool : valoresBool
    (129) expBool -> . or ? valoresBool : expBool
    (130) expBool -> . or ? valoresBool : valoresBool
    (131) expBool -> . valoresBool ? expBool : expBool
    (132) expBool -> . valoresBool ? valoresBool : expBool
    (133) expBool -> . valoresBool ? expBool : valoresBool
    (134) expBool -> . valoresBool ? valoresBool : valoresBool
    (135) expBool -> . or
    (67) reg -> . { campos }
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (42) vec -> . [ elem ]
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (136) or -> . or OR and
    (137) or -> . valoresBool OR and
    (138) or -> . or OR valoresBool
    (139) or -> . valoresBool OR valoresBool
    (140) or -> . and
    (120) valoresBool -> . BOOL
    (121) valoresBool -> . funcBool
    (122) valoresBool -> . varYVals
    (123) valoresBool -> . varsOps
    (124) valoresBool -> . eMat
    (125) valoresBool -> . INT
    (126) valoresBool -> . FLOAT
    (62) vecVal -> . ID m
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (141) and -> . and AND eq
    (142) and -> . valoresBool AND eq
    (143) and -> . and AND valoresBool
    (144) and -> . valoresBool AND valoresBool
    (145) and -> . eq
    (37) funcBool -> . COLINEALES ( vec , vec )
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (146) eq -> . eq EQEQ parenBool
    (147) eq -> . eq DISTINTO parenBool
    (148) eq -> . valoresBool EQEQ parenBool
    (149) eq -> . valoresBool DISTINTO parenBool
    (150) eq -> . eq EQEQ valoresBool
    (151) eq -> . eq DISTINTO valoresBool
    (152) eq -> . valoresBool EQEQ valoresBool
    (153) eq -> . valoresBool DISTINTO valoresBool
    (154) eq -> . mayor
    (119) paren -> . ( eMat )
    (160) mayor -> . tCompare > tCompare
    (161) mayor -> . menor
    (155) tCompare -> . eMat
    (156) tCompare -> . varsOps
    (157) tCompare -> . varYVals
    (158) tCompare -> . INT
    (159) tCompare -> . FLOAT
    (162) menor -> . tCompare < tCompare
    (163) menor -> . not
    (164) not -> . NOT not
    (165) not -> . NOT valoresBool
    (166) not -> . parenBool
    (167) parenBool -> . ( expBool )

    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    STRING          shift and go to state 97
    BOOL            shift and go to state 103
    ID              shift and go to state 99
    RES             shift and go to state 93
    {               shift and go to state 105
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    [               shift and go to state 98
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    COLINEALES      shift and go to state 16
    -               shift and go to state 76
    +               shift and go to state 75
    (               shift and go to state 74
    NOT             shift and go to state 89

    and                            shift and go to state 65
    funcBool                       shift and go to state 66
    funcInt                        shift and go to state 67
    menor                          shift and go to state 83
    mayor                          shift and go to state 68
    valoresMat                     shift and go to state 69
    eq                             shift and go to state 70
    valoresBool                    shift and go to state 71
    eMat                           shift and go to state 94
    vecVal                         shift and go to state 9
    vec                            shift and go to state 95
    paren                          shift and go to state 79
    reg                            shift and go to state 96
    iSing                          shift and go to state 77
    exp                            shift and go to state 87
    tCompare                       shift and go to state 78
    not                            shift and go to state 80
    valoresAsig                    shift and go to state 124
    valores                        shift and go to state 121
    parenBool                      shift and go to state 88
    p                              shift and go to state 84
    varsOps                        shift and go to state 104
    varYVals                       shift and go to state 106
    or                             shift and go to state 91
    expBool                        shift and go to state 107

state 58

    (76) varAsig -> varYVals DIVEQ . valoresAsig
    (74) valoresAsig -> . valores
    (45) valores -> . eMat
    (46) valores -> . expBool
    (47) valores -> . reg
    (48) valores -> . INT
    (49) valores -> . FLOAT
    (50) valores -> . STRING
    (51) valores -> . BOOL
    (52) valores -> . varYVals
    (53) valores -> . varsOps
    (54) valores -> . vec
    (55) valores -> . ID . valoresCampos
    (56) valores -> . RES
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (127) expBool -> . or ? expBool : expBool
    (128) expBool -> . or ? expBool : valoresBool
    (129) expBool -> . or ? valoresBool : expBool
    (130) expBool -> . or ? valoresBool : valoresBool
    (131) expBool -> . valoresBool ? expBool : expBool
    (132) expBool -> . valoresBool ? valoresBool : expBool
    (133) expBool -> . valoresBool ? expBool : valoresBool
    (134) expBool -> . valoresBool ? valoresBool : valoresBool
    (135) expBool -> . or
    (67) reg -> . { campos }
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (42) vec -> . [ elem ]
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (136) or -> . or OR and
    (137) or -> . valoresBool OR and
    (138) or -> . or OR valoresBool
    (139) or -> . valoresBool OR valoresBool
    (140) or -> . and
    (120) valoresBool -> . BOOL
    (121) valoresBool -> . funcBool
    (122) valoresBool -> . varYVals
    (123) valoresBool -> . varsOps
    (124) valoresBool -> . eMat
    (125) valoresBool -> . INT
    (126) valoresBool -> . FLOAT
    (62) vecVal -> . ID m
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (141) and -> . and AND eq
    (142) and -> . valoresBool AND eq
    (143) and -> . and AND valoresBool
    (144) and -> . valoresBool AND valoresBool
    (145) and -> . eq
    (37) funcBool -> . COLINEALES ( vec , vec )
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (146) eq -> . eq EQEQ parenBool
    (147) eq -> . eq DISTINTO parenBool
    (148) eq -> . valoresBool EQEQ parenBool
    (149) eq -> . valoresBool DISTINTO parenBool
    (150) eq -> . eq EQEQ valoresBool
    (151) eq -> . eq DISTINTO valoresBool
    (152) eq -> . valoresBool EQEQ valoresBool
    (153) eq -> . valoresBool DISTINTO valoresBool
    (154) eq -> . mayor
    (119) paren -> . ( eMat )
    (160) mayor -> . tCompare > tCompare
    (161) mayor -> . menor
    (155) tCompare -> . eMat
    (156) tCompare -> . varsOps
    (157) tCompare -> . varYVals
    (158) tCompare -> . INT
    (159) tCompare -> . FLOAT
    (162) menor -> . tCompare < tCompare
    (163) menor -> . not
    (164) not -> . NOT not
    (165) not -> . NOT valoresBool
    (166) not -> . parenBool
    (167) parenBool -> . ( expBool )

    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    STRING          shift and go to state 97
    BOOL            shift and go to state 103
    ID              shift and go to state 99
    RES             shift and go to state 93
    {               shift and go to state 105
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    [               shift and go to state 98
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    COLINEALES      shift and go to state 16
    -               shift and go to state 76
    +               shift and go to state 75
    (               shift and go to state 74
    NOT             shift and go to state 89

    and                            shift and go to state 65
    funcBool                       shift and go to state 66
    funcInt                        shift and go to state 67
    menor                          shift and go to state 83
    mayor                          shift and go to state 68
    valoresMat                     shift and go to state 69
    eq                             shift and go to state 70
    valoresBool                    shift and go to state 71
    eMat                           shift and go to state 94
    vecVal                         shift and go to state 9
    vec                            shift and go to state 95
    paren                          shift and go to state 79
    reg                            shift and go to state 96
    iSing                          shift and go to state 77
    exp                            shift and go to state 87
    tCompare                       shift and go to state 78
    not                            shift and go to state 80
    valoresAsig                    shift and go to state 125
    valores                        shift and go to state 121
    parenBool                      shift and go to state 88
    p                              shift and go to state 84
    varsOps                        shift and go to state 104
    varYVals                       shift and go to state 106
    or                             shift and go to state 91
    expBool                        shift and go to state 107

state 59

    (36) funcString -> CAPITALIZAR ( . eMat )
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (62) vecVal -> . ID m
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (119) paren -> . ( eMat )

    INT             shift and go to state 131
    FLOAT           shift and go to state 128
    STRING          shift and go to state 72
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    -               shift and go to state 76
    +               shift and go to state 75
    (               shift and go to state 127

    eMat                           shift and go to state 126
    funcInt                        shift and go to state 67
    iSing                          shift and go to state 77
    p                              shift and go to state 84
    varsOps                        shift and go to state 129
    valoresMat                     shift and go to state 69
    paren                          shift and go to state 79
    exp                            shift and go to state 87
    varYVals                       shift and go to state 130
    vecVal                         shift and go to state 9

state 60

    (35) funcInt -> LENGTH ( . vec )
    (42) vec -> . [ elem ]

    [               shift and go to state 98

    vec                            shift and go to state 132

state 61

    (71) varsOps -> MASMAS varYVals .

    AND             reduce using rule 71 (varsOps -> MASMAS varYVals .)
    EQEQ            reduce using rule 71 (varsOps -> MASMAS varYVals .)
    DISTINTO        reduce using rule 71 (varsOps -> MASMAS varYVals .)
    ?               reduce using rule 71 (varsOps -> MASMAS varYVals .)
    OR              reduce using rule 71 (varsOps -> MASMAS varYVals .)
    )               reduce using rule 71 (varsOps -> MASMAS varYVals .)
    ;               reduce using rule 71 (varsOps -> MASMAS varYVals .)
    ,               reduce using rule 71 (varsOps -> MASMAS varYVals .)
    ]               reduce using rule 71 (varsOps -> MASMAS varYVals .)
    }               reduce using rule 71 (varsOps -> MASMAS varYVals .)
    :               reduce using rule 71 (varsOps -> MASMAS varYVals .)
    +               reduce using rule 71 (varsOps -> MASMAS varYVals .)
    -               reduce using rule 71 (varsOps -> MASMAS varYVals .)
    *               reduce using rule 71 (varsOps -> MASMAS varYVals .)
    /               reduce using rule 71 (varsOps -> MASMAS varYVals .)
    %               reduce using rule 71 (varsOps -> MASMAS varYVals .)
    ^               reduce using rule 71 (varsOps -> MASMAS varYVals .)
    >               reduce using rule 71 (varsOps -> MASMAS varYVals .)
    <               reduce using rule 71 (varsOps -> MASMAS varYVals .)


state 62

    (1) g -> linea g .

    $end            reduce using rule 1 (g -> linea g .)
    }               reduce using rule 1 (g -> linea g .)


state 63

    (14) loop -> DO bloque WHILE . ( expBool ) ;

    (               shift and go to state 133


state 64

    (28) bloque -> { g . }

    }               shift and go to state 134


state 65

    (140) or -> and .
    (141) and -> and . AND eq
    (143) and -> and . AND valoresBool

    ?               reduce using rule 140 (or -> and .)
    OR              reduce using rule 140 (or -> and .)
    ;               reduce using rule 140 (or -> and .)
    )               reduce using rule 140 (or -> and .)
    ,               reduce using rule 140 (or -> and .)
    ]               reduce using rule 140 (or -> and .)
    }               reduce using rule 140 (or -> and .)
    :               reduce using rule 140 (or -> and .)
    AND             shift and go to state 135


state 66

    (121) valoresBool -> funcBool .

    EQEQ            reduce using rule 121 (valoresBool -> funcBool .)
    DISTINTO        reduce using rule 121 (valoresBool -> funcBool .)
    AND             reduce using rule 121 (valoresBool -> funcBool .)
    ?               reduce using rule 121 (valoresBool -> funcBool .)
    OR              reduce using rule 121 (valoresBool -> funcBool .)
    )               reduce using rule 121 (valoresBool -> funcBool .)
    ;               reduce using rule 121 (valoresBool -> funcBool .)
    ,               reduce using rule 121 (valoresBool -> funcBool .)
    ]               reduce using rule 121 (valoresBool -> funcBool .)
    }               reduce using rule 121 (valoresBool -> funcBool .)
    :               reduce using rule 121 (valoresBool -> funcBool .)


state 67

    (83) valoresMat -> funcInt .

    *               reduce using rule 83 (valoresMat -> funcInt .)
    /               reduce using rule 83 (valoresMat -> funcInt .)
    %               reduce using rule 83 (valoresMat -> funcInt .)
    ^               reduce using rule 83 (valoresMat -> funcInt .)
    +               reduce using rule 83 (valoresMat -> funcInt .)
    -               reduce using rule 83 (valoresMat -> funcInt .)
    ?               reduce using rule 83 (valoresMat -> funcInt .)
    OR              reduce using rule 83 (valoresMat -> funcInt .)
    AND             reduce using rule 83 (valoresMat -> funcInt .)
    EQEQ            reduce using rule 83 (valoresMat -> funcInt .)
    DISTINTO        reduce using rule 83 (valoresMat -> funcInt .)
    >               reduce using rule 83 (valoresMat -> funcInt .)
    <               reduce using rule 83 (valoresMat -> funcInt .)
    )               reduce using rule 83 (valoresMat -> funcInt .)
    ;               reduce using rule 83 (valoresMat -> funcInt .)
    ,               reduce using rule 83 (valoresMat -> funcInt .)
    ]               reduce using rule 83 (valoresMat -> funcInt .)
    }               reduce using rule 83 (valoresMat -> funcInt .)
    :               reduce using rule 83 (valoresMat -> funcInt .)


state 68

    (154) eq -> mayor .

    EQEQ            reduce using rule 154 (eq -> mayor .)
    DISTINTO        reduce using rule 154 (eq -> mayor .)
    AND             reduce using rule 154 (eq -> mayor .)
    ?               reduce using rule 154 (eq -> mayor .)
    OR              reduce using rule 154 (eq -> mayor .)
    :               reduce using rule 154 (eq -> mayor .)
    )               reduce using rule 154 (eq -> mayor .)
    ;               reduce using rule 154 (eq -> mayor .)
    ,               reduce using rule 154 (eq -> mayor .)
    ]               reduce using rule 154 (eq -> mayor .)
    }               reduce using rule 154 (eq -> mayor .)


state 69

    (89) eMat -> valoresMat . + p
    (90) eMat -> valoresMat . - p
    (93) eMat -> valoresMat . + valoresMat
    (94) eMat -> valoresMat . - valoresMat
    (99) p -> valoresMat . * exp
    (100) p -> valoresMat . / exp
    (101) p -> valoresMat . % exp
    (105) p -> valoresMat . * valoresMat
    (106) p -> valoresMat . / valoresMat
    (107) p -> valoresMat . % valoresMat
    (110) exp -> valoresMat . ^ iSing
    (112) exp -> valoresMat . ^ valoresMat

    +               shift and go to state 137
    -               shift and go to state 139
    *               shift and go to state 138
    /               shift and go to state 140
    %               shift and go to state 136
    ^               shift and go to state 141


state 70

    (145) and -> eq .
    (146) eq -> eq . EQEQ parenBool
    (147) eq -> eq . DISTINTO parenBool
    (150) eq -> eq . EQEQ valoresBool
    (151) eq -> eq . DISTINTO valoresBool

    AND             reduce using rule 145 (and -> eq .)
    ?               reduce using rule 145 (and -> eq .)
    OR              reduce using rule 145 (and -> eq .)
    ;               reduce using rule 145 (and -> eq .)
    )               reduce using rule 145 (and -> eq .)
    ,               reduce using rule 145 (and -> eq .)
    ]               reduce using rule 145 (and -> eq .)
    }               reduce using rule 145 (and -> eq .)
    :               reduce using rule 145 (and -> eq .)
    EQEQ            shift and go to state 142
    DISTINTO        shift and go to state 143


state 71

    (131) expBool -> valoresBool . ? expBool : expBool
    (132) expBool -> valoresBool . ? valoresBool : expBool
    (133) expBool -> valoresBool . ? expBool : valoresBool
    (134) expBool -> valoresBool . ? valoresBool : valoresBool
    (137) or -> valoresBool . OR and
    (139) or -> valoresBool . OR valoresBool
    (142) and -> valoresBool . AND eq
    (144) and -> valoresBool . AND valoresBool
    (148) eq -> valoresBool . EQEQ parenBool
    (149) eq -> valoresBool . DISTINTO parenBool
    (152) eq -> valoresBool . EQEQ valoresBool
    (153) eq -> valoresBool . DISTINTO valoresBool

    ?               shift and go to state 148
    OR              shift and go to state 147
    AND             shift and go to state 144
    EQEQ            shift and go to state 146
    DISTINTO        shift and go to state 145


state 72

    (86) valoresMat -> STRING .

    *               reduce using rule 86 (valoresMat -> STRING .)
    /               reduce using rule 86 (valoresMat -> STRING .)
    %               reduce using rule 86 (valoresMat -> STRING .)
    ^               reduce using rule 86 (valoresMat -> STRING .)
    +               reduce using rule 86 (valoresMat -> STRING .)
    -               reduce using rule 86 (valoresMat -> STRING .)
    ?               reduce using rule 86 (valoresMat -> STRING .)
    OR              reduce using rule 86 (valoresMat -> STRING .)
    AND             reduce using rule 86 (valoresMat -> STRING .)
    EQEQ            reduce using rule 86 (valoresMat -> STRING .)
    DISTINTO        reduce using rule 86 (valoresMat -> STRING .)
    >               reduce using rule 86 (valoresMat -> STRING .)
    <               reduce using rule 86 (valoresMat -> STRING .)
    )               reduce using rule 86 (valoresMat -> STRING .)
    ;               reduce using rule 86 (valoresMat -> STRING .)
    ,               reduce using rule 86 (valoresMat -> STRING .)
    ]               reduce using rule 86 (valoresMat -> STRING .)
    }               reduce using rule 86 (valoresMat -> STRING .)
    :               reduce using rule 86 (valoresMat -> STRING .)


state 73

    (124) valoresBool -> eMat .
    (87) eMat -> eMat . + p
    (88) eMat -> eMat . - p
    (91) eMat -> eMat . + valoresMat
    (92) eMat -> eMat . - valoresMat
    (155) tCompare -> eMat .

    EQEQ            reduce using rule 124 (valoresBool -> eMat .)
    DISTINTO        reduce using rule 124 (valoresBool -> eMat .)
    AND             reduce using rule 124 (valoresBool -> eMat .)
    ?               reduce using rule 124 (valoresBool -> eMat .)
    OR              reduce using rule 124 (valoresBool -> eMat .)
    )               reduce using rule 124 (valoresBool -> eMat .)
    ;               reduce using rule 124 (valoresBool -> eMat .)
    ,               reduce using rule 124 (valoresBool -> eMat .)
    ]               reduce using rule 124 (valoresBool -> eMat .)
    }               reduce using rule 124 (valoresBool -> eMat .)
    :               reduce using rule 124 (valoresBool -> eMat .)
    +               shift and go to state 149
    -               shift and go to state 150
    >               reduce using rule 155 (tCompare -> eMat .)
    <               reduce using rule 155 (tCompare -> eMat .)


state 74

    (119) paren -> ( . eMat )
    (167) parenBool -> ( . expBool )
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (127) expBool -> . or ? expBool : expBool
    (128) expBool -> . or ? expBool : valoresBool
    (129) expBool -> . or ? valoresBool : expBool
    (130) expBool -> . or ? valoresBool : valoresBool
    (131) expBool -> . valoresBool ? expBool : expBool
    (132) expBool -> . valoresBool ? valoresBool : expBool
    (133) expBool -> . valoresBool ? expBool : valoresBool
    (134) expBool -> . valoresBool ? valoresBool : valoresBool
    (135) expBool -> . or
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (136) or -> . or OR and
    (137) or -> . valoresBool OR and
    (138) or -> . or OR valoresBool
    (139) or -> . valoresBool OR valoresBool
    (140) or -> . and
    (120) valoresBool -> . BOOL
    (121) valoresBool -> . funcBool
    (122) valoresBool -> . varYVals
    (123) valoresBool -> . varsOps
    (124) valoresBool -> . eMat
    (125) valoresBool -> . INT
    (126) valoresBool -> . FLOAT
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (141) and -> . and AND eq
    (142) and -> . valoresBool AND eq
    (143) and -> . and AND valoresBool
    (144) and -> . valoresBool AND valoresBool
    (145) and -> . eq
    (37) funcBool -> . COLINEALES ( vec , vec )
    (62) vecVal -> . ID m
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (146) eq -> . eq EQEQ parenBool
    (147) eq -> . eq DISTINTO parenBool
    (148) eq -> . valoresBool EQEQ parenBool
    (149) eq -> . valoresBool DISTINTO parenBool
    (150) eq -> . eq EQEQ valoresBool
    (151) eq -> . eq DISTINTO valoresBool
    (152) eq -> . valoresBool EQEQ valoresBool
    (153) eq -> . valoresBool DISTINTO valoresBool
    (154) eq -> . mayor
    (119) paren -> . ( eMat )
    (160) mayor -> . tCompare > tCompare
    (161) mayor -> . menor
    (155) tCompare -> . eMat
    (156) tCompare -> . varsOps
    (157) tCompare -> . varYVals
    (158) tCompare -> . INT
    (159) tCompare -> . FLOAT
    (162) menor -> . tCompare < tCompare
    (163) menor -> . not
    (164) not -> . NOT not
    (165) not -> . NOT valoresBool
    (166) not -> . parenBool
    (167) parenBool -> . ( expBool )

    INT             shift and go to state 152
    FLOAT           shift and go to state 153
    STRING          shift and go to state 72
    BOOL            shift and go to state 85
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    COLINEALES      shift and go to state 16
    -               shift and go to state 76
    +               shift and go to state 75
    (               shift and go to state 74
    NOT             shift and go to state 89

    and                            shift and go to state 65
    funcBool                       shift and go to state 66
    funcInt                        shift and go to state 67
    menor                          shift and go to state 83
    valoresMat                     shift and go to state 69
    eq                             shift and go to state 70
    vecVal                         shift and go to state 9
    valoresBool                    shift and go to state 71
    eMat                           shift and go to state 151
    mayor                          shift and go to state 68
    paren                          shift and go to state 79
    varsOps                        shift and go to state 154
    tCompare                       shift and go to state 78
    not                            shift and go to state 80
    parenBool                      shift and go to state 88
    p                              shift and go to state 84
    iSing                          shift and go to state 77
    exp                            shift and go to state 87
    varYVals                       shift and go to state 155
    or                             shift and go to state 91
    expBool                        shift and go to state 156

state 75

    (115) iSing -> + . paren
    (117) iSing -> + . valoresMat
    (119) paren -> . ( eMat )
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (62) vecVal -> . ID m

    (               shift and go to state 127
    INT             shift and go to state 131
    FLOAT           shift and go to state 128
    STRING          shift and go to state 72
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30

    funcInt                        shift and go to state 67
    varsOps                        shift and go to state 129
    valoresMat                     shift and go to state 157
    paren                          shift and go to state 158
    varYVals                       shift and go to state 130
    vecVal                         shift and go to state 9

state 76

    (114) iSing -> - . paren
    (116) iSing -> - . valoresMat
    (119) paren -> . ( eMat )
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (62) vecVal -> . ID m

    (               shift and go to state 127
    INT             shift and go to state 131
    FLOAT           shift and go to state 128
    STRING          shift and go to state 72
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30

    funcInt                        shift and go to state 67
    varsOps                        shift and go to state 129
    valoresMat                     shift and go to state 159
    paren                          shift and go to state 160
    varYVals                       shift and go to state 130
    vecVal                         shift and go to state 9

state 77

    (113) exp -> iSing .

    ^               reduce using rule 113 (exp -> iSing .)
    *               reduce using rule 113 (exp -> iSing .)
    /               reduce using rule 113 (exp -> iSing .)
    %               reduce using rule 113 (exp -> iSing .)
    +               reduce using rule 113 (exp -> iSing .)
    -               reduce using rule 113 (exp -> iSing .)
    EQEQ            reduce using rule 113 (exp -> iSing .)
    DISTINTO        reduce using rule 113 (exp -> iSing .)
    AND             reduce using rule 113 (exp -> iSing .)
    ?               reduce using rule 113 (exp -> iSing .)
    OR              reduce using rule 113 (exp -> iSing .)
    )               reduce using rule 113 (exp -> iSing .)
    ;               reduce using rule 113 (exp -> iSing .)
    ,               reduce using rule 113 (exp -> iSing .)
    ]               reduce using rule 113 (exp -> iSing .)
    }               reduce using rule 113 (exp -> iSing .)
    :               reduce using rule 113 (exp -> iSing .)
    >               reduce using rule 113 (exp -> iSing .)
    <               reduce using rule 113 (exp -> iSing .)


state 78

    (160) mayor -> tCompare . > tCompare
    (162) menor -> tCompare . < tCompare

    >               shift and go to state 162
    <               shift and go to state 161


state 79

    (118) iSing -> paren .

    ^               reduce using rule 118 (iSing -> paren .)
    *               reduce using rule 118 (iSing -> paren .)
    /               reduce using rule 118 (iSing -> paren .)
    %               reduce using rule 118 (iSing -> paren .)
    +               reduce using rule 118 (iSing -> paren .)
    -               reduce using rule 118 (iSing -> paren .)
    ?               reduce using rule 118 (iSing -> paren .)
    OR              reduce using rule 118 (iSing -> paren .)
    AND             reduce using rule 118 (iSing -> paren .)
    EQEQ            reduce using rule 118 (iSing -> paren .)
    DISTINTO        reduce using rule 118 (iSing -> paren .)
    >               reduce using rule 118 (iSing -> paren .)
    <               reduce using rule 118 (iSing -> paren .)
    )               reduce using rule 118 (iSing -> paren .)
    ;               reduce using rule 118 (iSing -> paren .)
    ,               reduce using rule 118 (iSing -> paren .)
    ]               reduce using rule 118 (iSing -> paren .)
    }               reduce using rule 118 (iSing -> paren .)
    :               reduce using rule 118 (iSing -> paren .)


state 80

    (163) menor -> not .

    EQEQ            reduce using rule 163 (menor -> not .)
    DISTINTO        reduce using rule 163 (menor -> not .)
    AND             reduce using rule 163 (menor -> not .)
    ?               reduce using rule 163 (menor -> not .)
    OR              reduce using rule 163 (menor -> not .)
    )               reduce using rule 163 (menor -> not .)
    ;               reduce using rule 163 (menor -> not .)
    ,               reduce using rule 163 (menor -> not .)
    ]               reduce using rule 163 (menor -> not .)
    }               reduce using rule 163 (menor -> not .)
    :               reduce using rule 163 (menor -> not .)


state 81

    (125) valoresBool -> INT .
    (81) valoresMat -> INT .
    (158) tCompare -> INT .

    ?               reduce using rule 125 (valoresBool -> INT .)
    OR              reduce using rule 125 (valoresBool -> INT .)
    AND             reduce using rule 125 (valoresBool -> INT .)
    EQEQ            reduce using rule 125 (valoresBool -> INT .)
    DISTINTO        reduce using rule 125 (valoresBool -> INT .)
    )               reduce using rule 125 (valoresBool -> INT .)
    ;               reduce using rule 125 (valoresBool -> INT .)
    ,               reduce using rule 125 (valoresBool -> INT .)
    ]               reduce using rule 125 (valoresBool -> INT .)
    }               reduce using rule 125 (valoresBool -> INT .)
    :               reduce using rule 125 (valoresBool -> INT .)
    +               reduce using rule 81 (valoresMat -> INT .)
    -               reduce using rule 81 (valoresMat -> INT .)
    *               reduce using rule 81 (valoresMat -> INT .)
    /               reduce using rule 81 (valoresMat -> INT .)
    %               reduce using rule 81 (valoresMat -> INT .)
    ^               reduce using rule 81 (valoresMat -> INT .)
    >               reduce using rule 158 (tCompare -> INT .)
    <               reduce using rule 158 (tCompare -> INT .)


state 82

    (126) valoresBool -> FLOAT .
    (82) valoresMat -> FLOAT .
    (159) tCompare -> FLOAT .

    ?               reduce using rule 126 (valoresBool -> FLOAT .)
    OR              reduce using rule 126 (valoresBool -> FLOAT .)
    AND             reduce using rule 126 (valoresBool -> FLOAT .)
    EQEQ            reduce using rule 126 (valoresBool -> FLOAT .)
    DISTINTO        reduce using rule 126 (valoresBool -> FLOAT .)
    )               reduce using rule 126 (valoresBool -> FLOAT .)
    ;               reduce using rule 126 (valoresBool -> FLOAT .)
    ,               reduce using rule 126 (valoresBool -> FLOAT .)
    ]               reduce using rule 126 (valoresBool -> FLOAT .)
    }               reduce using rule 126 (valoresBool -> FLOAT .)
    :               reduce using rule 126 (valoresBool -> FLOAT .)
    +               reduce using rule 82 (valoresMat -> FLOAT .)
    -               reduce using rule 82 (valoresMat -> FLOAT .)
    *               reduce using rule 82 (valoresMat -> FLOAT .)
    /               reduce using rule 82 (valoresMat -> FLOAT .)
    %               reduce using rule 82 (valoresMat -> FLOAT .)
    ^               reduce using rule 82 (valoresMat -> FLOAT .)
    >               reduce using rule 159 (tCompare -> FLOAT .)
    <               reduce using rule 159 (tCompare -> FLOAT .)


state 83

    (161) mayor -> menor .

    EQEQ            reduce using rule 161 (mayor -> menor .)
    DISTINTO        reduce using rule 161 (mayor -> menor .)
    AND             reduce using rule 161 (mayor -> menor .)
    ?               reduce using rule 161 (mayor -> menor .)
    OR              reduce using rule 161 (mayor -> menor .)
    ,               reduce using rule 161 (mayor -> menor .)
    ]               reduce using rule 161 (mayor -> menor .)
    )               reduce using rule 161 (mayor -> menor .)
    ;               reduce using rule 161 (mayor -> menor .)
    }               reduce using rule 161 (mayor -> menor .)
    :               reduce using rule 161 (mayor -> menor .)


state 84

    (95) eMat -> p .
    (96) p -> p . * exp
    (97) p -> p . / exp
    (98) p -> p . % exp
    (102) p -> p . * valoresMat
    (103) p -> p . / valoresMat
    (104) p -> p . % valoresMat

    +               reduce using rule 95 (eMat -> p .)
    -               reduce using rule 95 (eMat -> p .)
    EQEQ            reduce using rule 95 (eMat -> p .)
    DISTINTO        reduce using rule 95 (eMat -> p .)
    AND             reduce using rule 95 (eMat -> p .)
    ?               reduce using rule 95 (eMat -> p .)
    OR              reduce using rule 95 (eMat -> p .)
    )               reduce using rule 95 (eMat -> p .)
    ;               reduce using rule 95 (eMat -> p .)
    ,               reduce using rule 95 (eMat -> p .)
    ]               reduce using rule 95 (eMat -> p .)
    }               reduce using rule 95 (eMat -> p .)
    :               reduce using rule 95 (eMat -> p .)
    >               reduce using rule 95 (eMat -> p .)
    <               reduce using rule 95 (eMat -> p .)
    *               shift and go to state 164
    /               shift and go to state 165
    %               shift and go to state 163


state 85

    (120) valoresBool -> BOOL .

    EQEQ            reduce using rule 120 (valoresBool -> BOOL .)
    DISTINTO        reduce using rule 120 (valoresBool -> BOOL .)
    AND             reduce using rule 120 (valoresBool -> BOOL .)
    ?               reduce using rule 120 (valoresBool -> BOOL .)
    OR              reduce using rule 120 (valoresBool -> BOOL .)
    )               reduce using rule 120 (valoresBool -> BOOL .)
    ;               reduce using rule 120 (valoresBool -> BOOL .)
    ,               reduce using rule 120 (valoresBool -> BOOL .)
    ]               reduce using rule 120 (valoresBool -> BOOL .)
    }               reduce using rule 120 (valoresBool -> BOOL .)
    :               reduce using rule 120 (valoresBool -> BOOL .)


state 86

    (123) valoresBool -> varsOps .
    (85) valoresMat -> varsOps .
    (156) tCompare -> varsOps .

    ?               reduce using rule 123 (valoresBool -> varsOps .)
    OR              reduce using rule 123 (valoresBool -> varsOps .)
    AND             reduce using rule 123 (valoresBool -> varsOps .)
    EQEQ            reduce using rule 123 (valoresBool -> varsOps .)
    DISTINTO        reduce using rule 123 (valoresBool -> varsOps .)
    )               reduce using rule 123 (valoresBool -> varsOps .)
    ;               reduce using rule 123 (valoresBool -> varsOps .)
    ,               reduce using rule 123 (valoresBool -> varsOps .)
    ]               reduce using rule 123 (valoresBool -> varsOps .)
    }               reduce using rule 123 (valoresBool -> varsOps .)
    :               reduce using rule 123 (valoresBool -> varsOps .)
    +               reduce using rule 85 (valoresMat -> varsOps .)
    -               reduce using rule 85 (valoresMat -> varsOps .)
    *               reduce using rule 85 (valoresMat -> varsOps .)
    /               reduce using rule 85 (valoresMat -> varsOps .)
    %               reduce using rule 85 (valoresMat -> varsOps .)
    ^               reduce using rule 85 (valoresMat -> varsOps .)
    >               reduce using rule 156 (tCompare -> varsOps .)
    <               reduce using rule 156 (tCompare -> varsOps .)


state 87

    (108) p -> exp .
    (109) exp -> exp . ^ iSing
    (111) exp -> exp . ^ valoresMat

    *               reduce using rule 108 (p -> exp .)
    /               reduce using rule 108 (p -> exp .)
    %               reduce using rule 108 (p -> exp .)
    +               reduce using rule 108 (p -> exp .)
    -               reduce using rule 108 (p -> exp .)
    ?               reduce using rule 108 (p -> exp .)
    OR              reduce using rule 108 (p -> exp .)
    AND             reduce using rule 108 (p -> exp .)
    EQEQ            reduce using rule 108 (p -> exp .)
    DISTINTO        reduce using rule 108 (p -> exp .)
    >               reduce using rule 108 (p -> exp .)
    <               reduce using rule 108 (p -> exp .)
    )               reduce using rule 108 (p -> exp .)
    ;               reduce using rule 108 (p -> exp .)
    ,               reduce using rule 108 (p -> exp .)
    ]               reduce using rule 108 (p -> exp .)
    }               reduce using rule 108 (p -> exp .)
    :               reduce using rule 108 (p -> exp .)
    ^               shift and go to state 166


state 88

    (166) not -> parenBool .

    EQEQ            reduce using rule 166 (not -> parenBool .)
    DISTINTO        reduce using rule 166 (not -> parenBool .)
    AND             reduce using rule 166 (not -> parenBool .)
    ?               reduce using rule 166 (not -> parenBool .)
    OR              reduce using rule 166 (not -> parenBool .)
    ;               reduce using rule 166 (not -> parenBool .)
    )               reduce using rule 166 (not -> parenBool .)
    ,               reduce using rule 166 (not -> parenBool .)
    ]               reduce using rule 166 (not -> parenBool .)
    }               reduce using rule 166 (not -> parenBool .)
    :               reduce using rule 166 (not -> parenBool .)


state 89

    (164) not -> NOT . not
    (165) not -> NOT . valoresBool
    (164) not -> . NOT not
    (165) not -> . NOT valoresBool
    (166) not -> . parenBool
    (120) valoresBool -> . BOOL
    (121) valoresBool -> . funcBool
    (122) valoresBool -> . varYVals
    (123) valoresBool -> . varsOps
    (124) valoresBool -> . eMat
    (125) valoresBool -> . INT
    (126) valoresBool -> . FLOAT
    (167) parenBool -> . ( expBool )
    (37) funcBool -> . COLINEALES ( vec , vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (62) vecVal -> . ID m
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (119) paren -> . ( eMat )

    NOT             shift and go to state 89
    BOOL            shift and go to state 85
    INT             shift and go to state 171
    FLOAT           shift and go to state 172
    (               shift and go to state 168
    COLINEALES      shift and go to state 16
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    STRING          shift and go to state 72
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    -               shift and go to state 76
    +               shift and go to state 75

    iSing                          shift and go to state 77
    eMat                           shift and go to state 167
    funcBool                       shift and go to state 66
    funcInt                        shift and go to state 67
    paren                          shift and go to state 79
    parenBool                      shift and go to state 88
    p                              shift and go to state 84
    varsOps                        shift and go to state 173
    valoresMat                     shift and go to state 69
    vecVal                         shift and go to state 9
    not                            shift and go to state 170
    exp                            shift and go to state 87
    varYVals                       shift and go to state 174
    valoresBool                    shift and go to state 169

state 90

    (122) valoresBool -> varYVals .
    (72) varsOps -> varYVals . MASMAS
    (73) varsOps -> varYVals . MENOSMENOS
    (84) valoresMat -> varYVals .
    (157) tCompare -> varYVals .

    ?               reduce using rule 122 (valoresBool -> varYVals .)
    OR              reduce using rule 122 (valoresBool -> varYVals .)
    AND             reduce using rule 122 (valoresBool -> varYVals .)
    EQEQ            reduce using rule 122 (valoresBool -> varYVals .)
    DISTINTO        reduce using rule 122 (valoresBool -> varYVals .)
    )               reduce using rule 122 (valoresBool -> varYVals .)
    ;               reduce using rule 122 (valoresBool -> varYVals .)
    ,               reduce using rule 122 (valoresBool -> varYVals .)
    ]               reduce using rule 122 (valoresBool -> varYVals .)
    }               reduce using rule 122 (valoresBool -> varYVals .)
    :               reduce using rule 122 (valoresBool -> varYVals .)
    MASMAS          shift and go to state 56
    MENOSMENOS      shift and go to state 53
    +               reduce using rule 84 (valoresMat -> varYVals .)
    -               reduce using rule 84 (valoresMat -> varYVals .)
    *               reduce using rule 84 (valoresMat -> varYVals .)
    /               reduce using rule 84 (valoresMat -> varYVals .)
    %               reduce using rule 84 (valoresMat -> varYVals .)
    ^               reduce using rule 84 (valoresMat -> varYVals .)
    >               reduce using rule 157 (tCompare -> varYVals .)
    <               reduce using rule 157 (tCompare -> varYVals .)


state 91

    (127) expBool -> or . ? expBool : expBool
    (128) expBool -> or . ? expBool : valoresBool
    (129) expBool -> or . ? valoresBool : expBool
    (130) expBool -> or . ? valoresBool : valoresBool
    (135) expBool -> or .
    (136) or -> or . OR and
    (138) or -> or . OR valoresBool

    ?               shift and go to state 175
    :               reduce using rule 135 (expBool -> or .)
    )               reduce using rule 135 (expBool -> or .)
    ;               reduce using rule 135 (expBool -> or .)
    ,               reduce using rule 135 (expBool -> or .)
    ]               reduce using rule 135 (expBool -> or .)
    }               reduce using rule 135 (expBool -> or .)
    OR              shift and go to state 176


state 92

    (13) loop -> WHILE ( expBool . ) bloque

    )               shift and go to state 177


state 93

    (56) valores -> RES .

    ;               reduce using rule 56 (valores -> RES .)
    )               reduce using rule 56 (valores -> RES .)
    ,               reduce using rule 56 (valores -> RES .)
    ]               reduce using rule 56 (valores -> RES .)
    }               reduce using rule 56 (valores -> RES .)


state 94

    (45) valores -> eMat .
    (87) eMat -> eMat . + p
    (88) eMat -> eMat . - p
    (91) eMat -> eMat . + valoresMat
    (92) eMat -> eMat . - valoresMat
    (124) valoresBool -> eMat .
    (155) tCompare -> eMat .

    ;               reduce using rule 45 (valores -> eMat .)
    )               reduce using rule 45 (valores -> eMat .)
    ,               reduce using rule 45 (valores -> eMat .)
    ]               reduce using rule 45 (valores -> eMat .)
    }               reduce using rule 45 (valores -> eMat .)
    +               shift and go to state 149
    -               shift and go to state 150
    ?               reduce using rule 124 (valoresBool -> eMat .)
    OR              reduce using rule 124 (valoresBool -> eMat .)
    AND             reduce using rule 124 (valoresBool -> eMat .)
    EQEQ            reduce using rule 124 (valoresBool -> eMat .)
    DISTINTO        reduce using rule 124 (valoresBool -> eMat .)
    >               reduce using rule 155 (tCompare -> eMat .)
    <               reduce using rule 155 (tCompare -> eMat .)


state 95

    (54) valores -> vec .

    ;               reduce using rule 54 (valores -> vec .)
    )               reduce using rule 54 (valores -> vec .)
    ,               reduce using rule 54 (valores -> vec .)
    ]               reduce using rule 54 (valores -> vec .)
    }               reduce using rule 54 (valores -> vec .)


state 96

    (47) valores -> reg .

    ;               reduce using rule 47 (valores -> reg .)
    )               reduce using rule 47 (valores -> reg .)
    ,               reduce using rule 47 (valores -> reg .)
    ]               reduce using rule 47 (valores -> reg .)
    }               reduce using rule 47 (valores -> reg .)


state 97

    (50) valores -> STRING .
    (86) valoresMat -> STRING .

    ;               reduce using rule 50 (valores -> STRING .)
    )               reduce using rule 50 (valores -> STRING .)
    ,               reduce using rule 50 (valores -> STRING .)
    ]               reduce using rule 50 (valores -> STRING .)
    }               reduce using rule 50 (valores -> STRING .)
    +               reduce using rule 86 (valoresMat -> STRING .)
    -               reduce using rule 86 (valoresMat -> STRING .)
    *               reduce using rule 86 (valoresMat -> STRING .)
    /               reduce using rule 86 (valoresMat -> STRING .)
    %               reduce using rule 86 (valoresMat -> STRING .)
    ^               reduce using rule 86 (valoresMat -> STRING .)


state 98

    (42) vec -> [ . elem ]
    (43) elem -> . valores , elem
    (44) elem -> . valores
    (45) valores -> . eMat
    (46) valores -> . expBool
    (47) valores -> . reg
    (48) valores -> . INT
    (49) valores -> . FLOAT
    (50) valores -> . STRING
    (51) valores -> . BOOL
    (52) valores -> . varYVals
    (53) valores -> . varsOps
    (54) valores -> . vec
    (55) valores -> . ID . valoresCampos
    (56) valores -> . RES
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (127) expBool -> . or ? expBool : expBool
    (128) expBool -> . or ? expBool : valoresBool
    (129) expBool -> . or ? valoresBool : expBool
    (130) expBool -> . or ? valoresBool : valoresBool
    (131) expBool -> . valoresBool ? expBool : expBool
    (132) expBool -> . valoresBool ? valoresBool : expBool
    (133) expBool -> . valoresBool ? expBool : valoresBool
    (134) expBool -> . valoresBool ? valoresBool : valoresBool
    (135) expBool -> . or
    (67) reg -> . { campos }
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (42) vec -> . [ elem ]
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (136) or -> . or OR and
    (137) or -> . valoresBool OR and
    (138) or -> . or OR valoresBool
    (139) or -> . valoresBool OR valoresBool
    (140) or -> . and
    (120) valoresBool -> . BOOL
    (121) valoresBool -> . funcBool
    (122) valoresBool -> . varYVals
    (123) valoresBool -> . varsOps
    (124) valoresBool -> . eMat
    (125) valoresBool -> . INT
    (126) valoresBool -> . FLOAT
    (62) vecVal -> . ID m
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (141) and -> . and AND eq
    (142) and -> . valoresBool AND eq
    (143) and -> . and AND valoresBool
    (144) and -> . valoresBool AND valoresBool
    (145) and -> . eq
    (37) funcBool -> . COLINEALES ( vec , vec )
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (146) eq -> . eq EQEQ parenBool
    (147) eq -> . eq DISTINTO parenBool
    (148) eq -> . valoresBool EQEQ parenBool
    (149) eq -> . valoresBool DISTINTO parenBool
    (150) eq -> . eq EQEQ valoresBool
    (151) eq -> . eq DISTINTO valoresBool
    (152) eq -> . valoresBool EQEQ valoresBool
    (153) eq -> . valoresBool DISTINTO valoresBool
    (154) eq -> . mayor
    (119) paren -> . ( eMat )
    (160) mayor -> . tCompare > tCompare
    (161) mayor -> . menor
    (155) tCompare -> . eMat
    (156) tCompare -> . varsOps
    (157) tCompare -> . varYVals
    (158) tCompare -> . INT
    (159) tCompare -> . FLOAT
    (162) menor -> . tCompare < tCompare
    (163) menor -> . not
    (164) not -> . NOT not
    (165) not -> . NOT valoresBool
    (166) not -> . parenBool
    (167) parenBool -> . ( expBool )

    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    STRING          shift and go to state 97
    BOOL            shift and go to state 103
    ID              shift and go to state 99
    RES             shift and go to state 93
    {               shift and go to state 105
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    [               shift and go to state 98
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    COLINEALES      shift and go to state 16
    -               shift and go to state 76
    +               shift and go to state 75
    (               shift and go to state 74
    NOT             shift and go to state 89

    and                            shift and go to state 65
    funcBool                       shift and go to state 66
    funcInt                        shift and go to state 67
    valores                        shift and go to state 178
    menor                          shift and go to state 83
    mayor                          shift and go to state 68
    valoresMat                     shift and go to state 69
    eq                             shift and go to state 70
    valoresBool                    shift and go to state 71
    eMat                           shift and go to state 94
    vecVal                         shift and go to state 9
    vec                            shift and go to state 95
    paren                          shift and go to state 79
    reg                            shift and go to state 96
    varsOps                        shift and go to state 104
    exp                            shift and go to state 87
    tCompare                       shift and go to state 78
    not                            shift and go to state 80
    elem                           shift and go to state 179
    parenBool                      shift and go to state 88
    p                              shift and go to state 84
    iSing                          shift and go to state 77
    varYVals                       shift and go to state 106
    or                             shift and go to state 91
    expBool                        shift and go to state 107

state 99

    (55) valores -> ID . . valoresCampos
    (60) varYVals -> ID .
    (62) vecVal -> ID . m
    (63) m -> . [ INT ]
    (64) m -> . [ INT ] m
    (65) m -> . [ varYVals ] m
    (66) m -> . [ varYVals ]

    .               shift and go to state 180
    MASMAS          reduce using rule 60 (varYVals -> ID .)
    MENOSMENOS      reduce using rule 60 (varYVals -> ID .)
    ;               reduce using rule 60 (varYVals -> ID .)
    )               reduce using rule 60 (varYVals -> ID .)
    +               reduce using rule 60 (varYVals -> ID .)
    -               reduce using rule 60 (varYVals -> ID .)
    *               reduce using rule 60 (varYVals -> ID .)
    /               reduce using rule 60 (varYVals -> ID .)
    %               reduce using rule 60 (varYVals -> ID .)
    ^               reduce using rule 60 (varYVals -> ID .)
    ?               reduce using rule 60 (varYVals -> ID .)
    OR              reduce using rule 60 (varYVals -> ID .)
    AND             reduce using rule 60 (varYVals -> ID .)
    EQEQ            reduce using rule 60 (varYVals -> ID .)
    DISTINTO        reduce using rule 60 (varYVals -> ID .)
    >               reduce using rule 60 (varYVals -> ID .)
    <               reduce using rule 60 (varYVals -> ID .)
    ,               reduce using rule 60 (varYVals -> ID .)
    ]               reduce using rule 60 (varYVals -> ID .)
    [               shift and go to state 48

    m                              shift and go to state 46

state 100

    (48) valores -> INT .
    (81) valoresMat -> INT .
    (125) valoresBool -> INT .
    (158) tCompare -> INT .

    ;               reduce using rule 48 (valores -> INT .)
    )               reduce using rule 48 (valores -> INT .)
    ,               reduce using rule 48 (valores -> INT .)
    ]               reduce using rule 48 (valores -> INT .)
    }               reduce using rule 48 (valores -> INT .)
    +               reduce using rule 81 (valoresMat -> INT .)
    -               reduce using rule 81 (valoresMat -> INT .)
    *               reduce using rule 81 (valoresMat -> INT .)
    /               reduce using rule 81 (valoresMat -> INT .)
    %               reduce using rule 81 (valoresMat -> INT .)
    ^               reduce using rule 81 (valoresMat -> INT .)
    ?               reduce using rule 125 (valoresBool -> INT .)
    OR              reduce using rule 125 (valoresBool -> INT .)
    AND             reduce using rule 125 (valoresBool -> INT .)
    EQEQ            reduce using rule 125 (valoresBool -> INT .)
    DISTINTO        reduce using rule 125 (valoresBool -> INT .)
    >               reduce using rule 158 (tCompare -> INT .)
    <               reduce using rule 158 (tCompare -> INT .)


state 101

    (49) valores -> FLOAT .
    (82) valoresMat -> FLOAT .
    (126) valoresBool -> FLOAT .
    (159) tCompare -> FLOAT .

    ;               reduce using rule 49 (valores -> FLOAT .)
    )               reduce using rule 49 (valores -> FLOAT .)
    ,               reduce using rule 49 (valores -> FLOAT .)
    ]               reduce using rule 49 (valores -> FLOAT .)
    }               reduce using rule 49 (valores -> FLOAT .)
    +               reduce using rule 82 (valoresMat -> FLOAT .)
    -               reduce using rule 82 (valoresMat -> FLOAT .)
    *               reduce using rule 82 (valoresMat -> FLOAT .)
    /               reduce using rule 82 (valoresMat -> FLOAT .)
    %               reduce using rule 82 (valoresMat -> FLOAT .)
    ^               reduce using rule 82 (valoresMat -> FLOAT .)
    ?               reduce using rule 126 (valoresBool -> FLOAT .)
    OR              reduce using rule 126 (valoresBool -> FLOAT .)
    AND             reduce using rule 126 (valoresBool -> FLOAT .)
    EQEQ            reduce using rule 126 (valoresBool -> FLOAT .)
    DISTINTO        reduce using rule 126 (valoresBool -> FLOAT .)
    >               reduce using rule 159 (tCompare -> FLOAT .)
    <               reduce using rule 159 (tCompare -> FLOAT .)


state 102

    (38) funcVoid -> PRINT ( valores . )

    )               shift and go to state 181


state 103

    (51) valores -> BOOL .
    (120) valoresBool -> BOOL .

    ;               reduce using rule 51 (valores -> BOOL .)
    )               reduce using rule 51 (valores -> BOOL .)
    ,               reduce using rule 51 (valores -> BOOL .)
    ]               reduce using rule 51 (valores -> BOOL .)
    }               reduce using rule 51 (valores -> BOOL .)
    ?               reduce using rule 120 (valoresBool -> BOOL .)
    OR              reduce using rule 120 (valoresBool -> BOOL .)
    AND             reduce using rule 120 (valoresBool -> BOOL .)
    EQEQ            reduce using rule 120 (valoresBool -> BOOL .)
    DISTINTO        reduce using rule 120 (valoresBool -> BOOL .)


state 104

    (53) valores -> varsOps .
    (85) valoresMat -> varsOps .
    (123) valoresBool -> varsOps .
    (156) tCompare -> varsOps .

    ;               reduce using rule 53 (valores -> varsOps .)
    )               reduce using rule 53 (valores -> varsOps .)
    ,               reduce using rule 53 (valores -> varsOps .)
    ]               reduce using rule 53 (valores -> varsOps .)
    }               reduce using rule 53 (valores -> varsOps .)
    +               reduce using rule 85 (valoresMat -> varsOps .)
    -               reduce using rule 85 (valoresMat -> varsOps .)
    *               reduce using rule 85 (valoresMat -> varsOps .)
    /               reduce using rule 85 (valoresMat -> varsOps .)
    %               reduce using rule 85 (valoresMat -> varsOps .)
    ^               reduce using rule 85 (valoresMat -> varsOps .)
    ?               reduce using rule 123 (valoresBool -> varsOps .)
    OR              reduce using rule 123 (valoresBool -> varsOps .)
    AND             reduce using rule 123 (valoresBool -> varsOps .)
    EQEQ            reduce using rule 123 (valoresBool -> varsOps .)
    DISTINTO        reduce using rule 123 (valoresBool -> varsOps .)
    >               reduce using rule 156 (tCompare -> varsOps .)
    <               reduce using rule 156 (tCompare -> varsOps .)


state 105

    (67) reg -> { . campos }
    (68) campos -> . ID : valores , campos
    (69) campos -> . valores
    (45) valores -> . eMat
    (46) valores -> . expBool
    (47) valores -> . reg
    (48) valores -> . INT
    (49) valores -> . FLOAT
    (50) valores -> . STRING
    (51) valores -> . BOOL
    (52) valores -> . varYVals
    (53) valores -> . varsOps
    (54) valores -> . vec
    (55) valores -> . ID . valoresCampos
    (56) valores -> . RES
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (127) expBool -> . or ? expBool : expBool
    (128) expBool -> . or ? expBool : valoresBool
    (129) expBool -> . or ? valoresBool : expBool
    (130) expBool -> . or ? valoresBool : valoresBool
    (131) expBool -> . valoresBool ? expBool : expBool
    (132) expBool -> . valoresBool ? valoresBool : expBool
    (133) expBool -> . valoresBool ? expBool : valoresBool
    (134) expBool -> . valoresBool ? valoresBool : valoresBool
    (135) expBool -> . or
    (67) reg -> . { campos }
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (42) vec -> . [ elem ]
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (136) or -> . or OR and
    (137) or -> . valoresBool OR and
    (138) or -> . or OR valoresBool
    (139) or -> . valoresBool OR valoresBool
    (140) or -> . and
    (120) valoresBool -> . BOOL
    (121) valoresBool -> . funcBool
    (122) valoresBool -> . varYVals
    (123) valoresBool -> . varsOps
    (124) valoresBool -> . eMat
    (125) valoresBool -> . INT
    (126) valoresBool -> . FLOAT
    (62) vecVal -> . ID m
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (141) and -> . and AND eq
    (142) and -> . valoresBool AND eq
    (143) and -> . and AND valoresBool
    (144) and -> . valoresBool AND valoresBool
    (145) and -> . eq
    (37) funcBool -> . COLINEALES ( vec , vec )
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (146) eq -> . eq EQEQ parenBool
    (147) eq -> . eq DISTINTO parenBool
    (148) eq -> . valoresBool EQEQ parenBool
    (149) eq -> . valoresBool DISTINTO parenBool
    (150) eq -> . eq EQEQ valoresBool
    (151) eq -> . eq DISTINTO valoresBool
    (152) eq -> . valoresBool EQEQ valoresBool
    (153) eq -> . valoresBool DISTINTO valoresBool
    (154) eq -> . mayor
    (119) paren -> . ( eMat )
    (160) mayor -> . tCompare > tCompare
    (161) mayor -> . menor
    (155) tCompare -> . eMat
    (156) tCompare -> . varsOps
    (157) tCompare -> . varYVals
    (158) tCompare -> . INT
    (159) tCompare -> . FLOAT
    (162) menor -> . tCompare < tCompare
    (163) menor -> . not
    (164) not -> . NOT not
    (165) not -> . NOT valoresBool
    (166) not -> . parenBool
    (167) parenBool -> . ( expBool )

    ID              shift and go to state 183
    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    STRING          shift and go to state 97
    BOOL            shift and go to state 103
    RES             shift and go to state 93
    {               shift and go to state 105
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    [               shift and go to state 98
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    COLINEALES      shift and go to state 16
    -               shift and go to state 76
    +               shift and go to state 75
    (               shift and go to state 74
    NOT             shift and go to state 89

    and                            shift and go to state 65
    funcBool                       shift and go to state 66
    funcInt                        shift and go to state 67
    menor                          shift and go to state 83
    mayor                          shift and go to state 68
    valoresMat                     shift and go to state 69
    eq                             shift and go to state 70
    valoresBool                    shift and go to state 71
    eMat                           shift and go to state 94
    vecVal                         shift and go to state 9
    vec                            shift and go to state 95
    paren                          shift and go to state 79
    reg                            shift and go to state 96
    varsOps                        shift and go to state 104
    exp                            shift and go to state 87
    tCompare                       shift and go to state 78
    campos                         shift and go to state 182
    not                            shift and go to state 80
    valores                        shift and go to state 184
    parenBool                      shift and go to state 88
    p                              shift and go to state 84
    iSing                          shift and go to state 77
    varYVals                       shift and go to state 106
    or                             shift and go to state 91
    expBool                        shift and go to state 107

state 106

    (52) valores -> varYVals .
    (72) varsOps -> varYVals . MASMAS
    (73) varsOps -> varYVals . MENOSMENOS
    (84) valoresMat -> varYVals .
    (122) valoresBool -> varYVals .
    (157) tCompare -> varYVals .

    ;               reduce using rule 52 (valores -> varYVals .)
    )               reduce using rule 52 (valores -> varYVals .)
    ,               reduce using rule 52 (valores -> varYVals .)
    ]               reduce using rule 52 (valores -> varYVals .)
    }               reduce using rule 52 (valores -> varYVals .)
    MASMAS          shift and go to state 56
    MENOSMENOS      shift and go to state 53
    +               reduce using rule 84 (valoresMat -> varYVals .)
    -               reduce using rule 84 (valoresMat -> varYVals .)
    *               reduce using rule 84 (valoresMat -> varYVals .)
    /               reduce using rule 84 (valoresMat -> varYVals .)
    %               reduce using rule 84 (valoresMat -> varYVals .)
    ^               reduce using rule 84 (valoresMat -> varYVals .)
    ?               reduce using rule 122 (valoresBool -> varYVals .)
    OR              reduce using rule 122 (valoresBool -> varYVals .)
    AND             reduce using rule 122 (valoresBool -> varYVals .)
    EQEQ            reduce using rule 122 (valoresBool -> varYVals .)
    DISTINTO        reduce using rule 122 (valoresBool -> varYVals .)
    >               reduce using rule 157 (tCompare -> varYVals .)
    <               reduce using rule 157 (tCompare -> varYVals .)


state 107

    (46) valores -> expBool .

    ;               reduce using rule 46 (valores -> expBool .)
    )               reduce using rule 46 (valores -> expBool .)
    ,               reduce using rule 46 (valores -> expBool .)
    ]               reduce using rule 46 (valores -> expBool .)
    }               reduce using rule 46 (valores -> expBool .)


state 108

    (37) funcBool -> COLINEALES ( vec . , vec )

    ,               shift and go to state 185


state 109

    (18) primParam -> varAsig .

    ;               reduce using rule 18 (primParam -> varAsig .)


state 110

    (15) loop -> FOR ( primParam . ; cosaBooleana ; tercerParam ) bloque

    ;               shift and go to state 186


state 111

    (75) varAsig -> varYVals . MULEQ valoresAsig
    (76) varAsig -> varYVals . DIVEQ valoresAsig
    (77) varAsig -> varYVals . MASEQ valoresAsig
    (78) varAsig -> varYVals . MENOSEQ valoresAsig
    (79) varAsig -> varYVals . = valoresAsig

    MULEQ           shift and go to state 57
    DIVEQ           shift and go to state 58
    MASEQ           shift and go to state 54
    MENOSEQ         shift and go to state 52
    =               shift and go to state 55


state 112

    (19) primParam -> empty .

    ;               reduce using rule 19 (primParam -> empty .)


state 113

    (80) varAsig -> ID . ID . = valoresAsig

    =               shift and go to state 187


state 114

    (63) m -> [ INT . ]
    (64) m -> [ INT . ] m

    ]               shift and go to state 188


state 115

    (65) m -> [ varYVals . ] m
    (66) m -> [ varYVals . ]

    ]               shift and go to state 189


state 116

    (17) cosaBooleana -> valoresBool .
    (131) expBool -> valoresBool . ? expBool : expBool
    (132) expBool -> valoresBool . ? valoresBool : expBool
    (133) expBool -> valoresBool . ? expBool : valoresBool
    (134) expBool -> valoresBool . ? valoresBool : valoresBool
    (137) or -> valoresBool . OR and
    (139) or -> valoresBool . OR valoresBool
    (142) and -> valoresBool . AND eq
    (144) and -> valoresBool . AND valoresBool
    (148) eq -> valoresBool . EQEQ parenBool
    (149) eq -> valoresBool . DISTINTO parenBool
    (152) eq -> valoresBool . EQEQ valoresBool
    (153) eq -> valoresBool . DISTINTO valoresBool

    )               reduce using rule 17 (cosaBooleana -> valoresBool .)
    ;               reduce using rule 17 (cosaBooleana -> valoresBool .)
    ?               shift and go to state 148
    OR              shift and go to state 147
    AND             shift and go to state 144
    EQEQ            shift and go to state 146
    DISTINTO        shift and go to state 145


state 117

    (24) if -> IF ( cosaBooleana . ) bloque else

    )               shift and go to state 190


state 118

    (16) cosaBooleana -> expBool .

    )               reduce using rule 16 (cosaBooleana -> expBool .)
    ;               reduce using rule 16 (cosaBooleana -> expBool .)


state 119

    (34) funcInt -> MULTIESCALAR ( vec . , eMat , param )

    ,               shift and go to state 191


state 120

    (78) varAsig -> varYVals MENOSEQ valoresAsig .

    ;               reduce using rule 78 (varAsig -> varYVals MENOSEQ valoresAsig .)
    )               reduce using rule 78 (varAsig -> varYVals MENOSEQ valoresAsig .)


state 121

    (74) valoresAsig -> valores .

    ;               reduce using rule 74 (valoresAsig -> valores .)
    )               reduce using rule 74 (valoresAsig -> valores .)


state 122

    (77) varAsig -> varYVals MASEQ valoresAsig .

    ;               reduce using rule 77 (varAsig -> varYVals MASEQ valoresAsig .)
    )               reduce using rule 77 (varAsig -> varYVals MASEQ valoresAsig .)


state 123

    (79) varAsig -> varYVals = valoresAsig .

    ;               reduce using rule 79 (varAsig -> varYVals = valoresAsig .)
    )               reduce using rule 79 (varAsig -> varYVals = valoresAsig .)


state 124

    (75) varAsig -> varYVals MULEQ valoresAsig .

    ;               reduce using rule 75 (varAsig -> varYVals MULEQ valoresAsig .)
    )               reduce using rule 75 (varAsig -> varYVals MULEQ valoresAsig .)


state 125

    (76) varAsig -> varYVals DIVEQ valoresAsig .

    ;               reduce using rule 76 (varAsig -> varYVals DIVEQ valoresAsig .)
    )               reduce using rule 76 (varAsig -> varYVals DIVEQ valoresAsig .)


state 126

    (36) funcString -> CAPITALIZAR ( eMat . )
    (87) eMat -> eMat . + p
    (88) eMat -> eMat . - p
    (91) eMat -> eMat . + valoresMat
    (92) eMat -> eMat . - valoresMat

    )               shift and go to state 192
    +               shift and go to state 149
    -               shift and go to state 150


state 127

    (119) paren -> ( . eMat )
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (62) vecVal -> . ID m
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (119) paren -> . ( eMat )

    INT             shift and go to state 131
    FLOAT           shift and go to state 128
    STRING          shift and go to state 72
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    -               shift and go to state 76
    +               shift and go to state 75
    (               shift and go to state 127

    eMat                           shift and go to state 193
    funcInt                        shift and go to state 67
    iSing                          shift and go to state 77
    p                              shift and go to state 84
    varsOps                        shift and go to state 129
    valoresMat                     shift and go to state 69
    paren                          shift and go to state 79
    exp                            shift and go to state 87
    varYVals                       shift and go to state 130
    vecVal                         shift and go to state 9

state 128

    (82) valoresMat -> FLOAT .

    *               reduce using rule 82 (valoresMat -> FLOAT .)
    /               reduce using rule 82 (valoresMat -> FLOAT .)
    %               reduce using rule 82 (valoresMat -> FLOAT .)
    ^               reduce using rule 82 (valoresMat -> FLOAT .)
    +               reduce using rule 82 (valoresMat -> FLOAT .)
    -               reduce using rule 82 (valoresMat -> FLOAT .)
    ?               reduce using rule 82 (valoresMat -> FLOAT .)
    OR              reduce using rule 82 (valoresMat -> FLOAT .)
    AND             reduce using rule 82 (valoresMat -> FLOAT .)
    EQEQ            reduce using rule 82 (valoresMat -> FLOAT .)
    DISTINTO        reduce using rule 82 (valoresMat -> FLOAT .)
    >               reduce using rule 82 (valoresMat -> FLOAT .)
    <               reduce using rule 82 (valoresMat -> FLOAT .)
    )               reduce using rule 82 (valoresMat -> FLOAT .)
    ;               reduce using rule 82 (valoresMat -> FLOAT .)
    ,               reduce using rule 82 (valoresMat -> FLOAT .)
    ]               reduce using rule 82 (valoresMat -> FLOAT .)
    }               reduce using rule 82 (valoresMat -> FLOAT .)
    :               reduce using rule 82 (valoresMat -> FLOAT .)


state 129

    (85) valoresMat -> varsOps .

    *               reduce using rule 85 (valoresMat -> varsOps .)
    /               reduce using rule 85 (valoresMat -> varsOps .)
    %               reduce using rule 85 (valoresMat -> varsOps .)
    ^               reduce using rule 85 (valoresMat -> varsOps .)
    +               reduce using rule 85 (valoresMat -> varsOps .)
    -               reduce using rule 85 (valoresMat -> varsOps .)
    ?               reduce using rule 85 (valoresMat -> varsOps .)
    OR              reduce using rule 85 (valoresMat -> varsOps .)
    AND             reduce using rule 85 (valoresMat -> varsOps .)
    EQEQ            reduce using rule 85 (valoresMat -> varsOps .)
    DISTINTO        reduce using rule 85 (valoresMat -> varsOps .)
    >               reduce using rule 85 (valoresMat -> varsOps .)
    <               reduce using rule 85 (valoresMat -> varsOps .)
    )               reduce using rule 85 (valoresMat -> varsOps .)
    ;               reduce using rule 85 (valoresMat -> varsOps .)
    ,               reduce using rule 85 (valoresMat -> varsOps .)
    ]               reduce using rule 85 (valoresMat -> varsOps .)
    }               reduce using rule 85 (valoresMat -> varsOps .)
    :               reduce using rule 85 (valoresMat -> varsOps .)


state 130

    (84) valoresMat -> varYVals .
    (72) varsOps -> varYVals . MASMAS
    (73) varsOps -> varYVals . MENOSMENOS

    *               reduce using rule 84 (valoresMat -> varYVals .)
    /               reduce using rule 84 (valoresMat -> varYVals .)
    %               reduce using rule 84 (valoresMat -> varYVals .)
    ^               reduce using rule 84 (valoresMat -> varYVals .)
    +               reduce using rule 84 (valoresMat -> varYVals .)
    -               reduce using rule 84 (valoresMat -> varYVals .)
    ?               reduce using rule 84 (valoresMat -> varYVals .)
    OR              reduce using rule 84 (valoresMat -> varYVals .)
    AND             reduce using rule 84 (valoresMat -> varYVals .)
    EQEQ            reduce using rule 84 (valoresMat -> varYVals .)
    DISTINTO        reduce using rule 84 (valoresMat -> varYVals .)
    >               reduce using rule 84 (valoresMat -> varYVals .)
    <               reduce using rule 84 (valoresMat -> varYVals .)
    )               reduce using rule 84 (valoresMat -> varYVals .)
    ;               reduce using rule 84 (valoresMat -> varYVals .)
    ,               reduce using rule 84 (valoresMat -> varYVals .)
    ]               reduce using rule 84 (valoresMat -> varYVals .)
    }               reduce using rule 84 (valoresMat -> varYVals .)
    :               reduce using rule 84 (valoresMat -> varYVals .)
    MASMAS          shift and go to state 56
    MENOSMENOS      shift and go to state 53


state 131

    (81) valoresMat -> INT .

    *               reduce using rule 81 (valoresMat -> INT .)
    /               reduce using rule 81 (valoresMat -> INT .)
    %               reduce using rule 81 (valoresMat -> INT .)
    ^               reduce using rule 81 (valoresMat -> INT .)
    +               reduce using rule 81 (valoresMat -> INT .)
    -               reduce using rule 81 (valoresMat -> INT .)
    ?               reduce using rule 81 (valoresMat -> INT .)
    OR              reduce using rule 81 (valoresMat -> INT .)
    AND             reduce using rule 81 (valoresMat -> INT .)
    EQEQ            reduce using rule 81 (valoresMat -> INT .)
    DISTINTO        reduce using rule 81 (valoresMat -> INT .)
    >               reduce using rule 81 (valoresMat -> INT .)
    <               reduce using rule 81 (valoresMat -> INT .)
    )               reduce using rule 81 (valoresMat -> INT .)
    ;               reduce using rule 81 (valoresMat -> INT .)
    ,               reduce using rule 81 (valoresMat -> INT .)
    ]               reduce using rule 81 (valoresMat -> INT .)
    }               reduce using rule 81 (valoresMat -> INT .)
    :               reduce using rule 81 (valoresMat -> INT .)


state 132

    (35) funcInt -> LENGTH ( vec . )

    )               shift and go to state 194


state 133

    (14) loop -> DO bloque WHILE ( . expBool ) ;
    (127) expBool -> . or ? expBool : expBool
    (128) expBool -> . or ? expBool : valoresBool
    (129) expBool -> . or ? valoresBool : expBool
    (130) expBool -> . or ? valoresBool : valoresBool
    (131) expBool -> . valoresBool ? expBool : expBool
    (132) expBool -> . valoresBool ? valoresBool : expBool
    (133) expBool -> . valoresBool ? expBool : valoresBool
    (134) expBool -> . valoresBool ? valoresBool : valoresBool
    (135) expBool -> . or
    (136) or -> . or OR and
    (137) or -> . valoresBool OR and
    (138) or -> . or OR valoresBool
    (139) or -> . valoresBool OR valoresBool
    (140) or -> . and
    (120) valoresBool -> . BOOL
    (121) valoresBool -> . funcBool
    (122) valoresBool -> . varYVals
    (123) valoresBool -> . varsOps
    (124) valoresBool -> . eMat
    (125) valoresBool -> . INT
    (126) valoresBool -> . FLOAT
    (141) and -> . and AND eq
    (142) and -> . valoresBool AND eq
    (143) and -> . and AND valoresBool
    (144) and -> . valoresBool AND valoresBool
    (145) and -> . eq
    (37) funcBool -> . COLINEALES ( vec , vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (146) eq -> . eq EQEQ parenBool
    (147) eq -> . eq DISTINTO parenBool
    (148) eq -> . valoresBool EQEQ parenBool
    (149) eq -> . valoresBool DISTINTO parenBool
    (150) eq -> . eq EQEQ valoresBool
    (151) eq -> . eq DISTINTO valoresBool
    (152) eq -> . valoresBool EQEQ valoresBool
    (153) eq -> . valoresBool DISTINTO valoresBool
    (154) eq -> . mayor
    (62) vecVal -> . ID m
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (160) mayor -> . tCompare > tCompare
    (161) mayor -> . menor
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (155) tCompare -> . eMat
    (156) tCompare -> . varsOps
    (157) tCompare -> . varYVals
    (158) tCompare -> . INT
    (159) tCompare -> . FLOAT
    (162) menor -> . tCompare < tCompare
    (163) menor -> . not
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (164) not -> . NOT not
    (165) not -> . NOT valoresBool
    (166) not -> . parenBool
    (119) paren -> . ( eMat )
    (167) parenBool -> . ( expBool )

    BOOL            shift and go to state 85
    INT             shift and go to state 81
    FLOAT           shift and go to state 82
    COLINEALES      shift and go to state 16
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    STRING          shift and go to state 72
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    -               shift and go to state 76
    +               shift and go to state 75
    NOT             shift and go to state 89
    (               shift and go to state 74

    and                            shift and go to state 65
    funcBool                       shift and go to state 66
    funcInt                        shift and go to state 67
    menor                          shift and go to state 83
    valoresMat                     shift and go to state 69
    eq                             shift and go to state 70
    valoresBool                    shift and go to state 71
    eMat                           shift and go to state 73
    vecVal                         shift and go to state 9
    paren                          shift and go to state 79
    iSing                          shift and go to state 77
    tCompare                       shift and go to state 78
    not                            shift and go to state 80
    varYVals                       shift and go to state 90
    or                             shift and go to state 91
    p                              shift and go to state 84
    varsOps                        shift and go to state 86
    exp                            shift and go to state 87
    mayor                          shift and go to state 68
    parenBool                      shift and go to state 88
    expBool                        shift and go to state 195

state 134

    (28) bloque -> { g } .

    ELSE            reduce using rule 28 (bloque -> { g } .)
    COMMENT         reduce using rule 28 (bloque -> { g } .)
    RETURN          reduce using rule 28 (bloque -> { g } .)
    IF              reduce using rule 28 (bloque -> { g } .)
    WHILE           reduce using rule 28 (bloque -> { g } .)
    DO              reduce using rule 28 (bloque -> { g } .)
    FOR             reduce using rule 28 (bloque -> { g } .)
    MENOSMENOS      reduce using rule 28 (bloque -> { g } .)
    MASMAS          reduce using rule 28 (bloque -> { g } .)
    ID              reduce using rule 28 (bloque -> { g } .)
    PRINT           reduce using rule 28 (bloque -> { g } .)
    MULTIESCALAR    reduce using rule 28 (bloque -> { g } .)
    LENGTH          reduce using rule 28 (bloque -> { g } .)
    CAPITALIZAR     reduce using rule 28 (bloque -> { g } .)
    COLINEALES      reduce using rule 28 (bloque -> { g } .)
    $end            reduce using rule 28 (bloque -> { g } .)
    }               reduce using rule 28 (bloque -> { g } .)


state 135

    (141) and -> and AND . eq
    (143) and -> and AND . valoresBool
    (146) eq -> . eq EQEQ parenBool
    (147) eq -> . eq DISTINTO parenBool
    (148) eq -> . valoresBool EQEQ parenBool
    (149) eq -> . valoresBool DISTINTO parenBool
    (150) eq -> . eq EQEQ valoresBool
    (151) eq -> . eq DISTINTO valoresBool
    (152) eq -> . valoresBool EQEQ valoresBool
    (153) eq -> . valoresBool DISTINTO valoresBool
    (154) eq -> . mayor
    (120) valoresBool -> . BOOL
    (121) valoresBool -> . funcBool
    (122) valoresBool -> . varYVals
    (123) valoresBool -> . varsOps
    (124) valoresBool -> . eMat
    (125) valoresBool -> . INT
    (126) valoresBool -> . FLOAT
    (160) mayor -> . tCompare > tCompare
    (161) mayor -> . menor
    (37) funcBool -> . COLINEALES ( vec , vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (155) tCompare -> . eMat
    (156) tCompare -> . varsOps
    (157) tCompare -> . varYVals
    (158) tCompare -> . INT
    (159) tCompare -> . FLOAT
    (162) menor -> . tCompare < tCompare
    (163) menor -> . not
    (62) vecVal -> . ID m
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (164) not -> . NOT not
    (165) not -> . NOT valoresBool
    (166) not -> . parenBool
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (167) parenBool -> . ( expBool )
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (119) paren -> . ( eMat )

    BOOL            shift and go to state 85
    INT             shift and go to state 198
    FLOAT           shift and go to state 199
    COLINEALES      shift and go to state 16
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    STRING          shift and go to state 72
    NOT             shift and go to state 89
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    (               shift and go to state 168
    -               shift and go to state 76
    +               shift and go to state 75

    funcBool                       shift and go to state 66
    funcInt                        shift and go to state 67
    menor                          shift and go to state 83
    mayor                          shift and go to state 68
    valoresMat                     shift and go to state 69
    eq                             shift and go to state 196
    valoresBool                    shift and go to state 197
    eMat                           shift and go to state 73
    vecVal                         shift and go to state 9
    paren                          shift and go to state 79
    varsOps                        shift and go to state 200
    tCompare                       shift and go to state 78
    not                            shift and go to state 80
    p                              shift and go to state 84
    iSing                          shift and go to state 77
    exp                            shift and go to state 87
    varYVals                       shift and go to state 201
    parenBool                      shift and go to state 88

state 136

    (101) p -> valoresMat % . exp
    (107) p -> valoresMat % . valoresMat
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (119) paren -> . ( eMat )
    (62) vecVal -> . ID m

    INT             shift and go to state 131
    FLOAT           shift and go to state 128
    STRING          shift and go to state 72
    -               shift and go to state 76
    +               shift and go to state 75
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    (               shift and go to state 127

    valoresMat                     shift and go to state 202
    funcInt                        shift and go to state 67
    vecVal                         shift and go to state 9
    varsOps                        shift and go to state 129
    exp                            shift and go to state 203
    paren                          shift and go to state 79
    varYVals                       shift and go to state 130
    iSing                          shift and go to state 77

state 137

    (89) eMat -> valoresMat + . p
    (93) eMat -> valoresMat + . valoresMat
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (62) vecVal -> . ID m
    (119) paren -> . ( eMat )

    INT             shift and go to state 131
    FLOAT           shift and go to state 128
    STRING          shift and go to state 72
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    -               shift and go to state 76
    +               shift and go to state 75
    (               shift and go to state 127

    valoresMat                     shift and go to state 204
    funcInt                        shift and go to state 67
    vecVal                         shift and go to state 9
    p                              shift and go to state 205
    varsOps                        shift and go to state 129
    exp                            shift and go to state 87
    paren                          shift and go to state 79
    varYVals                       shift and go to state 130
    iSing                          shift and go to state 77

state 138

    (99) p -> valoresMat * . exp
    (105) p -> valoresMat * . valoresMat
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (119) paren -> . ( eMat )
    (62) vecVal -> . ID m

    INT             shift and go to state 131
    FLOAT           shift and go to state 128
    STRING          shift and go to state 72
    -               shift and go to state 76
    +               shift and go to state 75
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    (               shift and go to state 127

    valoresMat                     shift and go to state 206
    funcInt                        shift and go to state 67
    vecVal                         shift and go to state 9
    varsOps                        shift and go to state 129
    exp                            shift and go to state 207
    paren                          shift and go to state 79
    varYVals                       shift and go to state 130
    iSing                          shift and go to state 77

state 139

    (90) eMat -> valoresMat - . p
    (94) eMat -> valoresMat - . valoresMat
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (62) vecVal -> . ID m
    (119) paren -> . ( eMat )

    INT             shift and go to state 131
    FLOAT           shift and go to state 128
    STRING          shift and go to state 72
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    -               shift and go to state 76
    +               shift and go to state 75
    (               shift and go to state 127

    valoresMat                     shift and go to state 208
    funcInt                        shift and go to state 67
    vecVal                         shift and go to state 9
    p                              shift and go to state 209
    varsOps                        shift and go to state 129
    exp                            shift and go to state 87
    paren                          shift and go to state 79
    varYVals                       shift and go to state 130
    iSing                          shift and go to state 77

state 140

    (100) p -> valoresMat / . exp
    (106) p -> valoresMat / . valoresMat
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (119) paren -> . ( eMat )
    (62) vecVal -> . ID m

    INT             shift and go to state 131
    FLOAT           shift and go to state 128
    STRING          shift and go to state 72
    -               shift and go to state 76
    +               shift and go to state 75
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    (               shift and go to state 127

    valoresMat                     shift and go to state 210
    funcInt                        shift and go to state 67
    vecVal                         shift and go to state 9
    varsOps                        shift and go to state 129
    exp                            shift and go to state 211
    paren                          shift and go to state 79
    varYVals                       shift and go to state 130
    iSing                          shift and go to state 77

state 141

    (110) exp -> valoresMat ^ . iSing
    (112) exp -> valoresMat ^ . valoresMat
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (119) paren -> . ( eMat )
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (62) vecVal -> . ID m

    -               shift and go to state 76
    +               shift and go to state 75
    INT             shift and go to state 131
    FLOAT           shift and go to state 128
    STRING          shift and go to state 72
    (               shift and go to state 127
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30

    funcInt                        shift and go to state 67
    vecVal                         shift and go to state 9
    iSing                          shift and go to state 213
    valoresMat                     shift and go to state 212
    paren                          shift and go to state 79
    varYVals                       shift and go to state 130
    varsOps                        shift and go to state 129

state 142

    (146) eq -> eq EQEQ . parenBool
    (150) eq -> eq EQEQ . valoresBool
    (167) parenBool -> . ( expBool )
    (120) valoresBool -> . BOOL
    (121) valoresBool -> . funcBool
    (122) valoresBool -> . varYVals
    (123) valoresBool -> . varsOps
    (124) valoresBool -> . eMat
    (125) valoresBool -> . INT
    (126) valoresBool -> . FLOAT
    (37) funcBool -> . COLINEALES ( vec , vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (62) vecVal -> . ID m
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (119) paren -> . ( eMat )

    (               shift and go to state 168
    BOOL            shift and go to state 85
    INT             shift and go to state 171
    FLOAT           shift and go to state 172
    COLINEALES      shift and go to state 16
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    STRING          shift and go to state 72
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    -               shift and go to state 76
    +               shift and go to state 75

    iSing                          shift and go to state 77
    eMat                           shift and go to state 167
    funcBool                       shift and go to state 66
    funcInt                        shift and go to state 67
    valoresBool                    shift and go to state 214
    p                              shift and go to state 84
    varsOps                        shift and go to state 173
    valoresMat                     shift and go to state 69
    paren                          shift and go to state 79
    vecVal                         shift and go to state 9
    exp                            shift and go to state 87
    varYVals                       shift and go to state 174
    parenBool                      shift and go to state 215

state 143

    (147) eq -> eq DISTINTO . parenBool
    (151) eq -> eq DISTINTO . valoresBool
    (167) parenBool -> . ( expBool )
    (120) valoresBool -> . BOOL
    (121) valoresBool -> . funcBool
    (122) valoresBool -> . varYVals
    (123) valoresBool -> . varsOps
    (124) valoresBool -> . eMat
    (125) valoresBool -> . INT
    (126) valoresBool -> . FLOAT
    (37) funcBool -> . COLINEALES ( vec , vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (62) vecVal -> . ID m
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (119) paren -> . ( eMat )

    (               shift and go to state 168
    BOOL            shift and go to state 85
    INT             shift and go to state 171
    FLOAT           shift and go to state 172
    COLINEALES      shift and go to state 16
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    STRING          shift and go to state 72
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    -               shift and go to state 76
    +               shift and go to state 75

    iSing                          shift and go to state 77
    eMat                           shift and go to state 167
    funcBool                       shift and go to state 66
    funcInt                        shift and go to state 67
    valoresBool                    shift and go to state 216
    p                              shift and go to state 84
    varsOps                        shift and go to state 173
    valoresMat                     shift and go to state 69
    paren                          shift and go to state 79
    vecVal                         shift and go to state 9
    exp                            shift and go to state 87
    varYVals                       shift and go to state 174
    parenBool                      shift and go to state 217

state 144

    (142) and -> valoresBool AND . eq
    (144) and -> valoresBool AND . valoresBool
    (146) eq -> . eq EQEQ parenBool
    (147) eq -> . eq DISTINTO parenBool
    (148) eq -> . valoresBool EQEQ parenBool
    (149) eq -> . valoresBool DISTINTO parenBool
    (150) eq -> . eq EQEQ valoresBool
    (151) eq -> . eq DISTINTO valoresBool
    (152) eq -> . valoresBool EQEQ valoresBool
    (153) eq -> . valoresBool DISTINTO valoresBool
    (154) eq -> . mayor
    (120) valoresBool -> . BOOL
    (121) valoresBool -> . funcBool
    (122) valoresBool -> . varYVals
    (123) valoresBool -> . varsOps
    (124) valoresBool -> . eMat
    (125) valoresBool -> . INT
    (126) valoresBool -> . FLOAT
    (160) mayor -> . tCompare > tCompare
    (161) mayor -> . menor
    (37) funcBool -> . COLINEALES ( vec , vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (155) tCompare -> . eMat
    (156) tCompare -> . varsOps
    (157) tCompare -> . varYVals
    (158) tCompare -> . INT
    (159) tCompare -> . FLOAT
    (162) menor -> . tCompare < tCompare
    (163) menor -> . not
    (62) vecVal -> . ID m
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (164) not -> . NOT not
    (165) not -> . NOT valoresBool
    (166) not -> . parenBool
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (167) parenBool -> . ( expBool )
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (119) paren -> . ( eMat )

    BOOL            shift and go to state 85
    INT             shift and go to state 198
    FLOAT           shift and go to state 199
    COLINEALES      shift and go to state 16
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    STRING          shift and go to state 72
    NOT             shift and go to state 89
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    (               shift and go to state 168
    -               shift and go to state 76
    +               shift and go to state 75

    funcBool                       shift and go to state 66
    funcInt                        shift and go to state 67
    menor                          shift and go to state 83
    mayor                          shift and go to state 68
    valoresMat                     shift and go to state 69
    eq                             shift and go to state 218
    valoresBool                    shift and go to state 219
    eMat                           shift and go to state 73
    vecVal                         shift and go to state 9
    paren                          shift and go to state 79
    varsOps                        shift and go to state 200
    tCompare                       shift and go to state 78
    not                            shift and go to state 80
    p                              shift and go to state 84
    iSing                          shift and go to state 77
    exp                            shift and go to state 87
    varYVals                       shift and go to state 201
    parenBool                      shift and go to state 88

state 145

    (149) eq -> valoresBool DISTINTO . parenBool
    (153) eq -> valoresBool DISTINTO . valoresBool
    (167) parenBool -> . ( expBool )
    (120) valoresBool -> . BOOL
    (121) valoresBool -> . funcBool
    (122) valoresBool -> . varYVals
    (123) valoresBool -> . varsOps
    (124) valoresBool -> . eMat
    (125) valoresBool -> . INT
    (126) valoresBool -> . FLOAT
    (37) funcBool -> . COLINEALES ( vec , vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (62) vecVal -> . ID m
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (119) paren -> . ( eMat )

    (               shift and go to state 168
    BOOL            shift and go to state 85
    INT             shift and go to state 171
    FLOAT           shift and go to state 172
    COLINEALES      shift and go to state 16
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    STRING          shift and go to state 72
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    -               shift and go to state 76
    +               shift and go to state 75

    iSing                          shift and go to state 77
    eMat                           shift and go to state 167
    funcBool                       shift and go to state 66
    funcInt                        shift and go to state 67
    parenBool                      shift and go to state 221
    p                              shift and go to state 84
    varsOps                        shift and go to state 173
    valoresMat                     shift and go to state 69
    paren                          shift and go to state 79
    vecVal                         shift and go to state 9
    exp                            shift and go to state 87
    varYVals                       shift and go to state 174
    valoresBool                    shift and go to state 220

state 146

    (148) eq -> valoresBool EQEQ . parenBool
    (152) eq -> valoresBool EQEQ . valoresBool
    (167) parenBool -> . ( expBool )
    (120) valoresBool -> . BOOL
    (121) valoresBool -> . funcBool
    (122) valoresBool -> . varYVals
    (123) valoresBool -> . varsOps
    (124) valoresBool -> . eMat
    (125) valoresBool -> . INT
    (126) valoresBool -> . FLOAT
    (37) funcBool -> . COLINEALES ( vec , vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (62) vecVal -> . ID m
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (119) paren -> . ( eMat )

    (               shift and go to state 168
    BOOL            shift and go to state 85
    INT             shift and go to state 171
    FLOAT           shift and go to state 172
    COLINEALES      shift and go to state 16
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    STRING          shift and go to state 72
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    -               shift and go to state 76
    +               shift and go to state 75

    iSing                          shift and go to state 77
    eMat                           shift and go to state 167
    funcBool                       shift and go to state 66
    funcInt                        shift and go to state 67
    parenBool                      shift and go to state 223
    p                              shift and go to state 84
    varsOps                        shift and go to state 173
    valoresMat                     shift and go to state 69
    paren                          shift and go to state 79
    vecVal                         shift and go to state 9
    exp                            shift and go to state 87
    varYVals                       shift and go to state 174
    valoresBool                    shift and go to state 222

state 147

    (137) or -> valoresBool OR . and
    (139) or -> valoresBool OR . valoresBool
    (141) and -> . and AND eq
    (142) and -> . valoresBool AND eq
    (143) and -> . and AND valoresBool
    (144) and -> . valoresBool AND valoresBool
    (145) and -> . eq
    (120) valoresBool -> . BOOL
    (121) valoresBool -> . funcBool
    (122) valoresBool -> . varYVals
    (123) valoresBool -> . varsOps
    (124) valoresBool -> . eMat
    (125) valoresBool -> . INT
    (126) valoresBool -> . FLOAT
    (146) eq -> . eq EQEQ parenBool
    (147) eq -> . eq DISTINTO parenBool
    (148) eq -> . valoresBool EQEQ parenBool
    (149) eq -> . valoresBool DISTINTO parenBool
    (150) eq -> . eq EQEQ valoresBool
    (151) eq -> . eq DISTINTO valoresBool
    (152) eq -> . valoresBool EQEQ valoresBool
    (153) eq -> . valoresBool DISTINTO valoresBool
    (154) eq -> . mayor
    (37) funcBool -> . COLINEALES ( vec , vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (160) mayor -> . tCompare > tCompare
    (161) mayor -> . menor
    (62) vecVal -> . ID m
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (155) tCompare -> . eMat
    (156) tCompare -> . varsOps
    (157) tCompare -> . varYVals
    (158) tCompare -> . INT
    (159) tCompare -> . FLOAT
    (162) menor -> . tCompare < tCompare
    (163) menor -> . not
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (164) not -> . NOT not
    (165) not -> . NOT valoresBool
    (166) not -> . parenBool
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (167) parenBool -> . ( expBool )
    (119) paren -> . ( eMat )

    BOOL            shift and go to state 85
    INT             shift and go to state 81
    FLOAT           shift and go to state 82
    COLINEALES      shift and go to state 16
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    STRING          shift and go to state 72
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    NOT             shift and go to state 89
    -               shift and go to state 76
    +               shift and go to state 75
    (               shift and go to state 168

    and                            shift and go to state 224
    funcBool                       shift and go to state 66
    funcInt                        shift and go to state 67
    menor                          shift and go to state 83
    valoresMat                     shift and go to state 69
    eq                             shift and go to state 70
    vecVal                         shift and go to state 9
    valoresBool                    shift and go to state 225
    eMat                           shift and go to state 73
    mayor                          shift and go to state 68
    paren                          shift and go to state 79
    varsOps                        shift and go to state 86
    tCompare                       shift and go to state 78
    not                            shift and go to state 80
    p                              shift and go to state 84
    iSing                          shift and go to state 77
    exp                            shift and go to state 87
    varYVals                       shift and go to state 90
    parenBool                      shift and go to state 88

state 148

    (131) expBool -> valoresBool ? . expBool : expBool
    (132) expBool -> valoresBool ? . valoresBool : expBool
    (133) expBool -> valoresBool ? . expBool : valoresBool
    (134) expBool -> valoresBool ? . valoresBool : valoresBool
    (127) expBool -> . or ? expBool : expBool
    (128) expBool -> . or ? expBool : valoresBool
    (129) expBool -> . or ? valoresBool : expBool
    (130) expBool -> . or ? valoresBool : valoresBool
    (131) expBool -> . valoresBool ? expBool : expBool
    (132) expBool -> . valoresBool ? valoresBool : expBool
    (133) expBool -> . valoresBool ? expBool : valoresBool
    (134) expBool -> . valoresBool ? valoresBool : valoresBool
    (135) expBool -> . or
    (120) valoresBool -> . BOOL
    (121) valoresBool -> . funcBool
    (122) valoresBool -> . varYVals
    (123) valoresBool -> . varsOps
    (124) valoresBool -> . eMat
    (125) valoresBool -> . INT
    (126) valoresBool -> . FLOAT
    (136) or -> . or OR and
    (137) or -> . valoresBool OR and
    (138) or -> . or OR valoresBool
    (139) or -> . valoresBool OR valoresBool
    (140) or -> . and
    (37) funcBool -> . COLINEALES ( vec , vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (141) and -> . and AND eq
    (142) and -> . valoresBool AND eq
    (143) and -> . and AND valoresBool
    (144) and -> . valoresBool AND valoresBool
    (145) and -> . eq
    (62) vecVal -> . ID m
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (146) eq -> . eq EQEQ parenBool
    (147) eq -> . eq DISTINTO parenBool
    (148) eq -> . valoresBool EQEQ parenBool
    (149) eq -> . valoresBool DISTINTO parenBool
    (150) eq -> . eq EQEQ valoresBool
    (151) eq -> . eq DISTINTO valoresBool
    (152) eq -> . valoresBool EQEQ valoresBool
    (153) eq -> . valoresBool DISTINTO valoresBool
    (154) eq -> . mayor
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (160) mayor -> . tCompare > tCompare
    (161) mayor -> . menor
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (155) tCompare -> . eMat
    (156) tCompare -> . varsOps
    (157) tCompare -> . varYVals
    (158) tCompare -> . INT
    (159) tCompare -> . FLOAT
    (162) menor -> . tCompare < tCompare
    (163) menor -> . not
    (119) paren -> . ( eMat )
    (164) not -> . NOT not
    (165) not -> . NOT valoresBool
    (166) not -> . parenBool
    (167) parenBool -> . ( expBool )

    BOOL            shift and go to state 85
    INT             shift and go to state 81
    FLOAT           shift and go to state 82
    COLINEALES      shift and go to state 16
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    STRING          shift and go to state 72
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    -               shift and go to state 76
    +               shift and go to state 75
    (               shift and go to state 74
    NOT             shift and go to state 89

    and                            shift and go to state 65
    funcBool                       shift and go to state 66
    funcInt                        shift and go to state 67
    menor                          shift and go to state 83
    valoresMat                     shift and go to state 69
    eq                             shift and go to state 70
    vecVal                         shift and go to state 9
    valoresBool                    shift and go to state 226
    eMat                           shift and go to state 73
    mayor                          shift and go to state 68
    paren                          shift and go to state 79
    varsOps                        shift and go to state 86
    tCompare                       shift and go to state 78
    not                            shift and go to state 80
    parenBool                      shift and go to state 88
    p                              shift and go to state 84
    iSing                          shift and go to state 77
    exp                            shift and go to state 87
    varYVals                       shift and go to state 90
    or                             shift and go to state 91
    expBool                        shift and go to state 227

state 149

    (87) eMat -> eMat + . p
    (91) eMat -> eMat + . valoresMat
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (62) vecVal -> . ID m
    (119) paren -> . ( eMat )

    INT             shift and go to state 131
    FLOAT           shift and go to state 128
    STRING          shift and go to state 72
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    -               shift and go to state 76
    +               shift and go to state 75
    (               shift and go to state 127

    valoresMat                     shift and go to state 228
    funcInt                        shift and go to state 67
    vecVal                         shift and go to state 9
    p                              shift and go to state 229
    varsOps                        shift and go to state 129
    exp                            shift and go to state 87
    paren                          shift and go to state 79
    varYVals                       shift and go to state 130
    iSing                          shift and go to state 77

state 150

    (88) eMat -> eMat - . p
    (92) eMat -> eMat - . valoresMat
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (62) vecVal -> . ID m
    (119) paren -> . ( eMat )

    INT             shift and go to state 131
    FLOAT           shift and go to state 128
    STRING          shift and go to state 72
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    -               shift and go to state 76
    +               shift and go to state 75
    (               shift and go to state 127

    valoresMat                     shift and go to state 230
    funcInt                        shift and go to state 67
    vecVal                         shift and go to state 9
    p                              shift and go to state 231
    varsOps                        shift and go to state 129
    exp                            shift and go to state 87
    paren                          shift and go to state 79
    varYVals                       shift and go to state 130
    iSing                          shift and go to state 77

state 151

    (119) paren -> ( eMat . )
    (87) eMat -> eMat . + p
    (88) eMat -> eMat . - p
    (91) eMat -> eMat . + valoresMat
    (92) eMat -> eMat . - valoresMat
    (124) valoresBool -> eMat .
    (155) tCompare -> eMat .

    )               shift and go to state 232
    +               shift and go to state 149
    -               shift and go to state 150
    ?               reduce using rule 124 (valoresBool -> eMat .)
    OR              reduce using rule 124 (valoresBool -> eMat .)
    AND             reduce using rule 124 (valoresBool -> eMat .)
    EQEQ            reduce using rule 124 (valoresBool -> eMat .)
    DISTINTO        reduce using rule 124 (valoresBool -> eMat .)
    >               reduce using rule 155 (tCompare -> eMat .)
    <               reduce using rule 155 (tCompare -> eMat .)


state 152

    (81) valoresMat -> INT .
    (125) valoresBool -> INT .
    (158) tCompare -> INT .

    +               reduce using rule 81 (valoresMat -> INT .)
    -               reduce using rule 81 (valoresMat -> INT .)
    *               reduce using rule 81 (valoresMat -> INT .)
    /               reduce using rule 81 (valoresMat -> INT .)
    %               reduce using rule 81 (valoresMat -> INT .)
    ^               reduce using rule 81 (valoresMat -> INT .)
    ?               reduce using rule 125 (valoresBool -> INT .)
    OR              reduce using rule 125 (valoresBool -> INT .)
    AND             reduce using rule 125 (valoresBool -> INT .)
    EQEQ            reduce using rule 125 (valoresBool -> INT .)
    DISTINTO        reduce using rule 125 (valoresBool -> INT .)
    >               reduce using rule 158 (tCompare -> INT .)
    <               reduce using rule 158 (tCompare -> INT .)


state 153

    (82) valoresMat -> FLOAT .
    (126) valoresBool -> FLOAT .
    (159) tCompare -> FLOAT .

    +               reduce using rule 82 (valoresMat -> FLOAT .)
    -               reduce using rule 82 (valoresMat -> FLOAT .)
    *               reduce using rule 82 (valoresMat -> FLOAT .)
    /               reduce using rule 82 (valoresMat -> FLOAT .)
    %               reduce using rule 82 (valoresMat -> FLOAT .)
    ^               reduce using rule 82 (valoresMat -> FLOAT .)
    ?               reduce using rule 126 (valoresBool -> FLOAT .)
    OR              reduce using rule 126 (valoresBool -> FLOAT .)
    AND             reduce using rule 126 (valoresBool -> FLOAT .)
    EQEQ            reduce using rule 126 (valoresBool -> FLOAT .)
    DISTINTO        reduce using rule 126 (valoresBool -> FLOAT .)
    >               reduce using rule 159 (tCompare -> FLOAT .)
    <               reduce using rule 159 (tCompare -> FLOAT .)


state 154

    (85) valoresMat -> varsOps .
    (123) valoresBool -> varsOps .
    (156) tCompare -> varsOps .

    +               reduce using rule 85 (valoresMat -> varsOps .)
    -               reduce using rule 85 (valoresMat -> varsOps .)
    *               reduce using rule 85 (valoresMat -> varsOps .)
    /               reduce using rule 85 (valoresMat -> varsOps .)
    %               reduce using rule 85 (valoresMat -> varsOps .)
    ^               reduce using rule 85 (valoresMat -> varsOps .)
    ?               reduce using rule 123 (valoresBool -> varsOps .)
    OR              reduce using rule 123 (valoresBool -> varsOps .)
    AND             reduce using rule 123 (valoresBool -> varsOps .)
    EQEQ            reduce using rule 123 (valoresBool -> varsOps .)
    DISTINTO        reduce using rule 123 (valoresBool -> varsOps .)
    >               reduce using rule 156 (tCompare -> varsOps .)
    <               reduce using rule 156 (tCompare -> varsOps .)


state 155

    (84) valoresMat -> varYVals .
    (122) valoresBool -> varYVals .
    (72) varsOps -> varYVals . MASMAS
    (73) varsOps -> varYVals . MENOSMENOS
    (157) tCompare -> varYVals .

    +               reduce using rule 84 (valoresMat -> varYVals .)
    -               reduce using rule 84 (valoresMat -> varYVals .)
    *               reduce using rule 84 (valoresMat -> varYVals .)
    /               reduce using rule 84 (valoresMat -> varYVals .)
    %               reduce using rule 84 (valoresMat -> varYVals .)
    ^               reduce using rule 84 (valoresMat -> varYVals .)
    ?               reduce using rule 122 (valoresBool -> varYVals .)
    OR              reduce using rule 122 (valoresBool -> varYVals .)
    AND             reduce using rule 122 (valoresBool -> varYVals .)
    EQEQ            reduce using rule 122 (valoresBool -> varYVals .)
    DISTINTO        reduce using rule 122 (valoresBool -> varYVals .)
    MASMAS          shift and go to state 56
    MENOSMENOS      shift and go to state 53
    >               reduce using rule 157 (tCompare -> varYVals .)
    <               reduce using rule 157 (tCompare -> varYVals .)


state 156

    (167) parenBool -> ( expBool . )

    )               shift and go to state 233


state 157

    (117) iSing -> + valoresMat .

    ^               reduce using rule 117 (iSing -> + valoresMat .)
    *               reduce using rule 117 (iSing -> + valoresMat .)
    /               reduce using rule 117 (iSing -> + valoresMat .)
    %               reduce using rule 117 (iSing -> + valoresMat .)
    +               reduce using rule 117 (iSing -> + valoresMat .)
    -               reduce using rule 117 (iSing -> + valoresMat .)
    ?               reduce using rule 117 (iSing -> + valoresMat .)
    OR              reduce using rule 117 (iSing -> + valoresMat .)
    AND             reduce using rule 117 (iSing -> + valoresMat .)
    EQEQ            reduce using rule 117 (iSing -> + valoresMat .)
    DISTINTO        reduce using rule 117 (iSing -> + valoresMat .)
    >               reduce using rule 117 (iSing -> + valoresMat .)
    <               reduce using rule 117 (iSing -> + valoresMat .)
    )               reduce using rule 117 (iSing -> + valoresMat .)
    ;               reduce using rule 117 (iSing -> + valoresMat .)
    ,               reduce using rule 117 (iSing -> + valoresMat .)
    ]               reduce using rule 117 (iSing -> + valoresMat .)
    }               reduce using rule 117 (iSing -> + valoresMat .)
    :               reduce using rule 117 (iSing -> + valoresMat .)


state 158

    (115) iSing -> + paren .

    ^               reduce using rule 115 (iSing -> + paren .)
    *               reduce using rule 115 (iSing -> + paren .)
    /               reduce using rule 115 (iSing -> + paren .)
    %               reduce using rule 115 (iSing -> + paren .)
    +               reduce using rule 115 (iSing -> + paren .)
    -               reduce using rule 115 (iSing -> + paren .)
    ?               reduce using rule 115 (iSing -> + paren .)
    OR              reduce using rule 115 (iSing -> + paren .)
    AND             reduce using rule 115 (iSing -> + paren .)
    EQEQ            reduce using rule 115 (iSing -> + paren .)
    DISTINTO        reduce using rule 115 (iSing -> + paren .)
    >               reduce using rule 115 (iSing -> + paren .)
    <               reduce using rule 115 (iSing -> + paren .)
    )               reduce using rule 115 (iSing -> + paren .)
    ;               reduce using rule 115 (iSing -> + paren .)
    ,               reduce using rule 115 (iSing -> + paren .)
    ]               reduce using rule 115 (iSing -> + paren .)
    }               reduce using rule 115 (iSing -> + paren .)
    :               reduce using rule 115 (iSing -> + paren .)


state 159

    (116) iSing -> - valoresMat .

    ^               reduce using rule 116 (iSing -> - valoresMat .)
    *               reduce using rule 116 (iSing -> - valoresMat .)
    /               reduce using rule 116 (iSing -> - valoresMat .)
    %               reduce using rule 116 (iSing -> - valoresMat .)
    +               reduce using rule 116 (iSing -> - valoresMat .)
    -               reduce using rule 116 (iSing -> - valoresMat .)
    ?               reduce using rule 116 (iSing -> - valoresMat .)
    OR              reduce using rule 116 (iSing -> - valoresMat .)
    AND             reduce using rule 116 (iSing -> - valoresMat .)
    EQEQ            reduce using rule 116 (iSing -> - valoresMat .)
    DISTINTO        reduce using rule 116 (iSing -> - valoresMat .)
    >               reduce using rule 116 (iSing -> - valoresMat .)
    <               reduce using rule 116 (iSing -> - valoresMat .)
    )               reduce using rule 116 (iSing -> - valoresMat .)
    ;               reduce using rule 116 (iSing -> - valoresMat .)
    ,               reduce using rule 116 (iSing -> - valoresMat .)
    ]               reduce using rule 116 (iSing -> - valoresMat .)
    }               reduce using rule 116 (iSing -> - valoresMat .)
    :               reduce using rule 116 (iSing -> - valoresMat .)


state 160

    (114) iSing -> - paren .

    ^               reduce using rule 114 (iSing -> - paren .)
    *               reduce using rule 114 (iSing -> - paren .)
    /               reduce using rule 114 (iSing -> - paren .)
    %               reduce using rule 114 (iSing -> - paren .)
    +               reduce using rule 114 (iSing -> - paren .)
    -               reduce using rule 114 (iSing -> - paren .)
    ?               reduce using rule 114 (iSing -> - paren .)
    OR              reduce using rule 114 (iSing -> - paren .)
    AND             reduce using rule 114 (iSing -> - paren .)
    EQEQ            reduce using rule 114 (iSing -> - paren .)
    DISTINTO        reduce using rule 114 (iSing -> - paren .)
    >               reduce using rule 114 (iSing -> - paren .)
    <               reduce using rule 114 (iSing -> - paren .)
    )               reduce using rule 114 (iSing -> - paren .)
    ;               reduce using rule 114 (iSing -> - paren .)
    ,               reduce using rule 114 (iSing -> - paren .)
    ]               reduce using rule 114 (iSing -> - paren .)
    }               reduce using rule 114 (iSing -> - paren .)
    :               reduce using rule 114 (iSing -> - paren .)


state 161

    (162) menor -> tCompare < . tCompare
    (155) tCompare -> . eMat
    (156) tCompare -> . varsOps
    (157) tCompare -> . varYVals
    (158) tCompare -> . INT
    (159) tCompare -> . FLOAT
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (62) vecVal -> . ID m
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (119) paren -> . ( eMat )

    INT             shift and go to state 236
    FLOAT           shift and go to state 237
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    ID              shift and go to state 43
    STRING          shift and go to state 72
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    -               shift and go to state 76
    +               shift and go to state 75
    (               shift and go to state 127

    eMat                           shift and go to state 234
    p                              shift and go to state 84
    funcInt                        shift and go to state 67
    iSing                          shift and go to state 77
    tCompare                       shift and go to state 235
    varsOps                        shift and go to state 238
    valoresMat                     shift and go to state 69
    paren                          shift and go to state 79
    exp                            shift and go to state 87
    varYVals                       shift and go to state 239
    vecVal                         shift and go to state 9

state 162

    (160) mayor -> tCompare > . tCompare
    (155) tCompare -> . eMat
    (156) tCompare -> . varsOps
    (157) tCompare -> . varYVals
    (158) tCompare -> . INT
    (159) tCompare -> . FLOAT
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (62) vecVal -> . ID m
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (119) paren -> . ( eMat )

    INT             shift and go to state 236
    FLOAT           shift and go to state 237
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    ID              shift and go to state 43
    STRING          shift and go to state 72
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    -               shift and go to state 76
    +               shift and go to state 75
    (               shift and go to state 127

    eMat                           shift and go to state 234
    p                              shift and go to state 84
    funcInt                        shift and go to state 67
    iSing                          shift and go to state 77
    tCompare                       shift and go to state 240
    varsOps                        shift and go to state 238
    valoresMat                     shift and go to state 69
    paren                          shift and go to state 79
    exp                            shift and go to state 87
    varYVals                       shift and go to state 239
    vecVal                         shift and go to state 9

state 163

    (98) p -> p % . exp
    (104) p -> p % . valoresMat
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (119) paren -> . ( eMat )
    (62) vecVal -> . ID m

    INT             shift and go to state 131
    FLOAT           shift and go to state 128
    STRING          shift and go to state 72
    -               shift and go to state 76
    +               shift and go to state 75
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    (               shift and go to state 127

    exp                            shift and go to state 242
    funcInt                        shift and go to state 67
    vecVal                         shift and go to state 9
    iSing                          shift and go to state 77
    valoresMat                     shift and go to state 241
    paren                          shift and go to state 79
    varYVals                       shift and go to state 130
    varsOps                        shift and go to state 129

state 164

    (96) p -> p * . exp
    (102) p -> p * . valoresMat
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (119) paren -> . ( eMat )
    (62) vecVal -> . ID m

    INT             shift and go to state 131
    FLOAT           shift and go to state 128
    STRING          shift and go to state 72
    -               shift and go to state 76
    +               shift and go to state 75
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    (               shift and go to state 127

    exp                            shift and go to state 244
    funcInt                        shift and go to state 67
    vecVal                         shift and go to state 9
    iSing                          shift and go to state 77
    valoresMat                     shift and go to state 243
    paren                          shift and go to state 79
    varYVals                       shift and go to state 130
    varsOps                        shift and go to state 129

state 165

    (97) p -> p / . exp
    (103) p -> p / . valoresMat
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (119) paren -> . ( eMat )
    (62) vecVal -> . ID m

    INT             shift and go to state 131
    FLOAT           shift and go to state 128
    STRING          shift and go to state 72
    -               shift and go to state 76
    +               shift and go to state 75
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    (               shift and go to state 127

    exp                            shift and go to state 246
    funcInt                        shift and go to state 67
    vecVal                         shift and go to state 9
    iSing                          shift and go to state 77
    valoresMat                     shift and go to state 245
    paren                          shift and go to state 79
    varYVals                       shift and go to state 130
    varsOps                        shift and go to state 129

state 166

    (109) exp -> exp ^ . iSing
    (111) exp -> exp ^ . valoresMat
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (119) paren -> . ( eMat )
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (62) vecVal -> . ID m

    -               shift and go to state 76
    +               shift and go to state 75
    INT             shift and go to state 131
    FLOAT           shift and go to state 128
    STRING          shift and go to state 72
    (               shift and go to state 127
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30

    funcInt                        shift and go to state 67
    vecVal                         shift and go to state 9
    iSing                          shift and go to state 248
    valoresMat                     shift and go to state 247
    paren                          shift and go to state 79
    varYVals                       shift and go to state 130
    varsOps                        shift and go to state 129

state 167

    (124) valoresBool -> eMat .
    (87) eMat -> eMat . + p
    (88) eMat -> eMat . - p
    (91) eMat -> eMat . + valoresMat
    (92) eMat -> eMat . - valoresMat

    EQEQ            reduce using rule 124 (valoresBool -> eMat .)
    DISTINTO        reduce using rule 124 (valoresBool -> eMat .)
    AND             reduce using rule 124 (valoresBool -> eMat .)
    ?               reduce using rule 124 (valoresBool -> eMat .)
    OR              reduce using rule 124 (valoresBool -> eMat .)
    )               reduce using rule 124 (valoresBool -> eMat .)
    ;               reduce using rule 124 (valoresBool -> eMat .)
    ,               reduce using rule 124 (valoresBool -> eMat .)
    ]               reduce using rule 124 (valoresBool -> eMat .)
    }               reduce using rule 124 (valoresBool -> eMat .)
    :               reduce using rule 124 (valoresBool -> eMat .)
    +               shift and go to state 149
    -               shift and go to state 150


state 168

    (167) parenBool -> ( . expBool )
    (119) paren -> ( . eMat )
    (127) expBool -> . or ? expBool : expBool
    (128) expBool -> . or ? expBool : valoresBool
    (129) expBool -> . or ? valoresBool : expBool
    (130) expBool -> . or ? valoresBool : valoresBool
    (131) expBool -> . valoresBool ? expBool : expBool
    (132) expBool -> . valoresBool ? valoresBool : expBool
    (133) expBool -> . valoresBool ? expBool : valoresBool
    (134) expBool -> . valoresBool ? valoresBool : valoresBool
    (135) expBool -> . or
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (136) or -> . or OR and
    (137) or -> . valoresBool OR and
    (138) or -> . or OR valoresBool
    (139) or -> . valoresBool OR valoresBool
    (140) or -> . and
    (120) valoresBool -> . BOOL
    (121) valoresBool -> . funcBool
    (122) valoresBool -> . varYVals
    (123) valoresBool -> . varsOps
    (124) valoresBool -> . eMat
    (125) valoresBool -> . INT
    (126) valoresBool -> . FLOAT
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (141) and -> . and AND eq
    (142) and -> . valoresBool AND eq
    (143) and -> . and AND valoresBool
    (144) and -> . valoresBool AND valoresBool
    (145) and -> . eq
    (37) funcBool -> . COLINEALES ( vec , vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (146) eq -> . eq EQEQ parenBool
    (147) eq -> . eq DISTINTO parenBool
    (148) eq -> . valoresBool EQEQ parenBool
    (149) eq -> . valoresBool DISTINTO parenBool
    (150) eq -> . eq EQEQ valoresBool
    (151) eq -> . eq DISTINTO valoresBool
    (152) eq -> . valoresBool EQEQ valoresBool
    (153) eq -> . valoresBool DISTINTO valoresBool
    (154) eq -> . mayor
    (62) vecVal -> . ID m
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (160) mayor -> . tCompare > tCompare
    (161) mayor -> . menor
    (119) paren -> . ( eMat )
    (155) tCompare -> . eMat
    (156) tCompare -> . varsOps
    (157) tCompare -> . varYVals
    (158) tCompare -> . INT
    (159) tCompare -> . FLOAT
    (162) menor -> . tCompare < tCompare
    (163) menor -> . not
    (164) not -> . NOT not
    (165) not -> . NOT valoresBool
    (166) not -> . parenBool
    (167) parenBool -> . ( expBool )

    BOOL            shift and go to state 85
    INT             shift and go to state 81
    FLOAT           shift and go to state 82
    STRING          shift and go to state 72
    COLINEALES      shift and go to state 16
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    -               shift and go to state 76
    +               shift and go to state 75
    (               shift and go to state 74
    NOT             shift and go to state 89

    and                            shift and go to state 65
    funcBool                       shift and go to state 66
    funcInt                        shift and go to state 67
    menor                          shift and go to state 83
    valoresMat                     shift and go to state 69
    eq                             shift and go to state 70
    vecVal                         shift and go to state 9
    valoresBool                    shift and go to state 71
    eMat                           shift and go to state 151
    mayor                          shift and go to state 68
    paren                          shift and go to state 79
    varsOps                        shift and go to state 86
    tCompare                       shift and go to state 78
    not                            shift and go to state 80
    parenBool                      shift and go to state 88
    p                              shift and go to state 84
    iSing                          shift and go to state 77
    exp                            shift and go to state 87
    varYVals                       shift and go to state 249
    or                             shift and go to state 91
    expBool                        shift and go to state 156

state 169

    (165) not -> NOT valoresBool .

    EQEQ            reduce using rule 165 (not -> NOT valoresBool .)
    DISTINTO        reduce using rule 165 (not -> NOT valoresBool .)
    AND             reduce using rule 165 (not -> NOT valoresBool .)
    ?               reduce using rule 165 (not -> NOT valoresBool .)
    OR              reduce using rule 165 (not -> NOT valoresBool .)
    ;               reduce using rule 165 (not -> NOT valoresBool .)
    )               reduce using rule 165 (not -> NOT valoresBool .)
    ,               reduce using rule 165 (not -> NOT valoresBool .)
    ]               reduce using rule 165 (not -> NOT valoresBool .)
    }               reduce using rule 165 (not -> NOT valoresBool .)
    :               reduce using rule 165 (not -> NOT valoresBool .)


state 170

    (164) not -> NOT not .

    EQEQ            reduce using rule 164 (not -> NOT not .)
    DISTINTO        reduce using rule 164 (not -> NOT not .)
    AND             reduce using rule 164 (not -> NOT not .)
    ?               reduce using rule 164 (not -> NOT not .)
    OR              reduce using rule 164 (not -> NOT not .)
    ;               reduce using rule 164 (not -> NOT not .)
    )               reduce using rule 164 (not -> NOT not .)
    ,               reduce using rule 164 (not -> NOT not .)
    ]               reduce using rule 164 (not -> NOT not .)
    }               reduce using rule 164 (not -> NOT not .)
    :               reduce using rule 164 (not -> NOT not .)


state 171

    (125) valoresBool -> INT .
    (81) valoresMat -> INT .

    EQEQ            reduce using rule 125 (valoresBool -> INT .)
    DISTINTO        reduce using rule 125 (valoresBool -> INT .)
    AND             reduce using rule 125 (valoresBool -> INT .)
    ?               reduce using rule 125 (valoresBool -> INT .)
    OR              reduce using rule 125 (valoresBool -> INT .)
    )               reduce using rule 125 (valoresBool -> INT .)
    ;               reduce using rule 125 (valoresBool -> INT .)
    ,               reduce using rule 125 (valoresBool -> INT .)
    ]               reduce using rule 125 (valoresBool -> INT .)
    }               reduce using rule 125 (valoresBool -> INT .)
    :               reduce using rule 125 (valoresBool -> INT .)
    +               reduce using rule 81 (valoresMat -> INT .)
    -               reduce using rule 81 (valoresMat -> INT .)
    *               reduce using rule 81 (valoresMat -> INT .)
    /               reduce using rule 81 (valoresMat -> INT .)
    %               reduce using rule 81 (valoresMat -> INT .)
    ^               reduce using rule 81 (valoresMat -> INT .)


state 172

    (126) valoresBool -> FLOAT .
    (82) valoresMat -> FLOAT .

    EQEQ            reduce using rule 126 (valoresBool -> FLOAT .)
    DISTINTO        reduce using rule 126 (valoresBool -> FLOAT .)
    AND             reduce using rule 126 (valoresBool -> FLOAT .)
    ?               reduce using rule 126 (valoresBool -> FLOAT .)
    OR              reduce using rule 126 (valoresBool -> FLOAT .)
    )               reduce using rule 126 (valoresBool -> FLOAT .)
    ;               reduce using rule 126 (valoresBool -> FLOAT .)
    ,               reduce using rule 126 (valoresBool -> FLOAT .)
    ]               reduce using rule 126 (valoresBool -> FLOAT .)
    }               reduce using rule 126 (valoresBool -> FLOAT .)
    :               reduce using rule 126 (valoresBool -> FLOAT .)
    +               reduce using rule 82 (valoresMat -> FLOAT .)
    -               reduce using rule 82 (valoresMat -> FLOAT .)
    *               reduce using rule 82 (valoresMat -> FLOAT .)
    /               reduce using rule 82 (valoresMat -> FLOAT .)
    %               reduce using rule 82 (valoresMat -> FLOAT .)
    ^               reduce using rule 82 (valoresMat -> FLOAT .)


state 173

    (123) valoresBool -> varsOps .
    (85) valoresMat -> varsOps .

    EQEQ            reduce using rule 123 (valoresBool -> varsOps .)
    DISTINTO        reduce using rule 123 (valoresBool -> varsOps .)
    AND             reduce using rule 123 (valoresBool -> varsOps .)
    ?               reduce using rule 123 (valoresBool -> varsOps .)
    OR              reduce using rule 123 (valoresBool -> varsOps .)
    )               reduce using rule 123 (valoresBool -> varsOps .)
    ;               reduce using rule 123 (valoresBool -> varsOps .)
    ,               reduce using rule 123 (valoresBool -> varsOps .)
    ]               reduce using rule 123 (valoresBool -> varsOps .)
    }               reduce using rule 123 (valoresBool -> varsOps .)
    :               reduce using rule 123 (valoresBool -> varsOps .)
    +               reduce using rule 85 (valoresMat -> varsOps .)
    -               reduce using rule 85 (valoresMat -> varsOps .)
    *               reduce using rule 85 (valoresMat -> varsOps .)
    /               reduce using rule 85 (valoresMat -> varsOps .)
    %               reduce using rule 85 (valoresMat -> varsOps .)
    ^               reduce using rule 85 (valoresMat -> varsOps .)


state 174

    (122) valoresBool -> varYVals .
    (72) varsOps -> varYVals . MASMAS
    (73) varsOps -> varYVals . MENOSMENOS
    (84) valoresMat -> varYVals .

    EQEQ            reduce using rule 122 (valoresBool -> varYVals .)
    DISTINTO        reduce using rule 122 (valoresBool -> varYVals .)
    AND             reduce using rule 122 (valoresBool -> varYVals .)
    ?               reduce using rule 122 (valoresBool -> varYVals .)
    OR              reduce using rule 122 (valoresBool -> varYVals .)
    )               reduce using rule 122 (valoresBool -> varYVals .)
    ;               reduce using rule 122 (valoresBool -> varYVals .)
    ,               reduce using rule 122 (valoresBool -> varYVals .)
    ]               reduce using rule 122 (valoresBool -> varYVals .)
    }               reduce using rule 122 (valoresBool -> varYVals .)
    :               reduce using rule 122 (valoresBool -> varYVals .)
    MASMAS          shift and go to state 56
    MENOSMENOS      shift and go to state 53
    +               reduce using rule 84 (valoresMat -> varYVals .)
    -               reduce using rule 84 (valoresMat -> varYVals .)
    *               reduce using rule 84 (valoresMat -> varYVals .)
    /               reduce using rule 84 (valoresMat -> varYVals .)
    %               reduce using rule 84 (valoresMat -> varYVals .)
    ^               reduce using rule 84 (valoresMat -> varYVals .)


state 175

    (127) expBool -> or ? . expBool : expBool
    (128) expBool -> or ? . expBool : valoresBool
    (129) expBool -> or ? . valoresBool : expBool
    (130) expBool -> or ? . valoresBool : valoresBool
    (127) expBool -> . or ? expBool : expBool
    (128) expBool -> . or ? expBool : valoresBool
    (129) expBool -> . or ? valoresBool : expBool
    (130) expBool -> . or ? valoresBool : valoresBool
    (131) expBool -> . valoresBool ? expBool : expBool
    (132) expBool -> . valoresBool ? valoresBool : expBool
    (133) expBool -> . valoresBool ? expBool : valoresBool
    (134) expBool -> . valoresBool ? valoresBool : valoresBool
    (135) expBool -> . or
    (120) valoresBool -> . BOOL
    (121) valoresBool -> . funcBool
    (122) valoresBool -> . varYVals
    (123) valoresBool -> . varsOps
    (124) valoresBool -> . eMat
    (125) valoresBool -> . INT
    (126) valoresBool -> . FLOAT
    (136) or -> . or OR and
    (137) or -> . valoresBool OR and
    (138) or -> . or OR valoresBool
    (139) or -> . valoresBool OR valoresBool
    (140) or -> . and
    (37) funcBool -> . COLINEALES ( vec , vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (141) and -> . and AND eq
    (142) and -> . valoresBool AND eq
    (143) and -> . and AND valoresBool
    (144) and -> . valoresBool AND valoresBool
    (145) and -> . eq
    (62) vecVal -> . ID m
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (146) eq -> . eq EQEQ parenBool
    (147) eq -> . eq DISTINTO parenBool
    (148) eq -> . valoresBool EQEQ parenBool
    (149) eq -> . valoresBool DISTINTO parenBool
    (150) eq -> . eq EQEQ valoresBool
    (151) eq -> . eq DISTINTO valoresBool
    (152) eq -> . valoresBool EQEQ valoresBool
    (153) eq -> . valoresBool DISTINTO valoresBool
    (154) eq -> . mayor
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (160) mayor -> . tCompare > tCompare
    (161) mayor -> . menor
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (155) tCompare -> . eMat
    (156) tCompare -> . varsOps
    (157) tCompare -> . varYVals
    (158) tCompare -> . INT
    (159) tCompare -> . FLOAT
    (162) menor -> . tCompare < tCompare
    (163) menor -> . not
    (119) paren -> . ( eMat )
    (164) not -> . NOT not
    (165) not -> . NOT valoresBool
    (166) not -> . parenBool
    (167) parenBool -> . ( expBool )

    BOOL            shift and go to state 85
    INT             shift and go to state 81
    FLOAT           shift and go to state 82
    COLINEALES      shift and go to state 16
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    STRING          shift and go to state 72
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    -               shift and go to state 76
    +               shift and go to state 75
    (               shift and go to state 74
    NOT             shift and go to state 89

    and                            shift and go to state 65
    funcBool                       shift and go to state 66
    funcInt                        shift and go to state 67
    menor                          shift and go to state 83
    valoresMat                     shift and go to state 69
    eq                             shift and go to state 70
    valoresBool                    shift and go to state 250
    eMat                           shift and go to state 73
    vecVal                         shift and go to state 9
    paren                          shift and go to state 79
    varsOps                        shift and go to state 86
    tCompare                       shift and go to state 78
    not                            shift and go to state 80
    varYVals                       shift and go to state 90
    or                             shift and go to state 91
    p                              shift and go to state 84
    iSing                          shift and go to state 77
    exp                            shift and go to state 87
    mayor                          shift and go to state 68
    parenBool                      shift and go to state 88
    expBool                        shift and go to state 251

state 176

    (136) or -> or OR . and
    (138) or -> or OR . valoresBool
    (141) and -> . and AND eq
    (142) and -> . valoresBool AND eq
    (143) and -> . and AND valoresBool
    (144) and -> . valoresBool AND valoresBool
    (145) and -> . eq
    (120) valoresBool -> . BOOL
    (121) valoresBool -> . funcBool
    (122) valoresBool -> . varYVals
    (123) valoresBool -> . varsOps
    (124) valoresBool -> . eMat
    (125) valoresBool -> . INT
    (126) valoresBool -> . FLOAT
    (146) eq -> . eq EQEQ parenBool
    (147) eq -> . eq DISTINTO parenBool
    (148) eq -> . valoresBool EQEQ parenBool
    (149) eq -> . valoresBool DISTINTO parenBool
    (150) eq -> . eq EQEQ valoresBool
    (151) eq -> . eq DISTINTO valoresBool
    (152) eq -> . valoresBool EQEQ valoresBool
    (153) eq -> . valoresBool DISTINTO valoresBool
    (154) eq -> . mayor
    (37) funcBool -> . COLINEALES ( vec , vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (160) mayor -> . tCompare > tCompare
    (161) mayor -> . menor
    (62) vecVal -> . ID m
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (155) tCompare -> . eMat
    (156) tCompare -> . varsOps
    (157) tCompare -> . varYVals
    (158) tCompare -> . INT
    (159) tCompare -> . FLOAT
    (162) menor -> . tCompare < tCompare
    (163) menor -> . not
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (164) not -> . NOT not
    (165) not -> . NOT valoresBool
    (166) not -> . parenBool
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (167) parenBool -> . ( expBool )
    (119) paren -> . ( eMat )

    BOOL            shift and go to state 85
    INT             shift and go to state 81
    FLOAT           shift and go to state 82
    COLINEALES      shift and go to state 16
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    STRING          shift and go to state 72
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    NOT             shift and go to state 89
    -               shift and go to state 76
    +               shift and go to state 75
    (               shift and go to state 168

    and                            shift and go to state 252
    funcBool                       shift and go to state 66
    funcInt                        shift and go to state 67
    menor                          shift and go to state 83
    valoresMat                     shift and go to state 69
    eq                             shift and go to state 70
    valoresBool                    shift and go to state 253
    eMat                           shift and go to state 73
    vecVal                         shift and go to state 9
    paren                          shift and go to state 79
    varsOps                        shift and go to state 86
    tCompare                       shift and go to state 78
    not                            shift and go to state 80
    varYVals                       shift and go to state 90
    p                              shift and go to state 84
    iSing                          shift and go to state 77
    exp                            shift and go to state 87
    mayor                          shift and go to state 68
    parenBool                      shift and go to state 88

state 177

    (13) loop -> WHILE ( expBool ) . bloque
    (27) bloque -> . linea
    (28) bloque -> . { g }
    (2) linea -> . com
    (3) linea -> . sentencia
    (4) com -> . COMMENT
    (7) sentencia -> . varsOps ;
    (8) sentencia -> . func ;
    (9) sentencia -> . varAsig ;
    (10) sentencia -> . RETURN ;
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (29) func -> . funcReturn
    (30) func -> . funcVoid
    (75) varAsig -> . varYVals MULEQ valoresAsig
    (76) varAsig -> . varYVals DIVEQ valoresAsig
    (77) varAsig -> . varYVals MASEQ valoresAsig
    (78) varAsig -> . varYVals MENOSEQ valoresAsig
    (79) varAsig -> . varYVals = valoresAsig
    (80) varAsig -> . ID . ID = valoresAsig
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (31) funcReturn -> . funcInt
    (32) funcReturn -> . funcString
    (33) funcReturn -> . funcBool
    (38) funcVoid -> . PRINT ( valores )
    (62) vecVal -> . ID m
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (36) funcString -> . CAPITALIZAR ( eMat )
    (37) funcBool -> . COLINEALES ( vec , vec )

    {               shift and go to state 35
    COMMENT         shift and go to state 11
    RETURN          shift and go to state 2
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    ID              shift and go to state 20
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    CAPITALIZAR     shift and go to state 28
    COLINEALES      shift and go to state 16

    funcBool                       shift and go to state 3
    funcInt                        shift and go to state 5
    bloque                         shift and go to state 254
    vecVal                         shift and go to state 9
    sentencia                      shift and go to state 12
    varsOps                        shift and go to state 14
    funcVoid                       shift and go to state 15
    func                           shift and go to state 19
    varAsig                        shift and go to state 22
    funcString                     shift and go to state 24
    com                            shift and go to state 32
    funcReturn                     shift and go to state 27
    linea                          shift and go to state 34
    varYVals                       shift and go to state 26

state 178

    (43) elem -> valores . , elem
    (44) elem -> valores .

    ,               shift and go to state 255
    ]               reduce using rule 44 (elem -> valores .)


state 179

    (42) vec -> [ elem . ]

    ]               shift and go to state 256


state 180

    (55) valores -> ID . . valoresCampos
    (57) valoresCampos -> . ID
    (58) valoresCampos -> . END
    (59) valoresCampos -> . BEGIN

    ID              shift and go to state 259
    END             shift and go to state 258
    BEGIN           shift and go to state 257

    valoresCampos                  shift and go to state 260

state 181

    (38) funcVoid -> PRINT ( valores ) .

    ;               reduce using rule 38 (funcVoid -> PRINT ( valores ) .)
    )               reduce using rule 38 (funcVoid -> PRINT ( valores ) .)


state 182

    (67) reg -> { campos . }

    }               shift and go to state 261


state 183

    (68) campos -> ID . : valores , campos
    (55) valores -> ID . . valoresCampos
    (60) varYVals -> ID .
    (62) vecVal -> ID . m
    (63) m -> . [ INT ]
    (64) m -> . [ INT ] m
    (65) m -> . [ varYVals ] m
    (66) m -> . [ varYVals ]

    :               shift and go to state 262
    .               shift and go to state 180
    MASMAS          reduce using rule 60 (varYVals -> ID .)
    MENOSMENOS      reduce using rule 60 (varYVals -> ID .)
    }               reduce using rule 60 (varYVals -> ID .)
    +               reduce using rule 60 (varYVals -> ID .)
    -               reduce using rule 60 (varYVals -> ID .)
    *               reduce using rule 60 (varYVals -> ID .)
    /               reduce using rule 60 (varYVals -> ID .)
    %               reduce using rule 60 (varYVals -> ID .)
    ^               reduce using rule 60 (varYVals -> ID .)
    ?               reduce using rule 60 (varYVals -> ID .)
    OR              reduce using rule 60 (varYVals -> ID .)
    AND             reduce using rule 60 (varYVals -> ID .)
    EQEQ            reduce using rule 60 (varYVals -> ID .)
    DISTINTO        reduce using rule 60 (varYVals -> ID .)
    >               reduce using rule 60 (varYVals -> ID .)
    <               reduce using rule 60 (varYVals -> ID .)
    [               shift and go to state 48

    m                              shift and go to state 46

state 184

    (69) campos -> valores .

    }               reduce using rule 69 (campos -> valores .)


state 185

    (37) funcBool -> COLINEALES ( vec , . vec )
    (42) vec -> . [ elem ]

    [               shift and go to state 98

    vec                            shift and go to state 263

state 186

    (15) loop -> FOR ( primParam ; . cosaBooleana ; tercerParam ) bloque
    (16) cosaBooleana -> . expBool
    (17) cosaBooleana -> . valoresBool
    (127) expBool -> . or ? expBool : expBool
    (128) expBool -> . or ? expBool : valoresBool
    (129) expBool -> . or ? valoresBool : expBool
    (130) expBool -> . or ? valoresBool : valoresBool
    (131) expBool -> . valoresBool ? expBool : expBool
    (132) expBool -> . valoresBool ? valoresBool : expBool
    (133) expBool -> . valoresBool ? expBool : valoresBool
    (134) expBool -> . valoresBool ? valoresBool : valoresBool
    (135) expBool -> . or
    (120) valoresBool -> . BOOL
    (121) valoresBool -> . funcBool
    (122) valoresBool -> . varYVals
    (123) valoresBool -> . varsOps
    (124) valoresBool -> . eMat
    (125) valoresBool -> . INT
    (126) valoresBool -> . FLOAT
    (136) or -> . or OR and
    (137) or -> . valoresBool OR and
    (138) or -> . or OR valoresBool
    (139) or -> . valoresBool OR valoresBool
    (140) or -> . and
    (37) funcBool -> . COLINEALES ( vec , vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (141) and -> . and AND eq
    (142) and -> . valoresBool AND eq
    (143) and -> . and AND valoresBool
    (144) and -> . valoresBool AND valoresBool
    (145) and -> . eq
    (62) vecVal -> . ID m
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (146) eq -> . eq EQEQ parenBool
    (147) eq -> . eq DISTINTO parenBool
    (148) eq -> . valoresBool EQEQ parenBool
    (149) eq -> . valoresBool DISTINTO parenBool
    (150) eq -> . eq EQEQ valoresBool
    (151) eq -> . eq DISTINTO valoresBool
    (152) eq -> . valoresBool EQEQ valoresBool
    (153) eq -> . valoresBool DISTINTO valoresBool
    (154) eq -> . mayor
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (160) mayor -> . tCompare > tCompare
    (161) mayor -> . menor
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (155) tCompare -> . eMat
    (156) tCompare -> . varsOps
    (157) tCompare -> . varYVals
    (158) tCompare -> . INT
    (159) tCompare -> . FLOAT
    (162) menor -> . tCompare < tCompare
    (163) menor -> . not
    (119) paren -> . ( eMat )
    (164) not -> . NOT not
    (165) not -> . NOT valoresBool
    (166) not -> . parenBool
    (167) parenBool -> . ( expBool )

    BOOL            shift and go to state 85
    INT             shift and go to state 81
    FLOAT           shift and go to state 82
    COLINEALES      shift and go to state 16
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    STRING          shift and go to state 72
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    -               shift and go to state 76
    +               shift and go to state 75
    (               shift and go to state 74
    NOT             shift and go to state 89

    and                            shift and go to state 65
    funcBool                       shift and go to state 66
    funcInt                        shift and go to state 67
    menor                          shift and go to state 83
    valoresMat                     shift and go to state 69
    eq                             shift and go to state 70
    vecVal                         shift and go to state 9
    valoresBool                    shift and go to state 116
    eMat                           shift and go to state 73
    mayor                          shift and go to state 68
    paren                          shift and go to state 79
    iSing                          shift and go to state 77
    tCompare                       shift and go to state 78
    not                            shift and go to state 80
    cosaBooleana                   shift and go to state 264
    parenBool                      shift and go to state 88
    p                              shift and go to state 84
    varsOps                        shift and go to state 86
    exp                            shift and go to state 87
    varYVals                       shift and go to state 90
    or                             shift and go to state 91
    expBool                        shift and go to state 118

state 187

    (80) varAsig -> ID . ID = . valoresAsig
    (74) valoresAsig -> . valores
    (45) valores -> . eMat
    (46) valores -> . expBool
    (47) valores -> . reg
    (48) valores -> . INT
    (49) valores -> . FLOAT
    (50) valores -> . STRING
    (51) valores -> . BOOL
    (52) valores -> . varYVals
    (53) valores -> . varsOps
    (54) valores -> . vec
    (55) valores -> . ID . valoresCampos
    (56) valores -> . RES
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (127) expBool -> . or ? expBool : expBool
    (128) expBool -> . or ? expBool : valoresBool
    (129) expBool -> . or ? valoresBool : expBool
    (130) expBool -> . or ? valoresBool : valoresBool
    (131) expBool -> . valoresBool ? expBool : expBool
    (132) expBool -> . valoresBool ? valoresBool : expBool
    (133) expBool -> . valoresBool ? expBool : valoresBool
    (134) expBool -> . valoresBool ? valoresBool : valoresBool
    (135) expBool -> . or
    (67) reg -> . { campos }
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (42) vec -> . [ elem ]
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (136) or -> . or OR and
    (137) or -> . valoresBool OR and
    (138) or -> . or OR valoresBool
    (139) or -> . valoresBool OR valoresBool
    (140) or -> . and
    (120) valoresBool -> . BOOL
    (121) valoresBool -> . funcBool
    (122) valoresBool -> . varYVals
    (123) valoresBool -> . varsOps
    (124) valoresBool -> . eMat
    (125) valoresBool -> . INT
    (126) valoresBool -> . FLOAT
    (62) vecVal -> . ID m
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (141) and -> . and AND eq
    (142) and -> . valoresBool AND eq
    (143) and -> . and AND valoresBool
    (144) and -> . valoresBool AND valoresBool
    (145) and -> . eq
    (37) funcBool -> . COLINEALES ( vec , vec )
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (146) eq -> . eq EQEQ parenBool
    (147) eq -> . eq DISTINTO parenBool
    (148) eq -> . valoresBool EQEQ parenBool
    (149) eq -> . valoresBool DISTINTO parenBool
    (150) eq -> . eq EQEQ valoresBool
    (151) eq -> . eq DISTINTO valoresBool
    (152) eq -> . valoresBool EQEQ valoresBool
    (153) eq -> . valoresBool DISTINTO valoresBool
    (154) eq -> . mayor
    (119) paren -> . ( eMat )
    (160) mayor -> . tCompare > tCompare
    (161) mayor -> . menor
    (155) tCompare -> . eMat
    (156) tCompare -> . varsOps
    (157) tCompare -> . varYVals
    (158) tCompare -> . INT
    (159) tCompare -> . FLOAT
    (162) menor -> . tCompare < tCompare
    (163) menor -> . not
    (164) not -> . NOT not
    (165) not -> . NOT valoresBool
    (166) not -> . parenBool
    (167) parenBool -> . ( expBool )

    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    STRING          shift and go to state 97
    BOOL            shift and go to state 103
    ID              shift and go to state 99
    RES             shift and go to state 93
    {               shift and go to state 105
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    [               shift and go to state 98
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    COLINEALES      shift and go to state 16
    -               shift and go to state 76
    +               shift and go to state 75
    (               shift and go to state 74
    NOT             shift and go to state 89

    and                            shift and go to state 65
    funcBool                       shift and go to state 66
    funcInt                        shift and go to state 67
    menor                          shift and go to state 83
    mayor                          shift and go to state 68
    valoresMat                     shift and go to state 69
    eq                             shift and go to state 70
    valoresBool                    shift and go to state 71
    eMat                           shift and go to state 94
    vecVal                         shift and go to state 9
    vec                            shift and go to state 95
    paren                          shift and go to state 79
    reg                            shift and go to state 96
    iSing                          shift and go to state 77
    exp                            shift and go to state 87
    tCompare                       shift and go to state 78
    not                            shift and go to state 80
    valoresAsig                    shift and go to state 265
    valores                        shift and go to state 121
    parenBool                      shift and go to state 88
    p                              shift and go to state 84
    varsOps                        shift and go to state 104
    varYVals                       shift and go to state 106
    or                             shift and go to state 91
    expBool                        shift and go to state 107

state 188

    (63) m -> [ INT ] .
    (64) m -> [ INT ] . m
    (63) m -> . [ INT ]
    (64) m -> . [ INT ] m
    (65) m -> . [ varYVals ] m
    (66) m -> . [ varYVals ]

    MASMAS          reduce using rule 63 (m -> [ INT ] .)
    MENOSMENOS      reduce using rule 63 (m -> [ INT ] .)
    )               reduce using rule 63 (m -> [ INT ] .)
    +               reduce using rule 63 (m -> [ INT ] .)
    -               reduce using rule 63 (m -> [ INT ] .)
    *               reduce using rule 63 (m -> [ INT ] .)
    /               reduce using rule 63 (m -> [ INT ] .)
    %               reduce using rule 63 (m -> [ INT ] .)
    ^               reduce using rule 63 (m -> [ INT ] .)
    ?               reduce using rule 63 (m -> [ INT ] .)
    OR              reduce using rule 63 (m -> [ INT ] .)
    AND             reduce using rule 63 (m -> [ INT ] .)
    EQEQ            reduce using rule 63 (m -> [ INT ] .)
    DISTINTO        reduce using rule 63 (m -> [ INT ] .)
    >               reduce using rule 63 (m -> [ INT ] .)
    <               reduce using rule 63 (m -> [ INT ] .)
    ;               reduce using rule 63 (m -> [ INT ] .)
    ,               reduce using rule 63 (m -> [ INT ] .)
    ]               reduce using rule 63 (m -> [ INT ] .)
    MULEQ           reduce using rule 63 (m -> [ INT ] .)
    DIVEQ           reduce using rule 63 (m -> [ INT ] .)
    MASEQ           reduce using rule 63 (m -> [ INT ] .)
    MENOSEQ         reduce using rule 63 (m -> [ INT ] .)
    =               reduce using rule 63 (m -> [ INT ] .)
    }               reduce using rule 63 (m -> [ INT ] .)
    :               reduce using rule 63 (m -> [ INT ] .)
    [               shift and go to state 48

    m                              shift and go to state 266

state 189

    (65) m -> [ varYVals ] . m
    (66) m -> [ varYVals ] .
    (63) m -> . [ INT ]
    (64) m -> . [ INT ] m
    (65) m -> . [ varYVals ] m
    (66) m -> . [ varYVals ]

    MASMAS          reduce using rule 66 (m -> [ varYVals ] .)
    MENOSMENOS      reduce using rule 66 (m -> [ varYVals ] .)
    )               reduce using rule 66 (m -> [ varYVals ] .)
    +               reduce using rule 66 (m -> [ varYVals ] .)
    -               reduce using rule 66 (m -> [ varYVals ] .)
    *               reduce using rule 66 (m -> [ varYVals ] .)
    /               reduce using rule 66 (m -> [ varYVals ] .)
    %               reduce using rule 66 (m -> [ varYVals ] .)
    ^               reduce using rule 66 (m -> [ varYVals ] .)
    ?               reduce using rule 66 (m -> [ varYVals ] .)
    OR              reduce using rule 66 (m -> [ varYVals ] .)
    AND             reduce using rule 66 (m -> [ varYVals ] .)
    EQEQ            reduce using rule 66 (m -> [ varYVals ] .)
    DISTINTO        reduce using rule 66 (m -> [ varYVals ] .)
    >               reduce using rule 66 (m -> [ varYVals ] .)
    <               reduce using rule 66 (m -> [ varYVals ] .)
    ;               reduce using rule 66 (m -> [ varYVals ] .)
    ,               reduce using rule 66 (m -> [ varYVals ] .)
    ]               reduce using rule 66 (m -> [ varYVals ] .)
    MULEQ           reduce using rule 66 (m -> [ varYVals ] .)
    DIVEQ           reduce using rule 66 (m -> [ varYVals ] .)
    MASEQ           reduce using rule 66 (m -> [ varYVals ] .)
    MENOSEQ         reduce using rule 66 (m -> [ varYVals ] .)
    =               reduce using rule 66 (m -> [ varYVals ] .)
    }               reduce using rule 66 (m -> [ varYVals ] .)
    :               reduce using rule 66 (m -> [ varYVals ] .)
    [               shift and go to state 48

    m                              shift and go to state 267

state 190

    (24) if -> IF ( cosaBooleana ) . bloque else
    (27) bloque -> . linea
    (28) bloque -> . { g }
    (2) linea -> . com
    (3) linea -> . sentencia
    (4) com -> . COMMENT
    (7) sentencia -> . varsOps ;
    (8) sentencia -> . func ;
    (9) sentencia -> . varAsig ;
    (10) sentencia -> . RETURN ;
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (29) func -> . funcReturn
    (30) func -> . funcVoid
    (75) varAsig -> . varYVals MULEQ valoresAsig
    (76) varAsig -> . varYVals DIVEQ valoresAsig
    (77) varAsig -> . varYVals MASEQ valoresAsig
    (78) varAsig -> . varYVals MENOSEQ valoresAsig
    (79) varAsig -> . varYVals = valoresAsig
    (80) varAsig -> . ID . ID = valoresAsig
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (31) funcReturn -> . funcInt
    (32) funcReturn -> . funcString
    (33) funcReturn -> . funcBool
    (38) funcVoid -> . PRINT ( valores )
    (62) vecVal -> . ID m
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (36) funcString -> . CAPITALIZAR ( eMat )
    (37) funcBool -> . COLINEALES ( vec , vec )

    {               shift and go to state 35
    COMMENT         shift and go to state 11
    RETURN          shift and go to state 2
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    ID              shift and go to state 20
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    CAPITALIZAR     shift and go to state 28
    COLINEALES      shift and go to state 16

    funcBool                       shift and go to state 3
    funcInt                        shift and go to state 5
    bloque                         shift and go to state 268
    vecVal                         shift and go to state 9
    sentencia                      shift and go to state 12
    funcVoid                       shift and go to state 15
    func                           shift and go to state 19
    varAsig                        shift and go to state 22
    funcString                     shift and go to state 24
    com                            shift and go to state 32
    funcReturn                     shift and go to state 27
    varsOps                        shift and go to state 14
    varYVals                       shift and go to state 26
    linea                          shift and go to state 34

state 191

    (34) funcInt -> MULTIESCALAR ( vec , . eMat , param )
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (62) vecVal -> . ID m
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (119) paren -> . ( eMat )

    INT             shift and go to state 131
    FLOAT           shift and go to state 128
    STRING          shift and go to state 72
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    -               shift and go to state 76
    +               shift and go to state 75
    (               shift and go to state 127

    eMat                           shift and go to state 269
    funcInt                        shift and go to state 67
    iSing                          shift and go to state 77
    p                              shift and go to state 84
    valoresMat                     shift and go to state 69
    paren                          shift and go to state 79
    exp                            shift and go to state 87
    varYVals                       shift and go to state 130
    vecVal                         shift and go to state 9
    varsOps                        shift and go to state 129

state 192

    (36) funcString -> CAPITALIZAR ( eMat ) .

    ;               reduce using rule 36 (funcString -> CAPITALIZAR ( eMat ) .)
    )               reduce using rule 36 (funcString -> CAPITALIZAR ( eMat ) .)


state 193

    (119) paren -> ( eMat . )
    (87) eMat -> eMat . + p
    (88) eMat -> eMat . - p
    (91) eMat -> eMat . + valoresMat
    (92) eMat -> eMat . - valoresMat

    )               shift and go to state 232
    +               shift and go to state 149
    -               shift and go to state 150


state 194

    (35) funcInt -> LENGTH ( vec ) .

    ^               reduce using rule 35 (funcInt -> LENGTH ( vec ) .)
    *               reduce using rule 35 (funcInt -> LENGTH ( vec ) .)
    /               reduce using rule 35 (funcInt -> LENGTH ( vec ) .)
    %               reduce using rule 35 (funcInt -> LENGTH ( vec ) .)
    +               reduce using rule 35 (funcInt -> LENGTH ( vec ) .)
    -               reduce using rule 35 (funcInt -> LENGTH ( vec ) .)
    ?               reduce using rule 35 (funcInt -> LENGTH ( vec ) .)
    OR              reduce using rule 35 (funcInt -> LENGTH ( vec ) .)
    AND             reduce using rule 35 (funcInt -> LENGTH ( vec ) .)
    EQEQ            reduce using rule 35 (funcInt -> LENGTH ( vec ) .)
    DISTINTO        reduce using rule 35 (funcInt -> LENGTH ( vec ) .)
    >               reduce using rule 35 (funcInt -> LENGTH ( vec ) .)
    <               reduce using rule 35 (funcInt -> LENGTH ( vec ) .)
    )               reduce using rule 35 (funcInt -> LENGTH ( vec ) .)
    ;               reduce using rule 35 (funcInt -> LENGTH ( vec ) .)
    ,               reduce using rule 35 (funcInt -> LENGTH ( vec ) .)
    ]               reduce using rule 35 (funcInt -> LENGTH ( vec ) .)
    }               reduce using rule 35 (funcInt -> LENGTH ( vec ) .)
    :               reduce using rule 35 (funcInt -> LENGTH ( vec ) .)


state 195

    (14) loop -> DO bloque WHILE ( expBool . ) ;

    )               shift and go to state 270


state 196

    (141) and -> and AND eq .
    (146) eq -> eq . EQEQ parenBool
    (147) eq -> eq . DISTINTO parenBool
    (150) eq -> eq . EQEQ valoresBool
    (151) eq -> eq . DISTINTO valoresBool

    AND             reduce using rule 141 (and -> and AND eq .)
    ?               reduce using rule 141 (and -> and AND eq .)
    OR              reduce using rule 141 (and -> and AND eq .)
    ;               reduce using rule 141 (and -> and AND eq .)
    )               reduce using rule 141 (and -> and AND eq .)
    ,               reduce using rule 141 (and -> and AND eq .)
    ]               reduce using rule 141 (and -> and AND eq .)
    }               reduce using rule 141 (and -> and AND eq .)
    :               reduce using rule 141 (and -> and AND eq .)
    EQEQ            shift and go to state 142
    DISTINTO        shift and go to state 143


state 197

    (143) and -> and AND valoresBool .
    (148) eq -> valoresBool . EQEQ parenBool
    (149) eq -> valoresBool . DISTINTO parenBool
    (152) eq -> valoresBool . EQEQ valoresBool
    (153) eq -> valoresBool . DISTINTO valoresBool

    AND             reduce using rule 143 (and -> and AND valoresBool .)
    ?               reduce using rule 143 (and -> and AND valoresBool .)
    OR              reduce using rule 143 (and -> and AND valoresBool .)
    ;               reduce using rule 143 (and -> and AND valoresBool .)
    )               reduce using rule 143 (and -> and AND valoresBool .)
    ,               reduce using rule 143 (and -> and AND valoresBool .)
    ]               reduce using rule 143 (and -> and AND valoresBool .)
    }               reduce using rule 143 (and -> and AND valoresBool .)
    :               reduce using rule 143 (and -> and AND valoresBool .)
    EQEQ            shift and go to state 146
    DISTINTO        shift and go to state 145


state 198

    (125) valoresBool -> INT .
    (158) tCompare -> INT .
    (81) valoresMat -> INT .

    EQEQ            reduce using rule 125 (valoresBool -> INT .)
    DISTINTO        reduce using rule 125 (valoresBool -> INT .)
    AND             reduce using rule 125 (valoresBool -> INT .)
    ?               reduce using rule 125 (valoresBool -> INT .)
    OR              reduce using rule 125 (valoresBool -> INT .)
    )               reduce using rule 125 (valoresBool -> INT .)
    ;               reduce using rule 125 (valoresBool -> INT .)
    ,               reduce using rule 125 (valoresBool -> INT .)
    ]               reduce using rule 125 (valoresBool -> INT .)
    }               reduce using rule 125 (valoresBool -> INT .)
    :               reduce using rule 125 (valoresBool -> INT .)
    >               reduce using rule 158 (tCompare -> INT .)
    <               reduce using rule 158 (tCompare -> INT .)
    +               reduce using rule 81 (valoresMat -> INT .)
    -               reduce using rule 81 (valoresMat -> INT .)
    *               reduce using rule 81 (valoresMat -> INT .)
    /               reduce using rule 81 (valoresMat -> INT .)
    %               reduce using rule 81 (valoresMat -> INT .)
    ^               reduce using rule 81 (valoresMat -> INT .)


state 199

    (126) valoresBool -> FLOAT .
    (159) tCompare -> FLOAT .
    (82) valoresMat -> FLOAT .

    EQEQ            reduce using rule 126 (valoresBool -> FLOAT .)
    DISTINTO        reduce using rule 126 (valoresBool -> FLOAT .)
    AND             reduce using rule 126 (valoresBool -> FLOAT .)
    ?               reduce using rule 126 (valoresBool -> FLOAT .)
    OR              reduce using rule 126 (valoresBool -> FLOAT .)
    )               reduce using rule 126 (valoresBool -> FLOAT .)
    ;               reduce using rule 126 (valoresBool -> FLOAT .)
    ,               reduce using rule 126 (valoresBool -> FLOAT .)
    ]               reduce using rule 126 (valoresBool -> FLOAT .)
    }               reduce using rule 126 (valoresBool -> FLOAT .)
    :               reduce using rule 126 (valoresBool -> FLOAT .)
    >               reduce using rule 159 (tCompare -> FLOAT .)
    <               reduce using rule 159 (tCompare -> FLOAT .)
    +               reduce using rule 82 (valoresMat -> FLOAT .)
    -               reduce using rule 82 (valoresMat -> FLOAT .)
    *               reduce using rule 82 (valoresMat -> FLOAT .)
    /               reduce using rule 82 (valoresMat -> FLOAT .)
    %               reduce using rule 82 (valoresMat -> FLOAT .)
    ^               reduce using rule 82 (valoresMat -> FLOAT .)


state 200

    (123) valoresBool -> varsOps .
    (156) tCompare -> varsOps .
    (85) valoresMat -> varsOps .

    EQEQ            reduce using rule 123 (valoresBool -> varsOps .)
    DISTINTO        reduce using rule 123 (valoresBool -> varsOps .)
    AND             reduce using rule 123 (valoresBool -> varsOps .)
    ?               reduce using rule 123 (valoresBool -> varsOps .)
    OR              reduce using rule 123 (valoresBool -> varsOps .)
    )               reduce using rule 123 (valoresBool -> varsOps .)
    ;               reduce using rule 123 (valoresBool -> varsOps .)
    ,               reduce using rule 123 (valoresBool -> varsOps .)
    ]               reduce using rule 123 (valoresBool -> varsOps .)
    }               reduce using rule 123 (valoresBool -> varsOps .)
    :               reduce using rule 123 (valoresBool -> varsOps .)
    >               reduce using rule 156 (tCompare -> varsOps .)
    <               reduce using rule 156 (tCompare -> varsOps .)
    +               reduce using rule 85 (valoresMat -> varsOps .)
    -               reduce using rule 85 (valoresMat -> varsOps .)
    *               reduce using rule 85 (valoresMat -> varsOps .)
    /               reduce using rule 85 (valoresMat -> varsOps .)
    %               reduce using rule 85 (valoresMat -> varsOps .)
    ^               reduce using rule 85 (valoresMat -> varsOps .)


state 201

    (122) valoresBool -> varYVals .
    (72) varsOps -> varYVals . MASMAS
    (73) varsOps -> varYVals . MENOSMENOS
    (157) tCompare -> varYVals .
    (84) valoresMat -> varYVals .

    EQEQ            reduce using rule 122 (valoresBool -> varYVals .)
    DISTINTO        reduce using rule 122 (valoresBool -> varYVals .)
    AND             reduce using rule 122 (valoresBool -> varYVals .)
    ?               reduce using rule 122 (valoresBool -> varYVals .)
    OR              reduce using rule 122 (valoresBool -> varYVals .)
    )               reduce using rule 122 (valoresBool -> varYVals .)
    ;               reduce using rule 122 (valoresBool -> varYVals .)
    ,               reduce using rule 122 (valoresBool -> varYVals .)
    ]               reduce using rule 122 (valoresBool -> varYVals .)
    }               reduce using rule 122 (valoresBool -> varYVals .)
    :               reduce using rule 122 (valoresBool -> varYVals .)
    MASMAS          shift and go to state 56
    MENOSMENOS      shift and go to state 53
    >               reduce using rule 157 (tCompare -> varYVals .)
    <               reduce using rule 157 (tCompare -> varYVals .)
    +               reduce using rule 84 (valoresMat -> varYVals .)
    -               reduce using rule 84 (valoresMat -> varYVals .)
    *               reduce using rule 84 (valoresMat -> varYVals .)
    /               reduce using rule 84 (valoresMat -> varYVals .)
    %               reduce using rule 84 (valoresMat -> varYVals .)
    ^               reduce using rule 84 (valoresMat -> varYVals .)


state 202

    (107) p -> valoresMat % valoresMat .
    (110) exp -> valoresMat . ^ iSing
    (112) exp -> valoresMat . ^ valoresMat

    *               reduce using rule 107 (p -> valoresMat % valoresMat .)
    /               reduce using rule 107 (p -> valoresMat % valoresMat .)
    %               reduce using rule 107 (p -> valoresMat % valoresMat .)
    +               reduce using rule 107 (p -> valoresMat % valoresMat .)
    -               reduce using rule 107 (p -> valoresMat % valoresMat .)
    ?               reduce using rule 107 (p -> valoresMat % valoresMat .)
    OR              reduce using rule 107 (p -> valoresMat % valoresMat .)
    AND             reduce using rule 107 (p -> valoresMat % valoresMat .)
    EQEQ            reduce using rule 107 (p -> valoresMat % valoresMat .)
    DISTINTO        reduce using rule 107 (p -> valoresMat % valoresMat .)
    >               reduce using rule 107 (p -> valoresMat % valoresMat .)
    <               reduce using rule 107 (p -> valoresMat % valoresMat .)
    )               reduce using rule 107 (p -> valoresMat % valoresMat .)
    ;               reduce using rule 107 (p -> valoresMat % valoresMat .)
    ,               reduce using rule 107 (p -> valoresMat % valoresMat .)
    ]               reduce using rule 107 (p -> valoresMat % valoresMat .)
    }               reduce using rule 107 (p -> valoresMat % valoresMat .)
    :               reduce using rule 107 (p -> valoresMat % valoresMat .)
    ^               shift and go to state 141


state 203

    (101) p -> valoresMat % exp .
    (109) exp -> exp . ^ iSing
    (111) exp -> exp . ^ valoresMat

    *               reduce using rule 101 (p -> valoresMat % exp .)
    /               reduce using rule 101 (p -> valoresMat % exp .)
    %               reduce using rule 101 (p -> valoresMat % exp .)
    +               reduce using rule 101 (p -> valoresMat % exp .)
    -               reduce using rule 101 (p -> valoresMat % exp .)
    ?               reduce using rule 101 (p -> valoresMat % exp .)
    OR              reduce using rule 101 (p -> valoresMat % exp .)
    AND             reduce using rule 101 (p -> valoresMat % exp .)
    EQEQ            reduce using rule 101 (p -> valoresMat % exp .)
    DISTINTO        reduce using rule 101 (p -> valoresMat % exp .)
    >               reduce using rule 101 (p -> valoresMat % exp .)
    <               reduce using rule 101 (p -> valoresMat % exp .)
    )               reduce using rule 101 (p -> valoresMat % exp .)
    ;               reduce using rule 101 (p -> valoresMat % exp .)
    ,               reduce using rule 101 (p -> valoresMat % exp .)
    ]               reduce using rule 101 (p -> valoresMat % exp .)
    }               reduce using rule 101 (p -> valoresMat % exp .)
    :               reduce using rule 101 (p -> valoresMat % exp .)
    ^               shift and go to state 166


state 204

    (93) eMat -> valoresMat + valoresMat .
    (99) p -> valoresMat . * exp
    (100) p -> valoresMat . / exp
    (101) p -> valoresMat . % exp
    (105) p -> valoresMat . * valoresMat
    (106) p -> valoresMat . / valoresMat
    (107) p -> valoresMat . % valoresMat
    (110) exp -> valoresMat . ^ iSing
    (112) exp -> valoresMat . ^ valoresMat

    +               reduce using rule 93 (eMat -> valoresMat + valoresMat .)
    -               reduce using rule 93 (eMat -> valoresMat + valoresMat .)
    EQEQ            reduce using rule 93 (eMat -> valoresMat + valoresMat .)
    DISTINTO        reduce using rule 93 (eMat -> valoresMat + valoresMat .)
    AND             reduce using rule 93 (eMat -> valoresMat + valoresMat .)
    ?               reduce using rule 93 (eMat -> valoresMat + valoresMat .)
    OR              reduce using rule 93 (eMat -> valoresMat + valoresMat .)
    )               reduce using rule 93 (eMat -> valoresMat + valoresMat .)
    ;               reduce using rule 93 (eMat -> valoresMat + valoresMat .)
    ,               reduce using rule 93 (eMat -> valoresMat + valoresMat .)
    ]               reduce using rule 93 (eMat -> valoresMat + valoresMat .)
    }               reduce using rule 93 (eMat -> valoresMat + valoresMat .)
    :               reduce using rule 93 (eMat -> valoresMat + valoresMat .)
    >               reduce using rule 93 (eMat -> valoresMat + valoresMat .)
    <               reduce using rule 93 (eMat -> valoresMat + valoresMat .)
    *               shift and go to state 138
    /               shift and go to state 140
    %               shift and go to state 136
    ^               shift and go to state 141


state 205

    (89) eMat -> valoresMat + p .
    (96) p -> p . * exp
    (97) p -> p . / exp
    (98) p -> p . % exp
    (102) p -> p . * valoresMat
    (103) p -> p . / valoresMat
    (104) p -> p . % valoresMat

    +               reduce using rule 89 (eMat -> valoresMat + p .)
    -               reduce using rule 89 (eMat -> valoresMat + p .)
    EQEQ            reduce using rule 89 (eMat -> valoresMat + p .)
    DISTINTO        reduce using rule 89 (eMat -> valoresMat + p .)
    AND             reduce using rule 89 (eMat -> valoresMat + p .)
    ?               reduce using rule 89 (eMat -> valoresMat + p .)
    OR              reduce using rule 89 (eMat -> valoresMat + p .)
    )               reduce using rule 89 (eMat -> valoresMat + p .)
    ;               reduce using rule 89 (eMat -> valoresMat + p .)
    ,               reduce using rule 89 (eMat -> valoresMat + p .)
    ]               reduce using rule 89 (eMat -> valoresMat + p .)
    }               reduce using rule 89 (eMat -> valoresMat + p .)
    :               reduce using rule 89 (eMat -> valoresMat + p .)
    >               reduce using rule 89 (eMat -> valoresMat + p .)
    <               reduce using rule 89 (eMat -> valoresMat + p .)
    *               shift and go to state 164
    /               shift and go to state 165
    %               shift and go to state 163


state 206

    (105) p -> valoresMat * valoresMat .
    (110) exp -> valoresMat . ^ iSing
    (112) exp -> valoresMat . ^ valoresMat

    *               reduce using rule 105 (p -> valoresMat * valoresMat .)
    /               reduce using rule 105 (p -> valoresMat * valoresMat .)
    %               reduce using rule 105 (p -> valoresMat * valoresMat .)
    +               reduce using rule 105 (p -> valoresMat * valoresMat .)
    -               reduce using rule 105 (p -> valoresMat * valoresMat .)
    ?               reduce using rule 105 (p -> valoresMat * valoresMat .)
    OR              reduce using rule 105 (p -> valoresMat * valoresMat .)
    AND             reduce using rule 105 (p -> valoresMat * valoresMat .)
    EQEQ            reduce using rule 105 (p -> valoresMat * valoresMat .)
    DISTINTO        reduce using rule 105 (p -> valoresMat * valoresMat .)
    >               reduce using rule 105 (p -> valoresMat * valoresMat .)
    <               reduce using rule 105 (p -> valoresMat * valoresMat .)
    )               reduce using rule 105 (p -> valoresMat * valoresMat .)
    ;               reduce using rule 105 (p -> valoresMat * valoresMat .)
    ,               reduce using rule 105 (p -> valoresMat * valoresMat .)
    ]               reduce using rule 105 (p -> valoresMat * valoresMat .)
    }               reduce using rule 105 (p -> valoresMat * valoresMat .)
    :               reduce using rule 105 (p -> valoresMat * valoresMat .)
    ^               shift and go to state 141


state 207

    (99) p -> valoresMat * exp .
    (109) exp -> exp . ^ iSing
    (111) exp -> exp . ^ valoresMat

    *               reduce using rule 99 (p -> valoresMat * exp .)
    /               reduce using rule 99 (p -> valoresMat * exp .)
    %               reduce using rule 99 (p -> valoresMat * exp .)
    +               reduce using rule 99 (p -> valoresMat * exp .)
    -               reduce using rule 99 (p -> valoresMat * exp .)
    ?               reduce using rule 99 (p -> valoresMat * exp .)
    OR              reduce using rule 99 (p -> valoresMat * exp .)
    AND             reduce using rule 99 (p -> valoresMat * exp .)
    EQEQ            reduce using rule 99 (p -> valoresMat * exp .)
    DISTINTO        reduce using rule 99 (p -> valoresMat * exp .)
    >               reduce using rule 99 (p -> valoresMat * exp .)
    <               reduce using rule 99 (p -> valoresMat * exp .)
    )               reduce using rule 99 (p -> valoresMat * exp .)
    ;               reduce using rule 99 (p -> valoresMat * exp .)
    ,               reduce using rule 99 (p -> valoresMat * exp .)
    ]               reduce using rule 99 (p -> valoresMat * exp .)
    }               reduce using rule 99 (p -> valoresMat * exp .)
    :               reduce using rule 99 (p -> valoresMat * exp .)
    ^               shift and go to state 166


state 208

    (94) eMat -> valoresMat - valoresMat .
    (99) p -> valoresMat . * exp
    (100) p -> valoresMat . / exp
    (101) p -> valoresMat . % exp
    (105) p -> valoresMat . * valoresMat
    (106) p -> valoresMat . / valoresMat
    (107) p -> valoresMat . % valoresMat
    (110) exp -> valoresMat . ^ iSing
    (112) exp -> valoresMat . ^ valoresMat

    +               reduce using rule 94 (eMat -> valoresMat - valoresMat .)
    -               reduce using rule 94 (eMat -> valoresMat - valoresMat .)
    EQEQ            reduce using rule 94 (eMat -> valoresMat - valoresMat .)
    DISTINTO        reduce using rule 94 (eMat -> valoresMat - valoresMat .)
    AND             reduce using rule 94 (eMat -> valoresMat - valoresMat .)
    ?               reduce using rule 94 (eMat -> valoresMat - valoresMat .)
    OR              reduce using rule 94 (eMat -> valoresMat - valoresMat .)
    )               reduce using rule 94 (eMat -> valoresMat - valoresMat .)
    ;               reduce using rule 94 (eMat -> valoresMat - valoresMat .)
    ,               reduce using rule 94 (eMat -> valoresMat - valoresMat .)
    ]               reduce using rule 94 (eMat -> valoresMat - valoresMat .)
    }               reduce using rule 94 (eMat -> valoresMat - valoresMat .)
    :               reduce using rule 94 (eMat -> valoresMat - valoresMat .)
    >               reduce using rule 94 (eMat -> valoresMat - valoresMat .)
    <               reduce using rule 94 (eMat -> valoresMat - valoresMat .)
    *               shift and go to state 138
    /               shift and go to state 140
    %               shift and go to state 136
    ^               shift and go to state 141


state 209

    (90) eMat -> valoresMat - p .
    (96) p -> p . * exp
    (97) p -> p . / exp
    (98) p -> p . % exp
    (102) p -> p . * valoresMat
    (103) p -> p . / valoresMat
    (104) p -> p . % valoresMat

    +               reduce using rule 90 (eMat -> valoresMat - p .)
    -               reduce using rule 90 (eMat -> valoresMat - p .)
    EQEQ            reduce using rule 90 (eMat -> valoresMat - p .)
    DISTINTO        reduce using rule 90 (eMat -> valoresMat - p .)
    AND             reduce using rule 90 (eMat -> valoresMat - p .)
    ?               reduce using rule 90 (eMat -> valoresMat - p .)
    OR              reduce using rule 90 (eMat -> valoresMat - p .)
    )               reduce using rule 90 (eMat -> valoresMat - p .)
    ;               reduce using rule 90 (eMat -> valoresMat - p .)
    ,               reduce using rule 90 (eMat -> valoresMat - p .)
    ]               reduce using rule 90 (eMat -> valoresMat - p .)
    }               reduce using rule 90 (eMat -> valoresMat - p .)
    :               reduce using rule 90 (eMat -> valoresMat - p .)
    >               reduce using rule 90 (eMat -> valoresMat - p .)
    <               reduce using rule 90 (eMat -> valoresMat - p .)
    *               shift and go to state 164
    /               shift and go to state 165
    %               shift and go to state 163


state 210

    (106) p -> valoresMat / valoresMat .
    (110) exp -> valoresMat . ^ iSing
    (112) exp -> valoresMat . ^ valoresMat

    *               reduce using rule 106 (p -> valoresMat / valoresMat .)
    /               reduce using rule 106 (p -> valoresMat / valoresMat .)
    %               reduce using rule 106 (p -> valoresMat / valoresMat .)
    +               reduce using rule 106 (p -> valoresMat / valoresMat .)
    -               reduce using rule 106 (p -> valoresMat / valoresMat .)
    ?               reduce using rule 106 (p -> valoresMat / valoresMat .)
    OR              reduce using rule 106 (p -> valoresMat / valoresMat .)
    AND             reduce using rule 106 (p -> valoresMat / valoresMat .)
    EQEQ            reduce using rule 106 (p -> valoresMat / valoresMat .)
    DISTINTO        reduce using rule 106 (p -> valoresMat / valoresMat .)
    >               reduce using rule 106 (p -> valoresMat / valoresMat .)
    <               reduce using rule 106 (p -> valoresMat / valoresMat .)
    )               reduce using rule 106 (p -> valoresMat / valoresMat .)
    ;               reduce using rule 106 (p -> valoresMat / valoresMat .)
    ,               reduce using rule 106 (p -> valoresMat / valoresMat .)
    ]               reduce using rule 106 (p -> valoresMat / valoresMat .)
    }               reduce using rule 106 (p -> valoresMat / valoresMat .)
    :               reduce using rule 106 (p -> valoresMat / valoresMat .)
    ^               shift and go to state 141


state 211

    (100) p -> valoresMat / exp .
    (109) exp -> exp . ^ iSing
    (111) exp -> exp . ^ valoresMat

    *               reduce using rule 100 (p -> valoresMat / exp .)
    /               reduce using rule 100 (p -> valoresMat / exp .)
    %               reduce using rule 100 (p -> valoresMat / exp .)
    +               reduce using rule 100 (p -> valoresMat / exp .)
    -               reduce using rule 100 (p -> valoresMat / exp .)
    ?               reduce using rule 100 (p -> valoresMat / exp .)
    OR              reduce using rule 100 (p -> valoresMat / exp .)
    AND             reduce using rule 100 (p -> valoresMat / exp .)
    EQEQ            reduce using rule 100 (p -> valoresMat / exp .)
    DISTINTO        reduce using rule 100 (p -> valoresMat / exp .)
    >               reduce using rule 100 (p -> valoresMat / exp .)
    <               reduce using rule 100 (p -> valoresMat / exp .)
    )               reduce using rule 100 (p -> valoresMat / exp .)
    ;               reduce using rule 100 (p -> valoresMat / exp .)
    ,               reduce using rule 100 (p -> valoresMat / exp .)
    ]               reduce using rule 100 (p -> valoresMat / exp .)
    }               reduce using rule 100 (p -> valoresMat / exp .)
    :               reduce using rule 100 (p -> valoresMat / exp .)
    ^               shift and go to state 166


state 212

    (112) exp -> valoresMat ^ valoresMat .

    ^               reduce using rule 112 (exp -> valoresMat ^ valoresMat .)
    *               reduce using rule 112 (exp -> valoresMat ^ valoresMat .)
    /               reduce using rule 112 (exp -> valoresMat ^ valoresMat .)
    %               reduce using rule 112 (exp -> valoresMat ^ valoresMat .)
    +               reduce using rule 112 (exp -> valoresMat ^ valoresMat .)
    -               reduce using rule 112 (exp -> valoresMat ^ valoresMat .)
    EQEQ            reduce using rule 112 (exp -> valoresMat ^ valoresMat .)
    DISTINTO        reduce using rule 112 (exp -> valoresMat ^ valoresMat .)
    AND             reduce using rule 112 (exp -> valoresMat ^ valoresMat .)
    ?               reduce using rule 112 (exp -> valoresMat ^ valoresMat .)
    OR              reduce using rule 112 (exp -> valoresMat ^ valoresMat .)
    )               reduce using rule 112 (exp -> valoresMat ^ valoresMat .)
    ;               reduce using rule 112 (exp -> valoresMat ^ valoresMat .)
    ,               reduce using rule 112 (exp -> valoresMat ^ valoresMat .)
    ]               reduce using rule 112 (exp -> valoresMat ^ valoresMat .)
    }               reduce using rule 112 (exp -> valoresMat ^ valoresMat .)
    :               reduce using rule 112 (exp -> valoresMat ^ valoresMat .)
    >               reduce using rule 112 (exp -> valoresMat ^ valoresMat .)
    <               reduce using rule 112 (exp -> valoresMat ^ valoresMat .)


state 213

    (110) exp -> valoresMat ^ iSing .

    ^               reduce using rule 110 (exp -> valoresMat ^ iSing .)
    *               reduce using rule 110 (exp -> valoresMat ^ iSing .)
    /               reduce using rule 110 (exp -> valoresMat ^ iSing .)
    %               reduce using rule 110 (exp -> valoresMat ^ iSing .)
    +               reduce using rule 110 (exp -> valoresMat ^ iSing .)
    -               reduce using rule 110 (exp -> valoresMat ^ iSing .)
    EQEQ            reduce using rule 110 (exp -> valoresMat ^ iSing .)
    DISTINTO        reduce using rule 110 (exp -> valoresMat ^ iSing .)
    AND             reduce using rule 110 (exp -> valoresMat ^ iSing .)
    ?               reduce using rule 110 (exp -> valoresMat ^ iSing .)
    OR              reduce using rule 110 (exp -> valoresMat ^ iSing .)
    )               reduce using rule 110 (exp -> valoresMat ^ iSing .)
    ;               reduce using rule 110 (exp -> valoresMat ^ iSing .)
    ,               reduce using rule 110 (exp -> valoresMat ^ iSing .)
    ]               reduce using rule 110 (exp -> valoresMat ^ iSing .)
    }               reduce using rule 110 (exp -> valoresMat ^ iSing .)
    :               reduce using rule 110 (exp -> valoresMat ^ iSing .)
    >               reduce using rule 110 (exp -> valoresMat ^ iSing .)
    <               reduce using rule 110 (exp -> valoresMat ^ iSing .)


state 214

    (150) eq -> eq EQEQ valoresBool .

    EQEQ            reduce using rule 150 (eq -> eq EQEQ valoresBool .)
    DISTINTO        reduce using rule 150 (eq -> eq EQEQ valoresBool .)
    AND             reduce using rule 150 (eq -> eq EQEQ valoresBool .)
    ?               reduce using rule 150 (eq -> eq EQEQ valoresBool .)
    OR              reduce using rule 150 (eq -> eq EQEQ valoresBool .)
    :               reduce using rule 150 (eq -> eq EQEQ valoresBool .)
    )               reduce using rule 150 (eq -> eq EQEQ valoresBool .)
    ;               reduce using rule 150 (eq -> eq EQEQ valoresBool .)
    ,               reduce using rule 150 (eq -> eq EQEQ valoresBool .)
    ]               reduce using rule 150 (eq -> eq EQEQ valoresBool .)
    }               reduce using rule 150 (eq -> eq EQEQ valoresBool .)


state 215

    (146) eq -> eq EQEQ parenBool .

    EQEQ            reduce using rule 146 (eq -> eq EQEQ parenBool .)
    DISTINTO        reduce using rule 146 (eq -> eq EQEQ parenBool .)
    AND             reduce using rule 146 (eq -> eq EQEQ parenBool .)
    ?               reduce using rule 146 (eq -> eq EQEQ parenBool .)
    OR              reduce using rule 146 (eq -> eq EQEQ parenBool .)
    :               reduce using rule 146 (eq -> eq EQEQ parenBool .)
    )               reduce using rule 146 (eq -> eq EQEQ parenBool .)
    ;               reduce using rule 146 (eq -> eq EQEQ parenBool .)
    ,               reduce using rule 146 (eq -> eq EQEQ parenBool .)
    ]               reduce using rule 146 (eq -> eq EQEQ parenBool .)
    }               reduce using rule 146 (eq -> eq EQEQ parenBool .)


state 216

    (151) eq -> eq DISTINTO valoresBool .

    EQEQ            reduce using rule 151 (eq -> eq DISTINTO valoresBool .)
    DISTINTO        reduce using rule 151 (eq -> eq DISTINTO valoresBool .)
    AND             reduce using rule 151 (eq -> eq DISTINTO valoresBool .)
    ?               reduce using rule 151 (eq -> eq DISTINTO valoresBool .)
    OR              reduce using rule 151 (eq -> eq DISTINTO valoresBool .)
    :               reduce using rule 151 (eq -> eq DISTINTO valoresBool .)
    )               reduce using rule 151 (eq -> eq DISTINTO valoresBool .)
    ;               reduce using rule 151 (eq -> eq DISTINTO valoresBool .)
    ,               reduce using rule 151 (eq -> eq DISTINTO valoresBool .)
    ]               reduce using rule 151 (eq -> eq DISTINTO valoresBool .)
    }               reduce using rule 151 (eq -> eq DISTINTO valoresBool .)


state 217

    (147) eq -> eq DISTINTO parenBool .

    EQEQ            reduce using rule 147 (eq -> eq DISTINTO parenBool .)
    DISTINTO        reduce using rule 147 (eq -> eq DISTINTO parenBool .)
    AND             reduce using rule 147 (eq -> eq DISTINTO parenBool .)
    ?               reduce using rule 147 (eq -> eq DISTINTO parenBool .)
    OR              reduce using rule 147 (eq -> eq DISTINTO parenBool .)
    :               reduce using rule 147 (eq -> eq DISTINTO parenBool .)
    )               reduce using rule 147 (eq -> eq DISTINTO parenBool .)
    ;               reduce using rule 147 (eq -> eq DISTINTO parenBool .)
    ,               reduce using rule 147 (eq -> eq DISTINTO parenBool .)
    ]               reduce using rule 147 (eq -> eq DISTINTO parenBool .)
    }               reduce using rule 147 (eq -> eq DISTINTO parenBool .)


state 218

    (142) and -> valoresBool AND eq .
    (146) eq -> eq . EQEQ parenBool
    (147) eq -> eq . DISTINTO parenBool
    (150) eq -> eq . EQEQ valoresBool
    (151) eq -> eq . DISTINTO valoresBool

    AND             reduce using rule 142 (and -> valoresBool AND eq .)
    ?               reduce using rule 142 (and -> valoresBool AND eq .)
    OR              reduce using rule 142 (and -> valoresBool AND eq .)
    ;               reduce using rule 142 (and -> valoresBool AND eq .)
    )               reduce using rule 142 (and -> valoresBool AND eq .)
    ,               reduce using rule 142 (and -> valoresBool AND eq .)
    ]               reduce using rule 142 (and -> valoresBool AND eq .)
    }               reduce using rule 142 (and -> valoresBool AND eq .)
    :               reduce using rule 142 (and -> valoresBool AND eq .)
    EQEQ            shift and go to state 142
    DISTINTO        shift and go to state 143


state 219

    (144) and -> valoresBool AND valoresBool .
    (148) eq -> valoresBool . EQEQ parenBool
    (149) eq -> valoresBool . DISTINTO parenBool
    (152) eq -> valoresBool . EQEQ valoresBool
    (153) eq -> valoresBool . DISTINTO valoresBool

    AND             reduce using rule 144 (and -> valoresBool AND valoresBool .)
    ?               reduce using rule 144 (and -> valoresBool AND valoresBool .)
    OR              reduce using rule 144 (and -> valoresBool AND valoresBool .)
    ;               reduce using rule 144 (and -> valoresBool AND valoresBool .)
    )               reduce using rule 144 (and -> valoresBool AND valoresBool .)
    ,               reduce using rule 144 (and -> valoresBool AND valoresBool .)
    ]               reduce using rule 144 (and -> valoresBool AND valoresBool .)
    }               reduce using rule 144 (and -> valoresBool AND valoresBool .)
    :               reduce using rule 144 (and -> valoresBool AND valoresBool .)
    EQEQ            shift and go to state 146
    DISTINTO        shift and go to state 145


state 220

    (153) eq -> valoresBool DISTINTO valoresBool .

    EQEQ            reduce using rule 153 (eq -> valoresBool DISTINTO valoresBool .)
    DISTINTO        reduce using rule 153 (eq -> valoresBool DISTINTO valoresBool .)
    AND             reduce using rule 153 (eq -> valoresBool DISTINTO valoresBool .)
    ?               reduce using rule 153 (eq -> valoresBool DISTINTO valoresBool .)
    OR              reduce using rule 153 (eq -> valoresBool DISTINTO valoresBool .)
    :               reduce using rule 153 (eq -> valoresBool DISTINTO valoresBool .)
    )               reduce using rule 153 (eq -> valoresBool DISTINTO valoresBool .)
    ;               reduce using rule 153 (eq -> valoresBool DISTINTO valoresBool .)
    ,               reduce using rule 153 (eq -> valoresBool DISTINTO valoresBool .)
    ]               reduce using rule 153 (eq -> valoresBool DISTINTO valoresBool .)
    }               reduce using rule 153 (eq -> valoresBool DISTINTO valoresBool .)


state 221

    (149) eq -> valoresBool DISTINTO parenBool .

    EQEQ            reduce using rule 149 (eq -> valoresBool DISTINTO parenBool .)
    DISTINTO        reduce using rule 149 (eq -> valoresBool DISTINTO parenBool .)
    AND             reduce using rule 149 (eq -> valoresBool DISTINTO parenBool .)
    ?               reduce using rule 149 (eq -> valoresBool DISTINTO parenBool .)
    OR              reduce using rule 149 (eq -> valoresBool DISTINTO parenBool .)
    :               reduce using rule 149 (eq -> valoresBool DISTINTO parenBool .)
    )               reduce using rule 149 (eq -> valoresBool DISTINTO parenBool .)
    ;               reduce using rule 149 (eq -> valoresBool DISTINTO parenBool .)
    ,               reduce using rule 149 (eq -> valoresBool DISTINTO parenBool .)
    ]               reduce using rule 149 (eq -> valoresBool DISTINTO parenBool .)
    }               reduce using rule 149 (eq -> valoresBool DISTINTO parenBool .)


state 222

    (152) eq -> valoresBool EQEQ valoresBool .

    EQEQ            reduce using rule 152 (eq -> valoresBool EQEQ valoresBool .)
    DISTINTO        reduce using rule 152 (eq -> valoresBool EQEQ valoresBool .)
    AND             reduce using rule 152 (eq -> valoresBool EQEQ valoresBool .)
    ?               reduce using rule 152 (eq -> valoresBool EQEQ valoresBool .)
    OR              reduce using rule 152 (eq -> valoresBool EQEQ valoresBool .)
    :               reduce using rule 152 (eq -> valoresBool EQEQ valoresBool .)
    )               reduce using rule 152 (eq -> valoresBool EQEQ valoresBool .)
    ;               reduce using rule 152 (eq -> valoresBool EQEQ valoresBool .)
    ,               reduce using rule 152 (eq -> valoresBool EQEQ valoresBool .)
    ]               reduce using rule 152 (eq -> valoresBool EQEQ valoresBool .)
    }               reduce using rule 152 (eq -> valoresBool EQEQ valoresBool .)


state 223

    (148) eq -> valoresBool EQEQ parenBool .

    EQEQ            reduce using rule 148 (eq -> valoresBool EQEQ parenBool .)
    DISTINTO        reduce using rule 148 (eq -> valoresBool EQEQ parenBool .)
    AND             reduce using rule 148 (eq -> valoresBool EQEQ parenBool .)
    ?               reduce using rule 148 (eq -> valoresBool EQEQ parenBool .)
    OR              reduce using rule 148 (eq -> valoresBool EQEQ parenBool .)
    :               reduce using rule 148 (eq -> valoresBool EQEQ parenBool .)
    )               reduce using rule 148 (eq -> valoresBool EQEQ parenBool .)
    ;               reduce using rule 148 (eq -> valoresBool EQEQ parenBool .)
    ,               reduce using rule 148 (eq -> valoresBool EQEQ parenBool .)
    ]               reduce using rule 148 (eq -> valoresBool EQEQ parenBool .)
    }               reduce using rule 148 (eq -> valoresBool EQEQ parenBool .)


state 224

    (137) or -> valoresBool OR and .
    (141) and -> and . AND eq
    (143) and -> and . AND valoresBool

    ?               reduce using rule 137 (or -> valoresBool OR and .)
    OR              reduce using rule 137 (or -> valoresBool OR and .)
    ;               reduce using rule 137 (or -> valoresBool OR and .)
    )               reduce using rule 137 (or -> valoresBool OR and .)
    ,               reduce using rule 137 (or -> valoresBool OR and .)
    ]               reduce using rule 137 (or -> valoresBool OR and .)
    }               reduce using rule 137 (or -> valoresBool OR and .)
    :               reduce using rule 137 (or -> valoresBool OR and .)
    AND             shift and go to state 135


state 225

    (139) or -> valoresBool OR valoresBool .
    (142) and -> valoresBool . AND eq
    (144) and -> valoresBool . AND valoresBool
    (148) eq -> valoresBool . EQEQ parenBool
    (149) eq -> valoresBool . DISTINTO parenBool
    (152) eq -> valoresBool . EQEQ valoresBool
    (153) eq -> valoresBool . DISTINTO valoresBool

    ?               reduce using rule 139 (or -> valoresBool OR valoresBool .)
    OR              reduce using rule 139 (or -> valoresBool OR valoresBool .)
    ;               reduce using rule 139 (or -> valoresBool OR valoresBool .)
    )               reduce using rule 139 (or -> valoresBool OR valoresBool .)
    ,               reduce using rule 139 (or -> valoresBool OR valoresBool .)
    ]               reduce using rule 139 (or -> valoresBool OR valoresBool .)
    }               reduce using rule 139 (or -> valoresBool OR valoresBool .)
    :               reduce using rule 139 (or -> valoresBool OR valoresBool .)
    AND             shift and go to state 144
    EQEQ            shift and go to state 146
    DISTINTO        shift and go to state 145


state 226

    (132) expBool -> valoresBool ? valoresBool . : expBool
    (134) expBool -> valoresBool ? valoresBool . : valoresBool
    (131) expBool -> valoresBool . ? expBool : expBool
    (132) expBool -> valoresBool . ? valoresBool : expBool
    (133) expBool -> valoresBool . ? expBool : valoresBool
    (134) expBool -> valoresBool . ? valoresBool : valoresBool
    (137) or -> valoresBool . OR and
    (139) or -> valoresBool . OR valoresBool
    (142) and -> valoresBool . AND eq
    (144) and -> valoresBool . AND valoresBool
    (148) eq -> valoresBool . EQEQ parenBool
    (149) eq -> valoresBool . DISTINTO parenBool
    (152) eq -> valoresBool . EQEQ valoresBool
    (153) eq -> valoresBool . DISTINTO valoresBool

    :               shift and go to state 271
    ?               shift and go to state 148
    OR              shift and go to state 147
    AND             shift and go to state 144
    EQEQ            shift and go to state 146
    DISTINTO        shift and go to state 145


state 227

    (131) expBool -> valoresBool ? expBool . : expBool
    (133) expBool -> valoresBool ? expBool . : valoresBool

    :               shift and go to state 272


state 228

    (91) eMat -> eMat + valoresMat .
    (99) p -> valoresMat . * exp
    (100) p -> valoresMat . / exp
    (101) p -> valoresMat . % exp
    (105) p -> valoresMat . * valoresMat
    (106) p -> valoresMat . / valoresMat
    (107) p -> valoresMat . % valoresMat
    (110) exp -> valoresMat . ^ iSing
    (112) exp -> valoresMat . ^ valoresMat

    +               reduce using rule 91 (eMat -> eMat + valoresMat .)
    -               reduce using rule 91 (eMat -> eMat + valoresMat .)
    EQEQ            reduce using rule 91 (eMat -> eMat + valoresMat .)
    DISTINTO        reduce using rule 91 (eMat -> eMat + valoresMat .)
    AND             reduce using rule 91 (eMat -> eMat + valoresMat .)
    ?               reduce using rule 91 (eMat -> eMat + valoresMat .)
    OR              reduce using rule 91 (eMat -> eMat + valoresMat .)
    )               reduce using rule 91 (eMat -> eMat + valoresMat .)
    ;               reduce using rule 91 (eMat -> eMat + valoresMat .)
    ,               reduce using rule 91 (eMat -> eMat + valoresMat .)
    ]               reduce using rule 91 (eMat -> eMat + valoresMat .)
    }               reduce using rule 91 (eMat -> eMat + valoresMat .)
    :               reduce using rule 91 (eMat -> eMat + valoresMat .)
    >               reduce using rule 91 (eMat -> eMat + valoresMat .)
    <               reduce using rule 91 (eMat -> eMat + valoresMat .)
    *               shift and go to state 138
    /               shift and go to state 140
    %               shift and go to state 136
    ^               shift and go to state 141


state 229

    (87) eMat -> eMat + p .
    (96) p -> p . * exp
    (97) p -> p . / exp
    (98) p -> p . % exp
    (102) p -> p . * valoresMat
    (103) p -> p . / valoresMat
    (104) p -> p . % valoresMat

    +               reduce using rule 87 (eMat -> eMat + p .)
    -               reduce using rule 87 (eMat -> eMat + p .)
    EQEQ            reduce using rule 87 (eMat -> eMat + p .)
    DISTINTO        reduce using rule 87 (eMat -> eMat + p .)
    AND             reduce using rule 87 (eMat -> eMat + p .)
    ?               reduce using rule 87 (eMat -> eMat + p .)
    OR              reduce using rule 87 (eMat -> eMat + p .)
    )               reduce using rule 87 (eMat -> eMat + p .)
    ;               reduce using rule 87 (eMat -> eMat + p .)
    ,               reduce using rule 87 (eMat -> eMat + p .)
    ]               reduce using rule 87 (eMat -> eMat + p .)
    }               reduce using rule 87 (eMat -> eMat + p .)
    :               reduce using rule 87 (eMat -> eMat + p .)
    >               reduce using rule 87 (eMat -> eMat + p .)
    <               reduce using rule 87 (eMat -> eMat + p .)
    *               shift and go to state 164
    /               shift and go to state 165
    %               shift and go to state 163


state 230

    (92) eMat -> eMat - valoresMat .
    (99) p -> valoresMat . * exp
    (100) p -> valoresMat . / exp
    (101) p -> valoresMat . % exp
    (105) p -> valoresMat . * valoresMat
    (106) p -> valoresMat . / valoresMat
    (107) p -> valoresMat . % valoresMat
    (110) exp -> valoresMat . ^ iSing
    (112) exp -> valoresMat . ^ valoresMat

    +               reduce using rule 92 (eMat -> eMat - valoresMat .)
    -               reduce using rule 92 (eMat -> eMat - valoresMat .)
    EQEQ            reduce using rule 92 (eMat -> eMat - valoresMat .)
    DISTINTO        reduce using rule 92 (eMat -> eMat - valoresMat .)
    AND             reduce using rule 92 (eMat -> eMat - valoresMat .)
    ?               reduce using rule 92 (eMat -> eMat - valoresMat .)
    OR              reduce using rule 92 (eMat -> eMat - valoresMat .)
    )               reduce using rule 92 (eMat -> eMat - valoresMat .)
    ;               reduce using rule 92 (eMat -> eMat - valoresMat .)
    ,               reduce using rule 92 (eMat -> eMat - valoresMat .)
    ]               reduce using rule 92 (eMat -> eMat - valoresMat .)
    }               reduce using rule 92 (eMat -> eMat - valoresMat .)
    :               reduce using rule 92 (eMat -> eMat - valoresMat .)
    >               reduce using rule 92 (eMat -> eMat - valoresMat .)
    <               reduce using rule 92 (eMat -> eMat - valoresMat .)
    *               shift and go to state 138
    /               shift and go to state 140
    %               shift and go to state 136
    ^               shift and go to state 141


state 231

    (88) eMat -> eMat - p .
    (96) p -> p . * exp
    (97) p -> p . / exp
    (98) p -> p . % exp
    (102) p -> p . * valoresMat
    (103) p -> p . / valoresMat
    (104) p -> p . % valoresMat

    +               reduce using rule 88 (eMat -> eMat - p .)
    -               reduce using rule 88 (eMat -> eMat - p .)
    EQEQ            reduce using rule 88 (eMat -> eMat - p .)
    DISTINTO        reduce using rule 88 (eMat -> eMat - p .)
    AND             reduce using rule 88 (eMat -> eMat - p .)
    ?               reduce using rule 88 (eMat -> eMat - p .)
    OR              reduce using rule 88 (eMat -> eMat - p .)
    )               reduce using rule 88 (eMat -> eMat - p .)
    ;               reduce using rule 88 (eMat -> eMat - p .)
    ,               reduce using rule 88 (eMat -> eMat - p .)
    ]               reduce using rule 88 (eMat -> eMat - p .)
    }               reduce using rule 88 (eMat -> eMat - p .)
    :               reduce using rule 88 (eMat -> eMat - p .)
    >               reduce using rule 88 (eMat -> eMat - p .)
    <               reduce using rule 88 (eMat -> eMat - p .)
    *               shift and go to state 164
    /               shift and go to state 165
    %               shift and go to state 163


state 232

    (119) paren -> ( eMat ) .

    ^               reduce using rule 119 (paren -> ( eMat ) .)
    *               reduce using rule 119 (paren -> ( eMat ) .)
    /               reduce using rule 119 (paren -> ( eMat ) .)
    %               reduce using rule 119 (paren -> ( eMat ) .)
    +               reduce using rule 119 (paren -> ( eMat ) .)
    -               reduce using rule 119 (paren -> ( eMat ) .)
    }               reduce using rule 119 (paren -> ( eMat ) .)
    ?               reduce using rule 119 (paren -> ( eMat ) .)
    OR              reduce using rule 119 (paren -> ( eMat ) .)
    AND             reduce using rule 119 (paren -> ( eMat ) .)
    EQEQ            reduce using rule 119 (paren -> ( eMat ) .)
    DISTINTO        reduce using rule 119 (paren -> ( eMat ) .)
    >               reduce using rule 119 (paren -> ( eMat ) .)
    <               reduce using rule 119 (paren -> ( eMat ) .)
    )               reduce using rule 119 (paren -> ( eMat ) .)
    ;               reduce using rule 119 (paren -> ( eMat ) .)
    ,               reduce using rule 119 (paren -> ( eMat ) .)
    ]               reduce using rule 119 (paren -> ( eMat ) .)
    :               reduce using rule 119 (paren -> ( eMat ) .)


state 233

    (167) parenBool -> ( expBool ) .

    EQEQ            reduce using rule 167 (parenBool -> ( expBool ) .)
    DISTINTO        reduce using rule 167 (parenBool -> ( expBool ) .)
    AND             reduce using rule 167 (parenBool -> ( expBool ) .)
    ?               reduce using rule 167 (parenBool -> ( expBool ) .)
    OR              reduce using rule 167 (parenBool -> ( expBool ) .)
    )               reduce using rule 167 (parenBool -> ( expBool ) .)
    ;               reduce using rule 167 (parenBool -> ( expBool ) .)
    ,               reduce using rule 167 (parenBool -> ( expBool ) .)
    ]               reduce using rule 167 (parenBool -> ( expBool ) .)
    }               reduce using rule 167 (parenBool -> ( expBool ) .)
    :               reduce using rule 167 (parenBool -> ( expBool ) .)


state 234

    (155) tCompare -> eMat .
    (87) eMat -> eMat . + p
    (88) eMat -> eMat . - p
    (91) eMat -> eMat . + valoresMat
    (92) eMat -> eMat . - valoresMat

    EQEQ            reduce using rule 155 (tCompare -> eMat .)
    DISTINTO        reduce using rule 155 (tCompare -> eMat .)
    AND             reduce using rule 155 (tCompare -> eMat .)
    ?               reduce using rule 155 (tCompare -> eMat .)
    OR              reduce using rule 155 (tCompare -> eMat .)
    )               reduce using rule 155 (tCompare -> eMat .)
    ;               reduce using rule 155 (tCompare -> eMat .)
    ,               reduce using rule 155 (tCompare -> eMat .)
    ]               reduce using rule 155 (tCompare -> eMat .)
    }               reduce using rule 155 (tCompare -> eMat .)
    :               reduce using rule 155 (tCompare -> eMat .)
    +               shift and go to state 149
    -               shift and go to state 150


state 235

    (162) menor -> tCompare < tCompare .

    EQEQ            reduce using rule 162 (menor -> tCompare < tCompare .)
    DISTINTO        reduce using rule 162 (menor -> tCompare < tCompare .)
    AND             reduce using rule 162 (menor -> tCompare < tCompare .)
    ?               reduce using rule 162 (menor -> tCompare < tCompare .)
    OR              reduce using rule 162 (menor -> tCompare < tCompare .)
    )               reduce using rule 162 (menor -> tCompare < tCompare .)
    ;               reduce using rule 162 (menor -> tCompare < tCompare .)
    ,               reduce using rule 162 (menor -> tCompare < tCompare .)
    ]               reduce using rule 162 (menor -> tCompare < tCompare .)
    }               reduce using rule 162 (menor -> tCompare < tCompare .)
    :               reduce using rule 162 (menor -> tCompare < tCompare .)


state 236

    (158) tCompare -> INT .
    (81) valoresMat -> INT .

    EQEQ            reduce using rule 158 (tCompare -> INT .)
    DISTINTO        reduce using rule 158 (tCompare -> INT .)
    AND             reduce using rule 158 (tCompare -> INT .)
    ?               reduce using rule 158 (tCompare -> INT .)
    OR              reduce using rule 158 (tCompare -> INT .)
    )               reduce using rule 158 (tCompare -> INT .)
    ;               reduce using rule 158 (tCompare -> INT .)
    ,               reduce using rule 158 (tCompare -> INT .)
    ]               reduce using rule 158 (tCompare -> INT .)
    }               reduce using rule 158 (tCompare -> INT .)
    :               reduce using rule 158 (tCompare -> INT .)
    +               reduce using rule 81 (valoresMat -> INT .)
    -               reduce using rule 81 (valoresMat -> INT .)
    *               reduce using rule 81 (valoresMat -> INT .)
    /               reduce using rule 81 (valoresMat -> INT .)
    %               reduce using rule 81 (valoresMat -> INT .)
    ^               reduce using rule 81 (valoresMat -> INT .)


state 237

    (159) tCompare -> FLOAT .
    (82) valoresMat -> FLOAT .

    EQEQ            reduce using rule 159 (tCompare -> FLOAT .)
    DISTINTO        reduce using rule 159 (tCompare -> FLOAT .)
    AND             reduce using rule 159 (tCompare -> FLOAT .)
    ?               reduce using rule 159 (tCompare -> FLOAT .)
    OR              reduce using rule 159 (tCompare -> FLOAT .)
    )               reduce using rule 159 (tCompare -> FLOAT .)
    ;               reduce using rule 159 (tCompare -> FLOAT .)
    ,               reduce using rule 159 (tCompare -> FLOAT .)
    ]               reduce using rule 159 (tCompare -> FLOAT .)
    }               reduce using rule 159 (tCompare -> FLOAT .)
    :               reduce using rule 159 (tCompare -> FLOAT .)
    +               reduce using rule 82 (valoresMat -> FLOAT .)
    -               reduce using rule 82 (valoresMat -> FLOAT .)
    *               reduce using rule 82 (valoresMat -> FLOAT .)
    /               reduce using rule 82 (valoresMat -> FLOAT .)
    %               reduce using rule 82 (valoresMat -> FLOAT .)
    ^               reduce using rule 82 (valoresMat -> FLOAT .)


state 238

    (156) tCompare -> varsOps .
    (85) valoresMat -> varsOps .

    EQEQ            reduce using rule 156 (tCompare -> varsOps .)
    DISTINTO        reduce using rule 156 (tCompare -> varsOps .)
    AND             reduce using rule 156 (tCompare -> varsOps .)
    ?               reduce using rule 156 (tCompare -> varsOps .)
    OR              reduce using rule 156 (tCompare -> varsOps .)
    )               reduce using rule 156 (tCompare -> varsOps .)
    ;               reduce using rule 156 (tCompare -> varsOps .)
    ,               reduce using rule 156 (tCompare -> varsOps .)
    ]               reduce using rule 156 (tCompare -> varsOps .)
    }               reduce using rule 156 (tCompare -> varsOps .)
    :               reduce using rule 156 (tCompare -> varsOps .)
    +               reduce using rule 85 (valoresMat -> varsOps .)
    -               reduce using rule 85 (valoresMat -> varsOps .)
    *               reduce using rule 85 (valoresMat -> varsOps .)
    /               reduce using rule 85 (valoresMat -> varsOps .)
    %               reduce using rule 85 (valoresMat -> varsOps .)
    ^               reduce using rule 85 (valoresMat -> varsOps .)


state 239

    (157) tCompare -> varYVals .
    (72) varsOps -> varYVals . MASMAS
    (73) varsOps -> varYVals . MENOSMENOS
    (84) valoresMat -> varYVals .

    EQEQ            reduce using rule 157 (tCompare -> varYVals .)
    DISTINTO        reduce using rule 157 (tCompare -> varYVals .)
    AND             reduce using rule 157 (tCompare -> varYVals .)
    ?               reduce using rule 157 (tCompare -> varYVals .)
    OR              reduce using rule 157 (tCompare -> varYVals .)
    )               reduce using rule 157 (tCompare -> varYVals .)
    ;               reduce using rule 157 (tCompare -> varYVals .)
    ,               reduce using rule 157 (tCompare -> varYVals .)
    ]               reduce using rule 157 (tCompare -> varYVals .)
    }               reduce using rule 157 (tCompare -> varYVals .)
    :               reduce using rule 157 (tCompare -> varYVals .)
    MASMAS          shift and go to state 56
    MENOSMENOS      shift and go to state 53
    +               reduce using rule 84 (valoresMat -> varYVals .)
    -               reduce using rule 84 (valoresMat -> varYVals .)
    *               reduce using rule 84 (valoresMat -> varYVals .)
    /               reduce using rule 84 (valoresMat -> varYVals .)
    %               reduce using rule 84 (valoresMat -> varYVals .)
    ^               reduce using rule 84 (valoresMat -> varYVals .)


state 240

    (160) mayor -> tCompare > tCompare .

    EQEQ            reduce using rule 160 (mayor -> tCompare > tCompare .)
    DISTINTO        reduce using rule 160 (mayor -> tCompare > tCompare .)
    AND             reduce using rule 160 (mayor -> tCompare > tCompare .)
    ?               reduce using rule 160 (mayor -> tCompare > tCompare .)
    OR              reduce using rule 160 (mayor -> tCompare > tCompare .)
    ,               reduce using rule 160 (mayor -> tCompare > tCompare .)
    ]               reduce using rule 160 (mayor -> tCompare > tCompare .)
    )               reduce using rule 160 (mayor -> tCompare > tCompare .)
    ;               reduce using rule 160 (mayor -> tCompare > tCompare .)
    }               reduce using rule 160 (mayor -> tCompare > tCompare .)
    :               reduce using rule 160 (mayor -> tCompare > tCompare .)


state 241

    (104) p -> p % valoresMat .
    (110) exp -> valoresMat . ^ iSing
    (112) exp -> valoresMat . ^ valoresMat

    *               reduce using rule 104 (p -> p % valoresMat .)
    /               reduce using rule 104 (p -> p % valoresMat .)
    %               reduce using rule 104 (p -> p % valoresMat .)
    +               reduce using rule 104 (p -> p % valoresMat .)
    -               reduce using rule 104 (p -> p % valoresMat .)
    ?               reduce using rule 104 (p -> p % valoresMat .)
    OR              reduce using rule 104 (p -> p % valoresMat .)
    AND             reduce using rule 104 (p -> p % valoresMat .)
    EQEQ            reduce using rule 104 (p -> p % valoresMat .)
    DISTINTO        reduce using rule 104 (p -> p % valoresMat .)
    >               reduce using rule 104 (p -> p % valoresMat .)
    <               reduce using rule 104 (p -> p % valoresMat .)
    )               reduce using rule 104 (p -> p % valoresMat .)
    ;               reduce using rule 104 (p -> p % valoresMat .)
    ,               reduce using rule 104 (p -> p % valoresMat .)
    ]               reduce using rule 104 (p -> p % valoresMat .)
    }               reduce using rule 104 (p -> p % valoresMat .)
    :               reduce using rule 104 (p -> p % valoresMat .)
    ^               shift and go to state 141


state 242

    (98) p -> p % exp .
    (109) exp -> exp . ^ iSing
    (111) exp -> exp . ^ valoresMat

    *               reduce using rule 98 (p -> p % exp .)
    /               reduce using rule 98 (p -> p % exp .)
    %               reduce using rule 98 (p -> p % exp .)
    +               reduce using rule 98 (p -> p % exp .)
    -               reduce using rule 98 (p -> p % exp .)
    ?               reduce using rule 98 (p -> p % exp .)
    OR              reduce using rule 98 (p -> p % exp .)
    AND             reduce using rule 98 (p -> p % exp .)
    EQEQ            reduce using rule 98 (p -> p % exp .)
    DISTINTO        reduce using rule 98 (p -> p % exp .)
    >               reduce using rule 98 (p -> p % exp .)
    <               reduce using rule 98 (p -> p % exp .)
    )               reduce using rule 98 (p -> p % exp .)
    ;               reduce using rule 98 (p -> p % exp .)
    ,               reduce using rule 98 (p -> p % exp .)
    ]               reduce using rule 98 (p -> p % exp .)
    }               reduce using rule 98 (p -> p % exp .)
    :               reduce using rule 98 (p -> p % exp .)
    ^               shift and go to state 166


state 243

    (102) p -> p * valoresMat .
    (110) exp -> valoresMat . ^ iSing
    (112) exp -> valoresMat . ^ valoresMat

    *               reduce using rule 102 (p -> p * valoresMat .)
    /               reduce using rule 102 (p -> p * valoresMat .)
    %               reduce using rule 102 (p -> p * valoresMat .)
    +               reduce using rule 102 (p -> p * valoresMat .)
    -               reduce using rule 102 (p -> p * valoresMat .)
    ?               reduce using rule 102 (p -> p * valoresMat .)
    OR              reduce using rule 102 (p -> p * valoresMat .)
    AND             reduce using rule 102 (p -> p * valoresMat .)
    EQEQ            reduce using rule 102 (p -> p * valoresMat .)
    DISTINTO        reduce using rule 102 (p -> p * valoresMat .)
    >               reduce using rule 102 (p -> p * valoresMat .)
    <               reduce using rule 102 (p -> p * valoresMat .)
    )               reduce using rule 102 (p -> p * valoresMat .)
    ;               reduce using rule 102 (p -> p * valoresMat .)
    ,               reduce using rule 102 (p -> p * valoresMat .)
    ]               reduce using rule 102 (p -> p * valoresMat .)
    }               reduce using rule 102 (p -> p * valoresMat .)
    :               reduce using rule 102 (p -> p * valoresMat .)
    ^               shift and go to state 141


state 244

    (96) p -> p * exp .
    (109) exp -> exp . ^ iSing
    (111) exp -> exp . ^ valoresMat

    *               reduce using rule 96 (p -> p * exp .)
    /               reduce using rule 96 (p -> p * exp .)
    %               reduce using rule 96 (p -> p * exp .)
    +               reduce using rule 96 (p -> p * exp .)
    -               reduce using rule 96 (p -> p * exp .)
    ?               reduce using rule 96 (p -> p * exp .)
    OR              reduce using rule 96 (p -> p * exp .)
    AND             reduce using rule 96 (p -> p * exp .)
    EQEQ            reduce using rule 96 (p -> p * exp .)
    DISTINTO        reduce using rule 96 (p -> p * exp .)
    >               reduce using rule 96 (p -> p * exp .)
    <               reduce using rule 96 (p -> p * exp .)
    )               reduce using rule 96 (p -> p * exp .)
    ;               reduce using rule 96 (p -> p * exp .)
    ,               reduce using rule 96 (p -> p * exp .)
    ]               reduce using rule 96 (p -> p * exp .)
    }               reduce using rule 96 (p -> p * exp .)
    :               reduce using rule 96 (p -> p * exp .)
    ^               shift and go to state 166


state 245

    (103) p -> p / valoresMat .
    (110) exp -> valoresMat . ^ iSing
    (112) exp -> valoresMat . ^ valoresMat

    *               reduce using rule 103 (p -> p / valoresMat .)
    /               reduce using rule 103 (p -> p / valoresMat .)
    %               reduce using rule 103 (p -> p / valoresMat .)
    +               reduce using rule 103 (p -> p / valoresMat .)
    -               reduce using rule 103 (p -> p / valoresMat .)
    ?               reduce using rule 103 (p -> p / valoresMat .)
    OR              reduce using rule 103 (p -> p / valoresMat .)
    AND             reduce using rule 103 (p -> p / valoresMat .)
    EQEQ            reduce using rule 103 (p -> p / valoresMat .)
    DISTINTO        reduce using rule 103 (p -> p / valoresMat .)
    >               reduce using rule 103 (p -> p / valoresMat .)
    <               reduce using rule 103 (p -> p / valoresMat .)
    )               reduce using rule 103 (p -> p / valoresMat .)
    ;               reduce using rule 103 (p -> p / valoresMat .)
    ,               reduce using rule 103 (p -> p / valoresMat .)
    ]               reduce using rule 103 (p -> p / valoresMat .)
    }               reduce using rule 103 (p -> p / valoresMat .)
    :               reduce using rule 103 (p -> p / valoresMat .)
    ^               shift and go to state 141


state 246

    (97) p -> p / exp .
    (109) exp -> exp . ^ iSing
    (111) exp -> exp . ^ valoresMat

    *               reduce using rule 97 (p -> p / exp .)
    /               reduce using rule 97 (p -> p / exp .)
    %               reduce using rule 97 (p -> p / exp .)
    +               reduce using rule 97 (p -> p / exp .)
    -               reduce using rule 97 (p -> p / exp .)
    ?               reduce using rule 97 (p -> p / exp .)
    OR              reduce using rule 97 (p -> p / exp .)
    AND             reduce using rule 97 (p -> p / exp .)
    EQEQ            reduce using rule 97 (p -> p / exp .)
    DISTINTO        reduce using rule 97 (p -> p / exp .)
    >               reduce using rule 97 (p -> p / exp .)
    <               reduce using rule 97 (p -> p / exp .)
    )               reduce using rule 97 (p -> p / exp .)
    ;               reduce using rule 97 (p -> p / exp .)
    ,               reduce using rule 97 (p -> p / exp .)
    ]               reduce using rule 97 (p -> p / exp .)
    }               reduce using rule 97 (p -> p / exp .)
    :               reduce using rule 97 (p -> p / exp .)
    ^               shift and go to state 166


state 247

    (111) exp -> exp ^ valoresMat .

    ^               reduce using rule 111 (exp -> exp ^ valoresMat .)
    *               reduce using rule 111 (exp -> exp ^ valoresMat .)
    /               reduce using rule 111 (exp -> exp ^ valoresMat .)
    %               reduce using rule 111 (exp -> exp ^ valoresMat .)
    +               reduce using rule 111 (exp -> exp ^ valoresMat .)
    -               reduce using rule 111 (exp -> exp ^ valoresMat .)
    EQEQ            reduce using rule 111 (exp -> exp ^ valoresMat .)
    DISTINTO        reduce using rule 111 (exp -> exp ^ valoresMat .)
    AND             reduce using rule 111 (exp -> exp ^ valoresMat .)
    ?               reduce using rule 111 (exp -> exp ^ valoresMat .)
    OR              reduce using rule 111 (exp -> exp ^ valoresMat .)
    )               reduce using rule 111 (exp -> exp ^ valoresMat .)
    ;               reduce using rule 111 (exp -> exp ^ valoresMat .)
    ,               reduce using rule 111 (exp -> exp ^ valoresMat .)
    ]               reduce using rule 111 (exp -> exp ^ valoresMat .)
    }               reduce using rule 111 (exp -> exp ^ valoresMat .)
    :               reduce using rule 111 (exp -> exp ^ valoresMat .)
    >               reduce using rule 111 (exp -> exp ^ valoresMat .)
    <               reduce using rule 111 (exp -> exp ^ valoresMat .)


state 248

    (109) exp -> exp ^ iSing .

    ^               reduce using rule 109 (exp -> exp ^ iSing .)
    *               reduce using rule 109 (exp -> exp ^ iSing .)
    /               reduce using rule 109 (exp -> exp ^ iSing .)
    %               reduce using rule 109 (exp -> exp ^ iSing .)
    +               reduce using rule 109 (exp -> exp ^ iSing .)
    -               reduce using rule 109 (exp -> exp ^ iSing .)
    EQEQ            reduce using rule 109 (exp -> exp ^ iSing .)
    DISTINTO        reduce using rule 109 (exp -> exp ^ iSing .)
    AND             reduce using rule 109 (exp -> exp ^ iSing .)
    ?               reduce using rule 109 (exp -> exp ^ iSing .)
    OR              reduce using rule 109 (exp -> exp ^ iSing .)
    )               reduce using rule 109 (exp -> exp ^ iSing .)
    ;               reduce using rule 109 (exp -> exp ^ iSing .)
    ,               reduce using rule 109 (exp -> exp ^ iSing .)
    ]               reduce using rule 109 (exp -> exp ^ iSing .)
    }               reduce using rule 109 (exp -> exp ^ iSing .)
    :               reduce using rule 109 (exp -> exp ^ iSing .)
    >               reduce using rule 109 (exp -> exp ^ iSing .)
    <               reduce using rule 109 (exp -> exp ^ iSing .)


state 249

    (122) valoresBool -> varYVals .
    (84) valoresMat -> varYVals .
    (72) varsOps -> varYVals . MASMAS
    (73) varsOps -> varYVals . MENOSMENOS
    (157) tCompare -> varYVals .

    ?               reduce using rule 122 (valoresBool -> varYVals .)
    OR              reduce using rule 122 (valoresBool -> varYVals .)
    AND             reduce using rule 122 (valoresBool -> varYVals .)
    EQEQ            reduce using rule 122 (valoresBool -> varYVals .)
    DISTINTO        reduce using rule 122 (valoresBool -> varYVals .)
    +               reduce using rule 84 (valoresMat -> varYVals .)
    -               reduce using rule 84 (valoresMat -> varYVals .)
    *               reduce using rule 84 (valoresMat -> varYVals .)
    /               reduce using rule 84 (valoresMat -> varYVals .)
    %               reduce using rule 84 (valoresMat -> varYVals .)
    ^               reduce using rule 84 (valoresMat -> varYVals .)
    MASMAS          shift and go to state 56
    MENOSMENOS      shift and go to state 53
    >               reduce using rule 157 (tCompare -> varYVals .)
    <               reduce using rule 157 (tCompare -> varYVals .)


state 250

    (129) expBool -> or ? valoresBool . : expBool
    (130) expBool -> or ? valoresBool . : valoresBool
    (131) expBool -> valoresBool . ? expBool : expBool
    (132) expBool -> valoresBool . ? valoresBool : expBool
    (133) expBool -> valoresBool . ? expBool : valoresBool
    (134) expBool -> valoresBool . ? valoresBool : valoresBool
    (137) or -> valoresBool . OR and
    (139) or -> valoresBool . OR valoresBool
    (142) and -> valoresBool . AND eq
    (144) and -> valoresBool . AND valoresBool
    (148) eq -> valoresBool . EQEQ parenBool
    (149) eq -> valoresBool . DISTINTO parenBool
    (152) eq -> valoresBool . EQEQ valoresBool
    (153) eq -> valoresBool . DISTINTO valoresBool

    :               shift and go to state 273
    ?               shift and go to state 148
    OR              shift and go to state 147
    AND             shift and go to state 144
    EQEQ            shift and go to state 146
    DISTINTO        shift and go to state 145


state 251

    (127) expBool -> or ? expBool . : expBool
    (128) expBool -> or ? expBool . : valoresBool

    :               shift and go to state 274


state 252

    (136) or -> or OR and .
    (141) and -> and . AND eq
    (143) and -> and . AND valoresBool

    ?               reduce using rule 136 (or -> or OR and .)
    OR              reduce using rule 136 (or -> or OR and .)
    ;               reduce using rule 136 (or -> or OR and .)
    )               reduce using rule 136 (or -> or OR and .)
    ,               reduce using rule 136 (or -> or OR and .)
    ]               reduce using rule 136 (or -> or OR and .)
    }               reduce using rule 136 (or -> or OR and .)
    :               reduce using rule 136 (or -> or OR and .)
    AND             shift and go to state 135


state 253

    (138) or -> or OR valoresBool .
    (142) and -> valoresBool . AND eq
    (144) and -> valoresBool . AND valoresBool
    (148) eq -> valoresBool . EQEQ parenBool
    (149) eq -> valoresBool . DISTINTO parenBool
    (152) eq -> valoresBool . EQEQ valoresBool
    (153) eq -> valoresBool . DISTINTO valoresBool

    ?               reduce using rule 138 (or -> or OR valoresBool .)
    OR              reduce using rule 138 (or -> or OR valoresBool .)
    ;               reduce using rule 138 (or -> or OR valoresBool .)
    )               reduce using rule 138 (or -> or OR valoresBool .)
    ,               reduce using rule 138 (or -> or OR valoresBool .)
    ]               reduce using rule 138 (or -> or OR valoresBool .)
    }               reduce using rule 138 (or -> or OR valoresBool .)
    :               reduce using rule 138 (or -> or OR valoresBool .)
    AND             shift and go to state 144
    EQEQ            shift and go to state 146
    DISTINTO        shift and go to state 145


state 254

    (13) loop -> WHILE ( expBool ) bloque .

    COMMENT         reduce using rule 13 (loop -> WHILE ( expBool ) bloque .)
    RETURN          reduce using rule 13 (loop -> WHILE ( expBool ) bloque .)
    IF              reduce using rule 13 (loop -> WHILE ( expBool ) bloque .)
    WHILE           reduce using rule 13 (loop -> WHILE ( expBool ) bloque .)
    DO              reduce using rule 13 (loop -> WHILE ( expBool ) bloque .)
    FOR             reduce using rule 13 (loop -> WHILE ( expBool ) bloque .)
    MENOSMENOS      reduce using rule 13 (loop -> WHILE ( expBool ) bloque .)
    MASMAS          reduce using rule 13 (loop -> WHILE ( expBool ) bloque .)
    ID              reduce using rule 13 (loop -> WHILE ( expBool ) bloque .)
    PRINT           reduce using rule 13 (loop -> WHILE ( expBool ) bloque .)
    MULTIESCALAR    reduce using rule 13 (loop -> WHILE ( expBool ) bloque .)
    LENGTH          reduce using rule 13 (loop -> WHILE ( expBool ) bloque .)
    CAPITALIZAR     reduce using rule 13 (loop -> WHILE ( expBool ) bloque .)
    COLINEALES      reduce using rule 13 (loop -> WHILE ( expBool ) bloque .)
    $end            reduce using rule 13 (loop -> WHILE ( expBool ) bloque .)
    }               reduce using rule 13 (loop -> WHILE ( expBool ) bloque .)


state 255

    (43) elem -> valores , . elem
    (43) elem -> . valores , elem
    (44) elem -> . valores
    (45) valores -> . eMat
    (46) valores -> . expBool
    (47) valores -> . reg
    (48) valores -> . INT
    (49) valores -> . FLOAT
    (50) valores -> . STRING
    (51) valores -> . BOOL
    (52) valores -> . varYVals
    (53) valores -> . varsOps
    (54) valores -> . vec
    (55) valores -> . ID . valoresCampos
    (56) valores -> . RES
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (127) expBool -> . or ? expBool : expBool
    (128) expBool -> . or ? expBool : valoresBool
    (129) expBool -> . or ? valoresBool : expBool
    (130) expBool -> . or ? valoresBool : valoresBool
    (131) expBool -> . valoresBool ? expBool : expBool
    (132) expBool -> . valoresBool ? valoresBool : expBool
    (133) expBool -> . valoresBool ? expBool : valoresBool
    (134) expBool -> . valoresBool ? valoresBool : valoresBool
    (135) expBool -> . or
    (67) reg -> . { campos }
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (42) vec -> . [ elem ]
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (136) or -> . or OR and
    (137) or -> . valoresBool OR and
    (138) or -> . or OR valoresBool
    (139) or -> . valoresBool OR valoresBool
    (140) or -> . and
    (120) valoresBool -> . BOOL
    (121) valoresBool -> . funcBool
    (122) valoresBool -> . varYVals
    (123) valoresBool -> . varsOps
    (124) valoresBool -> . eMat
    (125) valoresBool -> . INT
    (126) valoresBool -> . FLOAT
    (62) vecVal -> . ID m
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (141) and -> . and AND eq
    (142) and -> . valoresBool AND eq
    (143) and -> . and AND valoresBool
    (144) and -> . valoresBool AND valoresBool
    (145) and -> . eq
    (37) funcBool -> . COLINEALES ( vec , vec )
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (146) eq -> . eq EQEQ parenBool
    (147) eq -> . eq DISTINTO parenBool
    (148) eq -> . valoresBool EQEQ parenBool
    (149) eq -> . valoresBool DISTINTO parenBool
    (150) eq -> . eq EQEQ valoresBool
    (151) eq -> . eq DISTINTO valoresBool
    (152) eq -> . valoresBool EQEQ valoresBool
    (153) eq -> . valoresBool DISTINTO valoresBool
    (154) eq -> . mayor
    (119) paren -> . ( eMat )
    (160) mayor -> . tCompare > tCompare
    (161) mayor -> . menor
    (155) tCompare -> . eMat
    (156) tCompare -> . varsOps
    (157) tCompare -> . varYVals
    (158) tCompare -> . INT
    (159) tCompare -> . FLOAT
    (162) menor -> . tCompare < tCompare
    (163) menor -> . not
    (164) not -> . NOT not
    (165) not -> . NOT valoresBool
    (166) not -> . parenBool
    (167) parenBool -> . ( expBool )

    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    STRING          shift and go to state 97
    BOOL            shift and go to state 103
    ID              shift and go to state 99
    RES             shift and go to state 93
    {               shift and go to state 105
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    [               shift and go to state 98
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    COLINEALES      shift and go to state 16
    -               shift and go to state 76
    +               shift and go to state 75
    (               shift and go to state 74
    NOT             shift and go to state 89

    and                            shift and go to state 65
    funcBool                       shift and go to state 66
    funcInt                        shift and go to state 67
    elem                           shift and go to state 275
    menor                          shift and go to state 83
    mayor                          shift and go to state 68
    valoresMat                     shift and go to state 69
    eq                             shift and go to state 70
    valoresBool                    shift and go to state 71
    eMat                           shift and go to state 94
    vecVal                         shift and go to state 9
    vec                            shift and go to state 95
    paren                          shift and go to state 79
    reg                            shift and go to state 96
    varsOps                        shift and go to state 104
    exp                            shift and go to state 87
    tCompare                       shift and go to state 78
    not                            shift and go to state 80
    valores                        shift and go to state 178
    parenBool                      shift and go to state 88
    p                              shift and go to state 84
    iSing                          shift and go to state 77
    varYVals                       shift and go to state 106
    or                             shift and go to state 91
    expBool                        shift and go to state 107

state 256

    (42) vec -> [ elem ] .

    )               reduce using rule 42 (vec -> [ elem ] .)
    ;               reduce using rule 42 (vec -> [ elem ] .)
    ,               reduce using rule 42 (vec -> [ elem ] .)
    ]               reduce using rule 42 (vec -> [ elem ] .)
    }               reduce using rule 42 (vec -> [ elem ] .)


state 257

    (59) valoresCampos -> BEGIN .

    )               reduce using rule 59 (valoresCampos -> BEGIN .)
    ;               reduce using rule 59 (valoresCampos -> BEGIN .)
    ,               reduce using rule 59 (valoresCampos -> BEGIN .)
    ]               reduce using rule 59 (valoresCampos -> BEGIN .)
    }               reduce using rule 59 (valoresCampos -> BEGIN .)


state 258

    (58) valoresCampos -> END .

    )               reduce using rule 58 (valoresCampos -> END .)
    ;               reduce using rule 58 (valoresCampos -> END .)
    ,               reduce using rule 58 (valoresCampos -> END .)
    ]               reduce using rule 58 (valoresCampos -> END .)
    }               reduce using rule 58 (valoresCampos -> END .)


state 259

    (57) valoresCampos -> ID .

    )               reduce using rule 57 (valoresCampos -> ID .)
    ;               reduce using rule 57 (valoresCampos -> ID .)
    ,               reduce using rule 57 (valoresCampos -> ID .)
    ]               reduce using rule 57 (valoresCampos -> ID .)
    }               reduce using rule 57 (valoresCampos -> ID .)


state 260

    (55) valores -> ID . valoresCampos .

    ;               reduce using rule 55 (valores -> ID . valoresCampos .)
    )               reduce using rule 55 (valores -> ID . valoresCampos .)
    ,               reduce using rule 55 (valores -> ID . valoresCampos .)
    ]               reduce using rule 55 (valores -> ID . valoresCampos .)
    }               reduce using rule 55 (valores -> ID . valoresCampos .)


state 261

    (67) reg -> { campos } .

    ,               reduce using rule 67 (reg -> { campos } .)
    ]               reduce using rule 67 (reg -> { campos } .)
    ;               reduce using rule 67 (reg -> { campos } .)
    )               reduce using rule 67 (reg -> { campos } .)
    }               reduce using rule 67 (reg -> { campos } .)


state 262

    (68) campos -> ID : . valores , campos
    (45) valores -> . eMat
    (46) valores -> . expBool
    (47) valores -> . reg
    (48) valores -> . INT
    (49) valores -> . FLOAT
    (50) valores -> . STRING
    (51) valores -> . BOOL
    (52) valores -> . varYVals
    (53) valores -> . varsOps
    (54) valores -> . vec
    (55) valores -> . ID . valoresCampos
    (56) valores -> . RES
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (127) expBool -> . or ? expBool : expBool
    (128) expBool -> . or ? expBool : valoresBool
    (129) expBool -> . or ? valoresBool : expBool
    (130) expBool -> . or ? valoresBool : valoresBool
    (131) expBool -> . valoresBool ? expBool : expBool
    (132) expBool -> . valoresBool ? valoresBool : expBool
    (133) expBool -> . valoresBool ? expBool : valoresBool
    (134) expBool -> . valoresBool ? valoresBool : valoresBool
    (135) expBool -> . or
    (67) reg -> . { campos }
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (42) vec -> . [ elem ]
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (136) or -> . or OR and
    (137) or -> . valoresBool OR and
    (138) or -> . or OR valoresBool
    (139) or -> . valoresBool OR valoresBool
    (140) or -> . and
    (120) valoresBool -> . BOOL
    (121) valoresBool -> . funcBool
    (122) valoresBool -> . varYVals
    (123) valoresBool -> . varsOps
    (124) valoresBool -> . eMat
    (125) valoresBool -> . INT
    (126) valoresBool -> . FLOAT
    (62) vecVal -> . ID m
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (141) and -> . and AND eq
    (142) and -> . valoresBool AND eq
    (143) and -> . and AND valoresBool
    (144) and -> . valoresBool AND valoresBool
    (145) and -> . eq
    (37) funcBool -> . COLINEALES ( vec , vec )
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (146) eq -> . eq EQEQ parenBool
    (147) eq -> . eq DISTINTO parenBool
    (148) eq -> . valoresBool EQEQ parenBool
    (149) eq -> . valoresBool DISTINTO parenBool
    (150) eq -> . eq EQEQ valoresBool
    (151) eq -> . eq DISTINTO valoresBool
    (152) eq -> . valoresBool EQEQ valoresBool
    (153) eq -> . valoresBool DISTINTO valoresBool
    (154) eq -> . mayor
    (119) paren -> . ( eMat )
    (160) mayor -> . tCompare > tCompare
    (161) mayor -> . menor
    (155) tCompare -> . eMat
    (156) tCompare -> . varsOps
    (157) tCompare -> . varYVals
    (158) tCompare -> . INT
    (159) tCompare -> . FLOAT
    (162) menor -> . tCompare < tCompare
    (163) menor -> . not
    (164) not -> . NOT not
    (165) not -> . NOT valoresBool
    (166) not -> . parenBool
    (167) parenBool -> . ( expBool )

    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    STRING          shift and go to state 97
    BOOL            shift and go to state 103
    ID              shift and go to state 99
    RES             shift and go to state 93
    {               shift and go to state 105
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    [               shift and go to state 98
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    COLINEALES      shift and go to state 16
    -               shift and go to state 76
    +               shift and go to state 75
    (               shift and go to state 74
    NOT             shift and go to state 89

    and                            shift and go to state 65
    funcBool                       shift and go to state 66
    funcInt                        shift and go to state 67
    menor                          shift and go to state 83
    mayor                          shift and go to state 68
    valoresMat                     shift and go to state 69
    eq                             shift and go to state 70
    valoresBool                    shift and go to state 71
    eMat                           shift and go to state 94
    vecVal                         shift and go to state 9
    vec                            shift and go to state 95
    paren                          shift and go to state 79
    reg                            shift and go to state 96
    varsOps                        shift and go to state 104
    exp                            shift and go to state 87
    tCompare                       shift and go to state 78
    not                            shift and go to state 80
    valores                        shift and go to state 276
    parenBool                      shift and go to state 88
    p                              shift and go to state 84
    iSing                          shift and go to state 77
    varYVals                       shift and go to state 106
    or                             shift and go to state 91
    expBool                        shift and go to state 107

state 263

    (37) funcBool -> COLINEALES ( vec , vec . )

    )               shift and go to state 277


state 264

    (15) loop -> FOR ( primParam ; cosaBooleana . ; tercerParam ) bloque

    ;               shift and go to state 278


state 265

    (80) varAsig -> ID . ID = valoresAsig .

    ;               reduce using rule 80 (varAsig -> ID . ID = valoresAsig .)
    )               reduce using rule 80 (varAsig -> ID . ID = valoresAsig .)


state 266

    (64) m -> [ INT ] m .

    MASMAS          reduce using rule 64 (m -> [ INT ] m .)
    MENOSMENOS      reduce using rule 64 (m -> [ INT ] m .)
    )               reduce using rule 64 (m -> [ INT ] m .)
    +               reduce using rule 64 (m -> [ INT ] m .)
    -               reduce using rule 64 (m -> [ INT ] m .)
    *               reduce using rule 64 (m -> [ INT ] m .)
    /               reduce using rule 64 (m -> [ INT ] m .)
    %               reduce using rule 64 (m -> [ INT ] m .)
    ^               reduce using rule 64 (m -> [ INT ] m .)
    ?               reduce using rule 64 (m -> [ INT ] m .)
    OR              reduce using rule 64 (m -> [ INT ] m .)
    AND             reduce using rule 64 (m -> [ INT ] m .)
    EQEQ            reduce using rule 64 (m -> [ INT ] m .)
    DISTINTO        reduce using rule 64 (m -> [ INT ] m .)
    >               reduce using rule 64 (m -> [ INT ] m .)
    <               reduce using rule 64 (m -> [ INT ] m .)
    ;               reduce using rule 64 (m -> [ INT ] m .)
    ,               reduce using rule 64 (m -> [ INT ] m .)
    ]               reduce using rule 64 (m -> [ INT ] m .)
    MULEQ           reduce using rule 64 (m -> [ INT ] m .)
    DIVEQ           reduce using rule 64 (m -> [ INT ] m .)
    MASEQ           reduce using rule 64 (m -> [ INT ] m .)
    MENOSEQ         reduce using rule 64 (m -> [ INT ] m .)
    =               reduce using rule 64 (m -> [ INT ] m .)
    }               reduce using rule 64 (m -> [ INT ] m .)
    :               reduce using rule 64 (m -> [ INT ] m .)


state 267

    (65) m -> [ varYVals ] m .

    MASMAS          reduce using rule 65 (m -> [ varYVals ] m .)
    MENOSMENOS      reduce using rule 65 (m -> [ varYVals ] m .)
    )               reduce using rule 65 (m -> [ varYVals ] m .)
    +               reduce using rule 65 (m -> [ varYVals ] m .)
    -               reduce using rule 65 (m -> [ varYVals ] m .)
    *               reduce using rule 65 (m -> [ varYVals ] m .)
    /               reduce using rule 65 (m -> [ varYVals ] m .)
    %               reduce using rule 65 (m -> [ varYVals ] m .)
    ^               reduce using rule 65 (m -> [ varYVals ] m .)
    ?               reduce using rule 65 (m -> [ varYVals ] m .)
    OR              reduce using rule 65 (m -> [ varYVals ] m .)
    AND             reduce using rule 65 (m -> [ varYVals ] m .)
    EQEQ            reduce using rule 65 (m -> [ varYVals ] m .)
    DISTINTO        reduce using rule 65 (m -> [ varYVals ] m .)
    >               reduce using rule 65 (m -> [ varYVals ] m .)
    <               reduce using rule 65 (m -> [ varYVals ] m .)
    ;               reduce using rule 65 (m -> [ varYVals ] m .)
    ,               reduce using rule 65 (m -> [ varYVals ] m .)
    ]               reduce using rule 65 (m -> [ varYVals ] m .)
    MULEQ           reduce using rule 65 (m -> [ varYVals ] m .)
    DIVEQ           reduce using rule 65 (m -> [ varYVals ] m .)
    MASEQ           reduce using rule 65 (m -> [ varYVals ] m .)
    MENOSEQ         reduce using rule 65 (m -> [ varYVals ] m .)
    =               reduce using rule 65 (m -> [ varYVals ] m .)
    }               reduce using rule 65 (m -> [ varYVals ] m .)
    :               reduce using rule 65 (m -> [ varYVals ] m .)


state 268

    (24) if -> IF ( cosaBooleana ) bloque . else
    (25) else -> . ELSE bloque
    (26) else -> . empty
    (41) empty -> .

    ELSE            shift and go to state 280
    COMMENT         reduce using rule 41 (empty -> .)
    RETURN          reduce using rule 41 (empty -> .)
    IF              reduce using rule 41 (empty -> .)
    WHILE           reduce using rule 41 (empty -> .)
    DO              reduce using rule 41 (empty -> .)
    FOR             reduce using rule 41 (empty -> .)
    MENOSMENOS      reduce using rule 41 (empty -> .)
    MASMAS          reduce using rule 41 (empty -> .)
    ID              reduce using rule 41 (empty -> .)
    PRINT           reduce using rule 41 (empty -> .)
    MULTIESCALAR    reduce using rule 41 (empty -> .)
    LENGTH          reduce using rule 41 (empty -> .)
    CAPITALIZAR     reduce using rule 41 (empty -> .)
    COLINEALES      reduce using rule 41 (empty -> .)
    $end            reduce using rule 41 (empty -> .)
    }               reduce using rule 41 (empty -> .)

    empty                          shift and go to state 281
    else                           shift and go to state 279

state 269

    (34) funcInt -> MULTIESCALAR ( vec , eMat . , param )
    (87) eMat -> eMat . + p
    (88) eMat -> eMat . - p
    (91) eMat -> eMat . + valoresMat
    (92) eMat -> eMat . - valoresMat

    ,               shift and go to state 282
    +               shift and go to state 149
    -               shift and go to state 150


state 270

    (14) loop -> DO bloque WHILE ( expBool ) . ;

    ;               shift and go to state 283


state 271

    (132) expBool -> valoresBool ? valoresBool : . expBool
    (134) expBool -> valoresBool ? valoresBool : . valoresBool
    (127) expBool -> . or ? expBool : expBool
    (128) expBool -> . or ? expBool : valoresBool
    (129) expBool -> . or ? valoresBool : expBool
    (130) expBool -> . or ? valoresBool : valoresBool
    (131) expBool -> . valoresBool ? expBool : expBool
    (132) expBool -> . valoresBool ? valoresBool : expBool
    (133) expBool -> . valoresBool ? expBool : valoresBool
    (134) expBool -> . valoresBool ? valoresBool : valoresBool
    (135) expBool -> . or
    (120) valoresBool -> . BOOL
    (121) valoresBool -> . funcBool
    (122) valoresBool -> . varYVals
    (123) valoresBool -> . varsOps
    (124) valoresBool -> . eMat
    (125) valoresBool -> . INT
    (126) valoresBool -> . FLOAT
    (136) or -> . or OR and
    (137) or -> . valoresBool OR and
    (138) or -> . or OR valoresBool
    (139) or -> . valoresBool OR valoresBool
    (140) or -> . and
    (37) funcBool -> . COLINEALES ( vec , vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (141) and -> . and AND eq
    (142) and -> . valoresBool AND eq
    (143) and -> . and AND valoresBool
    (144) and -> . valoresBool AND valoresBool
    (145) and -> . eq
    (62) vecVal -> . ID m
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (146) eq -> . eq EQEQ parenBool
    (147) eq -> . eq DISTINTO parenBool
    (148) eq -> . valoresBool EQEQ parenBool
    (149) eq -> . valoresBool DISTINTO parenBool
    (150) eq -> . eq EQEQ valoresBool
    (151) eq -> . eq DISTINTO valoresBool
    (152) eq -> . valoresBool EQEQ valoresBool
    (153) eq -> . valoresBool DISTINTO valoresBool
    (154) eq -> . mayor
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (160) mayor -> . tCompare > tCompare
    (161) mayor -> . menor
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (155) tCompare -> . eMat
    (156) tCompare -> . varsOps
    (157) tCompare -> . varYVals
    (158) tCompare -> . INT
    (159) tCompare -> . FLOAT
    (162) menor -> . tCompare < tCompare
    (163) menor -> . not
    (119) paren -> . ( eMat )
    (164) not -> . NOT not
    (165) not -> . NOT valoresBool
    (166) not -> . parenBool
    (167) parenBool -> . ( expBool )

    BOOL            shift and go to state 85
    INT             shift and go to state 81
    FLOAT           shift and go to state 82
    COLINEALES      shift and go to state 16
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    STRING          shift and go to state 72
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    -               shift and go to state 76
    +               shift and go to state 75
    (               shift and go to state 74
    NOT             shift and go to state 89

    and                            shift and go to state 65
    funcBool                       shift and go to state 66
    funcInt                        shift and go to state 67
    menor                          shift and go to state 83
    valoresMat                     shift and go to state 69
    eq                             shift and go to state 70
    vecVal                         shift and go to state 9
    valoresBool                    shift and go to state 284
    eMat                           shift and go to state 73
    mayor                          shift and go to state 68
    paren                          shift and go to state 79
    varsOps                        shift and go to state 86
    tCompare                       shift and go to state 78
    not                            shift and go to state 80
    parenBool                      shift and go to state 88
    p                              shift and go to state 84
    iSing                          shift and go to state 77
    exp                            shift and go to state 87
    varYVals                       shift and go to state 90
    or                             shift and go to state 91
    expBool                        shift and go to state 285

state 272

    (131) expBool -> valoresBool ? expBool : . expBool
    (133) expBool -> valoresBool ? expBool : . valoresBool
    (127) expBool -> . or ? expBool : expBool
    (128) expBool -> . or ? expBool : valoresBool
    (129) expBool -> . or ? valoresBool : expBool
    (130) expBool -> . or ? valoresBool : valoresBool
    (131) expBool -> . valoresBool ? expBool : expBool
    (132) expBool -> . valoresBool ? valoresBool : expBool
    (133) expBool -> . valoresBool ? expBool : valoresBool
    (134) expBool -> . valoresBool ? valoresBool : valoresBool
    (135) expBool -> . or
    (120) valoresBool -> . BOOL
    (121) valoresBool -> . funcBool
    (122) valoresBool -> . varYVals
    (123) valoresBool -> . varsOps
    (124) valoresBool -> . eMat
    (125) valoresBool -> . INT
    (126) valoresBool -> . FLOAT
    (136) or -> . or OR and
    (137) or -> . valoresBool OR and
    (138) or -> . or OR valoresBool
    (139) or -> . valoresBool OR valoresBool
    (140) or -> . and
    (37) funcBool -> . COLINEALES ( vec , vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (141) and -> . and AND eq
    (142) and -> . valoresBool AND eq
    (143) and -> . and AND valoresBool
    (144) and -> . valoresBool AND valoresBool
    (145) and -> . eq
    (62) vecVal -> . ID m
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (146) eq -> . eq EQEQ parenBool
    (147) eq -> . eq DISTINTO parenBool
    (148) eq -> . valoresBool EQEQ parenBool
    (149) eq -> . valoresBool DISTINTO parenBool
    (150) eq -> . eq EQEQ valoresBool
    (151) eq -> . eq DISTINTO valoresBool
    (152) eq -> . valoresBool EQEQ valoresBool
    (153) eq -> . valoresBool DISTINTO valoresBool
    (154) eq -> . mayor
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (160) mayor -> . tCompare > tCompare
    (161) mayor -> . menor
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (155) tCompare -> . eMat
    (156) tCompare -> . varsOps
    (157) tCompare -> . varYVals
    (158) tCompare -> . INT
    (159) tCompare -> . FLOAT
    (162) menor -> . tCompare < tCompare
    (163) menor -> . not
    (119) paren -> . ( eMat )
    (164) not -> . NOT not
    (165) not -> . NOT valoresBool
    (166) not -> . parenBool
    (167) parenBool -> . ( expBool )

    BOOL            shift and go to state 85
    INT             shift and go to state 81
    FLOAT           shift and go to state 82
    COLINEALES      shift and go to state 16
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    STRING          shift and go to state 72
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    -               shift and go to state 76
    +               shift and go to state 75
    (               shift and go to state 74
    NOT             shift and go to state 89

    and                            shift and go to state 65
    funcBool                       shift and go to state 66
    funcInt                        shift and go to state 67
    menor                          shift and go to state 83
    valoresMat                     shift and go to state 69
    eq                             shift and go to state 70
    vecVal                         shift and go to state 9
    valoresBool                    shift and go to state 286
    eMat                           shift and go to state 73
    mayor                          shift and go to state 68
    paren                          shift and go to state 79
    varsOps                        shift and go to state 86
    tCompare                       shift and go to state 78
    not                            shift and go to state 80
    parenBool                      shift and go to state 88
    p                              shift and go to state 84
    iSing                          shift and go to state 77
    exp                            shift and go to state 87
    varYVals                       shift and go to state 90
    or                             shift and go to state 91
    expBool                        shift and go to state 287

state 273

    (129) expBool -> or ? valoresBool : . expBool
    (130) expBool -> or ? valoresBool : . valoresBool
    (127) expBool -> . or ? expBool : expBool
    (128) expBool -> . or ? expBool : valoresBool
    (129) expBool -> . or ? valoresBool : expBool
    (130) expBool -> . or ? valoresBool : valoresBool
    (131) expBool -> . valoresBool ? expBool : expBool
    (132) expBool -> . valoresBool ? valoresBool : expBool
    (133) expBool -> . valoresBool ? expBool : valoresBool
    (134) expBool -> . valoresBool ? valoresBool : valoresBool
    (135) expBool -> . or
    (120) valoresBool -> . BOOL
    (121) valoresBool -> . funcBool
    (122) valoresBool -> . varYVals
    (123) valoresBool -> . varsOps
    (124) valoresBool -> . eMat
    (125) valoresBool -> . INT
    (126) valoresBool -> . FLOAT
    (136) or -> . or OR and
    (137) or -> . valoresBool OR and
    (138) or -> . or OR valoresBool
    (139) or -> . valoresBool OR valoresBool
    (140) or -> . and
    (37) funcBool -> . COLINEALES ( vec , vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (141) and -> . and AND eq
    (142) and -> . valoresBool AND eq
    (143) and -> . and AND valoresBool
    (144) and -> . valoresBool AND valoresBool
    (145) and -> . eq
    (62) vecVal -> . ID m
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (146) eq -> . eq EQEQ parenBool
    (147) eq -> . eq DISTINTO parenBool
    (148) eq -> . valoresBool EQEQ parenBool
    (149) eq -> . valoresBool DISTINTO parenBool
    (150) eq -> . eq EQEQ valoresBool
    (151) eq -> . eq DISTINTO valoresBool
    (152) eq -> . valoresBool EQEQ valoresBool
    (153) eq -> . valoresBool DISTINTO valoresBool
    (154) eq -> . mayor
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (160) mayor -> . tCompare > tCompare
    (161) mayor -> . menor
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (155) tCompare -> . eMat
    (156) tCompare -> . varsOps
    (157) tCompare -> . varYVals
    (158) tCompare -> . INT
    (159) tCompare -> . FLOAT
    (162) menor -> . tCompare < tCompare
    (163) menor -> . not
    (119) paren -> . ( eMat )
    (164) not -> . NOT not
    (165) not -> . NOT valoresBool
    (166) not -> . parenBool
    (167) parenBool -> . ( expBool )

    BOOL            shift and go to state 85
    INT             shift and go to state 81
    FLOAT           shift and go to state 82
    COLINEALES      shift and go to state 16
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    STRING          shift and go to state 72
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    -               shift and go to state 76
    +               shift and go to state 75
    (               shift and go to state 74
    NOT             shift and go to state 89

    and                            shift and go to state 65
    funcBool                       shift and go to state 66
    funcInt                        shift and go to state 67
    menor                          shift and go to state 83
    valoresMat                     shift and go to state 69
    eq                             shift and go to state 70
    valoresBool                    shift and go to state 288
    eMat                           shift and go to state 73
    vecVal                         shift and go to state 9
    paren                          shift and go to state 79
    varsOps                        shift and go to state 86
    tCompare                       shift and go to state 78
    not                            shift and go to state 80
    varYVals                       shift and go to state 90
    or                             shift and go to state 91
    p                              shift and go to state 84
    iSing                          shift and go to state 77
    exp                            shift and go to state 87
    mayor                          shift and go to state 68
    parenBool                      shift and go to state 88
    expBool                        shift and go to state 289

state 274

    (127) expBool -> or ? expBool : . expBool
    (128) expBool -> or ? expBool : . valoresBool
    (127) expBool -> . or ? expBool : expBool
    (128) expBool -> . or ? expBool : valoresBool
    (129) expBool -> . or ? valoresBool : expBool
    (130) expBool -> . or ? valoresBool : valoresBool
    (131) expBool -> . valoresBool ? expBool : expBool
    (132) expBool -> . valoresBool ? valoresBool : expBool
    (133) expBool -> . valoresBool ? expBool : valoresBool
    (134) expBool -> . valoresBool ? valoresBool : valoresBool
    (135) expBool -> . or
    (120) valoresBool -> . BOOL
    (121) valoresBool -> . funcBool
    (122) valoresBool -> . varYVals
    (123) valoresBool -> . varsOps
    (124) valoresBool -> . eMat
    (125) valoresBool -> . INT
    (126) valoresBool -> . FLOAT
    (136) or -> . or OR and
    (137) or -> . valoresBool OR and
    (138) or -> . or OR valoresBool
    (139) or -> . valoresBool OR valoresBool
    (140) or -> . and
    (37) funcBool -> . COLINEALES ( vec , vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (141) and -> . and AND eq
    (142) and -> . valoresBool AND eq
    (143) and -> . and AND valoresBool
    (144) and -> . valoresBool AND valoresBool
    (145) and -> . eq
    (62) vecVal -> . ID m
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (146) eq -> . eq EQEQ parenBool
    (147) eq -> . eq DISTINTO parenBool
    (148) eq -> . valoresBool EQEQ parenBool
    (149) eq -> . valoresBool DISTINTO parenBool
    (150) eq -> . eq EQEQ valoresBool
    (151) eq -> . eq DISTINTO valoresBool
    (152) eq -> . valoresBool EQEQ valoresBool
    (153) eq -> . valoresBool DISTINTO valoresBool
    (154) eq -> . mayor
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (160) mayor -> . tCompare > tCompare
    (161) mayor -> . menor
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (155) tCompare -> . eMat
    (156) tCompare -> . varsOps
    (157) tCompare -> . varYVals
    (158) tCompare -> . INT
    (159) tCompare -> . FLOAT
    (162) menor -> . tCompare < tCompare
    (163) menor -> . not
    (119) paren -> . ( eMat )
    (164) not -> . NOT not
    (165) not -> . NOT valoresBool
    (166) not -> . parenBool
    (167) parenBool -> . ( expBool )

    BOOL            shift and go to state 85
    INT             shift and go to state 81
    FLOAT           shift and go to state 82
    COLINEALES      shift and go to state 16
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    STRING          shift and go to state 72
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    -               shift and go to state 76
    +               shift and go to state 75
    (               shift and go to state 74
    NOT             shift and go to state 89

    and                            shift and go to state 65
    funcBool                       shift and go to state 66
    funcInt                        shift and go to state 67
    menor                          shift and go to state 83
    valoresMat                     shift and go to state 69
    eq                             shift and go to state 70
    valoresBool                    shift and go to state 290
    eMat                           shift and go to state 73
    vecVal                         shift and go to state 9
    paren                          shift and go to state 79
    varsOps                        shift and go to state 86
    tCompare                       shift and go to state 78
    not                            shift and go to state 80
    varYVals                       shift and go to state 90
    or                             shift and go to state 91
    p                              shift and go to state 84
    iSing                          shift and go to state 77
    exp                            shift and go to state 87
    mayor                          shift and go to state 68
    parenBool                      shift and go to state 88
    expBool                        shift and go to state 291

state 275

    (43) elem -> valores , elem .

    ]               reduce using rule 43 (elem -> valores , elem .)


state 276

    (68) campos -> ID : valores . , campos

    ,               shift and go to state 292


state 277

    (37) funcBool -> COLINEALES ( vec , vec ) .

    ;               reduce using rule 37 (funcBool -> COLINEALES ( vec , vec ) .)
    EQEQ            reduce using rule 37 (funcBool -> COLINEALES ( vec , vec ) .)
    DISTINTO        reduce using rule 37 (funcBool -> COLINEALES ( vec , vec ) .)
    AND             reduce using rule 37 (funcBool -> COLINEALES ( vec , vec ) .)
    ?               reduce using rule 37 (funcBool -> COLINEALES ( vec , vec ) .)
    OR              reduce using rule 37 (funcBool -> COLINEALES ( vec , vec ) .)
    )               reduce using rule 37 (funcBool -> COLINEALES ( vec , vec ) .)
    ,               reduce using rule 37 (funcBool -> COLINEALES ( vec , vec ) .)
    ]               reduce using rule 37 (funcBool -> COLINEALES ( vec , vec ) .)
    }               reduce using rule 37 (funcBool -> COLINEALES ( vec , vec ) .)
    :               reduce using rule 37 (funcBool -> COLINEALES ( vec , vec ) .)


state 278

    (15) loop -> FOR ( primParam ; cosaBooleana ; . tercerParam ) bloque
    (20) tercerParam -> . varsOps
    (21) tercerParam -> . varAsig
    (22) tercerParam -> . func
    (23) tercerParam -> . empty
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (75) varAsig -> . varYVals MULEQ valoresAsig
    (76) varAsig -> . varYVals DIVEQ valoresAsig
    (77) varAsig -> . varYVals MASEQ valoresAsig
    (78) varAsig -> . varYVals MENOSEQ valoresAsig
    (79) varAsig -> . varYVals = valoresAsig
    (80) varAsig -> . ID . ID = valoresAsig
    (29) func -> . funcReturn
    (30) func -> . funcVoid
    (41) empty -> .
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (31) funcReturn -> . funcInt
    (32) funcReturn -> . funcString
    (33) funcReturn -> . funcBool
    (38) funcVoid -> . PRINT ( valores )
    (62) vecVal -> . ID m
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (36) funcString -> . CAPITALIZAR ( eMat )
    (37) funcBool -> . COLINEALES ( vec , vec )

    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    ID              shift and go to state 20
    )               reduce using rule 41 (empty -> .)
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    CAPITALIZAR     shift and go to state 28
    COLINEALES      shift and go to state 16

    varAsig                        shift and go to state 295
    funcVoid                       shift and go to state 15
    funcBool                       shift and go to state 3
    funcString                     shift and go to state 24
    funcInt                        shift and go to state 5
    funcReturn                     shift and go to state 27
    varsOps                        shift and go to state 297
    func                           shift and go to state 293
    varYVals                       shift and go to state 26
    vecVal                         shift and go to state 9
    empty                          shift and go to state 296
    tercerParam                    shift and go to state 294

state 279

    (24) if -> IF ( cosaBooleana ) bloque else .

    COMMENT         reduce using rule 24 (if -> IF ( cosaBooleana ) bloque else .)
    RETURN          reduce using rule 24 (if -> IF ( cosaBooleana ) bloque else .)
    IF              reduce using rule 24 (if -> IF ( cosaBooleana ) bloque else .)
    WHILE           reduce using rule 24 (if -> IF ( cosaBooleana ) bloque else .)
    DO              reduce using rule 24 (if -> IF ( cosaBooleana ) bloque else .)
    FOR             reduce using rule 24 (if -> IF ( cosaBooleana ) bloque else .)
    MENOSMENOS      reduce using rule 24 (if -> IF ( cosaBooleana ) bloque else .)
    MASMAS          reduce using rule 24 (if -> IF ( cosaBooleana ) bloque else .)
    ID              reduce using rule 24 (if -> IF ( cosaBooleana ) bloque else .)
    PRINT           reduce using rule 24 (if -> IF ( cosaBooleana ) bloque else .)
    MULTIESCALAR    reduce using rule 24 (if -> IF ( cosaBooleana ) bloque else .)
    LENGTH          reduce using rule 24 (if -> IF ( cosaBooleana ) bloque else .)
    CAPITALIZAR     reduce using rule 24 (if -> IF ( cosaBooleana ) bloque else .)
    COLINEALES      reduce using rule 24 (if -> IF ( cosaBooleana ) bloque else .)
    $end            reduce using rule 24 (if -> IF ( cosaBooleana ) bloque else .)
    }               reduce using rule 24 (if -> IF ( cosaBooleana ) bloque else .)


state 280

    (25) else -> ELSE . bloque
    (27) bloque -> . linea
    (28) bloque -> . { g }
    (2) linea -> . com
    (3) linea -> . sentencia
    (4) com -> . COMMENT
    (7) sentencia -> . varsOps ;
    (8) sentencia -> . func ;
    (9) sentencia -> . varAsig ;
    (10) sentencia -> . RETURN ;
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (29) func -> . funcReturn
    (30) func -> . funcVoid
    (75) varAsig -> . varYVals MULEQ valoresAsig
    (76) varAsig -> . varYVals DIVEQ valoresAsig
    (77) varAsig -> . varYVals MASEQ valoresAsig
    (78) varAsig -> . varYVals MENOSEQ valoresAsig
    (79) varAsig -> . varYVals = valoresAsig
    (80) varAsig -> . ID . ID = valoresAsig
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (31) funcReturn -> . funcInt
    (32) funcReturn -> . funcString
    (33) funcReturn -> . funcBool
    (38) funcVoid -> . PRINT ( valores )
    (62) vecVal -> . ID m
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (36) funcString -> . CAPITALIZAR ( eMat )
    (37) funcBool -> . COLINEALES ( vec , vec )

    {               shift and go to state 35
    COMMENT         shift and go to state 11
    RETURN          shift and go to state 2
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    ID              shift and go to state 20
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    CAPITALIZAR     shift and go to state 28
    COLINEALES      shift and go to state 16

    varAsig                        shift and go to state 22
    sentencia                      shift and go to state 12
    funcInt                        shift and go to state 5
    funcString                     shift and go to state 24
    varYVals                       shift and go to state 26
    funcReturn                     shift and go to state 27
    funcBool                       shift and go to state 3
    funcVoid                       shift and go to state 15
    varsOps                        shift and go to state 14
    func                           shift and go to state 19
    bloque                         shift and go to state 298
    com                            shift and go to state 32
    vecVal                         shift and go to state 9
    linea                          shift and go to state 34

state 281

    (26) else -> empty .

    COMMENT         reduce using rule 26 (else -> empty .)
    RETURN          reduce using rule 26 (else -> empty .)
    IF              reduce using rule 26 (else -> empty .)
    WHILE           reduce using rule 26 (else -> empty .)
    DO              reduce using rule 26 (else -> empty .)
    FOR             reduce using rule 26 (else -> empty .)
    MENOSMENOS      reduce using rule 26 (else -> empty .)
    MASMAS          reduce using rule 26 (else -> empty .)
    ID              reduce using rule 26 (else -> empty .)
    PRINT           reduce using rule 26 (else -> empty .)
    MULTIESCALAR    reduce using rule 26 (else -> empty .)
    LENGTH          reduce using rule 26 (else -> empty .)
    CAPITALIZAR     reduce using rule 26 (else -> empty .)
    COLINEALES      reduce using rule 26 (else -> empty .)
    $end            reduce using rule 26 (else -> empty .)
    }               reduce using rule 26 (else -> empty .)


state 282

    (34) funcInt -> MULTIESCALAR ( vec , eMat , . param )
    (39) param -> . expBool
    (40) param -> . empty
    (127) expBool -> . or ? expBool : expBool
    (128) expBool -> . or ? expBool : valoresBool
    (129) expBool -> . or ? valoresBool : expBool
    (130) expBool -> . or ? valoresBool : valoresBool
    (131) expBool -> . valoresBool ? expBool : expBool
    (132) expBool -> . valoresBool ? valoresBool : expBool
    (133) expBool -> . valoresBool ? expBool : valoresBool
    (134) expBool -> . valoresBool ? valoresBool : valoresBool
    (135) expBool -> . or
    (41) empty -> .
    (136) or -> . or OR and
    (137) or -> . valoresBool OR and
    (138) or -> . or OR valoresBool
    (139) or -> . valoresBool OR valoresBool
    (140) or -> . and
    (120) valoresBool -> . BOOL
    (121) valoresBool -> . funcBool
    (122) valoresBool -> . varYVals
    (123) valoresBool -> . varsOps
    (124) valoresBool -> . eMat
    (125) valoresBool -> . INT
    (126) valoresBool -> . FLOAT
    (141) and -> . and AND eq
    (142) and -> . valoresBool AND eq
    (143) and -> . and AND valoresBool
    (144) and -> . valoresBool AND valoresBool
    (145) and -> . eq
    (37) funcBool -> . COLINEALES ( vec , vec )
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (146) eq -> . eq EQEQ parenBool
    (147) eq -> . eq DISTINTO parenBool
    (148) eq -> . valoresBool EQEQ parenBool
    (149) eq -> . valoresBool DISTINTO parenBool
    (150) eq -> . eq EQEQ valoresBool
    (151) eq -> . eq DISTINTO valoresBool
    (152) eq -> . valoresBool EQEQ valoresBool
    (153) eq -> . valoresBool DISTINTO valoresBool
    (154) eq -> . mayor
    (62) vecVal -> . ID m
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (160) mayor -> . tCompare > tCompare
    (161) mayor -> . menor
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (155) tCompare -> . eMat
    (156) tCompare -> . varsOps
    (157) tCompare -> . varYVals
    (158) tCompare -> . INT
    (159) tCompare -> . FLOAT
    (162) menor -> . tCompare < tCompare
    (163) menor -> . not
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (164) not -> . NOT not
    (165) not -> . NOT valoresBool
    (166) not -> . parenBool
    (119) paren -> . ( eMat )
    (167) parenBool -> . ( expBool )

    )               reduce using rule 41 (empty -> .)
    BOOL            shift and go to state 85
    INT             shift and go to state 81
    FLOAT           shift and go to state 82
    COLINEALES      shift and go to state 16
    ID              shift and go to state 43
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    STRING          shift and go to state 72
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    -               shift and go to state 76
    +               shift and go to state 75
    NOT             shift and go to state 89
    (               shift and go to state 74

    and                            shift and go to state 65
    funcBool                       shift and go to state 66
    funcInt                        shift and go to state 67
    not                            shift and go to state 80
    menor                          shift and go to state 83
    valoresMat                     shift and go to state 69
    eq                             shift and go to state 70
    mayor                          shift and go to state 68
    eMat                           shift and go to state 73
    param                          shift and go to state 299
    valoresBool                    shift and go to state 71
    paren                          shift and go to state 79
    empty                          shift and go to state 300
    iSing                          shift and go to state 77
    tCompare                       shift and go to state 78
    vecVal                         shift and go to state 9
    or                             shift and go to state 91
    p                              shift and go to state 84
    varsOps                        shift and go to state 86
    exp                            shift and go to state 87
    varYVals                       shift and go to state 90
    parenBool                      shift and go to state 88
    expBool                        shift and go to state 301

state 283

    (14) loop -> DO bloque WHILE ( expBool ) ; .

    COMMENT         reduce using rule 14 (loop -> DO bloque WHILE ( expBool ) ; .)
    RETURN          reduce using rule 14 (loop -> DO bloque WHILE ( expBool ) ; .)
    IF              reduce using rule 14 (loop -> DO bloque WHILE ( expBool ) ; .)
    WHILE           reduce using rule 14 (loop -> DO bloque WHILE ( expBool ) ; .)
    DO              reduce using rule 14 (loop -> DO bloque WHILE ( expBool ) ; .)
    FOR             reduce using rule 14 (loop -> DO bloque WHILE ( expBool ) ; .)
    MENOSMENOS      reduce using rule 14 (loop -> DO bloque WHILE ( expBool ) ; .)
    MASMAS          reduce using rule 14 (loop -> DO bloque WHILE ( expBool ) ; .)
    ID              reduce using rule 14 (loop -> DO bloque WHILE ( expBool ) ; .)
    PRINT           reduce using rule 14 (loop -> DO bloque WHILE ( expBool ) ; .)
    MULTIESCALAR    reduce using rule 14 (loop -> DO bloque WHILE ( expBool ) ; .)
    LENGTH          reduce using rule 14 (loop -> DO bloque WHILE ( expBool ) ; .)
    CAPITALIZAR     reduce using rule 14 (loop -> DO bloque WHILE ( expBool ) ; .)
    COLINEALES      reduce using rule 14 (loop -> DO bloque WHILE ( expBool ) ; .)
    $end            reduce using rule 14 (loop -> DO bloque WHILE ( expBool ) ; .)
    }               reduce using rule 14 (loop -> DO bloque WHILE ( expBool ) ; .)


state 284

    (134) expBool -> valoresBool ? valoresBool : valoresBool .
    (131) expBool -> valoresBool . ? expBool : expBool
    (132) expBool -> valoresBool . ? valoresBool : expBool
    (133) expBool -> valoresBool . ? expBool : valoresBool
    (134) expBool -> valoresBool . ? valoresBool : valoresBool
    (137) or -> valoresBool . OR and
    (139) or -> valoresBool . OR valoresBool
    (142) and -> valoresBool . AND eq
    (144) and -> valoresBool . AND valoresBool
    (148) eq -> valoresBool . EQEQ parenBool
    (149) eq -> valoresBool . DISTINTO parenBool
    (152) eq -> valoresBool . EQEQ valoresBool
    (153) eq -> valoresBool . DISTINTO valoresBool

    :               reduce using rule 134 (expBool -> valoresBool ? valoresBool : valoresBool .)
    )               reduce using rule 134 (expBool -> valoresBool ? valoresBool : valoresBool .)
    ;               reduce using rule 134 (expBool -> valoresBool ? valoresBool : valoresBool .)
    ,               reduce using rule 134 (expBool -> valoresBool ? valoresBool : valoresBool .)
    ]               reduce using rule 134 (expBool -> valoresBool ? valoresBool : valoresBool .)
    }               reduce using rule 134 (expBool -> valoresBool ? valoresBool : valoresBool .)
    ?               shift and go to state 148
    OR              shift and go to state 147
    AND             shift and go to state 144
    EQEQ            shift and go to state 146
    DISTINTO        shift and go to state 145


state 285

    (132) expBool -> valoresBool ? valoresBool : expBool .

    :               reduce using rule 132 (expBool -> valoresBool ? valoresBool : expBool .)
    )               reduce using rule 132 (expBool -> valoresBool ? valoresBool : expBool .)
    ;               reduce using rule 132 (expBool -> valoresBool ? valoresBool : expBool .)
    ,               reduce using rule 132 (expBool -> valoresBool ? valoresBool : expBool .)
    ]               reduce using rule 132 (expBool -> valoresBool ? valoresBool : expBool .)
    }               reduce using rule 132 (expBool -> valoresBool ? valoresBool : expBool .)


state 286

    (133) expBool -> valoresBool ? expBool : valoresBool .
    (131) expBool -> valoresBool . ? expBool : expBool
    (132) expBool -> valoresBool . ? valoresBool : expBool
    (133) expBool -> valoresBool . ? expBool : valoresBool
    (134) expBool -> valoresBool . ? valoresBool : valoresBool
    (137) or -> valoresBool . OR and
    (139) or -> valoresBool . OR valoresBool
    (142) and -> valoresBool . AND eq
    (144) and -> valoresBool . AND valoresBool
    (148) eq -> valoresBool . EQEQ parenBool
    (149) eq -> valoresBool . DISTINTO parenBool
    (152) eq -> valoresBool . EQEQ valoresBool
    (153) eq -> valoresBool . DISTINTO valoresBool

    :               reduce using rule 133 (expBool -> valoresBool ? expBool : valoresBool .)
    )               reduce using rule 133 (expBool -> valoresBool ? expBool : valoresBool .)
    ;               reduce using rule 133 (expBool -> valoresBool ? expBool : valoresBool .)
    ,               reduce using rule 133 (expBool -> valoresBool ? expBool : valoresBool .)
    ]               reduce using rule 133 (expBool -> valoresBool ? expBool : valoresBool .)
    }               reduce using rule 133 (expBool -> valoresBool ? expBool : valoresBool .)
    ?               shift and go to state 148
    OR              shift and go to state 147
    AND             shift and go to state 144
    EQEQ            shift and go to state 146
    DISTINTO        shift and go to state 145


state 287

    (131) expBool -> valoresBool ? expBool : expBool .

    :               reduce using rule 131 (expBool -> valoresBool ? expBool : expBool .)
    )               reduce using rule 131 (expBool -> valoresBool ? expBool : expBool .)
    ;               reduce using rule 131 (expBool -> valoresBool ? expBool : expBool .)
    ,               reduce using rule 131 (expBool -> valoresBool ? expBool : expBool .)
    ]               reduce using rule 131 (expBool -> valoresBool ? expBool : expBool .)
    }               reduce using rule 131 (expBool -> valoresBool ? expBool : expBool .)


state 288

    (130) expBool -> or ? valoresBool : valoresBool .
    (131) expBool -> valoresBool . ? expBool : expBool
    (132) expBool -> valoresBool . ? valoresBool : expBool
    (133) expBool -> valoresBool . ? expBool : valoresBool
    (134) expBool -> valoresBool . ? valoresBool : valoresBool
    (137) or -> valoresBool . OR and
    (139) or -> valoresBool . OR valoresBool
    (142) and -> valoresBool . AND eq
    (144) and -> valoresBool . AND valoresBool
    (148) eq -> valoresBool . EQEQ parenBool
    (149) eq -> valoresBool . DISTINTO parenBool
    (152) eq -> valoresBool . EQEQ valoresBool
    (153) eq -> valoresBool . DISTINTO valoresBool

    :               reduce using rule 130 (expBool -> or ? valoresBool : valoresBool .)
    )               reduce using rule 130 (expBool -> or ? valoresBool : valoresBool .)
    ;               reduce using rule 130 (expBool -> or ? valoresBool : valoresBool .)
    ,               reduce using rule 130 (expBool -> or ? valoresBool : valoresBool .)
    ]               reduce using rule 130 (expBool -> or ? valoresBool : valoresBool .)
    }               reduce using rule 130 (expBool -> or ? valoresBool : valoresBool .)
    ?               shift and go to state 148
    OR              shift and go to state 147
    AND             shift and go to state 144
    EQEQ            shift and go to state 146
    DISTINTO        shift and go to state 145


state 289

    (129) expBool -> or ? valoresBool : expBool .

    :               reduce using rule 129 (expBool -> or ? valoresBool : expBool .)
    )               reduce using rule 129 (expBool -> or ? valoresBool : expBool .)
    ;               reduce using rule 129 (expBool -> or ? valoresBool : expBool .)
    ,               reduce using rule 129 (expBool -> or ? valoresBool : expBool .)
    ]               reduce using rule 129 (expBool -> or ? valoresBool : expBool .)
    }               reduce using rule 129 (expBool -> or ? valoresBool : expBool .)


state 290

    (128) expBool -> or ? expBool : valoresBool .
    (131) expBool -> valoresBool . ? expBool : expBool
    (132) expBool -> valoresBool . ? valoresBool : expBool
    (133) expBool -> valoresBool . ? expBool : valoresBool
    (134) expBool -> valoresBool . ? valoresBool : valoresBool
    (137) or -> valoresBool . OR and
    (139) or -> valoresBool . OR valoresBool
    (142) and -> valoresBool . AND eq
    (144) and -> valoresBool . AND valoresBool
    (148) eq -> valoresBool . EQEQ parenBool
    (149) eq -> valoresBool . DISTINTO parenBool
    (152) eq -> valoresBool . EQEQ valoresBool
    (153) eq -> valoresBool . DISTINTO valoresBool

    :               reduce using rule 128 (expBool -> or ? expBool : valoresBool .)
    )               reduce using rule 128 (expBool -> or ? expBool : valoresBool .)
    ;               reduce using rule 128 (expBool -> or ? expBool : valoresBool .)
    ,               reduce using rule 128 (expBool -> or ? expBool : valoresBool .)
    ]               reduce using rule 128 (expBool -> or ? expBool : valoresBool .)
    }               reduce using rule 128 (expBool -> or ? expBool : valoresBool .)
    ?               shift and go to state 148
    OR              shift and go to state 147
    AND             shift and go to state 144
    EQEQ            shift and go to state 146
    DISTINTO        shift and go to state 145


state 291

    (127) expBool -> or ? expBool : expBool .

    :               reduce using rule 127 (expBool -> or ? expBool : expBool .)
    )               reduce using rule 127 (expBool -> or ? expBool : expBool .)
    ;               reduce using rule 127 (expBool -> or ? expBool : expBool .)
    ,               reduce using rule 127 (expBool -> or ? expBool : expBool .)
    ]               reduce using rule 127 (expBool -> or ? expBool : expBool .)
    }               reduce using rule 127 (expBool -> or ? expBool : expBool .)


state 292

    (68) campos -> ID : valores , . campos
    (68) campos -> . ID : valores , campos
    (69) campos -> . valores
    (45) valores -> . eMat
    (46) valores -> . expBool
    (47) valores -> . reg
    (48) valores -> . INT
    (49) valores -> . FLOAT
    (50) valores -> . STRING
    (51) valores -> . BOOL
    (52) valores -> . varYVals
    (53) valores -> . varsOps
    (54) valores -> . vec
    (55) valores -> . ID . valoresCampos
    (56) valores -> . RES
    (87) eMat -> . eMat + p
    (88) eMat -> . eMat - p
    (89) eMat -> . valoresMat + p
    (90) eMat -> . valoresMat - p
    (91) eMat -> . eMat + valoresMat
    (92) eMat -> . eMat - valoresMat
    (93) eMat -> . valoresMat + valoresMat
    (94) eMat -> . valoresMat - valoresMat
    (95) eMat -> . p
    (127) expBool -> . or ? expBool : expBool
    (128) expBool -> . or ? expBool : valoresBool
    (129) expBool -> . or ? valoresBool : expBool
    (130) expBool -> . or ? valoresBool : valoresBool
    (131) expBool -> . valoresBool ? expBool : expBool
    (132) expBool -> . valoresBool ? valoresBool : expBool
    (133) expBool -> . valoresBool ? expBool : valoresBool
    (134) expBool -> . valoresBool ? valoresBool : valoresBool
    (135) expBool -> . or
    (67) reg -> . { campos }
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (42) vec -> . [ elem ]
    (81) valoresMat -> . INT
    (82) valoresMat -> . FLOAT
    (83) valoresMat -> . funcInt
    (84) valoresMat -> . varYVals
    (85) valoresMat -> . varsOps
    (86) valoresMat -> . STRING
    (96) p -> . p * exp
    (97) p -> . p / exp
    (98) p -> . p % exp
    (99) p -> . valoresMat * exp
    (100) p -> . valoresMat / exp
    (101) p -> . valoresMat % exp
    (102) p -> . p * valoresMat
    (103) p -> . p / valoresMat
    (104) p -> . p % valoresMat
    (105) p -> . valoresMat * valoresMat
    (106) p -> . valoresMat / valoresMat
    (107) p -> . valoresMat % valoresMat
    (108) p -> . exp
    (136) or -> . or OR and
    (137) or -> . valoresBool OR and
    (138) or -> . or OR valoresBool
    (139) or -> . valoresBool OR valoresBool
    (140) or -> . and
    (120) valoresBool -> . BOOL
    (121) valoresBool -> . funcBool
    (122) valoresBool -> . varYVals
    (123) valoresBool -> . varsOps
    (124) valoresBool -> . eMat
    (125) valoresBool -> . INT
    (126) valoresBool -> . FLOAT
    (62) vecVal -> . ID m
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (109) exp -> . exp ^ iSing
    (110) exp -> . valoresMat ^ iSing
    (111) exp -> . exp ^ valoresMat
    (112) exp -> . valoresMat ^ valoresMat
    (113) exp -> . iSing
    (141) and -> . and AND eq
    (142) and -> . valoresBool AND eq
    (143) and -> . and AND valoresBool
    (144) and -> . valoresBool AND valoresBool
    (145) and -> . eq
    (37) funcBool -> . COLINEALES ( vec , vec )
    (114) iSing -> . - paren
    (115) iSing -> . + paren
    (116) iSing -> . - valoresMat
    (117) iSing -> . + valoresMat
    (118) iSing -> . paren
    (146) eq -> . eq EQEQ parenBool
    (147) eq -> . eq DISTINTO parenBool
    (148) eq -> . valoresBool EQEQ parenBool
    (149) eq -> . valoresBool DISTINTO parenBool
    (150) eq -> . eq EQEQ valoresBool
    (151) eq -> . eq DISTINTO valoresBool
    (152) eq -> . valoresBool EQEQ valoresBool
    (153) eq -> . valoresBool DISTINTO valoresBool
    (154) eq -> . mayor
    (119) paren -> . ( eMat )
    (160) mayor -> . tCompare > tCompare
    (161) mayor -> . menor
    (155) tCompare -> . eMat
    (156) tCompare -> . varsOps
    (157) tCompare -> . varYVals
    (158) tCompare -> . INT
    (159) tCompare -> . FLOAT
    (162) menor -> . tCompare < tCompare
    (163) menor -> . not
    (164) not -> . NOT not
    (165) not -> . NOT valoresBool
    (166) not -> . parenBool
    (167) parenBool -> . ( expBool )

    ID              shift and go to state 183
    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    STRING          shift and go to state 97
    BOOL            shift and go to state 103
    RES             shift and go to state 93
    {               shift and go to state 105
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    [               shift and go to state 98
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    COLINEALES      shift and go to state 16
    -               shift and go to state 76
    +               shift and go to state 75
    (               shift and go to state 74
    NOT             shift and go to state 89

    and                            shift and go to state 65
    funcBool                       shift and go to state 66
    funcInt                        shift and go to state 67
    menor                          shift and go to state 83
    mayor                          shift and go to state 68
    valoresMat                     shift and go to state 69
    eq                             shift and go to state 70
    valoresBool                    shift and go to state 71
    eMat                           shift and go to state 94
    vecVal                         shift and go to state 9
    vec                            shift and go to state 95
    paren                          shift and go to state 79
    reg                            shift and go to state 96
    varsOps                        shift and go to state 104
    exp                            shift and go to state 87
    tCompare                       shift and go to state 78
    campos                         shift and go to state 302
    not                            shift and go to state 80
    valores                        shift and go to state 184
    parenBool                      shift and go to state 88
    p                              shift and go to state 84
    iSing                          shift and go to state 77
    varYVals                       shift and go to state 106
    or                             shift and go to state 91
    expBool                        shift and go to state 107

state 293

    (22) tercerParam -> func .

    )               reduce using rule 22 (tercerParam -> func .)


state 294

    (15) loop -> FOR ( primParam ; cosaBooleana ; tercerParam . ) bloque

    )               shift and go to state 303


state 295

    (21) tercerParam -> varAsig .

    )               reduce using rule 21 (tercerParam -> varAsig .)


state 296

    (23) tercerParam -> empty .

    )               reduce using rule 23 (tercerParam -> empty .)


state 297

    (20) tercerParam -> varsOps .

    )               reduce using rule 20 (tercerParam -> varsOps .)


state 298

    (25) else -> ELSE bloque .

    COMMENT         reduce using rule 25 (else -> ELSE bloque .)
    RETURN          reduce using rule 25 (else -> ELSE bloque .)
    IF              reduce using rule 25 (else -> ELSE bloque .)
    WHILE           reduce using rule 25 (else -> ELSE bloque .)
    DO              reduce using rule 25 (else -> ELSE bloque .)
    FOR             reduce using rule 25 (else -> ELSE bloque .)
    MENOSMENOS      reduce using rule 25 (else -> ELSE bloque .)
    MASMAS          reduce using rule 25 (else -> ELSE bloque .)
    ID              reduce using rule 25 (else -> ELSE bloque .)
    PRINT           reduce using rule 25 (else -> ELSE bloque .)
    MULTIESCALAR    reduce using rule 25 (else -> ELSE bloque .)
    LENGTH          reduce using rule 25 (else -> ELSE bloque .)
    CAPITALIZAR     reduce using rule 25 (else -> ELSE bloque .)
    COLINEALES      reduce using rule 25 (else -> ELSE bloque .)
    $end            reduce using rule 25 (else -> ELSE bloque .)
    }               reduce using rule 25 (else -> ELSE bloque .)


state 299

    (34) funcInt -> MULTIESCALAR ( vec , eMat , param . )

    )               shift and go to state 304


state 300

    (40) param -> empty .

    )               reduce using rule 40 (param -> empty .)


state 301

    (39) param -> expBool .

    )               reduce using rule 39 (param -> expBool .)


state 302

    (68) campos -> ID : valores , campos .

    }               reduce using rule 68 (campos -> ID : valores , campos .)


state 303

    (15) loop -> FOR ( primParam ; cosaBooleana ; tercerParam ) . bloque
    (27) bloque -> . linea
    (28) bloque -> . { g }
    (2) linea -> . com
    (3) linea -> . sentencia
    (4) com -> . COMMENT
    (7) sentencia -> . varsOps ;
    (8) sentencia -> . func ;
    (9) sentencia -> . varAsig ;
    (10) sentencia -> . RETURN ;
    (70) varsOps -> . MENOSMENOS varYVals
    (71) varsOps -> . MASMAS varYVals
    (72) varsOps -> . varYVals MASMAS
    (73) varsOps -> . varYVals MENOSMENOS
    (29) func -> . funcReturn
    (30) func -> . funcVoid
    (75) varAsig -> . varYVals MULEQ valoresAsig
    (76) varAsig -> . varYVals DIVEQ valoresAsig
    (77) varAsig -> . varYVals MASEQ valoresAsig
    (78) varAsig -> . varYVals MENOSEQ valoresAsig
    (79) varAsig -> . varYVals = valoresAsig
    (80) varAsig -> . ID . ID = valoresAsig
    (60) varYVals -> . ID
    (61) varYVals -> . vecVal
    (31) funcReturn -> . funcInt
    (32) funcReturn -> . funcString
    (33) funcReturn -> . funcBool
    (38) funcVoid -> . PRINT ( valores )
    (62) vecVal -> . ID m
    (34) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (35) funcInt -> . LENGTH ( vec )
    (36) funcString -> . CAPITALIZAR ( eMat )
    (37) funcBool -> . COLINEALES ( vec , vec )

    {               shift and go to state 35
    COMMENT         shift and go to state 11
    RETURN          shift and go to state 2
    MENOSMENOS      shift and go to state 17
    MASMAS          shift and go to state 30
    ID              shift and go to state 20
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 25
    LENGTH          shift and go to state 29
    CAPITALIZAR     shift and go to state 28
    COLINEALES      shift and go to state 16

    funcBool                       shift and go to state 3
    funcInt                        shift and go to state 5
    bloque                         shift and go to state 305
    vecVal                         shift and go to state 9
    sentencia                      shift and go to state 12
    funcVoid                       shift and go to state 15
    func                           shift and go to state 19
    varAsig                        shift and go to state 22
    funcString                     shift and go to state 24
    com                            shift and go to state 32
    funcReturn                     shift and go to state 27
    varsOps                        shift and go to state 14
    varYVals                       shift and go to state 26
    linea                          shift and go to state 34

state 304

    (34) funcInt -> MULTIESCALAR ( vec , eMat , param ) .

    ^               reduce using rule 34 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    *               reduce using rule 34 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    /               reduce using rule 34 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    %               reduce using rule 34 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    +               reduce using rule 34 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    -               reduce using rule 34 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    ?               reduce using rule 34 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    OR              reduce using rule 34 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    AND             reduce using rule 34 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    EQEQ            reduce using rule 34 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    DISTINTO        reduce using rule 34 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    >               reduce using rule 34 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    <               reduce using rule 34 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    )               reduce using rule 34 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    ;               reduce using rule 34 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    ,               reduce using rule 34 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    ]               reduce using rule 34 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    }               reduce using rule 34 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    :               reduce using rule 34 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)


state 305

    (15) loop -> FOR ( primParam ; cosaBooleana ; tercerParam ) bloque .

    COMMENT         reduce using rule 15 (loop -> FOR ( primParam ; cosaBooleana ; tercerParam ) bloque .)
    RETURN          reduce using rule 15 (loop -> FOR ( primParam ; cosaBooleana ; tercerParam ) bloque .)
    IF              reduce using rule 15 (loop -> FOR ( primParam ; cosaBooleana ; tercerParam ) bloque .)
    WHILE           reduce using rule 15 (loop -> FOR ( primParam ; cosaBooleana ; tercerParam ) bloque .)
    DO              reduce using rule 15 (loop -> FOR ( primParam ; cosaBooleana ; tercerParam ) bloque .)
    FOR             reduce using rule 15 (loop -> FOR ( primParam ; cosaBooleana ; tercerParam ) bloque .)
    MENOSMENOS      reduce using rule 15 (loop -> FOR ( primParam ; cosaBooleana ; tercerParam ) bloque .)
    MASMAS          reduce using rule 15 (loop -> FOR ( primParam ; cosaBooleana ; tercerParam ) bloque .)
    ID              reduce using rule 15 (loop -> FOR ( primParam ; cosaBooleana ; tercerParam ) bloque .)
    PRINT           reduce using rule 15 (loop -> FOR ( primParam ; cosaBooleana ; tercerParam ) bloque .)
    MULTIESCALAR    reduce using rule 15 (loop -> FOR ( primParam ; cosaBooleana ; tercerParam ) bloque .)
    LENGTH          reduce using rule 15 (loop -> FOR ( primParam ; cosaBooleana ; tercerParam ) bloque .)
    CAPITALIZAR     reduce using rule 15 (loop -> FOR ( primParam ; cosaBooleana ; tercerParam ) bloque .)
    COLINEALES      reduce using rule 15 (loop -> FOR ( primParam ; cosaBooleana ; tercerParam ) bloque .)
    $end            reduce using rule 15 (loop -> FOR ( primParam ; cosaBooleana ; tercerParam ) bloque .)
    }               reduce using rule 15 (loop -> FOR ( primParam ; cosaBooleana ; tercerParam ) bloque .)

