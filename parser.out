Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> g
Rule 1     g -> linea g
Rule 2     g -> empty
Rule 3     linea -> lAbierta
Rule 4     linea -> lCerrada
Rule 5     lAbierta -> IF ( cosaBooleana ) linea
Rule 6     lAbierta -> IF ( cosaBooleana ) bloqueCerrado ELSE lAbierta
Rule 7     lAbierta -> loop lAbierta
Rule 8     bloqueCerrado -> lCerrada
Rule 9     bloqueCerrado -> { g }
Rule 10    lCerrada -> sentencia
Rule 11    lCerrada -> COMMENT lCerrada
Rule 12    lCerrada -> IF ( cosaBooleana ) bloqueCerrado ELSE bloqueCerrado
Rule 13    lCerrada -> loop bloqueCerrado
Rule 14    lCerrada -> DO bloqueCerrado WHILE ( cosaBooleana ) ;
Rule 15    sentencia -> varsOps ;
Rule 16    sentencia -> func ;
Rule 17    sentencia -> varAsig ;
Rule 18    sentencia -> RETURN ;
Rule 19    sentencia -> ;
Rule 20    loop -> WHILE ( cosaBooleana )
Rule 21    loop -> FOR ( primParam ; cosaBooleana ; tercerParam )
Rule 22    cosaBooleana -> expBool
Rule 23    cosaBooleana -> valoresBool
Rule 24    primParam -> varAsig
Rule 25    primParam -> empty
Rule 26    tercerParam -> varsOps
Rule 27    tercerParam -> varAsig
Rule 28    tercerParam -> func
Rule 29    tercerParam -> empty
Rule 30    func -> funcReturn
Rule 31    func -> funcVoid
Rule 32    funcReturn -> funcInt
Rule 33    funcReturn -> funcString
Rule 34    funcReturn -> funcBool
Rule 35    funcInt -> MULTIESCALAR ( valores , valores param )
Rule 36    funcInt -> LENGTH ( valores )
Rule 37    funcString -> CAPITALIZAR ( valores )
Rule 38    funcBool -> COLINEALES ( valores , valores )
Rule 39    funcVoid -> PRINT ( valores )
Rule 40    param -> , valores
Rule 41    param -> empty
Rule 42    empty -> <empty>
Rule 43    vec -> [ elem ]
Rule 44    elem -> valores , elem
Rule 45    elem -> valores
Rule 46    valores -> eMat
Rule 47    valores -> expBool
Rule 48    valores -> funcReturn
Rule 49    valores -> reg
Rule 50    valores -> INT
Rule 51    valores -> FLOAT
Rule 52    valores -> STRING
Rule 53    valores -> BOOL
Rule 54    valores -> varYVals
Rule 55    valores -> varsOps
Rule 56    valores -> vec
Rule 57    valores -> ternario
Rule 58    valores -> ID . valoresCampos
Rule 59    valores -> RES
Rule 60    valoresCampos -> ID
Rule 61    valoresCampos -> END
Rule 62    valoresCampos -> BEGIN
Rule 63    varYVals -> ID
Rule 64    varYVals -> vecVal
Rule 65    vecVal -> ID m
Rule 66    m -> [ INT ]
Rule 67    m -> [ INT ] m
Rule 68    m -> [ varYVals ] m
Rule 69    m -> [ varYVals ]
Rule 70    reg -> { campos }
Rule 71    campos -> ID : valores , campos
Rule 72    campos -> valores
Rule 73    varsOps -> MENOSMENOS varYVals
Rule 74    varsOps -> MASMAS varYVals
Rule 75    varsOps -> varYVals MASMAS
Rule 76    varsOps -> varYVals MENOSMENOS
Rule 77    valoresAsig -> valores
Rule 78    varAsig -> varYVals MULEQ valoresAsig
Rule 79    varAsig -> varYVals DIVEQ valoresAsig
Rule 80    varAsig -> varYVals MASEQ valoresAsig
Rule 81    varAsig -> varYVals MENOSEQ valoresAsig
Rule 82    varAsig -> varYVals = valoresAsig
Rule 83    varAsig -> ID . ID = valoresAsig
Rule 84    valoresMat -> INT
Rule 85    valoresMat -> FLOAT
Rule 86    valoresMat -> funcInt
Rule 87    valoresMat -> varYVals
Rule 88    valoresMat -> varsOps
Rule 89    valoresMat -> STRING
Rule 90    eMat -> eMat + p
Rule 91    eMat -> eMat - p
Rule 92    eMat -> valoresMat + p
Rule 93    eMat -> valoresMat - p
Rule 94    eMat -> eMat + valoresMat
Rule 95    eMat -> eMat - valoresMat
Rule 96    eMat -> valoresMat + valoresMat
Rule 97    eMat -> valoresMat - valoresMat
Rule 98    eMat -> p
Rule 99    p -> p * exp
Rule 100   p -> p / exp
Rule 101   p -> p % exp
Rule 102   p -> valoresMat * exp
Rule 103   p -> valoresMat / exp
Rule 104   p -> valoresMat % exp
Rule 105   p -> p * valoresMat
Rule 106   p -> p / valoresMat
Rule 107   p -> p % valoresMat
Rule 108   p -> valoresMat * valoresMat
Rule 109   p -> valoresMat / valoresMat
Rule 110   p -> valoresMat % valoresMat
Rule 111   p -> exp
Rule 112   exp -> exp ^ iSing
Rule 113   exp -> valoresMat ^ iSing
Rule 114   exp -> exp ^ valoresMat
Rule 115   exp -> valoresMat ^ valoresMat
Rule 116   exp -> iSing
Rule 117   iSing -> - paren
Rule 118   iSing -> + paren
Rule 119   iSing -> - valoresMat
Rule 120   iSing -> + valoresMat
Rule 121   iSing -> paren
Rule 122   paren -> ( eMat )
Rule 123   valoresBool -> BOOL
Rule 124   valoresBool -> funcBool
Rule 125   valoresBool -> varYVals
Rule 126   valoresBool -> varsOps
Rule 127   ternario -> valoresBool ? valores : valores
Rule 128   ternario -> expBool ? valores : valores
Rule 129   ternario -> ( ternario )
Rule 130   expBool -> expBool OR and
Rule 131   expBool -> valoresBool OR and
Rule 132   expBool -> expBool OR valoresBool
Rule 133   expBool -> valoresBool OR valoresBool
Rule 134   expBool -> and
Rule 135   and -> and AND eq
Rule 136   and -> valoresBool AND eq
Rule 137   and -> and AND valoresBool
Rule 138   and -> valoresBool AND valoresBool
Rule 139   and -> eq
Rule 140   eq -> eq EQEQ mayor
Rule 141   eq -> eq DISTINTO mayor
Rule 142   eq -> tCompare EQEQ mayor
Rule 143   eq -> tCompare DISTINTO mayor
Rule 144   eq -> eq EQEQ tCompare
Rule 145   eq -> eq DISTINTO tCompare
Rule 146   eq -> tCompare EQEQ tCompare
Rule 147   eq -> tCompare DISTINTO tCompare
Rule 148   eq -> mayor
Rule 149   tCompare -> eMat
Rule 150   tCompare -> varsOps
Rule 151   tCompare -> varYVals
Rule 152   tCompare -> INT
Rule 153   tCompare -> FLOAT
Rule 154   mayor -> tCompare > tCompare
Rule 155   mayor -> menor
Rule 156   menor -> tCompare < tCompare
Rule 157   menor -> not
Rule 158   not -> NOT not
Rule 159   not -> NOT valoresBool
Rule 160   not -> parenBool
Rule 161   parenBool -> ( expBool )

Terminals, with rules where they appear

%                    : 101 104 107 110
(                    : 5 6 12 14 20 21 35 36 37 38 39 122 129 161
)                    : 5 6 12 14 20 21 35 36 37 38 39 122 129 161
*                    : 99 102 105 108
+                    : 90 92 94 96 118 120
,                    : 35 38 40 44 71
-                    : 91 93 95 97 117 119
.                    : 58 83
/                    : 100 103 106 109
:                    : 71 127 128
;                    : 14 15 16 17 18 19 21 21
<                    : 156
=                    : 82 83
>                    : 154
?                    : 127 128
AND                  : 135 136 137 138
BEGIN                : 62
BOOL                 : 53 123
CAPITALIZAR          : 37
COLINEALES           : 38
COMMENT              : 11
DISTINTO             : 141 143 145 147
DIVEQ                : 79
DO                   : 14
ELSE                 : 6 12
END                  : 61
EQEQ                 : 140 142 144 146
FLOAT                : 51 85 153
FOR                  : 21
ID                   : 58 60 63 65 71 83 83
IF                   : 5 6 12
INT                  : 50 66 67 84 152
LENGTH               : 36
MASEQ                : 80
MASMAS               : 74 75
MENOSEQ              : 81
MENOSMENOS           : 73 76
MULEQ                : 78
MULTIESCALAR         : 35
NOT                  : 158 159
OR                   : 130 131 132 133
PRINT                : 39
RES                  : 59
RETURN               : 18
STRING               : 52 89
WHILE                : 14 20
[                    : 43 66 67 68 69
]                    : 43 66 67 68 69
^                    : 112 113 114 115
error                : 
{                    : 9 70
}                    : 9 70

Nonterminals, with rules where they appear

and                  : 130 131 134 135 137
bloqueCerrado        : 6 12 12 13 14
campos               : 70 71
cosaBooleana         : 5 6 12 14 20 21
eMat                 : 46 90 91 94 95 122 149
elem                 : 43 44
empty                : 2 25 29 41
eq                   : 135 136 139 140 141 144 145
exp                  : 99 100 101 102 103 104 111 112 114
expBool              : 22 47 128 130 132 161
func                 : 16 28
funcBool             : 34 124
funcInt              : 32 86
funcReturn           : 30 48
funcString           : 33
funcVoid             : 31
g                    : 1 9 0
iSing                : 112 113 116
lAbierta             : 3 6 7
lCerrada             : 4 8 11
linea                : 1 5
loop                 : 7 13
m                    : 65 67 68
mayor                : 140 141 142 143 148
menor                : 155
not                  : 157 158
p                    : 90 91 92 93 98 99 100 101 105 106 107
param                : 35
paren                : 117 118 121
parenBool            : 160
primParam            : 21
reg                  : 49
sentencia            : 10
tCompare             : 142 143 144 145 146 146 147 147 154 154 156 156
tercerParam          : 21
ternario             : 57 129
valores              : 35 35 36 37 38 38 39 40 44 45 71 72 77 127 127 128 128
valoresAsig          : 78 79 80 81 82 83
valoresBool          : 23 127 131 132 133 133 136 137 138 138 159
valoresCampos        : 58
valoresMat           : 92 93 94 95 96 96 97 97 102 103 104 105 106 107 108 108 109 109 110 110 113 114 115 115 119 120
varAsig              : 17 24 27
varYVals             : 54 68 69 73 74 75 76 78 79 80 81 82 87 125 151
varsOps              : 15 26 55 88 126 150
vec                  : 56
vecVal               : 64

Parsing method: LALR

state 0

    (0) S' -> . g
    (1) g -> . linea g
    (2) g -> . empty
    (3) linea -> . lAbierta
    (4) linea -> . lCerrada
    (42) empty -> .
    (5) lAbierta -> . IF ( cosaBooleana ) linea
    (6) lAbierta -> . IF ( cosaBooleana ) bloqueCerrado ELSE lAbierta
    (7) lAbierta -> . loop lAbierta
    (10) lCerrada -> . sentencia
    (11) lCerrada -> . COMMENT lCerrada
    (12) lCerrada -> . IF ( cosaBooleana ) bloqueCerrado ELSE bloqueCerrado
    (13) lCerrada -> . loop bloqueCerrado
    (14) lCerrada -> . DO bloqueCerrado WHILE ( cosaBooleana ) ;
    (20) loop -> . WHILE ( cosaBooleana )
    (21) loop -> . FOR ( primParam ; cosaBooleana ; tercerParam )
    (15) sentencia -> . varsOps ;
    (16) sentencia -> . func ;
    (17) sentencia -> . varAsig ;
    (18) sentencia -> . RETURN ;
    (19) sentencia -> . ;
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (30) func -> . funcReturn
    (31) func -> . funcVoid
    (78) varAsig -> . varYVals MULEQ valoresAsig
    (79) varAsig -> . varYVals DIVEQ valoresAsig
    (80) varAsig -> . varYVals MASEQ valoresAsig
    (81) varAsig -> . varYVals MENOSEQ valoresAsig
    (82) varAsig -> . varYVals = valoresAsig
    (83) varAsig -> . ID . ID = valoresAsig
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (32) funcReturn -> . funcInt
    (33) funcReturn -> . funcString
    (34) funcReturn -> . funcBool
    (39) funcVoid -> . PRINT ( valores )
    (65) vecVal -> . ID m
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (37) funcString -> . CAPITALIZAR ( valores )
    (38) funcBool -> . COLINEALES ( valores , valores )

    $end            reduce using rule 42 (empty -> .)
    IF              shift and go to state 12
    COMMENT         shift and go to state 9
    DO              shift and go to state 1
    WHILE           shift and go to state 6
    FOR             shift and go to state 17
    RETURN          shift and go to state 2
    ;               shift and go to state 11
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    ID              shift and go to state 20
    PRINT           shift and go to state 7
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 4

    funcBool                       shift and go to state 3
    funcInt                        shift and go to state 5
    vecVal                         shift and go to state 8
    sentencia                      shift and go to state 10
    empty                          shift and go to state 13
    varsOps                        shift and go to state 14
    funcVoid                       shift and go to state 15
    func                           shift and go to state 19
    varAsig                        shift and go to state 21
    g                              shift and go to state 22
    funcString                     shift and go to state 23
    funcReturn                     shift and go to state 25
    lCerrada                       shift and go to state 27
    lAbierta                       shift and go to state 28
    loop                           shift and go to state 30
    varYVals                       shift and go to state 31
    linea                          shift and go to state 32

state 1

    (14) lCerrada -> DO . bloqueCerrado WHILE ( cosaBooleana ) ;
    (8) bloqueCerrado -> . lCerrada
    (9) bloqueCerrado -> . { g }
    (10) lCerrada -> . sentencia
    (11) lCerrada -> . COMMENT lCerrada
    (12) lCerrada -> . IF ( cosaBooleana ) bloqueCerrado ELSE bloqueCerrado
    (13) lCerrada -> . loop bloqueCerrado
    (14) lCerrada -> . DO bloqueCerrado WHILE ( cosaBooleana ) ;
    (15) sentencia -> . varsOps ;
    (16) sentencia -> . func ;
    (17) sentencia -> . varAsig ;
    (18) sentencia -> . RETURN ;
    (19) sentencia -> . ;
    (20) loop -> . WHILE ( cosaBooleana )
    (21) loop -> . FOR ( primParam ; cosaBooleana ; tercerParam )
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (30) func -> . funcReturn
    (31) func -> . funcVoid
    (78) varAsig -> . varYVals MULEQ valoresAsig
    (79) varAsig -> . varYVals DIVEQ valoresAsig
    (80) varAsig -> . varYVals MASEQ valoresAsig
    (81) varAsig -> . varYVals MENOSEQ valoresAsig
    (82) varAsig -> . varYVals = valoresAsig
    (83) varAsig -> . ID . ID = valoresAsig
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (32) funcReturn -> . funcInt
    (33) funcReturn -> . funcString
    (34) funcReturn -> . funcBool
    (39) funcVoid -> . PRINT ( valores )
    (65) vecVal -> . ID m
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (37) funcString -> . CAPITALIZAR ( valores )
    (38) funcBool -> . COLINEALES ( valores , valores )

    {               shift and go to state 36
    COMMENT         shift and go to state 9
    IF              shift and go to state 34
    DO              shift and go to state 1
    RETURN          shift and go to state 2
    ;               shift and go to state 11
    WHILE           shift and go to state 6
    FOR             shift and go to state 17
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    ID              shift and go to state 20
    PRINT           shift and go to state 7
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 4

    funcBool                       shift and go to state 3
    funcInt                        shift and go to state 5
    bloqueCerrado                  shift and go to state 33
    vecVal                         shift and go to state 8
    sentencia                      shift and go to state 10
    funcVoid                       shift and go to state 15
    func                           shift and go to state 19
    varAsig                        shift and go to state 21
    funcString                     shift and go to state 23
    funcReturn                     shift and go to state 25
    lCerrada                       shift and go to state 35
    varsOps                        shift and go to state 14
    varYVals                       shift and go to state 31
    loop                           shift and go to state 37

state 2

    (18) sentencia -> RETURN . ;

    ;               shift and go to state 38


state 3

    (34) funcReturn -> funcBool .

    ;               reduce using rule 34 (funcReturn -> funcBool .)
    )               reduce using rule 34 (funcReturn -> funcBool .)


state 4

    (38) funcBool -> COLINEALES . ( valores , valores )

    (               shift and go to state 39


state 5

    (32) funcReturn -> funcInt .

    ;               reduce using rule 32 (funcReturn -> funcInt .)
    )               reduce using rule 32 (funcReturn -> funcInt .)


state 6

    (20) loop -> WHILE . ( cosaBooleana )

    (               shift and go to state 40


state 7

    (39) funcVoid -> PRINT . ( valores )

    (               shift and go to state 41


state 8

    (64) varYVals -> vecVal .

    MASMAS          reduce using rule 64 (varYVals -> vecVal .)
    MENOSMENOS      reduce using rule 64 (varYVals -> vecVal .)
    ;               reduce using rule 64 (varYVals -> vecVal .)
    )               reduce using rule 64 (varYVals -> vecVal .)
    +               reduce using rule 64 (varYVals -> vecVal .)
    -               reduce using rule 64 (varYVals -> vecVal .)
    *               reduce using rule 64 (varYVals -> vecVal .)
    /               reduce using rule 64 (varYVals -> vecVal .)
    %               reduce using rule 64 (varYVals -> vecVal .)
    ^               reduce using rule 64 (varYVals -> vecVal .)
    OR              reduce using rule 64 (varYVals -> vecVal .)
    ?               reduce using rule 64 (varYVals -> vecVal .)
    AND             reduce using rule 64 (varYVals -> vecVal .)
    EQEQ            reduce using rule 64 (varYVals -> vecVal .)
    DISTINTO        reduce using rule 64 (varYVals -> vecVal .)
    >               reduce using rule 64 (varYVals -> vecVal .)
    <               reduce using rule 64 (varYVals -> vecVal .)
    ,               reduce using rule 64 (varYVals -> vecVal .)
    ]               reduce using rule 64 (varYVals -> vecVal .)
    :               reduce using rule 64 (varYVals -> vecVal .)
    }               reduce using rule 64 (varYVals -> vecVal .)
    MULEQ           reduce using rule 64 (varYVals -> vecVal .)
    DIVEQ           reduce using rule 64 (varYVals -> vecVal .)
    MASEQ           reduce using rule 64 (varYVals -> vecVal .)
    MENOSEQ         reduce using rule 64 (varYVals -> vecVal .)
    =               reduce using rule 64 (varYVals -> vecVal .)


state 9

    (11) lCerrada -> COMMENT . lCerrada
    (10) lCerrada -> . sentencia
    (11) lCerrada -> . COMMENT lCerrada
    (12) lCerrada -> . IF ( cosaBooleana ) bloqueCerrado ELSE bloqueCerrado
    (13) lCerrada -> . loop bloqueCerrado
    (14) lCerrada -> . DO bloqueCerrado WHILE ( cosaBooleana ) ;
    (15) sentencia -> . varsOps ;
    (16) sentencia -> . func ;
    (17) sentencia -> . varAsig ;
    (18) sentencia -> . RETURN ;
    (19) sentencia -> . ;
    (20) loop -> . WHILE ( cosaBooleana )
    (21) loop -> . FOR ( primParam ; cosaBooleana ; tercerParam )
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (30) func -> . funcReturn
    (31) func -> . funcVoid
    (78) varAsig -> . varYVals MULEQ valoresAsig
    (79) varAsig -> . varYVals DIVEQ valoresAsig
    (80) varAsig -> . varYVals MASEQ valoresAsig
    (81) varAsig -> . varYVals MENOSEQ valoresAsig
    (82) varAsig -> . varYVals = valoresAsig
    (83) varAsig -> . ID . ID = valoresAsig
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (32) funcReturn -> . funcInt
    (33) funcReturn -> . funcString
    (34) funcReturn -> . funcBool
    (39) funcVoid -> . PRINT ( valores )
    (65) vecVal -> . ID m
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (37) funcString -> . CAPITALIZAR ( valores )
    (38) funcBool -> . COLINEALES ( valores , valores )

    COMMENT         shift and go to state 9
    IF              shift and go to state 34
    DO              shift and go to state 1
    RETURN          shift and go to state 2
    ;               shift and go to state 11
    WHILE           shift and go to state 6
    FOR             shift and go to state 17
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    ID              shift and go to state 20
    PRINT           shift and go to state 7
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 4

    varAsig                        shift and go to state 21
    sentencia                      shift and go to state 10
    funcBool                       shift and go to state 3
    funcString                     shift and go to state 23
    funcVoid                       shift and go to state 15
    funcReturn                     shift and go to state 25
    lCerrada                       shift and go to state 42
    funcInt                        shift and go to state 5
    varsOps                        shift and go to state 14
    func                           shift and go to state 19
    varYVals                       shift and go to state 31
    vecVal                         shift and go to state 8
    loop                           shift and go to state 37

state 10

    (10) lCerrada -> sentencia .

    WHILE           reduce using rule 10 (lCerrada -> sentencia .)
    ELSE            reduce using rule 10 (lCerrada -> sentencia .)
    IF              reduce using rule 10 (lCerrada -> sentencia .)
    COMMENT         reduce using rule 10 (lCerrada -> sentencia .)
    DO              reduce using rule 10 (lCerrada -> sentencia .)
    FOR             reduce using rule 10 (lCerrada -> sentencia .)
    RETURN          reduce using rule 10 (lCerrada -> sentencia .)
    ;               reduce using rule 10 (lCerrada -> sentencia .)
    MENOSMENOS      reduce using rule 10 (lCerrada -> sentencia .)
    MASMAS          reduce using rule 10 (lCerrada -> sentencia .)
    ID              reduce using rule 10 (lCerrada -> sentencia .)
    PRINT           reduce using rule 10 (lCerrada -> sentencia .)
    MULTIESCALAR    reduce using rule 10 (lCerrada -> sentencia .)
    LENGTH          reduce using rule 10 (lCerrada -> sentencia .)
    CAPITALIZAR     reduce using rule 10 (lCerrada -> sentencia .)
    COLINEALES      reduce using rule 10 (lCerrada -> sentencia .)
    $end            reduce using rule 10 (lCerrada -> sentencia .)
    }               reduce using rule 10 (lCerrada -> sentencia .)


state 11

    (19) sentencia -> ; .

    IF              reduce using rule 19 (sentencia -> ; .)
    COMMENT         reduce using rule 19 (sentencia -> ; .)
    DO              reduce using rule 19 (sentencia -> ; .)
    WHILE           reduce using rule 19 (sentencia -> ; .)
    FOR             reduce using rule 19 (sentencia -> ; .)
    RETURN          reduce using rule 19 (sentencia -> ; .)
    ;               reduce using rule 19 (sentencia -> ; .)
    MENOSMENOS      reduce using rule 19 (sentencia -> ; .)
    MASMAS          reduce using rule 19 (sentencia -> ; .)
    ID              reduce using rule 19 (sentencia -> ; .)
    PRINT           reduce using rule 19 (sentencia -> ; .)
    MULTIESCALAR    reduce using rule 19 (sentencia -> ; .)
    LENGTH          reduce using rule 19 (sentencia -> ; .)
    CAPITALIZAR     reduce using rule 19 (sentencia -> ; .)
    COLINEALES      reduce using rule 19 (sentencia -> ; .)
    $end            reduce using rule 19 (sentencia -> ; .)
    }               reduce using rule 19 (sentencia -> ; .)
    ELSE            reduce using rule 19 (sentencia -> ; .)


state 12

    (5) lAbierta -> IF . ( cosaBooleana ) linea
    (6) lAbierta -> IF . ( cosaBooleana ) bloqueCerrado ELSE lAbierta
    (12) lCerrada -> IF . ( cosaBooleana ) bloqueCerrado ELSE bloqueCerrado

    (               shift and go to state 43


state 13

    (2) g -> empty .

    }               reduce using rule 2 (g -> empty .)
    $end            reduce using rule 2 (g -> empty .)


state 14

    (15) sentencia -> varsOps . ;

    ;               shift and go to state 44


state 15

    (31) func -> funcVoid .

    ;               reduce using rule 31 (func -> funcVoid .)
    )               reduce using rule 31 (func -> funcVoid .)


state 16

    (73) varsOps -> MENOSMENOS . varYVals
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (65) vecVal -> . ID m

    ID              shift and go to state 46

    varYVals                       shift and go to state 45
    vecVal                         shift and go to state 8

state 17

    (21) loop -> FOR . ( primParam ; cosaBooleana ; tercerParam )

    (               shift and go to state 47


state 18

    (36) funcInt -> LENGTH . ( valores )

    (               shift and go to state 48


state 19

    (16) sentencia -> func . ;

    ;               shift and go to state 49


state 20

    (83) varAsig -> ID . . ID = valoresAsig
    (63) varYVals -> ID .
    (65) vecVal -> ID . m
    (66) m -> . [ INT ]
    (67) m -> . [ INT ] m
    (68) m -> . [ varYVals ] m
    (69) m -> . [ varYVals ]

    .               shift and go to state 51
    MASMAS          reduce using rule 63 (varYVals -> ID .)
    MENOSMENOS      reduce using rule 63 (varYVals -> ID .)
    MULEQ           reduce using rule 63 (varYVals -> ID .)
    DIVEQ           reduce using rule 63 (varYVals -> ID .)
    MASEQ           reduce using rule 63 (varYVals -> ID .)
    MENOSEQ         reduce using rule 63 (varYVals -> ID .)
    =               reduce using rule 63 (varYVals -> ID .)
    [               shift and go to state 52

    m                              shift and go to state 50

state 21

    (17) sentencia -> varAsig . ;

    ;               shift and go to state 53


state 22

    (0) S' -> g .



state 23

    (33) funcReturn -> funcString .

    ;               reduce using rule 33 (funcReturn -> funcString .)
    ,               reduce using rule 33 (funcReturn -> funcString .)
    )               reduce using rule 33 (funcReturn -> funcString .)
    :               reduce using rule 33 (funcReturn -> funcString .)
    ]               reduce using rule 33 (funcReturn -> funcString .)
    }               reduce using rule 33 (funcReturn -> funcString .)


state 24

    (35) funcInt -> MULTIESCALAR . ( valores , valores param )

    (               shift and go to state 54


state 25

    (30) func -> funcReturn .

    ;               reduce using rule 30 (func -> funcReturn .)
    )               reduce using rule 30 (func -> funcReturn .)


state 26

    (37) funcString -> CAPITALIZAR . ( valores )

    (               shift and go to state 55


state 27

    (4) linea -> lCerrada .

    IF              reduce using rule 4 (linea -> lCerrada .)
    COMMENT         reduce using rule 4 (linea -> lCerrada .)
    DO              reduce using rule 4 (linea -> lCerrada .)
    WHILE           reduce using rule 4 (linea -> lCerrada .)
    FOR             reduce using rule 4 (linea -> lCerrada .)
    RETURN          reduce using rule 4 (linea -> lCerrada .)
    ;               reduce using rule 4 (linea -> lCerrada .)
    MENOSMENOS      reduce using rule 4 (linea -> lCerrada .)
    MASMAS          reduce using rule 4 (linea -> lCerrada .)
    ID              reduce using rule 4 (linea -> lCerrada .)
    PRINT           reduce using rule 4 (linea -> lCerrada .)
    MULTIESCALAR    reduce using rule 4 (linea -> lCerrada .)
    LENGTH          reduce using rule 4 (linea -> lCerrada .)
    CAPITALIZAR     reduce using rule 4 (linea -> lCerrada .)
    COLINEALES      reduce using rule 4 (linea -> lCerrada .)
    $end            reduce using rule 4 (linea -> lCerrada .)
    }               reduce using rule 4 (linea -> lCerrada .)


state 28

    (3) linea -> lAbierta .

    IF              reduce using rule 3 (linea -> lAbierta .)
    COMMENT         reduce using rule 3 (linea -> lAbierta .)
    DO              reduce using rule 3 (linea -> lAbierta .)
    WHILE           reduce using rule 3 (linea -> lAbierta .)
    FOR             reduce using rule 3 (linea -> lAbierta .)
    RETURN          reduce using rule 3 (linea -> lAbierta .)
    ;               reduce using rule 3 (linea -> lAbierta .)
    MENOSMENOS      reduce using rule 3 (linea -> lAbierta .)
    MASMAS          reduce using rule 3 (linea -> lAbierta .)
    ID              reduce using rule 3 (linea -> lAbierta .)
    PRINT           reduce using rule 3 (linea -> lAbierta .)
    MULTIESCALAR    reduce using rule 3 (linea -> lAbierta .)
    LENGTH          reduce using rule 3 (linea -> lAbierta .)
    CAPITALIZAR     reduce using rule 3 (linea -> lAbierta .)
    COLINEALES      reduce using rule 3 (linea -> lAbierta .)
    $end            reduce using rule 3 (linea -> lAbierta .)
    }               reduce using rule 3 (linea -> lAbierta .)


state 29

    (74) varsOps -> MASMAS . varYVals
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (65) vecVal -> . ID m

    ID              shift and go to state 46

    varYVals                       shift and go to state 56
    vecVal                         shift and go to state 8

state 30

    (7) lAbierta -> loop . lAbierta
    (13) lCerrada -> loop . bloqueCerrado
    (5) lAbierta -> . IF ( cosaBooleana ) linea
    (6) lAbierta -> . IF ( cosaBooleana ) bloqueCerrado ELSE lAbierta
    (7) lAbierta -> . loop lAbierta
    (8) bloqueCerrado -> . lCerrada
    (9) bloqueCerrado -> . { g }
    (20) loop -> . WHILE ( cosaBooleana )
    (21) loop -> . FOR ( primParam ; cosaBooleana ; tercerParam )
    (10) lCerrada -> . sentencia
    (11) lCerrada -> . COMMENT lCerrada
    (12) lCerrada -> . IF ( cosaBooleana ) bloqueCerrado ELSE bloqueCerrado
    (13) lCerrada -> . loop bloqueCerrado
    (14) lCerrada -> . DO bloqueCerrado WHILE ( cosaBooleana ) ;
    (15) sentencia -> . varsOps ;
    (16) sentencia -> . func ;
    (17) sentencia -> . varAsig ;
    (18) sentencia -> . RETURN ;
    (19) sentencia -> . ;
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (30) func -> . funcReturn
    (31) func -> . funcVoid
    (78) varAsig -> . varYVals MULEQ valoresAsig
    (79) varAsig -> . varYVals DIVEQ valoresAsig
    (80) varAsig -> . varYVals MASEQ valoresAsig
    (81) varAsig -> . varYVals MENOSEQ valoresAsig
    (82) varAsig -> . varYVals = valoresAsig
    (83) varAsig -> . ID . ID = valoresAsig
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (32) funcReturn -> . funcInt
    (33) funcReturn -> . funcString
    (34) funcReturn -> . funcBool
    (39) funcVoid -> . PRINT ( valores )
    (65) vecVal -> . ID m
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (37) funcString -> . CAPITALIZAR ( valores )
    (38) funcBool -> . COLINEALES ( valores , valores )

    IF              shift and go to state 12
    {               shift and go to state 36
    WHILE           shift and go to state 6
    FOR             shift and go to state 17
    COMMENT         shift and go to state 9
    DO              shift and go to state 1
    RETURN          shift and go to state 2
    ;               shift and go to state 11
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    ID              shift and go to state 20
    PRINT           shift and go to state 7
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 4

    funcBool                       shift and go to state 3
    funcInt                        shift and go to state 5
    bloqueCerrado                  shift and go to state 57
    vecVal                         shift and go to state 8
    sentencia                      shift and go to state 10
    funcVoid                       shift and go to state 15
    func                           shift and go to state 19
    varAsig                        shift and go to state 21
    funcString                     shift and go to state 23
    funcReturn                     shift and go to state 25
    lCerrada                       shift and go to state 35
    lAbierta                       shift and go to state 58
    varsOps                        shift and go to state 14
    varYVals                       shift and go to state 31
    loop                           shift and go to state 30

state 31

    (75) varsOps -> varYVals . MASMAS
    (76) varsOps -> varYVals . MENOSMENOS
    (78) varAsig -> varYVals . MULEQ valoresAsig
    (79) varAsig -> varYVals . DIVEQ valoresAsig
    (80) varAsig -> varYVals . MASEQ valoresAsig
    (81) varAsig -> varYVals . MENOSEQ valoresAsig
    (82) varAsig -> varYVals . = valoresAsig

    MASMAS          shift and go to state 63
    MENOSMENOS      shift and go to state 60
    MULEQ           shift and go to state 64
    DIVEQ           shift and go to state 65
    MASEQ           shift and go to state 61
    MENOSEQ         shift and go to state 59
    =               shift and go to state 62


state 32

    (1) g -> linea . g
    (1) g -> . linea g
    (2) g -> . empty
    (3) linea -> . lAbierta
    (4) linea -> . lCerrada
    (42) empty -> .
    (5) lAbierta -> . IF ( cosaBooleana ) linea
    (6) lAbierta -> . IF ( cosaBooleana ) bloqueCerrado ELSE lAbierta
    (7) lAbierta -> . loop lAbierta
    (10) lCerrada -> . sentencia
    (11) lCerrada -> . COMMENT lCerrada
    (12) lCerrada -> . IF ( cosaBooleana ) bloqueCerrado ELSE bloqueCerrado
    (13) lCerrada -> . loop bloqueCerrado
    (14) lCerrada -> . DO bloqueCerrado WHILE ( cosaBooleana ) ;
    (20) loop -> . WHILE ( cosaBooleana )
    (21) loop -> . FOR ( primParam ; cosaBooleana ; tercerParam )
    (15) sentencia -> . varsOps ;
    (16) sentencia -> . func ;
    (17) sentencia -> . varAsig ;
    (18) sentencia -> . RETURN ;
    (19) sentencia -> . ;
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (30) func -> . funcReturn
    (31) func -> . funcVoid
    (78) varAsig -> . varYVals MULEQ valoresAsig
    (79) varAsig -> . varYVals DIVEQ valoresAsig
    (80) varAsig -> . varYVals MASEQ valoresAsig
    (81) varAsig -> . varYVals MENOSEQ valoresAsig
    (82) varAsig -> . varYVals = valoresAsig
    (83) varAsig -> . ID . ID = valoresAsig
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (32) funcReturn -> . funcInt
    (33) funcReturn -> . funcString
    (34) funcReturn -> . funcBool
    (39) funcVoid -> . PRINT ( valores )
    (65) vecVal -> . ID m
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (37) funcString -> . CAPITALIZAR ( valores )
    (38) funcBool -> . COLINEALES ( valores , valores )

    $end            reduce using rule 42 (empty -> .)
    }               reduce using rule 42 (empty -> .)
    IF              shift and go to state 12
    COMMENT         shift and go to state 9
    DO              shift and go to state 1
    WHILE           shift and go to state 6
    FOR             shift and go to state 17
    RETURN          shift and go to state 2
    ;               shift and go to state 11
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    ID              shift and go to state 20
    PRINT           shift and go to state 7
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 4

    funcBool                       shift and go to state 3
    funcInt                        shift and go to state 5
    vecVal                         shift and go to state 8
    sentencia                      shift and go to state 10
    empty                          shift and go to state 13
    varsOps                        shift and go to state 14
    funcVoid                       shift and go to state 15
    func                           shift and go to state 19
    varAsig                        shift and go to state 21
    g                              shift and go to state 66
    funcString                     shift and go to state 23
    funcReturn                     shift and go to state 25
    lCerrada                       shift and go to state 27
    lAbierta                       shift and go to state 28
    loop                           shift and go to state 30
    varYVals                       shift and go to state 31
    linea                          shift and go to state 32

state 33

    (14) lCerrada -> DO bloqueCerrado . WHILE ( cosaBooleana ) ;

    WHILE           shift and go to state 67


state 34

    (12) lCerrada -> IF . ( cosaBooleana ) bloqueCerrado ELSE bloqueCerrado

    (               shift and go to state 68


state 35

    (8) bloqueCerrado -> lCerrada .

    IF              reduce using rule 8 (bloqueCerrado -> lCerrada .)
    COMMENT         reduce using rule 8 (bloqueCerrado -> lCerrada .)
    DO              reduce using rule 8 (bloqueCerrado -> lCerrada .)
    WHILE           reduce using rule 8 (bloqueCerrado -> lCerrada .)
    FOR             reduce using rule 8 (bloqueCerrado -> lCerrada .)
    RETURN          reduce using rule 8 (bloqueCerrado -> lCerrada .)
    ;               reduce using rule 8 (bloqueCerrado -> lCerrada .)
    MENOSMENOS      reduce using rule 8 (bloqueCerrado -> lCerrada .)
    MASMAS          reduce using rule 8 (bloqueCerrado -> lCerrada .)
    ID              reduce using rule 8 (bloqueCerrado -> lCerrada .)
    PRINT           reduce using rule 8 (bloqueCerrado -> lCerrada .)
    MULTIESCALAR    reduce using rule 8 (bloqueCerrado -> lCerrada .)
    LENGTH          reduce using rule 8 (bloqueCerrado -> lCerrada .)
    CAPITALIZAR     reduce using rule 8 (bloqueCerrado -> lCerrada .)
    COLINEALES      reduce using rule 8 (bloqueCerrado -> lCerrada .)
    $end            reduce using rule 8 (bloqueCerrado -> lCerrada .)
    }               reduce using rule 8 (bloqueCerrado -> lCerrada .)
    ELSE            reduce using rule 8 (bloqueCerrado -> lCerrada .)


state 36

    (9) bloqueCerrado -> { . g }
    (1) g -> . linea g
    (2) g -> . empty
    (3) linea -> . lAbierta
    (4) linea -> . lCerrada
    (42) empty -> .
    (5) lAbierta -> . IF ( cosaBooleana ) linea
    (6) lAbierta -> . IF ( cosaBooleana ) bloqueCerrado ELSE lAbierta
    (7) lAbierta -> . loop lAbierta
    (10) lCerrada -> . sentencia
    (11) lCerrada -> . COMMENT lCerrada
    (12) lCerrada -> . IF ( cosaBooleana ) bloqueCerrado ELSE bloqueCerrado
    (13) lCerrada -> . loop bloqueCerrado
    (14) lCerrada -> . DO bloqueCerrado WHILE ( cosaBooleana ) ;
    (20) loop -> . WHILE ( cosaBooleana )
    (21) loop -> . FOR ( primParam ; cosaBooleana ; tercerParam )
    (15) sentencia -> . varsOps ;
    (16) sentencia -> . func ;
    (17) sentencia -> . varAsig ;
    (18) sentencia -> . RETURN ;
    (19) sentencia -> . ;
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (30) func -> . funcReturn
    (31) func -> . funcVoid
    (78) varAsig -> . varYVals MULEQ valoresAsig
    (79) varAsig -> . varYVals DIVEQ valoresAsig
    (80) varAsig -> . varYVals MASEQ valoresAsig
    (81) varAsig -> . varYVals MENOSEQ valoresAsig
    (82) varAsig -> . varYVals = valoresAsig
    (83) varAsig -> . ID . ID = valoresAsig
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (32) funcReturn -> . funcInt
    (33) funcReturn -> . funcString
    (34) funcReturn -> . funcBool
    (39) funcVoid -> . PRINT ( valores )
    (65) vecVal -> . ID m
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (37) funcString -> . CAPITALIZAR ( valores )
    (38) funcBool -> . COLINEALES ( valores , valores )

    }               reduce using rule 42 (empty -> .)
    IF              shift and go to state 12
    COMMENT         shift and go to state 9
    DO              shift and go to state 1
    WHILE           shift and go to state 6
    FOR             shift and go to state 17
    RETURN          shift and go to state 2
    ;               shift and go to state 11
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    ID              shift and go to state 20
    PRINT           shift and go to state 7
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 4

    funcBool                       shift and go to state 3
    funcInt                        shift and go to state 5
    vecVal                         shift and go to state 8
    sentencia                      shift and go to state 10
    empty                          shift and go to state 13
    varsOps                        shift and go to state 14
    funcVoid                       shift and go to state 15
    func                           shift and go to state 19
    varAsig                        shift and go to state 21
    g                              shift and go to state 69
    funcString                     shift and go to state 23
    funcReturn                     shift and go to state 25
    lCerrada                       shift and go to state 27
    lAbierta                       shift and go to state 28
    loop                           shift and go to state 30
    varYVals                       shift and go to state 31
    linea                          shift and go to state 32

state 37

    (13) lCerrada -> loop . bloqueCerrado
    (8) bloqueCerrado -> . lCerrada
    (9) bloqueCerrado -> . { g }
    (10) lCerrada -> . sentencia
    (11) lCerrada -> . COMMENT lCerrada
    (12) lCerrada -> . IF ( cosaBooleana ) bloqueCerrado ELSE bloqueCerrado
    (13) lCerrada -> . loop bloqueCerrado
    (14) lCerrada -> . DO bloqueCerrado WHILE ( cosaBooleana ) ;
    (15) sentencia -> . varsOps ;
    (16) sentencia -> . func ;
    (17) sentencia -> . varAsig ;
    (18) sentencia -> . RETURN ;
    (19) sentencia -> . ;
    (20) loop -> . WHILE ( cosaBooleana )
    (21) loop -> . FOR ( primParam ; cosaBooleana ; tercerParam )
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (30) func -> . funcReturn
    (31) func -> . funcVoid
    (78) varAsig -> . varYVals MULEQ valoresAsig
    (79) varAsig -> . varYVals DIVEQ valoresAsig
    (80) varAsig -> . varYVals MASEQ valoresAsig
    (81) varAsig -> . varYVals MENOSEQ valoresAsig
    (82) varAsig -> . varYVals = valoresAsig
    (83) varAsig -> . ID . ID = valoresAsig
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (32) funcReturn -> . funcInt
    (33) funcReturn -> . funcString
    (34) funcReturn -> . funcBool
    (39) funcVoid -> . PRINT ( valores )
    (65) vecVal -> . ID m
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (37) funcString -> . CAPITALIZAR ( valores )
    (38) funcBool -> . COLINEALES ( valores , valores )

    {               shift and go to state 36
    COMMENT         shift and go to state 9
    IF              shift and go to state 34
    DO              shift and go to state 1
    RETURN          shift and go to state 2
    ;               shift and go to state 11
    WHILE           shift and go to state 6
    FOR             shift and go to state 17
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    ID              shift and go to state 20
    PRINT           shift and go to state 7
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 4

    funcBool                       shift and go to state 3
    funcInt                        shift and go to state 5
    bloqueCerrado                  shift and go to state 57
    vecVal                         shift and go to state 8
    sentencia                      shift and go to state 10
    funcVoid                       shift and go to state 15
    func                           shift and go to state 19
    varAsig                        shift and go to state 21
    funcString                     shift and go to state 23
    funcReturn                     shift and go to state 25
    lCerrada                       shift and go to state 35
    varsOps                        shift and go to state 14
    varYVals                       shift and go to state 31
    loop                           shift and go to state 37

state 38

    (18) sentencia -> RETURN ; .

    IF              reduce using rule 18 (sentencia -> RETURN ; .)
    COMMENT         reduce using rule 18 (sentencia -> RETURN ; .)
    DO              reduce using rule 18 (sentencia -> RETURN ; .)
    WHILE           reduce using rule 18 (sentencia -> RETURN ; .)
    FOR             reduce using rule 18 (sentencia -> RETURN ; .)
    RETURN          reduce using rule 18 (sentencia -> RETURN ; .)
    ;               reduce using rule 18 (sentencia -> RETURN ; .)
    MENOSMENOS      reduce using rule 18 (sentencia -> RETURN ; .)
    MASMAS          reduce using rule 18 (sentencia -> RETURN ; .)
    ID              reduce using rule 18 (sentencia -> RETURN ; .)
    PRINT           reduce using rule 18 (sentencia -> RETURN ; .)
    MULTIESCALAR    reduce using rule 18 (sentencia -> RETURN ; .)
    LENGTH          reduce using rule 18 (sentencia -> RETURN ; .)
    CAPITALIZAR     reduce using rule 18 (sentencia -> RETURN ; .)
    COLINEALES      reduce using rule 18 (sentencia -> RETURN ; .)
    $end            reduce using rule 18 (sentencia -> RETURN ; .)
    }               reduce using rule 18 (sentencia -> RETURN ; .)
    ELSE            reduce using rule 18 (sentencia -> RETURN ; .)


state 39

    (38) funcBool -> COLINEALES ( . valores , valores )
    (46) valores -> . eMat
    (47) valores -> . expBool
    (48) valores -> . funcReturn
    (49) valores -> . reg
    (50) valores -> . INT
    (51) valores -> . FLOAT
    (52) valores -> . STRING
    (53) valores -> . BOOL
    (54) valores -> . varYVals
    (55) valores -> . varsOps
    (56) valores -> . vec
    (57) valores -> . ternario
    (58) valores -> . ID . valoresCampos
    (59) valores -> . RES
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (130) expBool -> . expBool OR and
    (131) expBool -> . valoresBool OR and
    (132) expBool -> . expBool OR valoresBool
    (133) expBool -> . valoresBool OR valoresBool
    (134) expBool -> . and
    (32) funcReturn -> . funcInt
    (33) funcReturn -> . funcString
    (34) funcReturn -> . funcBool
    (70) reg -> . { campos }
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (43) vec -> . [ elem ]
    (127) ternario -> . valoresBool ? valores : valores
    (128) ternario -> . expBool ? valores : valores
    (129) ternario -> . ( ternario )
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (123) valoresBool -> . BOOL
    (124) valoresBool -> . funcBool
    (125) valoresBool -> . varYVals
    (126) valoresBool -> . varsOps
    (135) and -> . and AND eq
    (136) and -> . valoresBool AND eq
    (137) and -> . and AND valoresBool
    (138) and -> . valoresBool AND valoresBool
    (139) and -> . eq
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (37) funcString -> . CAPITALIZAR ( valores )
    (38) funcBool -> . COLINEALES ( valores , valores )
    (65) vecVal -> . ID m
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (140) eq -> . eq EQEQ mayor
    (141) eq -> . eq DISTINTO mayor
    (142) eq -> . tCompare EQEQ mayor
    (143) eq -> . tCompare DISTINTO mayor
    (144) eq -> . eq EQEQ tCompare
    (145) eq -> . eq DISTINTO tCompare
    (146) eq -> . tCompare EQEQ tCompare
    (147) eq -> . tCompare DISTINTO tCompare
    (148) eq -> . mayor
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (122) paren -> . ( eMat )
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (161) parenBool -> . ( expBool )

    INT             shift and go to state 92
    FLOAT           shift and go to state 94
    STRING          shift and go to state 87
    BOOL            shift and go to state 97
    ID              shift and go to state 91
    RES             shift and go to state 73
    {               shift and go to state 102
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    [               shift and go to state 90
    (               shift and go to state 81
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 4
    -               shift and go to state 83
    +               shift and go to state 82
    NOT             shift and go to state 100

    and                            shift and go to state 70
    ternario                       shift and go to state 71
    funcBool                       shift and go to state 72
    funcInt                        shift and go to state 74
    menor                          shift and go to state 76
    mayor                          shift and go to state 103
    valoresMat                     shift and go to state 77
    eq                             shift and go to state 78
    valoresBool                    shift and go to state 79
    eMat                           shift and go to state 80
    vecVal                         shift and go to state 8
    vec                            shift and go to state 84
    paren                          shift and go to state 89
    reg                            shift and go to state 85
    iSing                          shift and go to state 86
    exp                            shift and go to state 101
    tCompare                       shift and go to state 88
    not                            shift and go to state 75
    funcString                     shift and go to state 23
    funcReturn                     shift and go to state 93
    valores                        shift and go to state 95
    p                              shift and go to state 96
    varsOps                        shift and go to state 98
    varYVals                       shift and go to state 104
    parenBool                      shift and go to state 99
    expBool                        shift and go to state 105

state 40

    (20) loop -> WHILE ( . cosaBooleana )
    (22) cosaBooleana -> . expBool
    (23) cosaBooleana -> . valoresBool
    (130) expBool -> . expBool OR and
    (131) expBool -> . valoresBool OR and
    (132) expBool -> . expBool OR valoresBool
    (133) expBool -> . valoresBool OR valoresBool
    (134) expBool -> . and
    (123) valoresBool -> . BOOL
    (124) valoresBool -> . funcBool
    (125) valoresBool -> . varYVals
    (126) valoresBool -> . varsOps
    (135) and -> . and AND eq
    (136) and -> . valoresBool AND eq
    (137) and -> . and AND valoresBool
    (138) and -> . valoresBool AND valoresBool
    (139) and -> . eq
    (38) funcBool -> . COLINEALES ( valores , valores )
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (140) eq -> . eq EQEQ mayor
    (141) eq -> . eq DISTINTO mayor
    (142) eq -> . tCompare EQEQ mayor
    (143) eq -> . tCompare DISTINTO mayor
    (144) eq -> . eq EQEQ tCompare
    (145) eq -> . eq DISTINTO tCompare
    (146) eq -> . tCompare EQEQ tCompare
    (147) eq -> . tCompare DISTINTO tCompare
    (148) eq -> . mayor
    (65) vecVal -> . ID m
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (161) parenBool -> . ( expBool )
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (122) paren -> . ( eMat )

    BOOL            shift and go to state 116
    COLINEALES      shift and go to state 4
    ID              shift and go to state 46
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    INT             shift and go to state 114
    FLOAT           shift and go to state 115
    STRING          shift and go to state 108
    NOT             shift and go to state 100
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    (               shift and go to state 110
    -               shift and go to state 83
    +               shift and go to state 82

    and                            shift and go to state 70
    funcBool                       shift and go to state 106
    funcInt                        shift and go to state 107
    menor                          shift and go to state 76
    valoresMat                     shift and go to state 77
    eq                             shift and go to state 78
    vecVal                         shift and go to state 8
    valoresBool                    shift and go to state 111
    eMat                           shift and go to state 109
    mayor                          shift and go to state 103
    paren                          shift and go to state 89
    iSing                          shift and go to state 86
    tCompare                       shift and go to state 88
    not                            shift and go to state 75
    cosaBooleana                   shift and go to state 113
    p                              shift and go to state 96
    varsOps                        shift and go to state 117
    exp                            shift and go to state 101
    varYVals                       shift and go to state 118
    parenBool                      shift and go to state 99
    expBool                        shift and go to state 112

state 41

    (39) funcVoid -> PRINT ( . valores )
    (46) valores -> . eMat
    (47) valores -> . expBool
    (48) valores -> . funcReturn
    (49) valores -> . reg
    (50) valores -> . INT
    (51) valores -> . FLOAT
    (52) valores -> . STRING
    (53) valores -> . BOOL
    (54) valores -> . varYVals
    (55) valores -> . varsOps
    (56) valores -> . vec
    (57) valores -> . ternario
    (58) valores -> . ID . valoresCampos
    (59) valores -> . RES
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (130) expBool -> . expBool OR and
    (131) expBool -> . valoresBool OR and
    (132) expBool -> . expBool OR valoresBool
    (133) expBool -> . valoresBool OR valoresBool
    (134) expBool -> . and
    (32) funcReturn -> . funcInt
    (33) funcReturn -> . funcString
    (34) funcReturn -> . funcBool
    (70) reg -> . { campos }
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (43) vec -> . [ elem ]
    (127) ternario -> . valoresBool ? valores : valores
    (128) ternario -> . expBool ? valores : valores
    (129) ternario -> . ( ternario )
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (123) valoresBool -> . BOOL
    (124) valoresBool -> . funcBool
    (125) valoresBool -> . varYVals
    (126) valoresBool -> . varsOps
    (135) and -> . and AND eq
    (136) and -> . valoresBool AND eq
    (137) and -> . and AND valoresBool
    (138) and -> . valoresBool AND valoresBool
    (139) and -> . eq
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (37) funcString -> . CAPITALIZAR ( valores )
    (38) funcBool -> . COLINEALES ( valores , valores )
    (65) vecVal -> . ID m
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (140) eq -> . eq EQEQ mayor
    (141) eq -> . eq DISTINTO mayor
    (142) eq -> . tCompare EQEQ mayor
    (143) eq -> . tCompare DISTINTO mayor
    (144) eq -> . eq EQEQ tCompare
    (145) eq -> . eq DISTINTO tCompare
    (146) eq -> . tCompare EQEQ tCompare
    (147) eq -> . tCompare DISTINTO tCompare
    (148) eq -> . mayor
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (122) paren -> . ( eMat )
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (161) parenBool -> . ( expBool )

    INT             shift and go to state 92
    FLOAT           shift and go to state 94
    STRING          shift and go to state 87
    BOOL            shift and go to state 97
    ID              shift and go to state 91
    RES             shift and go to state 73
    {               shift and go to state 102
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    [               shift and go to state 90
    (               shift and go to state 81
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 4
    -               shift and go to state 83
    +               shift and go to state 82
    NOT             shift and go to state 100

    and                            shift and go to state 70
    ternario                       shift and go to state 71
    funcBool                       shift and go to state 72
    funcInt                        shift and go to state 74
    menor                          shift and go to state 76
    mayor                          shift and go to state 103
    valoresMat                     shift and go to state 77
    eq                             shift and go to state 78
    valoresBool                    shift and go to state 79
    eMat                           shift and go to state 80
    vecVal                         shift and go to state 8
    vec                            shift and go to state 84
    paren                          shift and go to state 89
    reg                            shift and go to state 85
    iSing                          shift and go to state 86
    exp                            shift and go to state 101
    tCompare                       shift and go to state 88
    not                            shift and go to state 75
    funcString                     shift and go to state 23
    funcReturn                     shift and go to state 93
    valores                        shift and go to state 119
    p                              shift and go to state 96
    varsOps                        shift and go to state 98
    varYVals                       shift and go to state 104
    parenBool                      shift and go to state 99
    expBool                        shift and go to state 105

state 42

    (11) lCerrada -> COMMENT lCerrada .

    WHILE           reduce using rule 11 (lCerrada -> COMMENT lCerrada .)
    ELSE            reduce using rule 11 (lCerrada -> COMMENT lCerrada .)
    IF              reduce using rule 11 (lCerrada -> COMMENT lCerrada .)
    COMMENT         reduce using rule 11 (lCerrada -> COMMENT lCerrada .)
    DO              reduce using rule 11 (lCerrada -> COMMENT lCerrada .)
    FOR             reduce using rule 11 (lCerrada -> COMMENT lCerrada .)
    RETURN          reduce using rule 11 (lCerrada -> COMMENT lCerrada .)
    ;               reduce using rule 11 (lCerrada -> COMMENT lCerrada .)
    MENOSMENOS      reduce using rule 11 (lCerrada -> COMMENT lCerrada .)
    MASMAS          reduce using rule 11 (lCerrada -> COMMENT lCerrada .)
    ID              reduce using rule 11 (lCerrada -> COMMENT lCerrada .)
    PRINT           reduce using rule 11 (lCerrada -> COMMENT lCerrada .)
    MULTIESCALAR    reduce using rule 11 (lCerrada -> COMMENT lCerrada .)
    LENGTH          reduce using rule 11 (lCerrada -> COMMENT lCerrada .)
    CAPITALIZAR     reduce using rule 11 (lCerrada -> COMMENT lCerrada .)
    COLINEALES      reduce using rule 11 (lCerrada -> COMMENT lCerrada .)
    $end            reduce using rule 11 (lCerrada -> COMMENT lCerrada .)
    }               reduce using rule 11 (lCerrada -> COMMENT lCerrada .)


state 43

    (5) lAbierta -> IF ( . cosaBooleana ) linea
    (6) lAbierta -> IF ( . cosaBooleana ) bloqueCerrado ELSE lAbierta
    (12) lCerrada -> IF ( . cosaBooleana ) bloqueCerrado ELSE bloqueCerrado
    (22) cosaBooleana -> . expBool
    (23) cosaBooleana -> . valoresBool
    (130) expBool -> . expBool OR and
    (131) expBool -> . valoresBool OR and
    (132) expBool -> . expBool OR valoresBool
    (133) expBool -> . valoresBool OR valoresBool
    (134) expBool -> . and
    (123) valoresBool -> . BOOL
    (124) valoresBool -> . funcBool
    (125) valoresBool -> . varYVals
    (126) valoresBool -> . varsOps
    (135) and -> . and AND eq
    (136) and -> . valoresBool AND eq
    (137) and -> . and AND valoresBool
    (138) and -> . valoresBool AND valoresBool
    (139) and -> . eq
    (38) funcBool -> . COLINEALES ( valores , valores )
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (140) eq -> . eq EQEQ mayor
    (141) eq -> . eq DISTINTO mayor
    (142) eq -> . tCompare EQEQ mayor
    (143) eq -> . tCompare DISTINTO mayor
    (144) eq -> . eq EQEQ tCompare
    (145) eq -> . eq DISTINTO tCompare
    (146) eq -> . tCompare EQEQ tCompare
    (147) eq -> . tCompare DISTINTO tCompare
    (148) eq -> . mayor
    (65) vecVal -> . ID m
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (161) parenBool -> . ( expBool )
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (122) paren -> . ( eMat )

    BOOL            shift and go to state 116
    COLINEALES      shift and go to state 4
    ID              shift and go to state 46
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    INT             shift and go to state 114
    FLOAT           shift and go to state 115
    STRING          shift and go to state 108
    NOT             shift and go to state 100
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    (               shift and go to state 110
    -               shift and go to state 83
    +               shift and go to state 82

    and                            shift and go to state 70
    funcBool                       shift and go to state 106
    funcInt                        shift and go to state 107
    menor                          shift and go to state 76
    valoresMat                     shift and go to state 77
    eq                             shift and go to state 78
    vecVal                         shift and go to state 8
    valoresBool                    shift and go to state 111
    eMat                           shift and go to state 109
    mayor                          shift and go to state 103
    paren                          shift and go to state 89
    varsOps                        shift and go to state 117
    iSing                          shift and go to state 86
    tCompare                       shift and go to state 88
    not                            shift and go to state 75
    cosaBooleana                   shift and go to state 120
    p                              shift and go to state 96
    expBool                        shift and go to state 112
    exp                            shift and go to state 101
    varYVals                       shift and go to state 118
    parenBool                      shift and go to state 99

state 44

    (15) sentencia -> varsOps ; .

    IF              reduce using rule 15 (sentencia -> varsOps ; .)
    COMMENT         reduce using rule 15 (sentencia -> varsOps ; .)
    DO              reduce using rule 15 (sentencia -> varsOps ; .)
    WHILE           reduce using rule 15 (sentencia -> varsOps ; .)
    FOR             reduce using rule 15 (sentencia -> varsOps ; .)
    RETURN          reduce using rule 15 (sentencia -> varsOps ; .)
    ;               reduce using rule 15 (sentencia -> varsOps ; .)
    MENOSMENOS      reduce using rule 15 (sentencia -> varsOps ; .)
    MASMAS          reduce using rule 15 (sentencia -> varsOps ; .)
    ID              reduce using rule 15 (sentencia -> varsOps ; .)
    PRINT           reduce using rule 15 (sentencia -> varsOps ; .)
    MULTIESCALAR    reduce using rule 15 (sentencia -> varsOps ; .)
    LENGTH          reduce using rule 15 (sentencia -> varsOps ; .)
    CAPITALIZAR     reduce using rule 15 (sentencia -> varsOps ; .)
    COLINEALES      reduce using rule 15 (sentencia -> varsOps ; .)
    $end            reduce using rule 15 (sentencia -> varsOps ; .)
    }               reduce using rule 15 (sentencia -> varsOps ; .)
    ELSE            reduce using rule 15 (sentencia -> varsOps ; .)


state 45

    (73) varsOps -> MENOSMENOS varYVals .

    AND             reduce using rule 73 (varsOps -> MENOSMENOS varYVals .)
    OR              reduce using rule 73 (varsOps -> MENOSMENOS varYVals .)
    ?               reduce using rule 73 (varsOps -> MENOSMENOS varYVals .)
    ,               reduce using rule 73 (varsOps -> MENOSMENOS varYVals .)
    )               reduce using rule 73 (varsOps -> MENOSMENOS varYVals .)
    ;               reduce using rule 73 (varsOps -> MENOSMENOS varYVals .)
    ]               reduce using rule 73 (varsOps -> MENOSMENOS varYVals .)
    }               reduce using rule 73 (varsOps -> MENOSMENOS varYVals .)
    :               reduce using rule 73 (varsOps -> MENOSMENOS varYVals .)
    EQEQ            reduce using rule 73 (varsOps -> MENOSMENOS varYVals .)
    DISTINTO        reduce using rule 73 (varsOps -> MENOSMENOS varYVals .)
    >               reduce using rule 73 (varsOps -> MENOSMENOS varYVals .)
    <               reduce using rule 73 (varsOps -> MENOSMENOS varYVals .)
    +               reduce using rule 73 (varsOps -> MENOSMENOS varYVals .)
    -               reduce using rule 73 (varsOps -> MENOSMENOS varYVals .)
    *               reduce using rule 73 (varsOps -> MENOSMENOS varYVals .)
    /               reduce using rule 73 (varsOps -> MENOSMENOS varYVals .)
    %               reduce using rule 73 (varsOps -> MENOSMENOS varYVals .)
    ^               reduce using rule 73 (varsOps -> MENOSMENOS varYVals .)


state 46

    (63) varYVals -> ID .
    (65) vecVal -> ID . m
    (66) m -> . [ INT ]
    (67) m -> . [ INT ] m
    (68) m -> . [ varYVals ] m
    (69) m -> . [ varYVals ]

    MASMAS          reduce using rule 63 (varYVals -> ID .)
    MENOSMENOS      reduce using rule 63 (varYVals -> ID .)
    OR              reduce using rule 63 (varYVals -> ID .)
    AND             reduce using rule 63 (varYVals -> ID .)
    )               reduce using rule 63 (varYVals -> ID .)
    EQEQ            reduce using rule 63 (varYVals -> ID .)
    DISTINTO        reduce using rule 63 (varYVals -> ID .)
    >               reduce using rule 63 (varYVals -> ID .)
    <               reduce using rule 63 (varYVals -> ID .)
    +               reduce using rule 63 (varYVals -> ID .)
    -               reduce using rule 63 (varYVals -> ID .)
    *               reduce using rule 63 (varYVals -> ID .)
    /               reduce using rule 63 (varYVals -> ID .)
    %               reduce using rule 63 (varYVals -> ID .)
    ^               reduce using rule 63 (varYVals -> ID .)
    ,               reduce using rule 63 (varYVals -> ID .)
    ;               reduce using rule 63 (varYVals -> ID .)
    ]               reduce using rule 63 (varYVals -> ID .)
    }               reduce using rule 63 (varYVals -> ID .)
    ?               reduce using rule 63 (varYVals -> ID .)
    :               reduce using rule 63 (varYVals -> ID .)
    [               shift and go to state 52

    m                              shift and go to state 50

state 47

    (21) loop -> FOR ( . primParam ; cosaBooleana ; tercerParam )
    (24) primParam -> . varAsig
    (25) primParam -> . empty
    (78) varAsig -> . varYVals MULEQ valoresAsig
    (79) varAsig -> . varYVals DIVEQ valoresAsig
    (80) varAsig -> . varYVals MASEQ valoresAsig
    (81) varAsig -> . varYVals MENOSEQ valoresAsig
    (82) varAsig -> . varYVals = valoresAsig
    (83) varAsig -> . ID . ID = valoresAsig
    (42) empty -> .
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (65) vecVal -> . ID m

    ID              shift and go to state 20
    ;               reduce using rule 42 (empty -> .)

    varAsig                        shift and go to state 121
    primParam                      shift and go to state 122
    varYVals                       shift and go to state 123
    vecVal                         shift and go to state 8
    empty                          shift and go to state 124

state 48

    (36) funcInt -> LENGTH ( . valores )
    (46) valores -> . eMat
    (47) valores -> . expBool
    (48) valores -> . funcReturn
    (49) valores -> . reg
    (50) valores -> . INT
    (51) valores -> . FLOAT
    (52) valores -> . STRING
    (53) valores -> . BOOL
    (54) valores -> . varYVals
    (55) valores -> . varsOps
    (56) valores -> . vec
    (57) valores -> . ternario
    (58) valores -> . ID . valoresCampos
    (59) valores -> . RES
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (130) expBool -> . expBool OR and
    (131) expBool -> . valoresBool OR and
    (132) expBool -> . expBool OR valoresBool
    (133) expBool -> . valoresBool OR valoresBool
    (134) expBool -> . and
    (32) funcReturn -> . funcInt
    (33) funcReturn -> . funcString
    (34) funcReturn -> . funcBool
    (70) reg -> . { campos }
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (43) vec -> . [ elem ]
    (127) ternario -> . valoresBool ? valores : valores
    (128) ternario -> . expBool ? valores : valores
    (129) ternario -> . ( ternario )
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (123) valoresBool -> . BOOL
    (124) valoresBool -> . funcBool
    (125) valoresBool -> . varYVals
    (126) valoresBool -> . varsOps
    (135) and -> . and AND eq
    (136) and -> . valoresBool AND eq
    (137) and -> . and AND valoresBool
    (138) and -> . valoresBool AND valoresBool
    (139) and -> . eq
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (37) funcString -> . CAPITALIZAR ( valores )
    (38) funcBool -> . COLINEALES ( valores , valores )
    (65) vecVal -> . ID m
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (140) eq -> . eq EQEQ mayor
    (141) eq -> . eq DISTINTO mayor
    (142) eq -> . tCompare EQEQ mayor
    (143) eq -> . tCompare DISTINTO mayor
    (144) eq -> . eq EQEQ tCompare
    (145) eq -> . eq DISTINTO tCompare
    (146) eq -> . tCompare EQEQ tCompare
    (147) eq -> . tCompare DISTINTO tCompare
    (148) eq -> . mayor
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (122) paren -> . ( eMat )
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (161) parenBool -> . ( expBool )

    INT             shift and go to state 92
    FLOAT           shift and go to state 94
    STRING          shift and go to state 87
    BOOL            shift and go to state 97
    ID              shift and go to state 91
    RES             shift and go to state 73
    {               shift and go to state 102
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    [               shift and go to state 90
    (               shift and go to state 81
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 4
    -               shift and go to state 83
    +               shift and go to state 82
    NOT             shift and go to state 100

    and                            shift and go to state 70
    ternario                       shift and go to state 71
    funcBool                       shift and go to state 72
    funcInt                        shift and go to state 74
    menor                          shift and go to state 76
    mayor                          shift and go to state 103
    valoresMat                     shift and go to state 77
    eq                             shift and go to state 78
    valoresBool                    shift and go to state 79
    eMat                           shift and go to state 80
    vecVal                         shift and go to state 8
    vec                            shift and go to state 84
    paren                          shift and go to state 89
    reg                            shift and go to state 85
    iSing                          shift and go to state 86
    exp                            shift and go to state 101
    tCompare                       shift and go to state 88
    not                            shift and go to state 75
    funcString                     shift and go to state 23
    funcReturn                     shift and go to state 93
    valores                        shift and go to state 125
    p                              shift and go to state 96
    varsOps                        shift and go to state 98
    varYVals                       shift and go to state 104
    parenBool                      shift and go to state 99
    expBool                        shift and go to state 105

state 49

    (16) sentencia -> func ; .

    IF              reduce using rule 16 (sentencia -> func ; .)
    COMMENT         reduce using rule 16 (sentencia -> func ; .)
    DO              reduce using rule 16 (sentencia -> func ; .)
    WHILE           reduce using rule 16 (sentencia -> func ; .)
    FOR             reduce using rule 16 (sentencia -> func ; .)
    RETURN          reduce using rule 16 (sentencia -> func ; .)
    ;               reduce using rule 16 (sentencia -> func ; .)
    MENOSMENOS      reduce using rule 16 (sentencia -> func ; .)
    MASMAS          reduce using rule 16 (sentencia -> func ; .)
    ID              reduce using rule 16 (sentencia -> func ; .)
    PRINT           reduce using rule 16 (sentencia -> func ; .)
    MULTIESCALAR    reduce using rule 16 (sentencia -> func ; .)
    LENGTH          reduce using rule 16 (sentencia -> func ; .)
    CAPITALIZAR     reduce using rule 16 (sentencia -> func ; .)
    COLINEALES      reduce using rule 16 (sentencia -> func ; .)
    $end            reduce using rule 16 (sentencia -> func ; .)
    }               reduce using rule 16 (sentencia -> func ; .)
    ELSE            reduce using rule 16 (sentencia -> func ; .)


state 50

    (65) vecVal -> ID m .

    MASMAS          reduce using rule 65 (vecVal -> ID m .)
    MENOSMENOS      reduce using rule 65 (vecVal -> ID m .)
    MULEQ           reduce using rule 65 (vecVal -> ID m .)
    DIVEQ           reduce using rule 65 (vecVal -> ID m .)
    MASEQ           reduce using rule 65 (vecVal -> ID m .)
    MENOSEQ         reduce using rule 65 (vecVal -> ID m .)
    =               reduce using rule 65 (vecVal -> ID m .)
    ;               reduce using rule 65 (vecVal -> ID m .)
    )               reduce using rule 65 (vecVal -> ID m .)
    +               reduce using rule 65 (vecVal -> ID m .)
    -               reduce using rule 65 (vecVal -> ID m .)
    *               reduce using rule 65 (vecVal -> ID m .)
    /               reduce using rule 65 (vecVal -> ID m .)
    %               reduce using rule 65 (vecVal -> ID m .)
    ^               reduce using rule 65 (vecVal -> ID m .)
    OR              reduce using rule 65 (vecVal -> ID m .)
    ?               reduce using rule 65 (vecVal -> ID m .)
    AND             reduce using rule 65 (vecVal -> ID m .)
    EQEQ            reduce using rule 65 (vecVal -> ID m .)
    DISTINTO        reduce using rule 65 (vecVal -> ID m .)
    >               reduce using rule 65 (vecVal -> ID m .)
    <               reduce using rule 65 (vecVal -> ID m .)
    ,               reduce using rule 65 (vecVal -> ID m .)
    ]               reduce using rule 65 (vecVal -> ID m .)
    }               reduce using rule 65 (vecVal -> ID m .)
    :               reduce using rule 65 (vecVal -> ID m .)


state 51

    (83) varAsig -> ID . . ID = valoresAsig

    ID              shift and go to state 126


state 52

    (66) m -> [ . INT ]
    (67) m -> [ . INT ] m
    (68) m -> [ . varYVals ] m
    (69) m -> [ . varYVals ]
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (65) vecVal -> . ID m

    INT             shift and go to state 127
    ID              shift and go to state 46

    varYVals                       shift and go to state 128
    vecVal                         shift and go to state 8

state 53

    (17) sentencia -> varAsig ; .

    IF              reduce using rule 17 (sentencia -> varAsig ; .)
    COMMENT         reduce using rule 17 (sentencia -> varAsig ; .)
    DO              reduce using rule 17 (sentencia -> varAsig ; .)
    WHILE           reduce using rule 17 (sentencia -> varAsig ; .)
    FOR             reduce using rule 17 (sentencia -> varAsig ; .)
    RETURN          reduce using rule 17 (sentencia -> varAsig ; .)
    ;               reduce using rule 17 (sentencia -> varAsig ; .)
    MENOSMENOS      reduce using rule 17 (sentencia -> varAsig ; .)
    MASMAS          reduce using rule 17 (sentencia -> varAsig ; .)
    ID              reduce using rule 17 (sentencia -> varAsig ; .)
    PRINT           reduce using rule 17 (sentencia -> varAsig ; .)
    MULTIESCALAR    reduce using rule 17 (sentencia -> varAsig ; .)
    LENGTH          reduce using rule 17 (sentencia -> varAsig ; .)
    CAPITALIZAR     reduce using rule 17 (sentencia -> varAsig ; .)
    COLINEALES      reduce using rule 17 (sentencia -> varAsig ; .)
    $end            reduce using rule 17 (sentencia -> varAsig ; .)
    }               reduce using rule 17 (sentencia -> varAsig ; .)
    ELSE            reduce using rule 17 (sentencia -> varAsig ; .)


state 54

    (35) funcInt -> MULTIESCALAR ( . valores , valores param )
    (46) valores -> . eMat
    (47) valores -> . expBool
    (48) valores -> . funcReturn
    (49) valores -> . reg
    (50) valores -> . INT
    (51) valores -> . FLOAT
    (52) valores -> . STRING
    (53) valores -> . BOOL
    (54) valores -> . varYVals
    (55) valores -> . varsOps
    (56) valores -> . vec
    (57) valores -> . ternario
    (58) valores -> . ID . valoresCampos
    (59) valores -> . RES
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (130) expBool -> . expBool OR and
    (131) expBool -> . valoresBool OR and
    (132) expBool -> . expBool OR valoresBool
    (133) expBool -> . valoresBool OR valoresBool
    (134) expBool -> . and
    (32) funcReturn -> . funcInt
    (33) funcReturn -> . funcString
    (34) funcReturn -> . funcBool
    (70) reg -> . { campos }
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (43) vec -> . [ elem ]
    (127) ternario -> . valoresBool ? valores : valores
    (128) ternario -> . expBool ? valores : valores
    (129) ternario -> . ( ternario )
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (123) valoresBool -> . BOOL
    (124) valoresBool -> . funcBool
    (125) valoresBool -> . varYVals
    (126) valoresBool -> . varsOps
    (135) and -> . and AND eq
    (136) and -> . valoresBool AND eq
    (137) and -> . and AND valoresBool
    (138) and -> . valoresBool AND valoresBool
    (139) and -> . eq
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (37) funcString -> . CAPITALIZAR ( valores )
    (38) funcBool -> . COLINEALES ( valores , valores )
    (65) vecVal -> . ID m
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (140) eq -> . eq EQEQ mayor
    (141) eq -> . eq DISTINTO mayor
    (142) eq -> . tCompare EQEQ mayor
    (143) eq -> . tCompare DISTINTO mayor
    (144) eq -> . eq EQEQ tCompare
    (145) eq -> . eq DISTINTO tCompare
    (146) eq -> . tCompare EQEQ tCompare
    (147) eq -> . tCompare DISTINTO tCompare
    (148) eq -> . mayor
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (122) paren -> . ( eMat )
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (161) parenBool -> . ( expBool )

    INT             shift and go to state 92
    FLOAT           shift and go to state 94
    STRING          shift and go to state 87
    BOOL            shift and go to state 97
    ID              shift and go to state 91
    RES             shift and go to state 73
    {               shift and go to state 102
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    [               shift and go to state 90
    (               shift and go to state 81
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 4
    -               shift and go to state 83
    +               shift and go to state 82
    NOT             shift and go to state 100

    and                            shift and go to state 70
    ternario                       shift and go to state 71
    funcBool                       shift and go to state 72
    funcInt                        shift and go to state 74
    menor                          shift and go to state 76
    mayor                          shift and go to state 103
    valoresMat                     shift and go to state 77
    eq                             shift and go to state 78
    valoresBool                    shift and go to state 79
    eMat                           shift and go to state 80
    vecVal                         shift and go to state 8
    vec                            shift and go to state 84
    paren                          shift and go to state 89
    reg                            shift and go to state 85
    iSing                          shift and go to state 86
    exp                            shift and go to state 101
    tCompare                       shift and go to state 88
    not                            shift and go to state 75
    funcString                     shift and go to state 23
    funcReturn                     shift and go to state 93
    valores                        shift and go to state 129
    p                              shift and go to state 96
    varsOps                        shift and go to state 98
    varYVals                       shift and go to state 104
    parenBool                      shift and go to state 99
    expBool                        shift and go to state 105

state 55

    (37) funcString -> CAPITALIZAR ( . valores )
    (46) valores -> . eMat
    (47) valores -> . expBool
    (48) valores -> . funcReturn
    (49) valores -> . reg
    (50) valores -> . INT
    (51) valores -> . FLOAT
    (52) valores -> . STRING
    (53) valores -> . BOOL
    (54) valores -> . varYVals
    (55) valores -> . varsOps
    (56) valores -> . vec
    (57) valores -> . ternario
    (58) valores -> . ID . valoresCampos
    (59) valores -> . RES
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (130) expBool -> . expBool OR and
    (131) expBool -> . valoresBool OR and
    (132) expBool -> . expBool OR valoresBool
    (133) expBool -> . valoresBool OR valoresBool
    (134) expBool -> . and
    (32) funcReturn -> . funcInt
    (33) funcReturn -> . funcString
    (34) funcReturn -> . funcBool
    (70) reg -> . { campos }
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (43) vec -> . [ elem ]
    (127) ternario -> . valoresBool ? valores : valores
    (128) ternario -> . expBool ? valores : valores
    (129) ternario -> . ( ternario )
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (123) valoresBool -> . BOOL
    (124) valoresBool -> . funcBool
    (125) valoresBool -> . varYVals
    (126) valoresBool -> . varsOps
    (135) and -> . and AND eq
    (136) and -> . valoresBool AND eq
    (137) and -> . and AND valoresBool
    (138) and -> . valoresBool AND valoresBool
    (139) and -> . eq
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (37) funcString -> . CAPITALIZAR ( valores )
    (38) funcBool -> . COLINEALES ( valores , valores )
    (65) vecVal -> . ID m
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (140) eq -> . eq EQEQ mayor
    (141) eq -> . eq DISTINTO mayor
    (142) eq -> . tCompare EQEQ mayor
    (143) eq -> . tCompare DISTINTO mayor
    (144) eq -> . eq EQEQ tCompare
    (145) eq -> . eq DISTINTO tCompare
    (146) eq -> . tCompare EQEQ tCompare
    (147) eq -> . tCompare DISTINTO tCompare
    (148) eq -> . mayor
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (122) paren -> . ( eMat )
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (161) parenBool -> . ( expBool )

    INT             shift and go to state 92
    FLOAT           shift and go to state 94
    STRING          shift and go to state 87
    BOOL            shift and go to state 97
    ID              shift and go to state 91
    RES             shift and go to state 73
    {               shift and go to state 102
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    [               shift and go to state 90
    (               shift and go to state 81
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 4
    -               shift and go to state 83
    +               shift and go to state 82
    NOT             shift and go to state 100

    and                            shift and go to state 70
    ternario                       shift and go to state 71
    funcBool                       shift and go to state 72
    funcInt                        shift and go to state 74
    menor                          shift and go to state 76
    mayor                          shift and go to state 103
    valoresMat                     shift and go to state 77
    eq                             shift and go to state 78
    valoresBool                    shift and go to state 79
    eMat                           shift and go to state 80
    vecVal                         shift and go to state 8
    vec                            shift and go to state 84
    paren                          shift and go to state 89
    reg                            shift and go to state 85
    iSing                          shift and go to state 86
    exp                            shift and go to state 101
    tCompare                       shift and go to state 88
    not                            shift and go to state 75
    funcString                     shift and go to state 23
    funcReturn                     shift and go to state 93
    valores                        shift and go to state 130
    p                              shift and go to state 96
    varsOps                        shift and go to state 98
    varYVals                       shift and go to state 104
    parenBool                      shift and go to state 99
    expBool                        shift and go to state 105

state 56

    (74) varsOps -> MASMAS varYVals .

    AND             reduce using rule 74 (varsOps -> MASMAS varYVals .)
    OR              reduce using rule 74 (varsOps -> MASMAS varYVals .)
    ?               reduce using rule 74 (varsOps -> MASMAS varYVals .)
    ,               reduce using rule 74 (varsOps -> MASMAS varYVals .)
    )               reduce using rule 74 (varsOps -> MASMAS varYVals .)
    ;               reduce using rule 74 (varsOps -> MASMAS varYVals .)
    ]               reduce using rule 74 (varsOps -> MASMAS varYVals .)
    }               reduce using rule 74 (varsOps -> MASMAS varYVals .)
    :               reduce using rule 74 (varsOps -> MASMAS varYVals .)
    EQEQ            reduce using rule 74 (varsOps -> MASMAS varYVals .)
    DISTINTO        reduce using rule 74 (varsOps -> MASMAS varYVals .)
    >               reduce using rule 74 (varsOps -> MASMAS varYVals .)
    <               reduce using rule 74 (varsOps -> MASMAS varYVals .)
    +               reduce using rule 74 (varsOps -> MASMAS varYVals .)
    -               reduce using rule 74 (varsOps -> MASMAS varYVals .)
    *               reduce using rule 74 (varsOps -> MASMAS varYVals .)
    /               reduce using rule 74 (varsOps -> MASMAS varYVals .)
    %               reduce using rule 74 (varsOps -> MASMAS varYVals .)
    ^               reduce using rule 74 (varsOps -> MASMAS varYVals .)


state 57

    (13) lCerrada -> loop bloqueCerrado .

    WHILE           reduce using rule 13 (lCerrada -> loop bloqueCerrado .)
    ELSE            reduce using rule 13 (lCerrada -> loop bloqueCerrado .)
    IF              reduce using rule 13 (lCerrada -> loop bloqueCerrado .)
    COMMENT         reduce using rule 13 (lCerrada -> loop bloqueCerrado .)
    DO              reduce using rule 13 (lCerrada -> loop bloqueCerrado .)
    FOR             reduce using rule 13 (lCerrada -> loop bloqueCerrado .)
    RETURN          reduce using rule 13 (lCerrada -> loop bloqueCerrado .)
    ;               reduce using rule 13 (lCerrada -> loop bloqueCerrado .)
    MENOSMENOS      reduce using rule 13 (lCerrada -> loop bloqueCerrado .)
    MASMAS          reduce using rule 13 (lCerrada -> loop bloqueCerrado .)
    ID              reduce using rule 13 (lCerrada -> loop bloqueCerrado .)
    PRINT           reduce using rule 13 (lCerrada -> loop bloqueCerrado .)
    MULTIESCALAR    reduce using rule 13 (lCerrada -> loop bloqueCerrado .)
    LENGTH          reduce using rule 13 (lCerrada -> loop bloqueCerrado .)
    CAPITALIZAR     reduce using rule 13 (lCerrada -> loop bloqueCerrado .)
    COLINEALES      reduce using rule 13 (lCerrada -> loop bloqueCerrado .)
    $end            reduce using rule 13 (lCerrada -> loop bloqueCerrado .)
    }               reduce using rule 13 (lCerrada -> loop bloqueCerrado .)


state 58

    (7) lAbierta -> loop lAbierta .

    IF              reduce using rule 7 (lAbierta -> loop lAbierta .)
    COMMENT         reduce using rule 7 (lAbierta -> loop lAbierta .)
    DO              reduce using rule 7 (lAbierta -> loop lAbierta .)
    WHILE           reduce using rule 7 (lAbierta -> loop lAbierta .)
    FOR             reduce using rule 7 (lAbierta -> loop lAbierta .)
    RETURN          reduce using rule 7 (lAbierta -> loop lAbierta .)
    ;               reduce using rule 7 (lAbierta -> loop lAbierta .)
    MENOSMENOS      reduce using rule 7 (lAbierta -> loop lAbierta .)
    MASMAS          reduce using rule 7 (lAbierta -> loop lAbierta .)
    ID              reduce using rule 7 (lAbierta -> loop lAbierta .)
    PRINT           reduce using rule 7 (lAbierta -> loop lAbierta .)
    MULTIESCALAR    reduce using rule 7 (lAbierta -> loop lAbierta .)
    LENGTH          reduce using rule 7 (lAbierta -> loop lAbierta .)
    CAPITALIZAR     reduce using rule 7 (lAbierta -> loop lAbierta .)
    COLINEALES      reduce using rule 7 (lAbierta -> loop lAbierta .)
    $end            reduce using rule 7 (lAbierta -> loop lAbierta .)
    }               reduce using rule 7 (lAbierta -> loop lAbierta .)


state 59

    (81) varAsig -> varYVals MENOSEQ . valoresAsig
    (77) valoresAsig -> . valores
    (46) valores -> . eMat
    (47) valores -> . expBool
    (48) valores -> . funcReturn
    (49) valores -> . reg
    (50) valores -> . INT
    (51) valores -> . FLOAT
    (52) valores -> . STRING
    (53) valores -> . BOOL
    (54) valores -> . varYVals
    (55) valores -> . varsOps
    (56) valores -> . vec
    (57) valores -> . ternario
    (58) valores -> . ID . valoresCampos
    (59) valores -> . RES
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (130) expBool -> . expBool OR and
    (131) expBool -> . valoresBool OR and
    (132) expBool -> . expBool OR valoresBool
    (133) expBool -> . valoresBool OR valoresBool
    (134) expBool -> . and
    (32) funcReturn -> . funcInt
    (33) funcReturn -> . funcString
    (34) funcReturn -> . funcBool
    (70) reg -> . { campos }
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (43) vec -> . [ elem ]
    (127) ternario -> . valoresBool ? valores : valores
    (128) ternario -> . expBool ? valores : valores
    (129) ternario -> . ( ternario )
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (123) valoresBool -> . BOOL
    (124) valoresBool -> . funcBool
    (125) valoresBool -> . varYVals
    (126) valoresBool -> . varsOps
    (135) and -> . and AND eq
    (136) and -> . valoresBool AND eq
    (137) and -> . and AND valoresBool
    (138) and -> . valoresBool AND valoresBool
    (139) and -> . eq
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (37) funcString -> . CAPITALIZAR ( valores )
    (38) funcBool -> . COLINEALES ( valores , valores )
    (65) vecVal -> . ID m
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (140) eq -> . eq EQEQ mayor
    (141) eq -> . eq DISTINTO mayor
    (142) eq -> . tCompare EQEQ mayor
    (143) eq -> . tCompare DISTINTO mayor
    (144) eq -> . eq EQEQ tCompare
    (145) eq -> . eq DISTINTO tCompare
    (146) eq -> . tCompare EQEQ tCompare
    (147) eq -> . tCompare DISTINTO tCompare
    (148) eq -> . mayor
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (122) paren -> . ( eMat )
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (161) parenBool -> . ( expBool )

    INT             shift and go to state 92
    FLOAT           shift and go to state 94
    STRING          shift and go to state 87
    BOOL            shift and go to state 97
    ID              shift and go to state 91
    RES             shift and go to state 73
    {               shift and go to state 102
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    [               shift and go to state 90
    (               shift and go to state 81
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 4
    -               shift and go to state 83
    +               shift and go to state 82
    NOT             shift and go to state 100

    and                            shift and go to state 70
    ternario                       shift and go to state 71
    funcBool                       shift and go to state 72
    funcInt                        shift and go to state 74
    menor                          shift and go to state 76
    mayor                          shift and go to state 103
    valoresMat                     shift and go to state 77
    eq                             shift and go to state 78
    valoresBool                    shift and go to state 79
    eMat                           shift and go to state 80
    vecVal                         shift and go to state 8
    vec                            shift and go to state 84
    paren                          shift and go to state 89
    reg                            shift and go to state 85
    iSing                          shift and go to state 86
    exp                            shift and go to state 101
    tCompare                       shift and go to state 88
    not                            shift and go to state 75
    valoresAsig                    shift and go to state 131
    funcString                     shift and go to state 23
    funcReturn                     shift and go to state 93
    valores                        shift and go to state 132
    p                              shift and go to state 96
    varsOps                        shift and go to state 98
    varYVals                       shift and go to state 104
    parenBool                      shift and go to state 99
    expBool                        shift and go to state 105

state 60

    (76) varsOps -> varYVals MENOSMENOS .

    AND             reduce using rule 76 (varsOps -> varYVals MENOSMENOS .)
    OR              reduce using rule 76 (varsOps -> varYVals MENOSMENOS .)
    ?               reduce using rule 76 (varsOps -> varYVals MENOSMENOS .)
    ,               reduce using rule 76 (varsOps -> varYVals MENOSMENOS .)
    )               reduce using rule 76 (varsOps -> varYVals MENOSMENOS .)
    ;               reduce using rule 76 (varsOps -> varYVals MENOSMENOS .)
    ]               reduce using rule 76 (varsOps -> varYVals MENOSMENOS .)
    }               reduce using rule 76 (varsOps -> varYVals MENOSMENOS .)
    :               reduce using rule 76 (varsOps -> varYVals MENOSMENOS .)
    EQEQ            reduce using rule 76 (varsOps -> varYVals MENOSMENOS .)
    DISTINTO        reduce using rule 76 (varsOps -> varYVals MENOSMENOS .)
    >               reduce using rule 76 (varsOps -> varYVals MENOSMENOS .)
    <               reduce using rule 76 (varsOps -> varYVals MENOSMENOS .)
    +               reduce using rule 76 (varsOps -> varYVals MENOSMENOS .)
    -               reduce using rule 76 (varsOps -> varYVals MENOSMENOS .)
    *               reduce using rule 76 (varsOps -> varYVals MENOSMENOS .)
    /               reduce using rule 76 (varsOps -> varYVals MENOSMENOS .)
    %               reduce using rule 76 (varsOps -> varYVals MENOSMENOS .)
    ^               reduce using rule 76 (varsOps -> varYVals MENOSMENOS .)


state 61

    (80) varAsig -> varYVals MASEQ . valoresAsig
    (77) valoresAsig -> . valores
    (46) valores -> . eMat
    (47) valores -> . expBool
    (48) valores -> . funcReturn
    (49) valores -> . reg
    (50) valores -> . INT
    (51) valores -> . FLOAT
    (52) valores -> . STRING
    (53) valores -> . BOOL
    (54) valores -> . varYVals
    (55) valores -> . varsOps
    (56) valores -> . vec
    (57) valores -> . ternario
    (58) valores -> . ID . valoresCampos
    (59) valores -> . RES
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (130) expBool -> . expBool OR and
    (131) expBool -> . valoresBool OR and
    (132) expBool -> . expBool OR valoresBool
    (133) expBool -> . valoresBool OR valoresBool
    (134) expBool -> . and
    (32) funcReturn -> . funcInt
    (33) funcReturn -> . funcString
    (34) funcReturn -> . funcBool
    (70) reg -> . { campos }
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (43) vec -> . [ elem ]
    (127) ternario -> . valoresBool ? valores : valores
    (128) ternario -> . expBool ? valores : valores
    (129) ternario -> . ( ternario )
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (123) valoresBool -> . BOOL
    (124) valoresBool -> . funcBool
    (125) valoresBool -> . varYVals
    (126) valoresBool -> . varsOps
    (135) and -> . and AND eq
    (136) and -> . valoresBool AND eq
    (137) and -> . and AND valoresBool
    (138) and -> . valoresBool AND valoresBool
    (139) and -> . eq
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (37) funcString -> . CAPITALIZAR ( valores )
    (38) funcBool -> . COLINEALES ( valores , valores )
    (65) vecVal -> . ID m
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (140) eq -> . eq EQEQ mayor
    (141) eq -> . eq DISTINTO mayor
    (142) eq -> . tCompare EQEQ mayor
    (143) eq -> . tCompare DISTINTO mayor
    (144) eq -> . eq EQEQ tCompare
    (145) eq -> . eq DISTINTO tCompare
    (146) eq -> . tCompare EQEQ tCompare
    (147) eq -> . tCompare DISTINTO tCompare
    (148) eq -> . mayor
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (122) paren -> . ( eMat )
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (161) parenBool -> . ( expBool )

    INT             shift and go to state 92
    FLOAT           shift and go to state 94
    STRING          shift and go to state 87
    BOOL            shift and go to state 97
    ID              shift and go to state 91
    RES             shift and go to state 73
    {               shift and go to state 102
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    [               shift and go to state 90
    (               shift and go to state 81
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 4
    -               shift and go to state 83
    +               shift and go to state 82
    NOT             shift and go to state 100

    and                            shift and go to state 70
    ternario                       shift and go to state 71
    funcBool                       shift and go to state 72
    funcInt                        shift and go to state 74
    menor                          shift and go to state 76
    mayor                          shift and go to state 103
    valoresMat                     shift and go to state 77
    eq                             shift and go to state 78
    valoresBool                    shift and go to state 79
    eMat                           shift and go to state 80
    vecVal                         shift and go to state 8
    vec                            shift and go to state 84
    paren                          shift and go to state 89
    reg                            shift and go to state 85
    iSing                          shift and go to state 86
    exp                            shift and go to state 101
    tCompare                       shift and go to state 88
    not                            shift and go to state 75
    valoresAsig                    shift and go to state 133
    funcString                     shift and go to state 23
    funcReturn                     shift and go to state 93
    valores                        shift and go to state 132
    p                              shift and go to state 96
    varsOps                        shift and go to state 98
    varYVals                       shift and go to state 104
    parenBool                      shift and go to state 99
    expBool                        shift and go to state 105

state 62

    (82) varAsig -> varYVals = . valoresAsig
    (77) valoresAsig -> . valores
    (46) valores -> . eMat
    (47) valores -> . expBool
    (48) valores -> . funcReturn
    (49) valores -> . reg
    (50) valores -> . INT
    (51) valores -> . FLOAT
    (52) valores -> . STRING
    (53) valores -> . BOOL
    (54) valores -> . varYVals
    (55) valores -> . varsOps
    (56) valores -> . vec
    (57) valores -> . ternario
    (58) valores -> . ID . valoresCampos
    (59) valores -> . RES
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (130) expBool -> . expBool OR and
    (131) expBool -> . valoresBool OR and
    (132) expBool -> . expBool OR valoresBool
    (133) expBool -> . valoresBool OR valoresBool
    (134) expBool -> . and
    (32) funcReturn -> . funcInt
    (33) funcReturn -> . funcString
    (34) funcReturn -> . funcBool
    (70) reg -> . { campos }
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (43) vec -> . [ elem ]
    (127) ternario -> . valoresBool ? valores : valores
    (128) ternario -> . expBool ? valores : valores
    (129) ternario -> . ( ternario )
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (123) valoresBool -> . BOOL
    (124) valoresBool -> . funcBool
    (125) valoresBool -> . varYVals
    (126) valoresBool -> . varsOps
    (135) and -> . and AND eq
    (136) and -> . valoresBool AND eq
    (137) and -> . and AND valoresBool
    (138) and -> . valoresBool AND valoresBool
    (139) and -> . eq
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (37) funcString -> . CAPITALIZAR ( valores )
    (38) funcBool -> . COLINEALES ( valores , valores )
    (65) vecVal -> . ID m
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (140) eq -> . eq EQEQ mayor
    (141) eq -> . eq DISTINTO mayor
    (142) eq -> . tCompare EQEQ mayor
    (143) eq -> . tCompare DISTINTO mayor
    (144) eq -> . eq EQEQ tCompare
    (145) eq -> . eq DISTINTO tCompare
    (146) eq -> . tCompare EQEQ tCompare
    (147) eq -> . tCompare DISTINTO tCompare
    (148) eq -> . mayor
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (122) paren -> . ( eMat )
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (161) parenBool -> . ( expBool )

    INT             shift and go to state 92
    FLOAT           shift and go to state 94
    STRING          shift and go to state 87
    BOOL            shift and go to state 97
    ID              shift and go to state 91
    RES             shift and go to state 73
    {               shift and go to state 102
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    [               shift and go to state 90
    (               shift and go to state 81
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 4
    -               shift and go to state 83
    +               shift and go to state 82
    NOT             shift and go to state 100

    and                            shift and go to state 70
    ternario                       shift and go to state 71
    funcBool                       shift and go to state 72
    funcInt                        shift and go to state 74
    menor                          shift and go to state 76
    mayor                          shift and go to state 103
    valoresMat                     shift and go to state 77
    eq                             shift and go to state 78
    valoresBool                    shift and go to state 79
    eMat                           shift and go to state 80
    vecVal                         shift and go to state 8
    vec                            shift and go to state 84
    paren                          shift and go to state 89
    reg                            shift and go to state 85
    iSing                          shift and go to state 86
    exp                            shift and go to state 101
    tCompare                       shift and go to state 88
    not                            shift and go to state 75
    valoresAsig                    shift and go to state 134
    funcString                     shift and go to state 23
    funcReturn                     shift and go to state 93
    valores                        shift and go to state 132
    p                              shift and go to state 96
    varsOps                        shift and go to state 98
    varYVals                       shift and go to state 104
    parenBool                      shift and go to state 99
    expBool                        shift and go to state 105

state 63

    (75) varsOps -> varYVals MASMAS .

    AND             reduce using rule 75 (varsOps -> varYVals MASMAS .)
    OR              reduce using rule 75 (varsOps -> varYVals MASMAS .)
    ?               reduce using rule 75 (varsOps -> varYVals MASMAS .)
    ,               reduce using rule 75 (varsOps -> varYVals MASMAS .)
    )               reduce using rule 75 (varsOps -> varYVals MASMAS .)
    ;               reduce using rule 75 (varsOps -> varYVals MASMAS .)
    ]               reduce using rule 75 (varsOps -> varYVals MASMAS .)
    }               reduce using rule 75 (varsOps -> varYVals MASMAS .)
    :               reduce using rule 75 (varsOps -> varYVals MASMAS .)
    EQEQ            reduce using rule 75 (varsOps -> varYVals MASMAS .)
    DISTINTO        reduce using rule 75 (varsOps -> varYVals MASMAS .)
    >               reduce using rule 75 (varsOps -> varYVals MASMAS .)
    <               reduce using rule 75 (varsOps -> varYVals MASMAS .)
    +               reduce using rule 75 (varsOps -> varYVals MASMAS .)
    -               reduce using rule 75 (varsOps -> varYVals MASMAS .)
    *               reduce using rule 75 (varsOps -> varYVals MASMAS .)
    /               reduce using rule 75 (varsOps -> varYVals MASMAS .)
    %               reduce using rule 75 (varsOps -> varYVals MASMAS .)
    ^               reduce using rule 75 (varsOps -> varYVals MASMAS .)


state 64

    (78) varAsig -> varYVals MULEQ . valoresAsig
    (77) valoresAsig -> . valores
    (46) valores -> . eMat
    (47) valores -> . expBool
    (48) valores -> . funcReturn
    (49) valores -> . reg
    (50) valores -> . INT
    (51) valores -> . FLOAT
    (52) valores -> . STRING
    (53) valores -> . BOOL
    (54) valores -> . varYVals
    (55) valores -> . varsOps
    (56) valores -> . vec
    (57) valores -> . ternario
    (58) valores -> . ID . valoresCampos
    (59) valores -> . RES
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (130) expBool -> . expBool OR and
    (131) expBool -> . valoresBool OR and
    (132) expBool -> . expBool OR valoresBool
    (133) expBool -> . valoresBool OR valoresBool
    (134) expBool -> . and
    (32) funcReturn -> . funcInt
    (33) funcReturn -> . funcString
    (34) funcReturn -> . funcBool
    (70) reg -> . { campos }
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (43) vec -> . [ elem ]
    (127) ternario -> . valoresBool ? valores : valores
    (128) ternario -> . expBool ? valores : valores
    (129) ternario -> . ( ternario )
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (123) valoresBool -> . BOOL
    (124) valoresBool -> . funcBool
    (125) valoresBool -> . varYVals
    (126) valoresBool -> . varsOps
    (135) and -> . and AND eq
    (136) and -> . valoresBool AND eq
    (137) and -> . and AND valoresBool
    (138) and -> . valoresBool AND valoresBool
    (139) and -> . eq
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (37) funcString -> . CAPITALIZAR ( valores )
    (38) funcBool -> . COLINEALES ( valores , valores )
    (65) vecVal -> . ID m
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (140) eq -> . eq EQEQ mayor
    (141) eq -> . eq DISTINTO mayor
    (142) eq -> . tCompare EQEQ mayor
    (143) eq -> . tCompare DISTINTO mayor
    (144) eq -> . eq EQEQ tCompare
    (145) eq -> . eq DISTINTO tCompare
    (146) eq -> . tCompare EQEQ tCompare
    (147) eq -> . tCompare DISTINTO tCompare
    (148) eq -> . mayor
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (122) paren -> . ( eMat )
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (161) parenBool -> . ( expBool )

    INT             shift and go to state 92
    FLOAT           shift and go to state 94
    STRING          shift and go to state 87
    BOOL            shift and go to state 97
    ID              shift and go to state 91
    RES             shift and go to state 73
    {               shift and go to state 102
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    [               shift and go to state 90
    (               shift and go to state 81
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 4
    -               shift and go to state 83
    +               shift and go to state 82
    NOT             shift and go to state 100

    and                            shift and go to state 70
    ternario                       shift and go to state 71
    funcBool                       shift and go to state 72
    funcInt                        shift and go to state 74
    menor                          shift and go to state 76
    mayor                          shift and go to state 103
    valoresMat                     shift and go to state 77
    eq                             shift and go to state 78
    valoresBool                    shift and go to state 79
    eMat                           shift and go to state 80
    vecVal                         shift and go to state 8
    vec                            shift and go to state 84
    paren                          shift and go to state 89
    reg                            shift and go to state 85
    iSing                          shift and go to state 86
    exp                            shift and go to state 101
    tCompare                       shift and go to state 88
    not                            shift and go to state 75
    valoresAsig                    shift and go to state 135
    funcString                     shift and go to state 23
    funcReturn                     shift and go to state 93
    valores                        shift and go to state 132
    p                              shift and go to state 96
    varsOps                        shift and go to state 98
    varYVals                       shift and go to state 104
    parenBool                      shift and go to state 99
    expBool                        shift and go to state 105

state 65

    (79) varAsig -> varYVals DIVEQ . valoresAsig
    (77) valoresAsig -> . valores
    (46) valores -> . eMat
    (47) valores -> . expBool
    (48) valores -> . funcReturn
    (49) valores -> . reg
    (50) valores -> . INT
    (51) valores -> . FLOAT
    (52) valores -> . STRING
    (53) valores -> . BOOL
    (54) valores -> . varYVals
    (55) valores -> . varsOps
    (56) valores -> . vec
    (57) valores -> . ternario
    (58) valores -> . ID . valoresCampos
    (59) valores -> . RES
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (130) expBool -> . expBool OR and
    (131) expBool -> . valoresBool OR and
    (132) expBool -> . expBool OR valoresBool
    (133) expBool -> . valoresBool OR valoresBool
    (134) expBool -> . and
    (32) funcReturn -> . funcInt
    (33) funcReturn -> . funcString
    (34) funcReturn -> . funcBool
    (70) reg -> . { campos }
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (43) vec -> . [ elem ]
    (127) ternario -> . valoresBool ? valores : valores
    (128) ternario -> . expBool ? valores : valores
    (129) ternario -> . ( ternario )
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (123) valoresBool -> . BOOL
    (124) valoresBool -> . funcBool
    (125) valoresBool -> . varYVals
    (126) valoresBool -> . varsOps
    (135) and -> . and AND eq
    (136) and -> . valoresBool AND eq
    (137) and -> . and AND valoresBool
    (138) and -> . valoresBool AND valoresBool
    (139) and -> . eq
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (37) funcString -> . CAPITALIZAR ( valores )
    (38) funcBool -> . COLINEALES ( valores , valores )
    (65) vecVal -> . ID m
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (140) eq -> . eq EQEQ mayor
    (141) eq -> . eq DISTINTO mayor
    (142) eq -> . tCompare EQEQ mayor
    (143) eq -> . tCompare DISTINTO mayor
    (144) eq -> . eq EQEQ tCompare
    (145) eq -> . eq DISTINTO tCompare
    (146) eq -> . tCompare EQEQ tCompare
    (147) eq -> . tCompare DISTINTO tCompare
    (148) eq -> . mayor
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (122) paren -> . ( eMat )
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (161) parenBool -> . ( expBool )

    INT             shift and go to state 92
    FLOAT           shift and go to state 94
    STRING          shift and go to state 87
    BOOL            shift and go to state 97
    ID              shift and go to state 91
    RES             shift and go to state 73
    {               shift and go to state 102
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    [               shift and go to state 90
    (               shift and go to state 81
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 4
    -               shift and go to state 83
    +               shift and go to state 82
    NOT             shift and go to state 100

    and                            shift and go to state 70
    ternario                       shift and go to state 71
    funcBool                       shift and go to state 72
    funcInt                        shift and go to state 74
    menor                          shift and go to state 76
    mayor                          shift and go to state 103
    valoresMat                     shift and go to state 77
    eq                             shift and go to state 78
    valoresBool                    shift and go to state 79
    eMat                           shift and go to state 80
    vecVal                         shift and go to state 8
    vec                            shift and go to state 84
    paren                          shift and go to state 89
    reg                            shift and go to state 85
    iSing                          shift and go to state 86
    exp                            shift and go to state 101
    tCompare                       shift and go to state 88
    not                            shift and go to state 75
    valoresAsig                    shift and go to state 136
    funcString                     shift and go to state 23
    funcReturn                     shift and go to state 93
    valores                        shift and go to state 132
    p                              shift and go to state 96
    varsOps                        shift and go to state 98
    varYVals                       shift and go to state 104
    parenBool                      shift and go to state 99
    expBool                        shift and go to state 105

state 66

    (1) g -> linea g .

    }               reduce using rule 1 (g -> linea g .)
    $end            reduce using rule 1 (g -> linea g .)


state 67

    (14) lCerrada -> DO bloqueCerrado WHILE . ( cosaBooleana ) ;

    (               shift and go to state 137


state 68

    (12) lCerrada -> IF ( . cosaBooleana ) bloqueCerrado ELSE bloqueCerrado
    (22) cosaBooleana -> . expBool
    (23) cosaBooleana -> . valoresBool
    (130) expBool -> . expBool OR and
    (131) expBool -> . valoresBool OR and
    (132) expBool -> . expBool OR valoresBool
    (133) expBool -> . valoresBool OR valoresBool
    (134) expBool -> . and
    (123) valoresBool -> . BOOL
    (124) valoresBool -> . funcBool
    (125) valoresBool -> . varYVals
    (126) valoresBool -> . varsOps
    (135) and -> . and AND eq
    (136) and -> . valoresBool AND eq
    (137) and -> . and AND valoresBool
    (138) and -> . valoresBool AND valoresBool
    (139) and -> . eq
    (38) funcBool -> . COLINEALES ( valores , valores )
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (140) eq -> . eq EQEQ mayor
    (141) eq -> . eq DISTINTO mayor
    (142) eq -> . tCompare EQEQ mayor
    (143) eq -> . tCompare DISTINTO mayor
    (144) eq -> . eq EQEQ tCompare
    (145) eq -> . eq DISTINTO tCompare
    (146) eq -> . tCompare EQEQ tCompare
    (147) eq -> . tCompare DISTINTO tCompare
    (148) eq -> . mayor
    (65) vecVal -> . ID m
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (161) parenBool -> . ( expBool )
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (122) paren -> . ( eMat )

    BOOL            shift and go to state 116
    COLINEALES      shift and go to state 4
    ID              shift and go to state 46
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    INT             shift and go to state 114
    FLOAT           shift and go to state 115
    STRING          shift and go to state 108
    NOT             shift and go to state 100
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    (               shift and go to state 110
    -               shift and go to state 83
    +               shift and go to state 82

    and                            shift and go to state 70
    funcBool                       shift and go to state 106
    funcInt                        shift and go to state 107
    menor                          shift and go to state 76
    valoresMat                     shift and go to state 77
    eq                             shift and go to state 78
    vecVal                         shift and go to state 8
    valoresBool                    shift and go to state 111
    eMat                           shift and go to state 109
    mayor                          shift and go to state 103
    paren                          shift and go to state 89
    iSing                          shift and go to state 86
    tCompare                       shift and go to state 88
    not                            shift and go to state 75
    cosaBooleana                   shift and go to state 138
    p                              shift and go to state 96
    varsOps                        shift and go to state 117
    exp                            shift and go to state 101
    varYVals                       shift and go to state 118
    parenBool                      shift and go to state 99
    expBool                        shift and go to state 112

state 69

    (9) bloqueCerrado -> { g . }

    }               shift and go to state 139


state 70

    (134) expBool -> and .
    (135) and -> and . AND eq
    (137) and -> and . AND valoresBool

    OR              reduce using rule 134 (expBool -> and .)
    ?               reduce using rule 134 (expBool -> and .)
    )               reduce using rule 134 (expBool -> and .)
    ,               reduce using rule 134 (expBool -> and .)
    ;               reduce using rule 134 (expBool -> and .)
    ]               reduce using rule 134 (expBool -> and .)
    }               reduce using rule 134 (expBool -> and .)
    :               reduce using rule 134 (expBool -> and .)
    AND             shift and go to state 140


state 71

    (57) valores -> ternario .

    ;               reduce using rule 57 (valores -> ternario .)
    )               reduce using rule 57 (valores -> ternario .)
    :               reduce using rule 57 (valores -> ternario .)
    }               reduce using rule 57 (valores -> ternario .)
    ,               reduce using rule 57 (valores -> ternario .)
    ]               reduce using rule 57 (valores -> ternario .)


state 72

    (34) funcReturn -> funcBool .
    (124) valoresBool -> funcBool .

    ,               reduce using rule 34 (funcReturn -> funcBool .)
    ;               reduce using rule 34 (funcReturn -> funcBool .)
    )               reduce using rule 34 (funcReturn -> funcBool .)
    :               reduce using rule 34 (funcReturn -> funcBool .)
    ]               reduce using rule 34 (funcReturn -> funcBool .)
    }               reduce using rule 34 (funcReturn -> funcBool .)
    OR              reduce using rule 124 (valoresBool -> funcBool .)
    ?               reduce using rule 124 (valoresBool -> funcBool .)
    AND             reduce using rule 124 (valoresBool -> funcBool .)


state 73

    (59) valores -> RES .

    ;               reduce using rule 59 (valores -> RES .)
    )               reduce using rule 59 (valores -> RES .)
    :               reduce using rule 59 (valores -> RES .)
    }               reduce using rule 59 (valores -> RES .)
    ,               reduce using rule 59 (valores -> RES .)
    ]               reduce using rule 59 (valores -> RES .)


state 74

    (32) funcReturn -> funcInt .
    (86) valoresMat -> funcInt .

    ,               reduce using rule 32 (funcReturn -> funcInt .)
    ;               reduce using rule 32 (funcReturn -> funcInt .)
    )               reduce using rule 32 (funcReturn -> funcInt .)
    :               reduce using rule 32 (funcReturn -> funcInt .)
    ]               reduce using rule 32 (funcReturn -> funcInt .)
    }               reduce using rule 32 (funcReturn -> funcInt .)
    +               reduce using rule 86 (valoresMat -> funcInt .)
    -               reduce using rule 86 (valoresMat -> funcInt .)
    *               reduce using rule 86 (valoresMat -> funcInt .)
    /               reduce using rule 86 (valoresMat -> funcInt .)
    %               reduce using rule 86 (valoresMat -> funcInt .)
    ^               reduce using rule 86 (valoresMat -> funcInt .)


state 75

    (157) menor -> not .

    EQEQ            reduce using rule 157 (menor -> not .)
    DISTINTO        reduce using rule 157 (menor -> not .)
    AND             reduce using rule 157 (menor -> not .)
    OR              reduce using rule 157 (menor -> not .)
    ?               reduce using rule 157 (menor -> not .)
    ,               reduce using rule 157 (menor -> not .)
    )               reduce using rule 157 (menor -> not .)
    ;               reduce using rule 157 (menor -> not .)
    ]               reduce using rule 157 (menor -> not .)
    }               reduce using rule 157 (menor -> not .)
    :               reduce using rule 157 (menor -> not .)


state 76

    (155) mayor -> menor .

    EQEQ            reduce using rule 155 (mayor -> menor .)
    DISTINTO        reduce using rule 155 (mayor -> menor .)
    AND             reduce using rule 155 (mayor -> menor .)
    OR              reduce using rule 155 (mayor -> menor .)
    ?               reduce using rule 155 (mayor -> menor .)
    ,               reduce using rule 155 (mayor -> menor .)
    )               reduce using rule 155 (mayor -> menor .)
    ;               reduce using rule 155 (mayor -> menor .)
    ]               reduce using rule 155 (mayor -> menor .)
    }               reduce using rule 155 (mayor -> menor .)
    :               reduce using rule 155 (mayor -> menor .)


state 77

    (92) eMat -> valoresMat . + p
    (93) eMat -> valoresMat . - p
    (96) eMat -> valoresMat . + valoresMat
    (97) eMat -> valoresMat . - valoresMat
    (102) p -> valoresMat . * exp
    (103) p -> valoresMat . / exp
    (104) p -> valoresMat . % exp
    (108) p -> valoresMat . * valoresMat
    (109) p -> valoresMat . / valoresMat
    (110) p -> valoresMat . % valoresMat
    (113) exp -> valoresMat . ^ iSing
    (115) exp -> valoresMat . ^ valoresMat

    +               shift and go to state 142
    -               shift and go to state 144
    *               shift and go to state 143
    /               shift and go to state 145
    %               shift and go to state 141
    ^               shift and go to state 146


state 78

    (139) and -> eq .
    (140) eq -> eq . EQEQ mayor
    (141) eq -> eq . DISTINTO mayor
    (144) eq -> eq . EQEQ tCompare
    (145) eq -> eq . DISTINTO tCompare

    AND             reduce using rule 139 (and -> eq .)
    OR              reduce using rule 139 (and -> eq .)
    ?               reduce using rule 139 (and -> eq .)
    ;               reduce using rule 139 (and -> eq .)
    )               reduce using rule 139 (and -> eq .)
    ,               reduce using rule 139 (and -> eq .)
    ]               reduce using rule 139 (and -> eq .)
    }               reduce using rule 139 (and -> eq .)
    :               reduce using rule 139 (and -> eq .)
    EQEQ            shift and go to state 147
    DISTINTO        shift and go to state 148


state 79

    (131) expBool -> valoresBool . OR and
    (133) expBool -> valoresBool . OR valoresBool
    (127) ternario -> valoresBool . ? valores : valores
    (136) and -> valoresBool . AND eq
    (138) and -> valoresBool . AND valoresBool

    OR              shift and go to state 150
    ?               shift and go to state 151
    AND             shift and go to state 149


state 80

    (46) valores -> eMat .
    (90) eMat -> eMat . + p
    (91) eMat -> eMat . - p
    (94) eMat -> eMat . + valoresMat
    (95) eMat -> eMat . - valoresMat
    (149) tCompare -> eMat .

    ;               reduce using rule 46 (valores -> eMat .)
    )               reduce using rule 46 (valores -> eMat .)
    :               reduce using rule 46 (valores -> eMat .)
    }               reduce using rule 46 (valores -> eMat .)
    ,               reduce using rule 46 (valores -> eMat .)
    ]               reduce using rule 46 (valores -> eMat .)
    +               shift and go to state 152
    -               shift and go to state 153
    EQEQ            reduce using rule 149 (tCompare -> eMat .)
    DISTINTO        reduce using rule 149 (tCompare -> eMat .)
    >               reduce using rule 149 (tCompare -> eMat .)
    <               reduce using rule 149 (tCompare -> eMat .)


state 81

    (129) ternario -> ( . ternario )
    (122) paren -> ( . eMat )
    (161) parenBool -> ( . expBool )
    (127) ternario -> . valoresBool ? valores : valores
    (128) ternario -> . expBool ? valores : valores
    (129) ternario -> . ( ternario )
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (130) expBool -> . expBool OR and
    (131) expBool -> . valoresBool OR and
    (132) expBool -> . expBool OR valoresBool
    (133) expBool -> . valoresBool OR valoresBool
    (134) expBool -> . and
    (123) valoresBool -> . BOOL
    (124) valoresBool -> . funcBool
    (125) valoresBool -> . varYVals
    (126) valoresBool -> . varsOps
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (135) and -> . and AND eq
    (136) and -> . valoresBool AND eq
    (137) and -> . and AND valoresBool
    (138) and -> . valoresBool AND valoresBool
    (139) and -> . eq
    (38) funcBool -> . COLINEALES ( valores , valores )
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (140) eq -> . eq EQEQ mayor
    (141) eq -> . eq DISTINTO mayor
    (142) eq -> . tCompare EQEQ mayor
    (143) eq -> . tCompare DISTINTO mayor
    (144) eq -> . eq EQEQ tCompare
    (145) eq -> . eq DISTINTO tCompare
    (146) eq -> . tCompare EQEQ tCompare
    (147) eq -> . tCompare DISTINTO tCompare
    (148) eq -> . mayor
    (65) vecVal -> . ID m
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (122) paren -> . ( eMat )
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (161) parenBool -> . ( expBool )

    (               shift and go to state 81
    BOOL            shift and go to state 116
    INT             shift and go to state 157
    FLOAT           shift and go to state 158
    STRING          shift and go to state 108
    COLINEALES      shift and go to state 4
    ID              shift and go to state 46
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    -               shift and go to state 83
    +               shift and go to state 82
    NOT             shift and go to state 100

    and                            shift and go to state 70
    ternario                       shift and go to state 154
    funcBool                       shift and go to state 106
    funcInt                        shift and go to state 107
    menor                          shift and go to state 76
    valoresMat                     shift and go to state 77
    eq                             shift and go to state 78
    vecVal                         shift and go to state 8
    valoresBool                    shift and go to state 155
    eMat                           shift and go to state 156
    mayor                          shift and go to state 103
    paren                          shift and go to state 89
    iSing                          shift and go to state 86
    tCompare                       shift and go to state 88
    not                            shift and go to state 75
    p                              shift and go to state 96
    varsOps                        shift and go to state 159
    exp                            shift and go to state 101
    varYVals                       shift and go to state 160
    parenBool                      shift and go to state 99
    expBool                        shift and go to state 161

state 82

    (118) iSing -> + . paren
    (120) iSing -> + . valoresMat
    (122) paren -> . ( eMat )
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (65) vecVal -> . ID m

    (               shift and go to state 163
    INT             shift and go to state 166
    FLOAT           shift and go to state 165
    STRING          shift and go to state 108
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    ID              shift and go to state 46
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29

    funcInt                        shift and go to state 107
    varsOps                        shift and go to state 167
    valoresMat                     shift and go to state 162
    paren                          shift and go to state 164
    varYVals                       shift and go to state 168
    vecVal                         shift and go to state 8

state 83

    (117) iSing -> - . paren
    (119) iSing -> - . valoresMat
    (122) paren -> . ( eMat )
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (65) vecVal -> . ID m

    (               shift and go to state 163
    INT             shift and go to state 166
    FLOAT           shift and go to state 165
    STRING          shift and go to state 108
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    ID              shift and go to state 46
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29

    funcInt                        shift and go to state 107
    varsOps                        shift and go to state 167
    valoresMat                     shift and go to state 169
    paren                          shift and go to state 170
    varYVals                       shift and go to state 168
    vecVal                         shift and go to state 8

state 84

    (56) valores -> vec .

    ;               reduce using rule 56 (valores -> vec .)
    )               reduce using rule 56 (valores -> vec .)
    :               reduce using rule 56 (valores -> vec .)
    }               reduce using rule 56 (valores -> vec .)
    ,               reduce using rule 56 (valores -> vec .)
    ]               reduce using rule 56 (valores -> vec .)


state 85

    (49) valores -> reg .

    ;               reduce using rule 49 (valores -> reg .)
    )               reduce using rule 49 (valores -> reg .)
    :               reduce using rule 49 (valores -> reg .)
    }               reduce using rule 49 (valores -> reg .)
    ,               reduce using rule 49 (valores -> reg .)
    ]               reduce using rule 49 (valores -> reg .)


state 86

    (116) exp -> iSing .

    ^               reduce using rule 116 (exp -> iSing .)
    *               reduce using rule 116 (exp -> iSing .)
    /               reduce using rule 116 (exp -> iSing .)
    %               reduce using rule 116 (exp -> iSing .)
    +               reduce using rule 116 (exp -> iSing .)
    -               reduce using rule 116 (exp -> iSing .)
    ,               reduce using rule 116 (exp -> iSing .)
    )               reduce using rule 116 (exp -> iSing .)
    ;               reduce using rule 116 (exp -> iSing .)
    ]               reduce using rule 116 (exp -> iSing .)
    }               reduce using rule 116 (exp -> iSing .)
    :               reduce using rule 116 (exp -> iSing .)
    EQEQ            reduce using rule 116 (exp -> iSing .)
    DISTINTO        reduce using rule 116 (exp -> iSing .)
    >               reduce using rule 116 (exp -> iSing .)
    <               reduce using rule 116 (exp -> iSing .)
    AND             reduce using rule 116 (exp -> iSing .)
    OR              reduce using rule 116 (exp -> iSing .)
    ?               reduce using rule 116 (exp -> iSing .)


state 87

    (52) valores -> STRING .
    (89) valoresMat -> STRING .

    ;               reduce using rule 52 (valores -> STRING .)
    )               reduce using rule 52 (valores -> STRING .)
    :               reduce using rule 52 (valores -> STRING .)
    }               reduce using rule 52 (valores -> STRING .)
    ,               reduce using rule 52 (valores -> STRING .)
    ]               reduce using rule 52 (valores -> STRING .)
    +               reduce using rule 89 (valoresMat -> STRING .)
    -               reduce using rule 89 (valoresMat -> STRING .)
    *               reduce using rule 89 (valoresMat -> STRING .)
    /               reduce using rule 89 (valoresMat -> STRING .)
    %               reduce using rule 89 (valoresMat -> STRING .)
    ^               reduce using rule 89 (valoresMat -> STRING .)


state 88

    (142) eq -> tCompare . EQEQ mayor
    (143) eq -> tCompare . DISTINTO mayor
    (146) eq -> tCompare . EQEQ tCompare
    (147) eq -> tCompare . DISTINTO tCompare
    (154) mayor -> tCompare . > tCompare
    (156) menor -> tCompare . < tCompare

    EQEQ            shift and go to state 172
    DISTINTO        shift and go to state 171
    >               shift and go to state 174
    <               shift and go to state 173


state 89

    (121) iSing -> paren .

    ^               reduce using rule 121 (iSing -> paren .)
    *               reduce using rule 121 (iSing -> paren .)
    /               reduce using rule 121 (iSing -> paren .)
    %               reduce using rule 121 (iSing -> paren .)
    +               reduce using rule 121 (iSing -> paren .)
    -               reduce using rule 121 (iSing -> paren .)
    EQEQ            reduce using rule 121 (iSing -> paren .)
    DISTINTO        reduce using rule 121 (iSing -> paren .)
    >               reduce using rule 121 (iSing -> paren .)
    <               reduce using rule 121 (iSing -> paren .)
    ,               reduce using rule 121 (iSing -> paren .)
    )               reduce using rule 121 (iSing -> paren .)
    ;               reduce using rule 121 (iSing -> paren .)
    ]               reduce using rule 121 (iSing -> paren .)
    }               reduce using rule 121 (iSing -> paren .)
    :               reduce using rule 121 (iSing -> paren .)
    AND             reduce using rule 121 (iSing -> paren .)
    OR              reduce using rule 121 (iSing -> paren .)
    ?               reduce using rule 121 (iSing -> paren .)


state 90

    (43) vec -> [ . elem ]
    (44) elem -> . valores , elem
    (45) elem -> . valores
    (46) valores -> . eMat
    (47) valores -> . expBool
    (48) valores -> . funcReturn
    (49) valores -> . reg
    (50) valores -> . INT
    (51) valores -> . FLOAT
    (52) valores -> . STRING
    (53) valores -> . BOOL
    (54) valores -> . varYVals
    (55) valores -> . varsOps
    (56) valores -> . vec
    (57) valores -> . ternario
    (58) valores -> . ID . valoresCampos
    (59) valores -> . RES
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (130) expBool -> . expBool OR and
    (131) expBool -> . valoresBool OR and
    (132) expBool -> . expBool OR valoresBool
    (133) expBool -> . valoresBool OR valoresBool
    (134) expBool -> . and
    (32) funcReturn -> . funcInt
    (33) funcReturn -> . funcString
    (34) funcReturn -> . funcBool
    (70) reg -> . { campos }
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (43) vec -> . [ elem ]
    (127) ternario -> . valoresBool ? valores : valores
    (128) ternario -> . expBool ? valores : valores
    (129) ternario -> . ( ternario )
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (123) valoresBool -> . BOOL
    (124) valoresBool -> . funcBool
    (125) valoresBool -> . varYVals
    (126) valoresBool -> . varsOps
    (135) and -> . and AND eq
    (136) and -> . valoresBool AND eq
    (137) and -> . and AND valoresBool
    (138) and -> . valoresBool AND valoresBool
    (139) and -> . eq
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (37) funcString -> . CAPITALIZAR ( valores )
    (38) funcBool -> . COLINEALES ( valores , valores )
    (65) vecVal -> . ID m
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (140) eq -> . eq EQEQ mayor
    (141) eq -> . eq DISTINTO mayor
    (142) eq -> . tCompare EQEQ mayor
    (143) eq -> . tCompare DISTINTO mayor
    (144) eq -> . eq EQEQ tCompare
    (145) eq -> . eq DISTINTO tCompare
    (146) eq -> . tCompare EQEQ tCompare
    (147) eq -> . tCompare DISTINTO tCompare
    (148) eq -> . mayor
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (122) paren -> . ( eMat )
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (161) parenBool -> . ( expBool )

    INT             shift and go to state 92
    FLOAT           shift and go to state 94
    STRING          shift and go to state 87
    BOOL            shift and go to state 97
    ID              shift and go to state 91
    RES             shift and go to state 73
    {               shift and go to state 102
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    [               shift and go to state 90
    (               shift and go to state 81
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 4
    -               shift and go to state 83
    +               shift and go to state 82
    NOT             shift and go to state 100

    and                            shift and go to state 70
    ternario                       shift and go to state 71
    funcBool                       shift and go to state 72
    funcInt                        shift and go to state 74
    valores                        shift and go to state 175
    menor                          shift and go to state 76
    mayor                          shift and go to state 103
    valoresMat                     shift and go to state 77
    eq                             shift and go to state 78
    valoresBool                    shift and go to state 79
    eMat                           shift and go to state 80
    vecVal                         shift and go to state 8
    vec                            shift and go to state 84
    paren                          shift and go to state 89
    reg                            shift and go to state 85
    iSing                          shift and go to state 86
    exp                            shift and go to state 101
    tCompare                       shift and go to state 88
    not                            shift and go to state 75
    funcString                     shift and go to state 23
    funcReturn                     shift and go to state 93
    elem                           shift and go to state 176
    p                              shift and go to state 96
    varsOps                        shift and go to state 98
    varYVals                       shift and go to state 104
    parenBool                      shift and go to state 99
    expBool                        shift and go to state 105

state 91

    (58) valores -> ID . . valoresCampos
    (63) varYVals -> ID .
    (65) vecVal -> ID . m
    (66) m -> . [ INT ]
    (67) m -> . [ INT ] m
    (68) m -> . [ varYVals ] m
    (69) m -> . [ varYVals ]

    .               shift and go to state 177
    MASMAS          reduce using rule 63 (varYVals -> ID .)
    MENOSMENOS      reduce using rule 63 (varYVals -> ID .)
    ;               reduce using rule 63 (varYVals -> ID .)
    )               reduce using rule 63 (varYVals -> ID .)
    +               reduce using rule 63 (varYVals -> ID .)
    -               reduce using rule 63 (varYVals -> ID .)
    *               reduce using rule 63 (varYVals -> ID .)
    /               reduce using rule 63 (varYVals -> ID .)
    %               reduce using rule 63 (varYVals -> ID .)
    ^               reduce using rule 63 (varYVals -> ID .)
    OR              reduce using rule 63 (varYVals -> ID .)
    ?               reduce using rule 63 (varYVals -> ID .)
    AND             reduce using rule 63 (varYVals -> ID .)
    EQEQ            reduce using rule 63 (varYVals -> ID .)
    DISTINTO        reduce using rule 63 (varYVals -> ID .)
    >               reduce using rule 63 (varYVals -> ID .)
    <               reduce using rule 63 (varYVals -> ID .)
    ,               reduce using rule 63 (varYVals -> ID .)
    ]               reduce using rule 63 (varYVals -> ID .)
    :               reduce using rule 63 (varYVals -> ID .)
    }               reduce using rule 63 (varYVals -> ID .)
    [               shift and go to state 52

    m                              shift and go to state 50

state 92

    (50) valores -> INT .
    (84) valoresMat -> INT .
    (152) tCompare -> INT .

    ;               reduce using rule 50 (valores -> INT .)
    )               reduce using rule 50 (valores -> INT .)
    :               reduce using rule 50 (valores -> INT .)
    }               reduce using rule 50 (valores -> INT .)
    ,               reduce using rule 50 (valores -> INT .)
    ]               reduce using rule 50 (valores -> INT .)
    +               reduce using rule 84 (valoresMat -> INT .)
    -               reduce using rule 84 (valoresMat -> INT .)
    *               reduce using rule 84 (valoresMat -> INT .)
    /               reduce using rule 84 (valoresMat -> INT .)
    %               reduce using rule 84 (valoresMat -> INT .)
    ^               reduce using rule 84 (valoresMat -> INT .)
    EQEQ            reduce using rule 152 (tCompare -> INT .)
    DISTINTO        reduce using rule 152 (tCompare -> INT .)
    >               reduce using rule 152 (tCompare -> INT .)
    <               reduce using rule 152 (tCompare -> INT .)


state 93

    (48) valores -> funcReturn .

    ;               reduce using rule 48 (valores -> funcReturn .)
    )               reduce using rule 48 (valores -> funcReturn .)
    :               reduce using rule 48 (valores -> funcReturn .)
    }               reduce using rule 48 (valores -> funcReturn .)
    ,               reduce using rule 48 (valores -> funcReturn .)
    ]               reduce using rule 48 (valores -> funcReturn .)


state 94

    (51) valores -> FLOAT .
    (85) valoresMat -> FLOAT .
    (153) tCompare -> FLOAT .

    ;               reduce using rule 51 (valores -> FLOAT .)
    )               reduce using rule 51 (valores -> FLOAT .)
    :               reduce using rule 51 (valores -> FLOAT .)
    }               reduce using rule 51 (valores -> FLOAT .)
    ,               reduce using rule 51 (valores -> FLOAT .)
    ]               reduce using rule 51 (valores -> FLOAT .)
    +               reduce using rule 85 (valoresMat -> FLOAT .)
    -               reduce using rule 85 (valoresMat -> FLOAT .)
    *               reduce using rule 85 (valoresMat -> FLOAT .)
    /               reduce using rule 85 (valoresMat -> FLOAT .)
    %               reduce using rule 85 (valoresMat -> FLOAT .)
    ^               reduce using rule 85 (valoresMat -> FLOAT .)
    EQEQ            reduce using rule 153 (tCompare -> FLOAT .)
    DISTINTO        reduce using rule 153 (tCompare -> FLOAT .)
    >               reduce using rule 153 (tCompare -> FLOAT .)
    <               reduce using rule 153 (tCompare -> FLOAT .)


state 95

    (38) funcBool -> COLINEALES ( valores . , valores )

    ,               shift and go to state 178


state 96

    (98) eMat -> p .
    (99) p -> p . * exp
    (100) p -> p . / exp
    (101) p -> p . % exp
    (105) p -> p . * valoresMat
    (106) p -> p . / valoresMat
    (107) p -> p . % valoresMat

    +               reduce using rule 98 (eMat -> p .)
    -               reduce using rule 98 (eMat -> p .)
    >               reduce using rule 98 (eMat -> p .)
    <               reduce using rule 98 (eMat -> p .)
    EQEQ            reduce using rule 98 (eMat -> p .)
    DISTINTO        reduce using rule 98 (eMat -> p .)
    AND             reduce using rule 98 (eMat -> p .)
    OR              reduce using rule 98 (eMat -> p .)
    ?               reduce using rule 98 (eMat -> p .)
    ,               reduce using rule 98 (eMat -> p .)
    )               reduce using rule 98 (eMat -> p .)
    ;               reduce using rule 98 (eMat -> p .)
    ]               reduce using rule 98 (eMat -> p .)
    }               reduce using rule 98 (eMat -> p .)
    :               reduce using rule 98 (eMat -> p .)
    *               shift and go to state 180
    /               shift and go to state 181
    %               shift and go to state 179


state 97

    (53) valores -> BOOL .
    (123) valoresBool -> BOOL .

    ;               reduce using rule 53 (valores -> BOOL .)
    )               reduce using rule 53 (valores -> BOOL .)
    :               reduce using rule 53 (valores -> BOOL .)
    }               reduce using rule 53 (valores -> BOOL .)
    ,               reduce using rule 53 (valores -> BOOL .)
    ]               reduce using rule 53 (valores -> BOOL .)
    OR              reduce using rule 123 (valoresBool -> BOOL .)
    ?               reduce using rule 123 (valoresBool -> BOOL .)
    AND             reduce using rule 123 (valoresBool -> BOOL .)


state 98

    (55) valores -> varsOps .
    (88) valoresMat -> varsOps .
    (126) valoresBool -> varsOps .
    (150) tCompare -> varsOps .

    ;               reduce using rule 55 (valores -> varsOps .)
    )               reduce using rule 55 (valores -> varsOps .)
    :               reduce using rule 55 (valores -> varsOps .)
    }               reduce using rule 55 (valores -> varsOps .)
    ,               reduce using rule 55 (valores -> varsOps .)
    ]               reduce using rule 55 (valores -> varsOps .)
    +               reduce using rule 88 (valoresMat -> varsOps .)
    -               reduce using rule 88 (valoresMat -> varsOps .)
    *               reduce using rule 88 (valoresMat -> varsOps .)
    /               reduce using rule 88 (valoresMat -> varsOps .)
    %               reduce using rule 88 (valoresMat -> varsOps .)
    ^               reduce using rule 88 (valoresMat -> varsOps .)
    OR              reduce using rule 126 (valoresBool -> varsOps .)
    ?               reduce using rule 126 (valoresBool -> varsOps .)
    AND             reduce using rule 126 (valoresBool -> varsOps .)
    EQEQ            reduce using rule 150 (tCompare -> varsOps .)
    DISTINTO        reduce using rule 150 (tCompare -> varsOps .)
    >               reduce using rule 150 (tCompare -> varsOps .)
    <               reduce using rule 150 (tCompare -> varsOps .)


state 99

    (160) not -> parenBool .

    EQEQ            reduce using rule 160 (not -> parenBool .)
    DISTINTO        reduce using rule 160 (not -> parenBool .)
    AND             reduce using rule 160 (not -> parenBool .)
    OR              reduce using rule 160 (not -> parenBool .)
    )               reduce using rule 160 (not -> parenBool .)
    ?               reduce using rule 160 (not -> parenBool .)
    ,               reduce using rule 160 (not -> parenBool .)
    ;               reduce using rule 160 (not -> parenBool .)
    ]               reduce using rule 160 (not -> parenBool .)
    }               reduce using rule 160 (not -> parenBool .)
    :               reduce using rule 160 (not -> parenBool .)


state 100

    (158) not -> NOT . not
    (159) not -> NOT . valoresBool
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (123) valoresBool -> . BOOL
    (124) valoresBool -> . funcBool
    (125) valoresBool -> . varYVals
    (126) valoresBool -> . varsOps
    (161) parenBool -> . ( expBool )
    (38) funcBool -> . COLINEALES ( valores , valores )
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (65) vecVal -> . ID m

    NOT             shift and go to state 100
    BOOL            shift and go to state 116
    (               shift and go to state 182
    COLINEALES      shift and go to state 4
    ID              shift and go to state 46
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29

    funcBool                       shift and go to state 106
    parenBool                      shift and go to state 99
    varsOps                        shift and go to state 184
    vecVal                         shift and go to state 8
    not                            shift and go to state 183
    varYVals                       shift and go to state 185
    valoresBool                    shift and go to state 186

state 101

    (111) p -> exp .
    (112) exp -> exp . ^ iSing
    (114) exp -> exp . ^ valoresMat

    *               reduce using rule 111 (p -> exp .)
    /               reduce using rule 111 (p -> exp .)
    %               reduce using rule 111 (p -> exp .)
    +               reduce using rule 111 (p -> exp .)
    -               reduce using rule 111 (p -> exp .)
    EQEQ            reduce using rule 111 (p -> exp .)
    DISTINTO        reduce using rule 111 (p -> exp .)
    >               reduce using rule 111 (p -> exp .)
    <               reduce using rule 111 (p -> exp .)
    ;               reduce using rule 111 (p -> exp .)
    )               reduce using rule 111 (p -> exp .)
    ,               reduce using rule 111 (p -> exp .)
    ]               reduce using rule 111 (p -> exp .)
    }               reduce using rule 111 (p -> exp .)
    :               reduce using rule 111 (p -> exp .)
    AND             reduce using rule 111 (p -> exp .)
    OR              reduce using rule 111 (p -> exp .)
    ?               reduce using rule 111 (p -> exp .)
    ^               shift and go to state 187


state 102

    (70) reg -> { . campos }
    (71) campos -> . ID : valores , campos
    (72) campos -> . valores
    (46) valores -> . eMat
    (47) valores -> . expBool
    (48) valores -> . funcReturn
    (49) valores -> . reg
    (50) valores -> . INT
    (51) valores -> . FLOAT
    (52) valores -> . STRING
    (53) valores -> . BOOL
    (54) valores -> . varYVals
    (55) valores -> . varsOps
    (56) valores -> . vec
    (57) valores -> . ternario
    (58) valores -> . ID . valoresCampos
    (59) valores -> . RES
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (130) expBool -> . expBool OR and
    (131) expBool -> . valoresBool OR and
    (132) expBool -> . expBool OR valoresBool
    (133) expBool -> . valoresBool OR valoresBool
    (134) expBool -> . and
    (32) funcReturn -> . funcInt
    (33) funcReturn -> . funcString
    (34) funcReturn -> . funcBool
    (70) reg -> . { campos }
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (43) vec -> . [ elem ]
    (127) ternario -> . valoresBool ? valores : valores
    (128) ternario -> . expBool ? valores : valores
    (129) ternario -> . ( ternario )
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (123) valoresBool -> . BOOL
    (124) valoresBool -> . funcBool
    (125) valoresBool -> . varYVals
    (126) valoresBool -> . varsOps
    (135) and -> . and AND eq
    (136) and -> . valoresBool AND eq
    (137) and -> . and AND valoresBool
    (138) and -> . valoresBool AND valoresBool
    (139) and -> . eq
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (37) funcString -> . CAPITALIZAR ( valores )
    (38) funcBool -> . COLINEALES ( valores , valores )
    (65) vecVal -> . ID m
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (140) eq -> . eq EQEQ mayor
    (141) eq -> . eq DISTINTO mayor
    (142) eq -> . tCompare EQEQ mayor
    (143) eq -> . tCompare DISTINTO mayor
    (144) eq -> . eq EQEQ tCompare
    (145) eq -> . eq DISTINTO tCompare
    (146) eq -> . tCompare EQEQ tCompare
    (147) eq -> . tCompare DISTINTO tCompare
    (148) eq -> . mayor
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (122) paren -> . ( eMat )
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (161) parenBool -> . ( expBool )

    ID              shift and go to state 189
    INT             shift and go to state 92
    FLOAT           shift and go to state 94
    STRING          shift and go to state 87
    BOOL            shift and go to state 97
    RES             shift and go to state 73
    {               shift and go to state 102
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    [               shift and go to state 90
    (               shift and go to state 81
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 4
    -               shift and go to state 83
    +               shift and go to state 82
    NOT             shift and go to state 100

    and                            shift and go to state 70
    ternario                       shift and go to state 71
    funcBool                       shift and go to state 72
    funcInt                        shift and go to state 74
    menor                          shift and go to state 76
    mayor                          shift and go to state 103
    valoresMat                     shift and go to state 77
    eq                             shift and go to state 78
    valoresBool                    shift and go to state 79
    eMat                           shift and go to state 80
    vecVal                         shift and go to state 8
    vec                            shift and go to state 84
    paren                          shift and go to state 89
    reg                            shift and go to state 85
    iSing                          shift and go to state 86
    exp                            shift and go to state 101
    tCompare                       shift and go to state 88
    campos                         shift and go to state 188
    not                            shift and go to state 75
    funcString                     shift and go to state 23
    funcReturn                     shift and go to state 93
    valores                        shift and go to state 190
    p                              shift and go to state 96
    varsOps                        shift and go to state 98
    varYVals                       shift and go to state 104
    parenBool                      shift and go to state 99
    expBool                        shift and go to state 105

state 103

    (148) eq -> mayor .

    EQEQ            reduce using rule 148 (eq -> mayor .)
    DISTINTO        reduce using rule 148 (eq -> mayor .)
    AND             reduce using rule 148 (eq -> mayor .)
    OR              reduce using rule 148 (eq -> mayor .)
    ?               reduce using rule 148 (eq -> mayor .)
    ,               reduce using rule 148 (eq -> mayor .)
    )               reduce using rule 148 (eq -> mayor .)
    ;               reduce using rule 148 (eq -> mayor .)
    ]               reduce using rule 148 (eq -> mayor .)
    }               reduce using rule 148 (eq -> mayor .)
    :               reduce using rule 148 (eq -> mayor .)


state 104

    (54) valores -> varYVals .
    (75) varsOps -> varYVals . MASMAS
    (76) varsOps -> varYVals . MENOSMENOS
    (87) valoresMat -> varYVals .
    (125) valoresBool -> varYVals .
    (151) tCompare -> varYVals .

    ;               reduce using rule 54 (valores -> varYVals .)
    )               reduce using rule 54 (valores -> varYVals .)
    :               reduce using rule 54 (valores -> varYVals .)
    }               reduce using rule 54 (valores -> varYVals .)
    ,               reduce using rule 54 (valores -> varYVals .)
    ]               reduce using rule 54 (valores -> varYVals .)
    MASMAS          shift and go to state 63
    MENOSMENOS      shift and go to state 60
    +               reduce using rule 87 (valoresMat -> varYVals .)
    -               reduce using rule 87 (valoresMat -> varYVals .)
    *               reduce using rule 87 (valoresMat -> varYVals .)
    /               reduce using rule 87 (valoresMat -> varYVals .)
    %               reduce using rule 87 (valoresMat -> varYVals .)
    ^               reduce using rule 87 (valoresMat -> varYVals .)
    OR              reduce using rule 125 (valoresBool -> varYVals .)
    ?               reduce using rule 125 (valoresBool -> varYVals .)
    AND             reduce using rule 125 (valoresBool -> varYVals .)
    EQEQ            reduce using rule 151 (tCompare -> varYVals .)
    DISTINTO        reduce using rule 151 (tCompare -> varYVals .)
    >               reduce using rule 151 (tCompare -> varYVals .)
    <               reduce using rule 151 (tCompare -> varYVals .)


state 105

    (47) valores -> expBool .
    (130) expBool -> expBool . OR and
    (132) expBool -> expBool . OR valoresBool
    (128) ternario -> expBool . ? valores : valores

    ;               reduce using rule 47 (valores -> expBool .)
    )               reduce using rule 47 (valores -> expBool .)
    :               reduce using rule 47 (valores -> expBool .)
    }               reduce using rule 47 (valores -> expBool .)
    ,               reduce using rule 47 (valores -> expBool .)
    ]               reduce using rule 47 (valores -> expBool .)
    OR              shift and go to state 191
    ?               shift and go to state 192


state 106

    (124) valoresBool -> funcBool .

    AND             reduce using rule 124 (valoresBool -> funcBool .)
    OR              reduce using rule 124 (valoresBool -> funcBool .)
    ?               reduce using rule 124 (valoresBool -> funcBool .)
    ,               reduce using rule 124 (valoresBool -> funcBool .)
    )               reduce using rule 124 (valoresBool -> funcBool .)
    ;               reduce using rule 124 (valoresBool -> funcBool .)
    ]               reduce using rule 124 (valoresBool -> funcBool .)
    }               reduce using rule 124 (valoresBool -> funcBool .)
    :               reduce using rule 124 (valoresBool -> funcBool .)
    EQEQ            reduce using rule 124 (valoresBool -> funcBool .)
    DISTINTO        reduce using rule 124 (valoresBool -> funcBool .)


state 107

    (86) valoresMat -> funcInt .

    *               reduce using rule 86 (valoresMat -> funcInt .)
    /               reduce using rule 86 (valoresMat -> funcInt .)
    %               reduce using rule 86 (valoresMat -> funcInt .)
    ^               reduce using rule 86 (valoresMat -> funcInt .)
    +               reduce using rule 86 (valoresMat -> funcInt .)
    -               reduce using rule 86 (valoresMat -> funcInt .)
    ,               reduce using rule 86 (valoresMat -> funcInt .)
    EQEQ            reduce using rule 86 (valoresMat -> funcInt .)
    DISTINTO        reduce using rule 86 (valoresMat -> funcInt .)
    >               reduce using rule 86 (valoresMat -> funcInt .)
    <               reduce using rule 86 (valoresMat -> funcInt .)
    )               reduce using rule 86 (valoresMat -> funcInt .)
    ;               reduce using rule 86 (valoresMat -> funcInt .)
    ]               reduce using rule 86 (valoresMat -> funcInt .)
    }               reduce using rule 86 (valoresMat -> funcInt .)
    AND             reduce using rule 86 (valoresMat -> funcInt .)
    OR              reduce using rule 86 (valoresMat -> funcInt .)
    ?               reduce using rule 86 (valoresMat -> funcInt .)
    :               reduce using rule 86 (valoresMat -> funcInt .)


state 108

    (89) valoresMat -> STRING .

    *               reduce using rule 89 (valoresMat -> STRING .)
    /               reduce using rule 89 (valoresMat -> STRING .)
    %               reduce using rule 89 (valoresMat -> STRING .)
    ^               reduce using rule 89 (valoresMat -> STRING .)
    +               reduce using rule 89 (valoresMat -> STRING .)
    -               reduce using rule 89 (valoresMat -> STRING .)
    ,               reduce using rule 89 (valoresMat -> STRING .)
    EQEQ            reduce using rule 89 (valoresMat -> STRING .)
    DISTINTO        reduce using rule 89 (valoresMat -> STRING .)
    >               reduce using rule 89 (valoresMat -> STRING .)
    <               reduce using rule 89 (valoresMat -> STRING .)
    )               reduce using rule 89 (valoresMat -> STRING .)
    ;               reduce using rule 89 (valoresMat -> STRING .)
    ]               reduce using rule 89 (valoresMat -> STRING .)
    }               reduce using rule 89 (valoresMat -> STRING .)
    AND             reduce using rule 89 (valoresMat -> STRING .)
    OR              reduce using rule 89 (valoresMat -> STRING .)
    ?               reduce using rule 89 (valoresMat -> STRING .)
    :               reduce using rule 89 (valoresMat -> STRING .)


state 109

    (149) tCompare -> eMat .
    (90) eMat -> eMat . + p
    (91) eMat -> eMat . - p
    (94) eMat -> eMat . + valoresMat
    (95) eMat -> eMat . - valoresMat

    EQEQ            reduce using rule 149 (tCompare -> eMat .)
    DISTINTO        reduce using rule 149 (tCompare -> eMat .)
    >               reduce using rule 149 (tCompare -> eMat .)
    <               reduce using rule 149 (tCompare -> eMat .)
    AND             reduce using rule 149 (tCompare -> eMat .)
    OR              reduce using rule 149 (tCompare -> eMat .)
    ?               reduce using rule 149 (tCompare -> eMat .)
    ,               reduce using rule 149 (tCompare -> eMat .)
    )               reduce using rule 149 (tCompare -> eMat .)
    ;               reduce using rule 149 (tCompare -> eMat .)
    ]               reduce using rule 149 (tCompare -> eMat .)
    }               reduce using rule 149 (tCompare -> eMat .)
    :               reduce using rule 149 (tCompare -> eMat .)
    +               shift and go to state 152
    -               shift and go to state 153


state 110

    (161) parenBool -> ( . expBool )
    (122) paren -> ( . eMat )
    (130) expBool -> . expBool OR and
    (131) expBool -> . valoresBool OR and
    (132) expBool -> . expBool OR valoresBool
    (133) expBool -> . valoresBool OR valoresBool
    (134) expBool -> . and
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (123) valoresBool -> . BOOL
    (124) valoresBool -> . funcBool
    (125) valoresBool -> . varYVals
    (126) valoresBool -> . varsOps
    (135) and -> . and AND eq
    (136) and -> . valoresBool AND eq
    (137) and -> . and AND valoresBool
    (138) and -> . valoresBool AND valoresBool
    (139) and -> . eq
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (38) funcBool -> . COLINEALES ( valores , valores )
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (140) eq -> . eq EQEQ mayor
    (141) eq -> . eq DISTINTO mayor
    (142) eq -> . tCompare EQEQ mayor
    (143) eq -> . tCompare DISTINTO mayor
    (144) eq -> . eq EQEQ tCompare
    (145) eq -> . eq DISTINTO tCompare
    (146) eq -> . tCompare EQEQ tCompare
    (147) eq -> . tCompare DISTINTO tCompare
    (148) eq -> . mayor
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (65) vecVal -> . ID m
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (122) paren -> . ( eMat )
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (161) parenBool -> . ( expBool )

    BOOL            shift and go to state 116
    INT             shift and go to state 157
    FLOAT           shift and go to state 158
    STRING          shift and go to state 108
    COLINEALES      shift and go to state 4
    ID              shift and go to state 46
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    -               shift and go to state 83
    +               shift and go to state 82
    (               shift and go to state 194
    NOT             shift and go to state 100

    and                            shift and go to state 70
    funcBool                       shift and go to state 106
    funcInt                        shift and go to state 107
    menor                          shift and go to state 76
    valoresMat                     shift and go to state 77
    eq                             shift and go to state 78
    vecVal                         shift and go to state 8
    valoresBool                    shift and go to state 193
    eMat                           shift and go to state 156
    mayor                          shift and go to state 103
    paren                          shift and go to state 89
    iSing                          shift and go to state 86
    tCompare                       shift and go to state 88
    not                            shift and go to state 75
    p                              shift and go to state 96
    varsOps                        shift and go to state 159
    exp                            shift and go to state 101
    varYVals                       shift and go to state 160
    parenBool                      shift and go to state 99
    expBool                        shift and go to state 195

state 111

    (23) cosaBooleana -> valoresBool .
    (131) expBool -> valoresBool . OR and
    (133) expBool -> valoresBool . OR valoresBool
    (136) and -> valoresBool . AND eq
    (138) and -> valoresBool . AND valoresBool

    )               reduce using rule 23 (cosaBooleana -> valoresBool .)
    ;               reduce using rule 23 (cosaBooleana -> valoresBool .)
    OR              shift and go to state 150
    AND             shift and go to state 149


state 112

    (22) cosaBooleana -> expBool .
    (130) expBool -> expBool . OR and
    (132) expBool -> expBool . OR valoresBool

    )               reduce using rule 22 (cosaBooleana -> expBool .)
    ;               reduce using rule 22 (cosaBooleana -> expBool .)
    OR              shift and go to state 191


state 113

    (20) loop -> WHILE ( cosaBooleana . )

    )               shift and go to state 196


state 114

    (152) tCompare -> INT .
    (84) valoresMat -> INT .

    EQEQ            reduce using rule 152 (tCompare -> INT .)
    DISTINTO        reduce using rule 152 (tCompare -> INT .)
    >               reduce using rule 152 (tCompare -> INT .)
    <               reduce using rule 152 (tCompare -> INT .)
    AND             reduce using rule 152 (tCompare -> INT .)
    OR              reduce using rule 152 (tCompare -> INT .)
    ?               reduce using rule 152 (tCompare -> INT .)
    ,               reduce using rule 152 (tCompare -> INT .)
    )               reduce using rule 152 (tCompare -> INT .)
    ;               reduce using rule 152 (tCompare -> INT .)
    ]               reduce using rule 152 (tCompare -> INT .)
    }               reduce using rule 152 (tCompare -> INT .)
    :               reduce using rule 152 (tCompare -> INT .)
    +               reduce using rule 84 (valoresMat -> INT .)
    -               reduce using rule 84 (valoresMat -> INT .)
    *               reduce using rule 84 (valoresMat -> INT .)
    /               reduce using rule 84 (valoresMat -> INT .)
    %               reduce using rule 84 (valoresMat -> INT .)
    ^               reduce using rule 84 (valoresMat -> INT .)


state 115

    (153) tCompare -> FLOAT .
    (85) valoresMat -> FLOAT .

    EQEQ            reduce using rule 153 (tCompare -> FLOAT .)
    DISTINTO        reduce using rule 153 (tCompare -> FLOAT .)
    >               reduce using rule 153 (tCompare -> FLOAT .)
    <               reduce using rule 153 (tCompare -> FLOAT .)
    AND             reduce using rule 153 (tCompare -> FLOAT .)
    OR              reduce using rule 153 (tCompare -> FLOAT .)
    ?               reduce using rule 153 (tCompare -> FLOAT .)
    ,               reduce using rule 153 (tCompare -> FLOAT .)
    )               reduce using rule 153 (tCompare -> FLOAT .)
    ;               reduce using rule 153 (tCompare -> FLOAT .)
    ]               reduce using rule 153 (tCompare -> FLOAT .)
    }               reduce using rule 153 (tCompare -> FLOAT .)
    :               reduce using rule 153 (tCompare -> FLOAT .)
    +               reduce using rule 85 (valoresMat -> FLOAT .)
    -               reduce using rule 85 (valoresMat -> FLOAT .)
    *               reduce using rule 85 (valoresMat -> FLOAT .)
    /               reduce using rule 85 (valoresMat -> FLOAT .)
    %               reduce using rule 85 (valoresMat -> FLOAT .)
    ^               reduce using rule 85 (valoresMat -> FLOAT .)


state 116

    (123) valoresBool -> BOOL .

    AND             reduce using rule 123 (valoresBool -> BOOL .)
    OR              reduce using rule 123 (valoresBool -> BOOL .)
    ?               reduce using rule 123 (valoresBool -> BOOL .)
    ,               reduce using rule 123 (valoresBool -> BOOL .)
    )               reduce using rule 123 (valoresBool -> BOOL .)
    ;               reduce using rule 123 (valoresBool -> BOOL .)
    ]               reduce using rule 123 (valoresBool -> BOOL .)
    }               reduce using rule 123 (valoresBool -> BOOL .)
    :               reduce using rule 123 (valoresBool -> BOOL .)
    EQEQ            reduce using rule 123 (valoresBool -> BOOL .)
    DISTINTO        reduce using rule 123 (valoresBool -> BOOL .)


state 117

    (126) valoresBool -> varsOps .
    (150) tCompare -> varsOps .
    (88) valoresMat -> varsOps .

    AND             reduce using rule 126 (valoresBool -> varsOps .)
    OR              reduce using rule 126 (valoresBool -> varsOps .)
    ?               reduce using rule 126 (valoresBool -> varsOps .)
    ,               reduce using rule 126 (valoresBool -> varsOps .)
    )               reduce using rule 126 (valoresBool -> varsOps .)
    ;               reduce using rule 126 (valoresBool -> varsOps .)
    ]               reduce using rule 126 (valoresBool -> varsOps .)
    }               reduce using rule 126 (valoresBool -> varsOps .)
    :               reduce using rule 126 (valoresBool -> varsOps .)
    EQEQ            reduce using rule 150 (tCompare -> varsOps .)
    DISTINTO        reduce using rule 150 (tCompare -> varsOps .)
    >               reduce using rule 150 (tCompare -> varsOps .)
    <               reduce using rule 150 (tCompare -> varsOps .)
    +               reduce using rule 88 (valoresMat -> varsOps .)
    -               reduce using rule 88 (valoresMat -> varsOps .)
    *               reduce using rule 88 (valoresMat -> varsOps .)
    /               reduce using rule 88 (valoresMat -> varsOps .)
    %               reduce using rule 88 (valoresMat -> varsOps .)
    ^               reduce using rule 88 (valoresMat -> varsOps .)


state 118

    (125) valoresBool -> varYVals .
    (75) varsOps -> varYVals . MASMAS
    (76) varsOps -> varYVals . MENOSMENOS
    (151) tCompare -> varYVals .
    (87) valoresMat -> varYVals .

    AND             reduce using rule 125 (valoresBool -> varYVals .)
    OR              reduce using rule 125 (valoresBool -> varYVals .)
    ?               reduce using rule 125 (valoresBool -> varYVals .)
    ,               reduce using rule 125 (valoresBool -> varYVals .)
    )               reduce using rule 125 (valoresBool -> varYVals .)
    ;               reduce using rule 125 (valoresBool -> varYVals .)
    ]               reduce using rule 125 (valoresBool -> varYVals .)
    }               reduce using rule 125 (valoresBool -> varYVals .)
    :               reduce using rule 125 (valoresBool -> varYVals .)
    MASMAS          shift and go to state 63
    MENOSMENOS      shift and go to state 60
    EQEQ            reduce using rule 151 (tCompare -> varYVals .)
    DISTINTO        reduce using rule 151 (tCompare -> varYVals .)
    >               reduce using rule 151 (tCompare -> varYVals .)
    <               reduce using rule 151 (tCompare -> varYVals .)
    +               reduce using rule 87 (valoresMat -> varYVals .)
    -               reduce using rule 87 (valoresMat -> varYVals .)
    *               reduce using rule 87 (valoresMat -> varYVals .)
    /               reduce using rule 87 (valoresMat -> varYVals .)
    %               reduce using rule 87 (valoresMat -> varYVals .)
    ^               reduce using rule 87 (valoresMat -> varYVals .)


state 119

    (39) funcVoid -> PRINT ( valores . )

    )               shift and go to state 197


state 120

    (5) lAbierta -> IF ( cosaBooleana . ) linea
    (6) lAbierta -> IF ( cosaBooleana . ) bloqueCerrado ELSE lAbierta
    (12) lCerrada -> IF ( cosaBooleana . ) bloqueCerrado ELSE bloqueCerrado

    )               shift and go to state 198


state 121

    (24) primParam -> varAsig .

    ;               reduce using rule 24 (primParam -> varAsig .)


state 122

    (21) loop -> FOR ( primParam . ; cosaBooleana ; tercerParam )

    ;               shift and go to state 199


state 123

    (78) varAsig -> varYVals . MULEQ valoresAsig
    (79) varAsig -> varYVals . DIVEQ valoresAsig
    (80) varAsig -> varYVals . MASEQ valoresAsig
    (81) varAsig -> varYVals . MENOSEQ valoresAsig
    (82) varAsig -> varYVals . = valoresAsig

    MULEQ           shift and go to state 64
    DIVEQ           shift and go to state 65
    MASEQ           shift and go to state 61
    MENOSEQ         shift and go to state 59
    =               shift and go to state 62


state 124

    (25) primParam -> empty .

    ;               reduce using rule 25 (primParam -> empty .)


state 125

    (36) funcInt -> LENGTH ( valores . )

    )               shift and go to state 200


state 126

    (83) varAsig -> ID . ID . = valoresAsig

    =               shift and go to state 201


state 127

    (66) m -> [ INT . ]
    (67) m -> [ INT . ] m

    ]               shift and go to state 202


state 128

    (68) m -> [ varYVals . ] m
    (69) m -> [ varYVals . ]

    ]               shift and go to state 203


state 129

    (35) funcInt -> MULTIESCALAR ( valores . , valores param )

    ,               shift and go to state 204


state 130

    (37) funcString -> CAPITALIZAR ( valores . )

    )               shift and go to state 205


state 131

    (81) varAsig -> varYVals MENOSEQ valoresAsig .

    ;               reduce using rule 81 (varAsig -> varYVals MENOSEQ valoresAsig .)
    )               reduce using rule 81 (varAsig -> varYVals MENOSEQ valoresAsig .)


state 132

    (77) valoresAsig -> valores .

    ;               reduce using rule 77 (valoresAsig -> valores .)
    )               reduce using rule 77 (valoresAsig -> valores .)


state 133

    (80) varAsig -> varYVals MASEQ valoresAsig .

    ;               reduce using rule 80 (varAsig -> varYVals MASEQ valoresAsig .)
    )               reduce using rule 80 (varAsig -> varYVals MASEQ valoresAsig .)


state 134

    (82) varAsig -> varYVals = valoresAsig .

    ;               reduce using rule 82 (varAsig -> varYVals = valoresAsig .)
    )               reduce using rule 82 (varAsig -> varYVals = valoresAsig .)


state 135

    (78) varAsig -> varYVals MULEQ valoresAsig .

    ;               reduce using rule 78 (varAsig -> varYVals MULEQ valoresAsig .)
    )               reduce using rule 78 (varAsig -> varYVals MULEQ valoresAsig .)


state 136

    (79) varAsig -> varYVals DIVEQ valoresAsig .

    ;               reduce using rule 79 (varAsig -> varYVals DIVEQ valoresAsig .)
    )               reduce using rule 79 (varAsig -> varYVals DIVEQ valoresAsig .)


state 137

    (14) lCerrada -> DO bloqueCerrado WHILE ( . cosaBooleana ) ;
    (22) cosaBooleana -> . expBool
    (23) cosaBooleana -> . valoresBool
    (130) expBool -> . expBool OR and
    (131) expBool -> . valoresBool OR and
    (132) expBool -> . expBool OR valoresBool
    (133) expBool -> . valoresBool OR valoresBool
    (134) expBool -> . and
    (123) valoresBool -> . BOOL
    (124) valoresBool -> . funcBool
    (125) valoresBool -> . varYVals
    (126) valoresBool -> . varsOps
    (135) and -> . and AND eq
    (136) and -> . valoresBool AND eq
    (137) and -> . and AND valoresBool
    (138) and -> . valoresBool AND valoresBool
    (139) and -> . eq
    (38) funcBool -> . COLINEALES ( valores , valores )
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (140) eq -> . eq EQEQ mayor
    (141) eq -> . eq DISTINTO mayor
    (142) eq -> . tCompare EQEQ mayor
    (143) eq -> . tCompare DISTINTO mayor
    (144) eq -> . eq EQEQ tCompare
    (145) eq -> . eq DISTINTO tCompare
    (146) eq -> . tCompare EQEQ tCompare
    (147) eq -> . tCompare DISTINTO tCompare
    (148) eq -> . mayor
    (65) vecVal -> . ID m
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (161) parenBool -> . ( expBool )
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (122) paren -> . ( eMat )

    BOOL            shift and go to state 116
    COLINEALES      shift and go to state 4
    ID              shift and go to state 46
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    INT             shift and go to state 114
    FLOAT           shift and go to state 115
    STRING          shift and go to state 108
    NOT             shift and go to state 100
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    (               shift and go to state 110
    -               shift and go to state 83
    +               shift and go to state 82

    and                            shift and go to state 70
    funcBool                       shift and go to state 106
    funcInt                        shift and go to state 107
    menor                          shift and go to state 76
    valoresMat                     shift and go to state 77
    eq                             shift and go to state 78
    vecVal                         shift and go to state 8
    valoresBool                    shift and go to state 111
    eMat                           shift and go to state 109
    mayor                          shift and go to state 103
    paren                          shift and go to state 89
    iSing                          shift and go to state 86
    tCompare                       shift and go to state 88
    not                            shift and go to state 75
    cosaBooleana                   shift and go to state 206
    p                              shift and go to state 96
    varsOps                        shift and go to state 117
    exp                            shift and go to state 101
    varYVals                       shift and go to state 118
    parenBool                      shift and go to state 99
    expBool                        shift and go to state 112

state 138

    (12) lCerrada -> IF ( cosaBooleana . ) bloqueCerrado ELSE bloqueCerrado

    )               shift and go to state 207


state 139

    (9) bloqueCerrado -> { g } .

    IF              reduce using rule 9 (bloqueCerrado -> { g } .)
    COMMENT         reduce using rule 9 (bloqueCerrado -> { g } .)
    DO              reduce using rule 9 (bloqueCerrado -> { g } .)
    WHILE           reduce using rule 9 (bloqueCerrado -> { g } .)
    FOR             reduce using rule 9 (bloqueCerrado -> { g } .)
    RETURN          reduce using rule 9 (bloqueCerrado -> { g } .)
    ;               reduce using rule 9 (bloqueCerrado -> { g } .)
    MENOSMENOS      reduce using rule 9 (bloqueCerrado -> { g } .)
    MASMAS          reduce using rule 9 (bloqueCerrado -> { g } .)
    ID              reduce using rule 9 (bloqueCerrado -> { g } .)
    PRINT           reduce using rule 9 (bloqueCerrado -> { g } .)
    MULTIESCALAR    reduce using rule 9 (bloqueCerrado -> { g } .)
    LENGTH          reduce using rule 9 (bloqueCerrado -> { g } .)
    CAPITALIZAR     reduce using rule 9 (bloqueCerrado -> { g } .)
    COLINEALES      reduce using rule 9 (bloqueCerrado -> { g } .)
    $end            reduce using rule 9 (bloqueCerrado -> { g } .)
    }               reduce using rule 9 (bloqueCerrado -> { g } .)
    ELSE            reduce using rule 9 (bloqueCerrado -> { g } .)


state 140

    (135) and -> and AND . eq
    (137) and -> and AND . valoresBool
    (140) eq -> . eq EQEQ mayor
    (141) eq -> . eq DISTINTO mayor
    (142) eq -> . tCompare EQEQ mayor
    (143) eq -> . tCompare DISTINTO mayor
    (144) eq -> . eq EQEQ tCompare
    (145) eq -> . eq DISTINTO tCompare
    (146) eq -> . tCompare EQEQ tCompare
    (147) eq -> . tCompare DISTINTO tCompare
    (148) eq -> . mayor
    (123) valoresBool -> . BOOL
    (124) valoresBool -> . funcBool
    (125) valoresBool -> . varYVals
    (126) valoresBool -> . varsOps
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (38) funcBool -> . COLINEALES ( valores , valores )
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (65) vecVal -> . ID m
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (161) parenBool -> . ( expBool )
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (122) paren -> . ( eMat )

    BOOL            shift and go to state 116
    INT             shift and go to state 114
    FLOAT           shift and go to state 115
    COLINEALES      shift and go to state 4
    ID              shift and go to state 46
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    STRING          shift and go to state 108
    NOT             shift and go to state 100
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    (               shift and go to state 110
    -               shift and go to state 83
    +               shift and go to state 82

    funcBool                       shift and go to state 106
    funcInt                        shift and go to state 107
    menor                          shift and go to state 76
    valoresMat                     shift and go to state 77
    eq                             shift and go to state 208
    mayor                          shift and go to state 103
    valoresBool                    shift and go to state 209
    eMat                           shift and go to state 109
    vecVal                         shift and go to state 8
    paren                          shift and go to state 89
    iSing                          shift and go to state 86
    tCompare                       shift and go to state 88
    not                            shift and go to state 75
    p                              shift and go to state 96
    varsOps                        shift and go to state 117
    exp                            shift and go to state 101
    varYVals                       shift and go to state 210
    parenBool                      shift and go to state 99

state 141

    (104) p -> valoresMat % . exp
    (110) p -> valoresMat % . valoresMat
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (122) paren -> . ( eMat )
    (65) vecVal -> . ID m

    INT             shift and go to state 166
    FLOAT           shift and go to state 165
    STRING          shift and go to state 108
    -               shift and go to state 83
    +               shift and go to state 82
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    ID              shift and go to state 46
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    (               shift and go to state 163

    valoresMat                     shift and go to state 211
    funcInt                        shift and go to state 107
    varsOps                        shift and go to state 167
    exp                            shift and go to state 212
    paren                          shift and go to state 89
    varYVals                       shift and go to state 168
    vecVal                         shift and go to state 8
    iSing                          shift and go to state 86

state 142

    (92) eMat -> valoresMat + . p
    (96) eMat -> valoresMat + . valoresMat
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (65) vecVal -> . ID m
    (122) paren -> . ( eMat )

    INT             shift and go to state 166
    FLOAT           shift and go to state 165
    STRING          shift and go to state 108
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    ID              shift and go to state 46
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    -               shift and go to state 83
    +               shift and go to state 82
    (               shift and go to state 163

    valoresMat                     shift and go to state 213
    funcInt                        shift and go to state 107
    p                              shift and go to state 214
    varsOps                        shift and go to state 167
    exp                            shift and go to state 101
    paren                          shift and go to state 89
    varYVals                       shift and go to state 168
    vecVal                         shift and go to state 8
    iSing                          shift and go to state 86

state 143

    (102) p -> valoresMat * . exp
    (108) p -> valoresMat * . valoresMat
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (122) paren -> . ( eMat )
    (65) vecVal -> . ID m

    INT             shift and go to state 166
    FLOAT           shift and go to state 165
    STRING          shift and go to state 108
    -               shift and go to state 83
    +               shift and go to state 82
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    ID              shift and go to state 46
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    (               shift and go to state 163

    valoresMat                     shift and go to state 215
    funcInt                        shift and go to state 107
    varsOps                        shift and go to state 167
    exp                            shift and go to state 216
    paren                          shift and go to state 89
    varYVals                       shift and go to state 168
    vecVal                         shift and go to state 8
    iSing                          shift and go to state 86

state 144

    (93) eMat -> valoresMat - . p
    (97) eMat -> valoresMat - . valoresMat
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (65) vecVal -> . ID m
    (122) paren -> . ( eMat )

    INT             shift and go to state 166
    FLOAT           shift and go to state 165
    STRING          shift and go to state 108
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    ID              shift and go to state 46
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    -               shift and go to state 83
    +               shift and go to state 82
    (               shift and go to state 163

    valoresMat                     shift and go to state 217
    funcInt                        shift and go to state 107
    p                              shift and go to state 218
    varsOps                        shift and go to state 167
    exp                            shift and go to state 101
    paren                          shift and go to state 89
    varYVals                       shift and go to state 168
    vecVal                         shift and go to state 8
    iSing                          shift and go to state 86

state 145

    (103) p -> valoresMat / . exp
    (109) p -> valoresMat / . valoresMat
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (122) paren -> . ( eMat )
    (65) vecVal -> . ID m

    INT             shift and go to state 166
    FLOAT           shift and go to state 165
    STRING          shift and go to state 108
    -               shift and go to state 83
    +               shift and go to state 82
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    ID              shift and go to state 46
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    (               shift and go to state 163

    valoresMat                     shift and go to state 219
    funcInt                        shift and go to state 107
    varsOps                        shift and go to state 167
    exp                            shift and go to state 220
    paren                          shift and go to state 89
    varYVals                       shift and go to state 168
    vecVal                         shift and go to state 8
    iSing                          shift and go to state 86

state 146

    (113) exp -> valoresMat ^ . iSing
    (115) exp -> valoresMat ^ . valoresMat
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (122) paren -> . ( eMat )
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (65) vecVal -> . ID m

    -               shift and go to state 83
    +               shift and go to state 82
    INT             shift and go to state 166
    FLOAT           shift and go to state 165
    STRING          shift and go to state 108
    (               shift and go to state 163
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    ID              shift and go to state 46
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29

    funcInt                        shift and go to state 107
    iSing                          shift and go to state 222
    valoresMat                     shift and go to state 221
    paren                          shift and go to state 89
    varYVals                       shift and go to state 168
    vecVal                         shift and go to state 8
    varsOps                        shift and go to state 167

state 147

    (140) eq -> eq EQEQ . mayor
    (144) eq -> eq EQEQ . tCompare
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (65) vecVal -> . ID m
    (161) parenBool -> . ( expBool )
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (122) paren -> . ( eMat )

    INT             shift and go to state 114
    FLOAT           shift and go to state 115
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    ID              shift and go to state 46
    NOT             shift and go to state 100
    STRING          shift and go to state 108
    (               shift and go to state 110
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    -               shift and go to state 83
    +               shift and go to state 82

    paren                          shift and go to state 89
    eMat                           shift and go to state 109
    p                              shift and go to state 96
    varYVals                       shift and go to state 226
    funcInt                        shift and go to state 107
    vecVal                         shift and go to state 8
    tCompare                       shift and go to state 224
    menor                          shift and go to state 76
    varsOps                        shift and go to state 225
    valoresMat                     shift and go to state 77
    parenBool                      shift and go to state 99
    not                            shift and go to state 75
    exp                            shift and go to state 101
    mayor                          shift and go to state 223
    iSing                          shift and go to state 86

state 148

    (141) eq -> eq DISTINTO . mayor
    (145) eq -> eq DISTINTO . tCompare
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (65) vecVal -> . ID m
    (161) parenBool -> . ( expBool )
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (122) paren -> . ( eMat )

    INT             shift and go to state 114
    FLOAT           shift and go to state 115
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    ID              shift and go to state 46
    NOT             shift and go to state 100
    STRING          shift and go to state 108
    (               shift and go to state 110
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    -               shift and go to state 83
    +               shift and go to state 82

    paren                          shift and go to state 89
    eMat                           shift and go to state 109
    p                              shift and go to state 96
    varYVals                       shift and go to state 226
    funcInt                        shift and go to state 107
    vecVal                         shift and go to state 8
    tCompare                       shift and go to state 228
    menor                          shift and go to state 76
    varsOps                        shift and go to state 225
    valoresMat                     shift and go to state 77
    parenBool                      shift and go to state 99
    not                            shift and go to state 75
    exp                            shift and go to state 101
    mayor                          shift and go to state 227
    iSing                          shift and go to state 86

state 149

    (136) and -> valoresBool AND . eq
    (138) and -> valoresBool AND . valoresBool
    (140) eq -> . eq EQEQ mayor
    (141) eq -> . eq DISTINTO mayor
    (142) eq -> . tCompare EQEQ mayor
    (143) eq -> . tCompare DISTINTO mayor
    (144) eq -> . eq EQEQ tCompare
    (145) eq -> . eq DISTINTO tCompare
    (146) eq -> . tCompare EQEQ tCompare
    (147) eq -> . tCompare DISTINTO tCompare
    (148) eq -> . mayor
    (123) valoresBool -> . BOOL
    (124) valoresBool -> . funcBool
    (125) valoresBool -> . varYVals
    (126) valoresBool -> . varsOps
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (38) funcBool -> . COLINEALES ( valores , valores )
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (65) vecVal -> . ID m
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (161) parenBool -> . ( expBool )
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (122) paren -> . ( eMat )

    BOOL            shift and go to state 116
    INT             shift and go to state 114
    FLOAT           shift and go to state 115
    COLINEALES      shift and go to state 4
    ID              shift and go to state 46
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    STRING          shift and go to state 108
    NOT             shift and go to state 100
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    (               shift and go to state 110
    -               shift and go to state 83
    +               shift and go to state 82

    funcBool                       shift and go to state 106
    funcInt                        shift and go to state 107
    menor                          shift and go to state 76
    valoresMat                     shift and go to state 77
    eq                             shift and go to state 229
    mayor                          shift and go to state 103
    valoresBool                    shift and go to state 230
    eMat                           shift and go to state 109
    vecVal                         shift and go to state 8
    paren                          shift and go to state 89
    iSing                          shift and go to state 86
    tCompare                       shift and go to state 88
    not                            shift and go to state 75
    p                              shift and go to state 96
    varsOps                        shift and go to state 117
    exp                            shift and go to state 101
    varYVals                       shift and go to state 210
    parenBool                      shift and go to state 99

state 150

    (131) expBool -> valoresBool OR . and
    (133) expBool -> valoresBool OR . valoresBool
    (135) and -> . and AND eq
    (136) and -> . valoresBool AND eq
    (137) and -> . and AND valoresBool
    (138) and -> . valoresBool AND valoresBool
    (139) and -> . eq
    (123) valoresBool -> . BOOL
    (124) valoresBool -> . funcBool
    (125) valoresBool -> . varYVals
    (126) valoresBool -> . varsOps
    (140) eq -> . eq EQEQ mayor
    (141) eq -> . eq DISTINTO mayor
    (142) eq -> . tCompare EQEQ mayor
    (143) eq -> . tCompare DISTINTO mayor
    (144) eq -> . eq EQEQ tCompare
    (145) eq -> . eq DISTINTO tCompare
    (146) eq -> . tCompare EQEQ tCompare
    (147) eq -> . tCompare DISTINTO tCompare
    (148) eq -> . mayor
    (38) funcBool -> . COLINEALES ( valores , valores )
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (65) vecVal -> . ID m
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (161) parenBool -> . ( expBool )
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (122) paren -> . ( eMat )

    BOOL            shift and go to state 116
    COLINEALES      shift and go to state 4
    ID              shift and go to state 46
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    INT             shift and go to state 114
    FLOAT           shift and go to state 115
    STRING          shift and go to state 108
    NOT             shift and go to state 100
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    (               shift and go to state 110
    -               shift and go to state 83
    +               shift and go to state 82

    and                            shift and go to state 231
    funcBool                       shift and go to state 106
    funcInt                        shift and go to state 107
    menor                          shift and go to state 76
    valoresMat                     shift and go to state 77
    eq                             shift and go to state 78
    mayor                          shift and go to state 103
    valoresBool                    shift and go to state 232
    eMat                           shift and go to state 109
    vecVal                         shift and go to state 8
    paren                          shift and go to state 89
    iSing                          shift and go to state 86
    tCompare                       shift and go to state 88
    not                            shift and go to state 75
    p                              shift and go to state 96
    varsOps                        shift and go to state 117
    exp                            shift and go to state 101
    varYVals                       shift and go to state 118
    parenBool                      shift and go to state 99

state 151

    (127) ternario -> valoresBool ? . valores : valores
    (46) valores -> . eMat
    (47) valores -> . expBool
    (48) valores -> . funcReturn
    (49) valores -> . reg
    (50) valores -> . INT
    (51) valores -> . FLOAT
    (52) valores -> . STRING
    (53) valores -> . BOOL
    (54) valores -> . varYVals
    (55) valores -> . varsOps
    (56) valores -> . vec
    (57) valores -> . ternario
    (58) valores -> . ID . valoresCampos
    (59) valores -> . RES
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (130) expBool -> . expBool OR and
    (131) expBool -> . valoresBool OR and
    (132) expBool -> . expBool OR valoresBool
    (133) expBool -> . valoresBool OR valoresBool
    (134) expBool -> . and
    (32) funcReturn -> . funcInt
    (33) funcReturn -> . funcString
    (34) funcReturn -> . funcBool
    (70) reg -> . { campos }
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (43) vec -> . [ elem ]
    (127) ternario -> . valoresBool ? valores : valores
    (128) ternario -> . expBool ? valores : valores
    (129) ternario -> . ( ternario )
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (123) valoresBool -> . BOOL
    (124) valoresBool -> . funcBool
    (125) valoresBool -> . varYVals
    (126) valoresBool -> . varsOps
    (135) and -> . and AND eq
    (136) and -> . valoresBool AND eq
    (137) and -> . and AND valoresBool
    (138) and -> . valoresBool AND valoresBool
    (139) and -> . eq
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (37) funcString -> . CAPITALIZAR ( valores )
    (38) funcBool -> . COLINEALES ( valores , valores )
    (65) vecVal -> . ID m
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (140) eq -> . eq EQEQ mayor
    (141) eq -> . eq DISTINTO mayor
    (142) eq -> . tCompare EQEQ mayor
    (143) eq -> . tCompare DISTINTO mayor
    (144) eq -> . eq EQEQ tCompare
    (145) eq -> . eq DISTINTO tCompare
    (146) eq -> . tCompare EQEQ tCompare
    (147) eq -> . tCompare DISTINTO tCompare
    (148) eq -> . mayor
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (122) paren -> . ( eMat )
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (161) parenBool -> . ( expBool )

    INT             shift and go to state 92
    FLOAT           shift and go to state 94
    STRING          shift and go to state 87
    BOOL            shift and go to state 97
    ID              shift and go to state 91
    RES             shift and go to state 73
    {               shift and go to state 102
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    [               shift and go to state 90
    (               shift and go to state 81
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 4
    -               shift and go to state 83
    +               shift and go to state 82
    NOT             shift and go to state 100

    and                            shift and go to state 70
    ternario                       shift and go to state 71
    funcBool                       shift and go to state 72
    funcInt                        shift and go to state 74
    menor                          shift and go to state 76
    mayor                          shift and go to state 103
    valoresMat                     shift and go to state 77
    eq                             shift and go to state 78
    valoresBool                    shift and go to state 79
    eMat                           shift and go to state 80
    vecVal                         shift and go to state 8
    vec                            shift and go to state 84
    paren                          shift and go to state 89
    reg                            shift and go to state 85
    iSing                          shift and go to state 86
    exp                            shift and go to state 101
    tCompare                       shift and go to state 88
    not                            shift and go to state 75
    funcString                     shift and go to state 23
    funcReturn                     shift and go to state 93
    valores                        shift and go to state 233
    p                              shift and go to state 96
    varsOps                        shift and go to state 98
    varYVals                       shift and go to state 104
    parenBool                      shift and go to state 99
    expBool                        shift and go to state 105

state 152

    (90) eMat -> eMat + . p
    (94) eMat -> eMat + . valoresMat
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (65) vecVal -> . ID m
    (122) paren -> . ( eMat )

    INT             shift and go to state 166
    FLOAT           shift and go to state 165
    STRING          shift and go to state 108
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    ID              shift and go to state 46
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    -               shift and go to state 83
    +               shift and go to state 82
    (               shift and go to state 163

    valoresMat                     shift and go to state 234
    funcInt                        shift and go to state 107
    p                              shift and go to state 235
    varsOps                        shift and go to state 167
    exp                            shift and go to state 101
    paren                          shift and go to state 89
    varYVals                       shift and go to state 168
    vecVal                         shift and go to state 8
    iSing                          shift and go to state 86

state 153

    (91) eMat -> eMat - . p
    (95) eMat -> eMat - . valoresMat
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (65) vecVal -> . ID m
    (122) paren -> . ( eMat )

    INT             shift and go to state 166
    FLOAT           shift and go to state 165
    STRING          shift and go to state 108
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    ID              shift and go to state 46
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    -               shift and go to state 83
    +               shift and go to state 82
    (               shift and go to state 163

    valoresMat                     shift and go to state 236
    funcInt                        shift and go to state 107
    p                              shift and go to state 237
    varsOps                        shift and go to state 167
    exp                            shift and go to state 101
    paren                          shift and go to state 89
    varYVals                       shift and go to state 168
    vecVal                         shift and go to state 8
    iSing                          shift and go to state 86

state 154

    (129) ternario -> ( ternario . )

    )               shift and go to state 238


state 155

    (127) ternario -> valoresBool . ? valores : valores
    (131) expBool -> valoresBool . OR and
    (133) expBool -> valoresBool . OR valoresBool
    (136) and -> valoresBool . AND eq
    (138) and -> valoresBool . AND valoresBool

    ?               shift and go to state 151
    OR              shift and go to state 150
    AND             shift and go to state 149


state 156

    (122) paren -> ( eMat . )
    (90) eMat -> eMat . + p
    (91) eMat -> eMat . - p
    (94) eMat -> eMat . + valoresMat
    (95) eMat -> eMat . - valoresMat
    (149) tCompare -> eMat .

    )               shift and go to state 239
    +               shift and go to state 152
    -               shift and go to state 153
    EQEQ            reduce using rule 149 (tCompare -> eMat .)
    DISTINTO        reduce using rule 149 (tCompare -> eMat .)
    >               reduce using rule 149 (tCompare -> eMat .)
    <               reduce using rule 149 (tCompare -> eMat .)


state 157

    (84) valoresMat -> INT .
    (152) tCompare -> INT .

    +               reduce using rule 84 (valoresMat -> INT .)
    -               reduce using rule 84 (valoresMat -> INT .)
    *               reduce using rule 84 (valoresMat -> INT .)
    /               reduce using rule 84 (valoresMat -> INT .)
    %               reduce using rule 84 (valoresMat -> INT .)
    ^               reduce using rule 84 (valoresMat -> INT .)
    EQEQ            reduce using rule 152 (tCompare -> INT .)
    DISTINTO        reduce using rule 152 (tCompare -> INT .)
    >               reduce using rule 152 (tCompare -> INT .)
    <               reduce using rule 152 (tCompare -> INT .)


state 158

    (85) valoresMat -> FLOAT .
    (153) tCompare -> FLOAT .

    +               reduce using rule 85 (valoresMat -> FLOAT .)
    -               reduce using rule 85 (valoresMat -> FLOAT .)
    *               reduce using rule 85 (valoresMat -> FLOAT .)
    /               reduce using rule 85 (valoresMat -> FLOAT .)
    %               reduce using rule 85 (valoresMat -> FLOAT .)
    ^               reduce using rule 85 (valoresMat -> FLOAT .)
    EQEQ            reduce using rule 153 (tCompare -> FLOAT .)
    DISTINTO        reduce using rule 153 (tCompare -> FLOAT .)
    >               reduce using rule 153 (tCompare -> FLOAT .)
    <               reduce using rule 153 (tCompare -> FLOAT .)


state 159

    (126) valoresBool -> varsOps .
    (88) valoresMat -> varsOps .
    (150) tCompare -> varsOps .

    OR              reduce using rule 126 (valoresBool -> varsOps .)
    AND             reduce using rule 126 (valoresBool -> varsOps .)
    ?               reduce using rule 126 (valoresBool -> varsOps .)
    +               reduce using rule 88 (valoresMat -> varsOps .)
    -               reduce using rule 88 (valoresMat -> varsOps .)
    *               reduce using rule 88 (valoresMat -> varsOps .)
    /               reduce using rule 88 (valoresMat -> varsOps .)
    %               reduce using rule 88 (valoresMat -> varsOps .)
    ^               reduce using rule 88 (valoresMat -> varsOps .)
    EQEQ            reduce using rule 150 (tCompare -> varsOps .)
    DISTINTO        reduce using rule 150 (tCompare -> varsOps .)
    >               reduce using rule 150 (tCompare -> varsOps .)
    <               reduce using rule 150 (tCompare -> varsOps .)


state 160

    (125) valoresBool -> varYVals .
    (87) valoresMat -> varYVals .
    (75) varsOps -> varYVals . MASMAS
    (76) varsOps -> varYVals . MENOSMENOS
    (151) tCompare -> varYVals .

    OR              reduce using rule 125 (valoresBool -> varYVals .)
    AND             reduce using rule 125 (valoresBool -> varYVals .)
    ?               reduce using rule 125 (valoresBool -> varYVals .)
    +               reduce using rule 87 (valoresMat -> varYVals .)
    -               reduce using rule 87 (valoresMat -> varYVals .)
    *               reduce using rule 87 (valoresMat -> varYVals .)
    /               reduce using rule 87 (valoresMat -> varYVals .)
    %               reduce using rule 87 (valoresMat -> varYVals .)
    ^               reduce using rule 87 (valoresMat -> varYVals .)
    MASMAS          shift and go to state 63
    MENOSMENOS      shift and go to state 60
    EQEQ            reduce using rule 151 (tCompare -> varYVals .)
    DISTINTO        reduce using rule 151 (tCompare -> varYVals .)
    >               reduce using rule 151 (tCompare -> varYVals .)
    <               reduce using rule 151 (tCompare -> varYVals .)


state 161

    (161) parenBool -> ( expBool . )
    (128) ternario -> expBool . ? valores : valores
    (130) expBool -> expBool . OR and
    (132) expBool -> expBool . OR valoresBool

    )               shift and go to state 240
    ?               shift and go to state 192
    OR              shift and go to state 191


state 162

    (120) iSing -> + valoresMat .

    ^               reduce using rule 120 (iSing -> + valoresMat .)
    *               reduce using rule 120 (iSing -> + valoresMat .)
    /               reduce using rule 120 (iSing -> + valoresMat .)
    %               reduce using rule 120 (iSing -> + valoresMat .)
    +               reduce using rule 120 (iSing -> + valoresMat .)
    -               reduce using rule 120 (iSing -> + valoresMat .)
    EQEQ            reduce using rule 120 (iSing -> + valoresMat .)
    DISTINTO        reduce using rule 120 (iSing -> + valoresMat .)
    >               reduce using rule 120 (iSing -> + valoresMat .)
    <               reduce using rule 120 (iSing -> + valoresMat .)
    ,               reduce using rule 120 (iSing -> + valoresMat .)
    )               reduce using rule 120 (iSing -> + valoresMat .)
    ;               reduce using rule 120 (iSing -> + valoresMat .)
    ]               reduce using rule 120 (iSing -> + valoresMat .)
    }               reduce using rule 120 (iSing -> + valoresMat .)
    :               reduce using rule 120 (iSing -> + valoresMat .)
    AND             reduce using rule 120 (iSing -> + valoresMat .)
    OR              reduce using rule 120 (iSing -> + valoresMat .)
    ?               reduce using rule 120 (iSing -> + valoresMat .)


state 163

    (122) paren -> ( . eMat )
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (65) vecVal -> . ID m
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (122) paren -> . ( eMat )

    INT             shift and go to state 166
    FLOAT           shift and go to state 165
    STRING          shift and go to state 108
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    ID              shift and go to state 46
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    -               shift and go to state 83
    +               shift and go to state 82
    (               shift and go to state 163

    eMat                           shift and go to state 241
    funcInt                        shift and go to state 107
    p                              shift and go to state 96
    varsOps                        shift and go to state 167
    valoresMat                     shift and go to state 77
    paren                          shift and go to state 89
    exp                            shift and go to state 101
    varYVals                       shift and go to state 168
    vecVal                         shift and go to state 8
    iSing                          shift and go to state 86

state 164

    (118) iSing -> + paren .

    ^               reduce using rule 118 (iSing -> + paren .)
    *               reduce using rule 118 (iSing -> + paren .)
    /               reduce using rule 118 (iSing -> + paren .)
    %               reduce using rule 118 (iSing -> + paren .)
    +               reduce using rule 118 (iSing -> + paren .)
    -               reduce using rule 118 (iSing -> + paren .)
    EQEQ            reduce using rule 118 (iSing -> + paren .)
    DISTINTO        reduce using rule 118 (iSing -> + paren .)
    >               reduce using rule 118 (iSing -> + paren .)
    <               reduce using rule 118 (iSing -> + paren .)
    ,               reduce using rule 118 (iSing -> + paren .)
    )               reduce using rule 118 (iSing -> + paren .)
    ;               reduce using rule 118 (iSing -> + paren .)
    ]               reduce using rule 118 (iSing -> + paren .)
    }               reduce using rule 118 (iSing -> + paren .)
    :               reduce using rule 118 (iSing -> + paren .)
    AND             reduce using rule 118 (iSing -> + paren .)
    OR              reduce using rule 118 (iSing -> + paren .)
    ?               reduce using rule 118 (iSing -> + paren .)


state 165

    (85) valoresMat -> FLOAT .

    *               reduce using rule 85 (valoresMat -> FLOAT .)
    /               reduce using rule 85 (valoresMat -> FLOAT .)
    %               reduce using rule 85 (valoresMat -> FLOAT .)
    ^               reduce using rule 85 (valoresMat -> FLOAT .)
    +               reduce using rule 85 (valoresMat -> FLOAT .)
    -               reduce using rule 85 (valoresMat -> FLOAT .)
    ,               reduce using rule 85 (valoresMat -> FLOAT .)
    EQEQ            reduce using rule 85 (valoresMat -> FLOAT .)
    DISTINTO        reduce using rule 85 (valoresMat -> FLOAT .)
    >               reduce using rule 85 (valoresMat -> FLOAT .)
    <               reduce using rule 85 (valoresMat -> FLOAT .)
    )               reduce using rule 85 (valoresMat -> FLOAT .)
    ;               reduce using rule 85 (valoresMat -> FLOAT .)
    ]               reduce using rule 85 (valoresMat -> FLOAT .)
    }               reduce using rule 85 (valoresMat -> FLOAT .)
    AND             reduce using rule 85 (valoresMat -> FLOAT .)
    OR              reduce using rule 85 (valoresMat -> FLOAT .)
    ?               reduce using rule 85 (valoresMat -> FLOAT .)
    :               reduce using rule 85 (valoresMat -> FLOAT .)


state 166

    (84) valoresMat -> INT .

    *               reduce using rule 84 (valoresMat -> INT .)
    /               reduce using rule 84 (valoresMat -> INT .)
    %               reduce using rule 84 (valoresMat -> INT .)
    ^               reduce using rule 84 (valoresMat -> INT .)
    +               reduce using rule 84 (valoresMat -> INT .)
    -               reduce using rule 84 (valoresMat -> INT .)
    ,               reduce using rule 84 (valoresMat -> INT .)
    EQEQ            reduce using rule 84 (valoresMat -> INT .)
    DISTINTO        reduce using rule 84 (valoresMat -> INT .)
    >               reduce using rule 84 (valoresMat -> INT .)
    <               reduce using rule 84 (valoresMat -> INT .)
    )               reduce using rule 84 (valoresMat -> INT .)
    ;               reduce using rule 84 (valoresMat -> INT .)
    ]               reduce using rule 84 (valoresMat -> INT .)
    }               reduce using rule 84 (valoresMat -> INT .)
    AND             reduce using rule 84 (valoresMat -> INT .)
    OR              reduce using rule 84 (valoresMat -> INT .)
    ?               reduce using rule 84 (valoresMat -> INT .)
    :               reduce using rule 84 (valoresMat -> INT .)


state 167

    (88) valoresMat -> varsOps .

    *               reduce using rule 88 (valoresMat -> varsOps .)
    /               reduce using rule 88 (valoresMat -> varsOps .)
    %               reduce using rule 88 (valoresMat -> varsOps .)
    ^               reduce using rule 88 (valoresMat -> varsOps .)
    +               reduce using rule 88 (valoresMat -> varsOps .)
    -               reduce using rule 88 (valoresMat -> varsOps .)
    ,               reduce using rule 88 (valoresMat -> varsOps .)
    EQEQ            reduce using rule 88 (valoresMat -> varsOps .)
    DISTINTO        reduce using rule 88 (valoresMat -> varsOps .)
    >               reduce using rule 88 (valoresMat -> varsOps .)
    <               reduce using rule 88 (valoresMat -> varsOps .)
    )               reduce using rule 88 (valoresMat -> varsOps .)
    ;               reduce using rule 88 (valoresMat -> varsOps .)
    ]               reduce using rule 88 (valoresMat -> varsOps .)
    }               reduce using rule 88 (valoresMat -> varsOps .)
    AND             reduce using rule 88 (valoresMat -> varsOps .)
    OR              reduce using rule 88 (valoresMat -> varsOps .)
    ?               reduce using rule 88 (valoresMat -> varsOps .)
    :               reduce using rule 88 (valoresMat -> varsOps .)


state 168

    (87) valoresMat -> varYVals .
    (75) varsOps -> varYVals . MASMAS
    (76) varsOps -> varYVals . MENOSMENOS

    *               reduce using rule 87 (valoresMat -> varYVals .)
    /               reduce using rule 87 (valoresMat -> varYVals .)
    %               reduce using rule 87 (valoresMat -> varYVals .)
    ^               reduce using rule 87 (valoresMat -> varYVals .)
    +               reduce using rule 87 (valoresMat -> varYVals .)
    -               reduce using rule 87 (valoresMat -> varYVals .)
    ,               reduce using rule 87 (valoresMat -> varYVals .)
    EQEQ            reduce using rule 87 (valoresMat -> varYVals .)
    DISTINTO        reduce using rule 87 (valoresMat -> varYVals .)
    >               reduce using rule 87 (valoresMat -> varYVals .)
    <               reduce using rule 87 (valoresMat -> varYVals .)
    )               reduce using rule 87 (valoresMat -> varYVals .)
    ;               reduce using rule 87 (valoresMat -> varYVals .)
    ]               reduce using rule 87 (valoresMat -> varYVals .)
    }               reduce using rule 87 (valoresMat -> varYVals .)
    AND             reduce using rule 87 (valoresMat -> varYVals .)
    OR              reduce using rule 87 (valoresMat -> varYVals .)
    ?               reduce using rule 87 (valoresMat -> varYVals .)
    :               reduce using rule 87 (valoresMat -> varYVals .)
    MASMAS          shift and go to state 63
    MENOSMENOS      shift and go to state 60


state 169

    (119) iSing -> - valoresMat .

    ^               reduce using rule 119 (iSing -> - valoresMat .)
    *               reduce using rule 119 (iSing -> - valoresMat .)
    /               reduce using rule 119 (iSing -> - valoresMat .)
    %               reduce using rule 119 (iSing -> - valoresMat .)
    +               reduce using rule 119 (iSing -> - valoresMat .)
    -               reduce using rule 119 (iSing -> - valoresMat .)
    EQEQ            reduce using rule 119 (iSing -> - valoresMat .)
    DISTINTO        reduce using rule 119 (iSing -> - valoresMat .)
    >               reduce using rule 119 (iSing -> - valoresMat .)
    <               reduce using rule 119 (iSing -> - valoresMat .)
    ,               reduce using rule 119 (iSing -> - valoresMat .)
    )               reduce using rule 119 (iSing -> - valoresMat .)
    ;               reduce using rule 119 (iSing -> - valoresMat .)
    ]               reduce using rule 119 (iSing -> - valoresMat .)
    }               reduce using rule 119 (iSing -> - valoresMat .)
    :               reduce using rule 119 (iSing -> - valoresMat .)
    AND             reduce using rule 119 (iSing -> - valoresMat .)
    OR              reduce using rule 119 (iSing -> - valoresMat .)
    ?               reduce using rule 119 (iSing -> - valoresMat .)


state 170

    (117) iSing -> - paren .

    ^               reduce using rule 117 (iSing -> - paren .)
    *               reduce using rule 117 (iSing -> - paren .)
    /               reduce using rule 117 (iSing -> - paren .)
    %               reduce using rule 117 (iSing -> - paren .)
    +               reduce using rule 117 (iSing -> - paren .)
    -               reduce using rule 117 (iSing -> - paren .)
    EQEQ            reduce using rule 117 (iSing -> - paren .)
    DISTINTO        reduce using rule 117 (iSing -> - paren .)
    >               reduce using rule 117 (iSing -> - paren .)
    <               reduce using rule 117 (iSing -> - paren .)
    ,               reduce using rule 117 (iSing -> - paren .)
    )               reduce using rule 117 (iSing -> - paren .)
    ;               reduce using rule 117 (iSing -> - paren .)
    ]               reduce using rule 117 (iSing -> - paren .)
    }               reduce using rule 117 (iSing -> - paren .)
    :               reduce using rule 117 (iSing -> - paren .)
    AND             reduce using rule 117 (iSing -> - paren .)
    OR              reduce using rule 117 (iSing -> - paren .)
    ?               reduce using rule 117 (iSing -> - paren .)


state 171

    (143) eq -> tCompare DISTINTO . mayor
    (147) eq -> tCompare DISTINTO . tCompare
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (65) vecVal -> . ID m
    (161) parenBool -> . ( expBool )
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (122) paren -> . ( eMat )

    INT             shift and go to state 114
    FLOAT           shift and go to state 115
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    ID              shift and go to state 46
    NOT             shift and go to state 100
    STRING          shift and go to state 108
    (               shift and go to state 110
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    -               shift and go to state 83
    +               shift and go to state 82

    paren                          shift and go to state 89
    eMat                           shift and go to state 109
    p                              shift and go to state 96
    funcInt                        shift and go to state 107
    vecVal                         shift and go to state 8
    tCompare                       shift and go to state 243
    menor                          shift and go to state 76
    varsOps                        shift and go to state 225
    valoresMat                     shift and go to state 77
    parenBool                      shift and go to state 99
    not                            shift and go to state 75
    exp                            shift and go to state 101
    varYVals                       shift and go to state 226
    mayor                          shift and go to state 242
    iSing                          shift and go to state 86

state 172

    (142) eq -> tCompare EQEQ . mayor
    (146) eq -> tCompare EQEQ . tCompare
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (65) vecVal -> . ID m
    (161) parenBool -> . ( expBool )
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (122) paren -> . ( eMat )

    INT             shift and go to state 114
    FLOAT           shift and go to state 115
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    ID              shift and go to state 46
    NOT             shift and go to state 100
    STRING          shift and go to state 108
    (               shift and go to state 110
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    -               shift and go to state 83
    +               shift and go to state 82

    paren                          shift and go to state 89
    eMat                           shift and go to state 109
    p                              shift and go to state 96
    funcInt                        shift and go to state 107
    vecVal                         shift and go to state 8
    tCompare                       shift and go to state 245
    menor                          shift and go to state 76
    varsOps                        shift and go to state 225
    valoresMat                     shift and go to state 77
    parenBool                      shift and go to state 99
    not                            shift and go to state 75
    exp                            shift and go to state 101
    varYVals                       shift and go to state 226
    mayor                          shift and go to state 244
    iSing                          shift and go to state 86

state 173

    (156) menor -> tCompare < . tCompare
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (65) vecVal -> . ID m
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (122) paren -> . ( eMat )

    INT             shift and go to state 114
    FLOAT           shift and go to state 115
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    ID              shift and go to state 46
    STRING          shift and go to state 108
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    -               shift and go to state 83
    +               shift and go to state 82
    (               shift and go to state 163

    eMat                           shift and go to state 109
    p                              shift and go to state 96
    funcInt                        shift and go to state 107
    tCompare                       shift and go to state 246
    varsOps                        shift and go to state 225
    valoresMat                     shift and go to state 77
    paren                          shift and go to state 89
    exp                            shift and go to state 101
    varYVals                       shift and go to state 226
    vecVal                         shift and go to state 8
    iSing                          shift and go to state 86

state 174

    (154) mayor -> tCompare > . tCompare
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (65) vecVal -> . ID m
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (122) paren -> . ( eMat )

    INT             shift and go to state 114
    FLOAT           shift and go to state 115
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    ID              shift and go to state 46
    STRING          shift and go to state 108
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    -               shift and go to state 83
    +               shift and go to state 82
    (               shift and go to state 163

    eMat                           shift and go to state 109
    p                              shift and go to state 96
    funcInt                        shift and go to state 107
    tCompare                       shift and go to state 247
    varsOps                        shift and go to state 225
    valoresMat                     shift and go to state 77
    paren                          shift and go to state 89
    exp                            shift and go to state 101
    varYVals                       shift and go to state 226
    vecVal                         shift and go to state 8
    iSing                          shift and go to state 86

state 175

    (44) elem -> valores . , elem
    (45) elem -> valores .

    ,               shift and go to state 248
    ]               reduce using rule 45 (elem -> valores .)


state 176

    (43) vec -> [ elem . ]

    ]               shift and go to state 249


state 177

    (58) valores -> ID . . valoresCampos
    (60) valoresCampos -> . ID
    (61) valoresCampos -> . END
    (62) valoresCampos -> . BEGIN

    ID              shift and go to state 252
    END             shift and go to state 251
    BEGIN           shift and go to state 250

    valoresCampos                  shift and go to state 253

state 178

    (38) funcBool -> COLINEALES ( valores , . valores )
    (46) valores -> . eMat
    (47) valores -> . expBool
    (48) valores -> . funcReturn
    (49) valores -> . reg
    (50) valores -> . INT
    (51) valores -> . FLOAT
    (52) valores -> . STRING
    (53) valores -> . BOOL
    (54) valores -> . varYVals
    (55) valores -> . varsOps
    (56) valores -> . vec
    (57) valores -> . ternario
    (58) valores -> . ID . valoresCampos
    (59) valores -> . RES
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (130) expBool -> . expBool OR and
    (131) expBool -> . valoresBool OR and
    (132) expBool -> . expBool OR valoresBool
    (133) expBool -> . valoresBool OR valoresBool
    (134) expBool -> . and
    (32) funcReturn -> . funcInt
    (33) funcReturn -> . funcString
    (34) funcReturn -> . funcBool
    (70) reg -> . { campos }
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (43) vec -> . [ elem ]
    (127) ternario -> . valoresBool ? valores : valores
    (128) ternario -> . expBool ? valores : valores
    (129) ternario -> . ( ternario )
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (123) valoresBool -> . BOOL
    (124) valoresBool -> . funcBool
    (125) valoresBool -> . varYVals
    (126) valoresBool -> . varsOps
    (135) and -> . and AND eq
    (136) and -> . valoresBool AND eq
    (137) and -> . and AND valoresBool
    (138) and -> . valoresBool AND valoresBool
    (139) and -> . eq
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (37) funcString -> . CAPITALIZAR ( valores )
    (38) funcBool -> . COLINEALES ( valores , valores )
    (65) vecVal -> . ID m
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (140) eq -> . eq EQEQ mayor
    (141) eq -> . eq DISTINTO mayor
    (142) eq -> . tCompare EQEQ mayor
    (143) eq -> . tCompare DISTINTO mayor
    (144) eq -> . eq EQEQ tCompare
    (145) eq -> . eq DISTINTO tCompare
    (146) eq -> . tCompare EQEQ tCompare
    (147) eq -> . tCompare DISTINTO tCompare
    (148) eq -> . mayor
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (122) paren -> . ( eMat )
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (161) parenBool -> . ( expBool )

    INT             shift and go to state 92
    FLOAT           shift and go to state 94
    STRING          shift and go to state 87
    BOOL            shift and go to state 97
    ID              shift and go to state 91
    RES             shift and go to state 73
    {               shift and go to state 102
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    [               shift and go to state 90
    (               shift and go to state 81
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 4
    -               shift and go to state 83
    +               shift and go to state 82
    NOT             shift and go to state 100

    and                            shift and go to state 70
    ternario                       shift and go to state 71
    funcBool                       shift and go to state 72
    funcInt                        shift and go to state 74
    menor                          shift and go to state 76
    mayor                          shift and go to state 103
    valoresMat                     shift and go to state 77
    eq                             shift and go to state 78
    valoresBool                    shift and go to state 79
    eMat                           shift and go to state 80
    vecVal                         shift and go to state 8
    vec                            shift and go to state 84
    paren                          shift and go to state 89
    reg                            shift and go to state 85
    iSing                          shift and go to state 86
    exp                            shift and go to state 101
    tCompare                       shift and go to state 88
    not                            shift and go to state 75
    funcString                     shift and go to state 23
    funcReturn                     shift and go to state 93
    valores                        shift and go to state 254
    p                              shift and go to state 96
    varsOps                        shift and go to state 98
    varYVals                       shift and go to state 104
    parenBool                      shift and go to state 99
    expBool                        shift and go to state 105

state 179

    (101) p -> p % . exp
    (107) p -> p % . valoresMat
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (122) paren -> . ( eMat )
    (65) vecVal -> . ID m

    INT             shift and go to state 166
    FLOAT           shift and go to state 165
    STRING          shift and go to state 108
    -               shift and go to state 83
    +               shift and go to state 82
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    ID              shift and go to state 46
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    (               shift and go to state 163

    exp                            shift and go to state 256
    funcInt                        shift and go to state 107
    iSing                          shift and go to state 86
    valoresMat                     shift and go to state 255
    paren                          shift and go to state 89
    varYVals                       shift and go to state 168
    vecVal                         shift and go to state 8
    varsOps                        shift and go to state 167

state 180

    (99) p -> p * . exp
    (105) p -> p * . valoresMat
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (122) paren -> . ( eMat )
    (65) vecVal -> . ID m

    INT             shift and go to state 166
    FLOAT           shift and go to state 165
    STRING          shift and go to state 108
    -               shift and go to state 83
    +               shift and go to state 82
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    ID              shift and go to state 46
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    (               shift and go to state 163

    exp                            shift and go to state 258
    funcInt                        shift and go to state 107
    iSing                          shift and go to state 86
    valoresMat                     shift and go to state 257
    paren                          shift and go to state 89
    varYVals                       shift and go to state 168
    vecVal                         shift and go to state 8
    varsOps                        shift and go to state 167

state 181

    (100) p -> p / . exp
    (106) p -> p / . valoresMat
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (122) paren -> . ( eMat )
    (65) vecVal -> . ID m

    INT             shift and go to state 166
    FLOAT           shift and go to state 165
    STRING          shift and go to state 108
    -               shift and go to state 83
    +               shift and go to state 82
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    ID              shift and go to state 46
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    (               shift and go to state 163

    exp                            shift and go to state 260
    funcInt                        shift and go to state 107
    iSing                          shift and go to state 86
    valoresMat                     shift and go to state 259
    paren                          shift and go to state 89
    varYVals                       shift and go to state 168
    vecVal                         shift and go to state 8
    varsOps                        shift and go to state 167

state 182

    (161) parenBool -> ( . expBool )
    (130) expBool -> . expBool OR and
    (131) expBool -> . valoresBool OR and
    (132) expBool -> . expBool OR valoresBool
    (133) expBool -> . valoresBool OR valoresBool
    (134) expBool -> . and
    (123) valoresBool -> . BOOL
    (124) valoresBool -> . funcBool
    (125) valoresBool -> . varYVals
    (126) valoresBool -> . varsOps
    (135) and -> . and AND eq
    (136) and -> . valoresBool AND eq
    (137) and -> . and AND valoresBool
    (138) and -> . valoresBool AND valoresBool
    (139) and -> . eq
    (38) funcBool -> . COLINEALES ( valores , valores )
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (140) eq -> . eq EQEQ mayor
    (141) eq -> . eq DISTINTO mayor
    (142) eq -> . tCompare EQEQ mayor
    (143) eq -> . tCompare DISTINTO mayor
    (144) eq -> . eq EQEQ tCompare
    (145) eq -> . eq DISTINTO tCompare
    (146) eq -> . tCompare EQEQ tCompare
    (147) eq -> . tCompare DISTINTO tCompare
    (148) eq -> . mayor
    (65) vecVal -> . ID m
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (161) parenBool -> . ( expBool )
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (122) paren -> . ( eMat )

    BOOL            shift and go to state 116
    COLINEALES      shift and go to state 4
    ID              shift and go to state 46
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    INT             shift and go to state 114
    FLOAT           shift and go to state 115
    STRING          shift and go to state 108
    NOT             shift and go to state 100
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    (               shift and go to state 110
    -               shift and go to state 83
    +               shift and go to state 82

    and                            shift and go to state 70
    funcBool                       shift and go to state 106
    funcInt                        shift and go to state 107
    menor                          shift and go to state 76
    valoresMat                     shift and go to state 77
    eq                             shift and go to state 78
    vecVal                         shift and go to state 8
    valoresBool                    shift and go to state 193
    eMat                           shift and go to state 109
    mayor                          shift and go to state 103
    paren                          shift and go to state 89
    iSing                          shift and go to state 86
    tCompare                       shift and go to state 88
    not                            shift and go to state 75
    p                              shift and go to state 96
    varsOps                        shift and go to state 117
    exp                            shift and go to state 101
    varYVals                       shift and go to state 118
    parenBool                      shift and go to state 99
    expBool                        shift and go to state 195

state 183

    (158) not -> NOT not .

    EQEQ            reduce using rule 158 (not -> NOT not .)
    DISTINTO        reduce using rule 158 (not -> NOT not .)
    AND             reduce using rule 158 (not -> NOT not .)
    OR              reduce using rule 158 (not -> NOT not .)
    )               reduce using rule 158 (not -> NOT not .)
    ?               reduce using rule 158 (not -> NOT not .)
    ,               reduce using rule 158 (not -> NOT not .)
    ;               reduce using rule 158 (not -> NOT not .)
    ]               reduce using rule 158 (not -> NOT not .)
    }               reduce using rule 158 (not -> NOT not .)
    :               reduce using rule 158 (not -> NOT not .)


state 184

    (126) valoresBool -> varsOps .

    EQEQ            reduce using rule 126 (valoresBool -> varsOps .)
    DISTINTO        reduce using rule 126 (valoresBool -> varsOps .)
    AND             reduce using rule 126 (valoresBool -> varsOps .)
    OR              reduce using rule 126 (valoresBool -> varsOps .)
    ?               reduce using rule 126 (valoresBool -> varsOps .)
    ,               reduce using rule 126 (valoresBool -> varsOps .)
    )               reduce using rule 126 (valoresBool -> varsOps .)
    ;               reduce using rule 126 (valoresBool -> varsOps .)
    ]               reduce using rule 126 (valoresBool -> varsOps .)
    }               reduce using rule 126 (valoresBool -> varsOps .)
    :               reduce using rule 126 (valoresBool -> varsOps .)


state 185

    (125) valoresBool -> varYVals .
    (75) varsOps -> varYVals . MASMAS
    (76) varsOps -> varYVals . MENOSMENOS

    EQEQ            reduce using rule 125 (valoresBool -> varYVals .)
    DISTINTO        reduce using rule 125 (valoresBool -> varYVals .)
    AND             reduce using rule 125 (valoresBool -> varYVals .)
    OR              reduce using rule 125 (valoresBool -> varYVals .)
    ?               reduce using rule 125 (valoresBool -> varYVals .)
    ,               reduce using rule 125 (valoresBool -> varYVals .)
    )               reduce using rule 125 (valoresBool -> varYVals .)
    ;               reduce using rule 125 (valoresBool -> varYVals .)
    ]               reduce using rule 125 (valoresBool -> varYVals .)
    }               reduce using rule 125 (valoresBool -> varYVals .)
    :               reduce using rule 125 (valoresBool -> varYVals .)
    MASMAS          shift and go to state 63
    MENOSMENOS      shift and go to state 60


state 186

    (159) not -> NOT valoresBool .

    EQEQ            reduce using rule 159 (not -> NOT valoresBool .)
    DISTINTO        reduce using rule 159 (not -> NOT valoresBool .)
    AND             reduce using rule 159 (not -> NOT valoresBool .)
    OR              reduce using rule 159 (not -> NOT valoresBool .)
    )               reduce using rule 159 (not -> NOT valoresBool .)
    ?               reduce using rule 159 (not -> NOT valoresBool .)
    ,               reduce using rule 159 (not -> NOT valoresBool .)
    ;               reduce using rule 159 (not -> NOT valoresBool .)
    ]               reduce using rule 159 (not -> NOT valoresBool .)
    }               reduce using rule 159 (not -> NOT valoresBool .)
    :               reduce using rule 159 (not -> NOT valoresBool .)


state 187

    (112) exp -> exp ^ . iSing
    (114) exp -> exp ^ . valoresMat
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (122) paren -> . ( eMat )
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (65) vecVal -> . ID m

    -               shift and go to state 83
    +               shift and go to state 82
    INT             shift and go to state 166
    FLOAT           shift and go to state 165
    STRING          shift and go to state 108
    (               shift and go to state 163
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    ID              shift and go to state 46
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29

    funcInt                        shift and go to state 107
    iSing                          shift and go to state 262
    valoresMat                     shift and go to state 261
    paren                          shift and go to state 89
    varYVals                       shift and go to state 168
    vecVal                         shift and go to state 8
    varsOps                        shift and go to state 167

state 188

    (70) reg -> { campos . }

    }               shift and go to state 263


state 189

    (71) campos -> ID . : valores , campos
    (58) valores -> ID . . valoresCampos
    (63) varYVals -> ID .
    (65) vecVal -> ID . m
    (66) m -> . [ INT ]
    (67) m -> . [ INT ] m
    (68) m -> . [ varYVals ] m
    (69) m -> . [ varYVals ]

    :               shift and go to state 264
    .               shift and go to state 177
    MASMAS          reduce using rule 63 (varYVals -> ID .)
    MENOSMENOS      reduce using rule 63 (varYVals -> ID .)
    }               reduce using rule 63 (varYVals -> ID .)
    +               reduce using rule 63 (varYVals -> ID .)
    -               reduce using rule 63 (varYVals -> ID .)
    *               reduce using rule 63 (varYVals -> ID .)
    /               reduce using rule 63 (varYVals -> ID .)
    %               reduce using rule 63 (varYVals -> ID .)
    ^               reduce using rule 63 (varYVals -> ID .)
    OR              reduce using rule 63 (varYVals -> ID .)
    ?               reduce using rule 63 (varYVals -> ID .)
    AND             reduce using rule 63 (varYVals -> ID .)
    EQEQ            reduce using rule 63 (varYVals -> ID .)
    DISTINTO        reduce using rule 63 (varYVals -> ID .)
    >               reduce using rule 63 (varYVals -> ID .)
    <               reduce using rule 63 (varYVals -> ID .)
    [               shift and go to state 52

    m                              shift and go to state 50

state 190

    (72) campos -> valores .

    }               reduce using rule 72 (campos -> valores .)


state 191

    (130) expBool -> expBool OR . and
    (132) expBool -> expBool OR . valoresBool
    (135) and -> . and AND eq
    (136) and -> . valoresBool AND eq
    (137) and -> . and AND valoresBool
    (138) and -> . valoresBool AND valoresBool
    (139) and -> . eq
    (123) valoresBool -> . BOOL
    (124) valoresBool -> . funcBool
    (125) valoresBool -> . varYVals
    (126) valoresBool -> . varsOps
    (140) eq -> . eq EQEQ mayor
    (141) eq -> . eq DISTINTO mayor
    (142) eq -> . tCompare EQEQ mayor
    (143) eq -> . tCompare DISTINTO mayor
    (144) eq -> . eq EQEQ tCompare
    (145) eq -> . eq DISTINTO tCompare
    (146) eq -> . tCompare EQEQ tCompare
    (147) eq -> . tCompare DISTINTO tCompare
    (148) eq -> . mayor
    (38) funcBool -> . COLINEALES ( valores , valores )
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (65) vecVal -> . ID m
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (161) parenBool -> . ( expBool )
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (122) paren -> . ( eMat )

    BOOL            shift and go to state 116
    COLINEALES      shift and go to state 4
    ID              shift and go to state 46
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    INT             shift and go to state 114
    FLOAT           shift and go to state 115
    STRING          shift and go to state 108
    NOT             shift and go to state 100
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    (               shift and go to state 110
    -               shift and go to state 83
    +               shift and go to state 82

    and                            shift and go to state 265
    funcBool                       shift and go to state 106
    funcInt                        shift and go to state 107
    menor                          shift and go to state 76
    valoresMat                     shift and go to state 77
    eq                             shift and go to state 78
    mayor                          shift and go to state 103
    valoresBool                    shift and go to state 266
    eMat                           shift and go to state 109
    vecVal                         shift and go to state 8
    paren                          shift and go to state 89
    iSing                          shift and go to state 86
    tCompare                       shift and go to state 88
    not                            shift and go to state 75
    p                              shift and go to state 96
    varsOps                        shift and go to state 117
    exp                            shift and go to state 101
    varYVals                       shift and go to state 118
    parenBool                      shift and go to state 99

state 192

    (128) ternario -> expBool ? . valores : valores
    (46) valores -> . eMat
    (47) valores -> . expBool
    (48) valores -> . funcReturn
    (49) valores -> . reg
    (50) valores -> . INT
    (51) valores -> . FLOAT
    (52) valores -> . STRING
    (53) valores -> . BOOL
    (54) valores -> . varYVals
    (55) valores -> . varsOps
    (56) valores -> . vec
    (57) valores -> . ternario
    (58) valores -> . ID . valoresCampos
    (59) valores -> . RES
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (130) expBool -> . expBool OR and
    (131) expBool -> . valoresBool OR and
    (132) expBool -> . expBool OR valoresBool
    (133) expBool -> . valoresBool OR valoresBool
    (134) expBool -> . and
    (32) funcReturn -> . funcInt
    (33) funcReturn -> . funcString
    (34) funcReturn -> . funcBool
    (70) reg -> . { campos }
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (43) vec -> . [ elem ]
    (127) ternario -> . valoresBool ? valores : valores
    (128) ternario -> . expBool ? valores : valores
    (129) ternario -> . ( ternario )
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (123) valoresBool -> . BOOL
    (124) valoresBool -> . funcBool
    (125) valoresBool -> . varYVals
    (126) valoresBool -> . varsOps
    (135) and -> . and AND eq
    (136) and -> . valoresBool AND eq
    (137) and -> . and AND valoresBool
    (138) and -> . valoresBool AND valoresBool
    (139) and -> . eq
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (37) funcString -> . CAPITALIZAR ( valores )
    (38) funcBool -> . COLINEALES ( valores , valores )
    (65) vecVal -> . ID m
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (140) eq -> . eq EQEQ mayor
    (141) eq -> . eq DISTINTO mayor
    (142) eq -> . tCompare EQEQ mayor
    (143) eq -> . tCompare DISTINTO mayor
    (144) eq -> . eq EQEQ tCompare
    (145) eq -> . eq DISTINTO tCompare
    (146) eq -> . tCompare EQEQ tCompare
    (147) eq -> . tCompare DISTINTO tCompare
    (148) eq -> . mayor
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (122) paren -> . ( eMat )
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (161) parenBool -> . ( expBool )

    INT             shift and go to state 92
    FLOAT           shift and go to state 94
    STRING          shift and go to state 87
    BOOL            shift and go to state 97
    ID              shift and go to state 91
    RES             shift and go to state 73
    {               shift and go to state 102
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    [               shift and go to state 90
    (               shift and go to state 81
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 4
    -               shift and go to state 83
    +               shift and go to state 82
    NOT             shift and go to state 100

    and                            shift and go to state 70
    ternario                       shift and go to state 71
    funcBool                       shift and go to state 72
    funcInt                        shift and go to state 74
    menor                          shift and go to state 76
    mayor                          shift and go to state 103
    valoresMat                     shift and go to state 77
    eq                             shift and go to state 78
    valoresBool                    shift and go to state 79
    eMat                           shift and go to state 80
    vecVal                         shift and go to state 8
    vec                            shift and go to state 84
    paren                          shift and go to state 89
    reg                            shift and go to state 85
    iSing                          shift and go to state 86
    exp                            shift and go to state 101
    tCompare                       shift and go to state 88
    not                            shift and go to state 75
    funcString                     shift and go to state 23
    funcReturn                     shift and go to state 93
    valores                        shift and go to state 267
    p                              shift and go to state 96
    varsOps                        shift and go to state 98
    varYVals                       shift and go to state 104
    parenBool                      shift and go to state 99
    expBool                        shift and go to state 105

state 193

    (131) expBool -> valoresBool . OR and
    (133) expBool -> valoresBool . OR valoresBool
    (136) and -> valoresBool . AND eq
    (138) and -> valoresBool . AND valoresBool

    OR              shift and go to state 150
    AND             shift and go to state 149


state 194

    (122) paren -> ( . eMat )
    (161) parenBool -> ( . expBool )
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (130) expBool -> . expBool OR and
    (131) expBool -> . valoresBool OR and
    (132) expBool -> . expBool OR valoresBool
    (133) expBool -> . valoresBool OR valoresBool
    (134) expBool -> . and
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (123) valoresBool -> . BOOL
    (124) valoresBool -> . funcBool
    (125) valoresBool -> . varYVals
    (126) valoresBool -> . varsOps
    (135) and -> . and AND eq
    (136) and -> . valoresBool AND eq
    (137) and -> . and AND valoresBool
    (138) and -> . valoresBool AND valoresBool
    (139) and -> . eq
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (38) funcBool -> . COLINEALES ( valores , valores )
    (140) eq -> . eq EQEQ mayor
    (141) eq -> . eq DISTINTO mayor
    (142) eq -> . tCompare EQEQ mayor
    (143) eq -> . tCompare DISTINTO mayor
    (144) eq -> . eq EQEQ tCompare
    (145) eq -> . eq DISTINTO tCompare
    (146) eq -> . tCompare EQEQ tCompare
    (147) eq -> . tCompare DISTINTO tCompare
    (148) eq -> . mayor
    (65) vecVal -> . ID m
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (122) paren -> . ( eMat )
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (161) parenBool -> . ( expBool )

    INT             shift and go to state 157
    FLOAT           shift and go to state 158
    STRING          shift and go to state 108
    BOOL            shift and go to state 116
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    ID              shift and go to state 46
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    COLINEALES      shift and go to state 4
    -               shift and go to state 83
    +               shift and go to state 82
    (               shift and go to state 194
    NOT             shift and go to state 100

    and                            shift and go to state 70
    funcBool                       shift and go to state 106
    funcInt                        shift and go to state 107
    menor                          shift and go to state 76
    valoresMat                     shift and go to state 77
    eq                             shift and go to state 78
    vecVal                         shift and go to state 8
    valoresBool                    shift and go to state 193
    eMat                           shift and go to state 156
    mayor                          shift and go to state 103
    paren                          shift and go to state 89
    iSing                          shift and go to state 86
    tCompare                       shift and go to state 88
    not                            shift and go to state 75
    p                              shift and go to state 96
    varsOps                        shift and go to state 268
    exp                            shift and go to state 101
    varYVals                       shift and go to state 269
    parenBool                      shift and go to state 99
    expBool                        shift and go to state 195

state 195

    (161) parenBool -> ( expBool . )
    (130) expBool -> expBool . OR and
    (132) expBool -> expBool . OR valoresBool

    )               shift and go to state 240
    OR              shift and go to state 191


state 196

    (20) loop -> WHILE ( cosaBooleana ) .

    IF              reduce using rule 20 (loop -> WHILE ( cosaBooleana ) .)
    {               reduce using rule 20 (loop -> WHILE ( cosaBooleana ) .)
    WHILE           reduce using rule 20 (loop -> WHILE ( cosaBooleana ) .)
    FOR             reduce using rule 20 (loop -> WHILE ( cosaBooleana ) .)
    COMMENT         reduce using rule 20 (loop -> WHILE ( cosaBooleana ) .)
    DO              reduce using rule 20 (loop -> WHILE ( cosaBooleana ) .)
    RETURN          reduce using rule 20 (loop -> WHILE ( cosaBooleana ) .)
    ;               reduce using rule 20 (loop -> WHILE ( cosaBooleana ) .)
    MENOSMENOS      reduce using rule 20 (loop -> WHILE ( cosaBooleana ) .)
    MASMAS          reduce using rule 20 (loop -> WHILE ( cosaBooleana ) .)
    ID              reduce using rule 20 (loop -> WHILE ( cosaBooleana ) .)
    PRINT           reduce using rule 20 (loop -> WHILE ( cosaBooleana ) .)
    MULTIESCALAR    reduce using rule 20 (loop -> WHILE ( cosaBooleana ) .)
    LENGTH          reduce using rule 20 (loop -> WHILE ( cosaBooleana ) .)
    CAPITALIZAR     reduce using rule 20 (loop -> WHILE ( cosaBooleana ) .)
    COLINEALES      reduce using rule 20 (loop -> WHILE ( cosaBooleana ) .)


state 197

    (39) funcVoid -> PRINT ( valores ) .

    ;               reduce using rule 39 (funcVoid -> PRINT ( valores ) .)
    )               reduce using rule 39 (funcVoid -> PRINT ( valores ) .)


state 198

    (5) lAbierta -> IF ( cosaBooleana ) . linea
    (6) lAbierta -> IF ( cosaBooleana ) . bloqueCerrado ELSE lAbierta
    (12) lCerrada -> IF ( cosaBooleana ) . bloqueCerrado ELSE bloqueCerrado
    (3) linea -> . lAbierta
    (4) linea -> . lCerrada
    (8) bloqueCerrado -> . lCerrada
    (9) bloqueCerrado -> . { g }
    (5) lAbierta -> . IF ( cosaBooleana ) linea
    (6) lAbierta -> . IF ( cosaBooleana ) bloqueCerrado ELSE lAbierta
    (7) lAbierta -> . loop lAbierta
    (10) lCerrada -> . sentencia
    (11) lCerrada -> . COMMENT lCerrada
    (12) lCerrada -> . IF ( cosaBooleana ) bloqueCerrado ELSE bloqueCerrado
    (13) lCerrada -> . loop bloqueCerrado
    (14) lCerrada -> . DO bloqueCerrado WHILE ( cosaBooleana ) ;
    (20) loop -> . WHILE ( cosaBooleana )
    (21) loop -> . FOR ( primParam ; cosaBooleana ; tercerParam )
    (15) sentencia -> . varsOps ;
    (16) sentencia -> . func ;
    (17) sentencia -> . varAsig ;
    (18) sentencia -> . RETURN ;
    (19) sentencia -> . ;
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (30) func -> . funcReturn
    (31) func -> . funcVoid
    (78) varAsig -> . varYVals MULEQ valoresAsig
    (79) varAsig -> . varYVals DIVEQ valoresAsig
    (80) varAsig -> . varYVals MASEQ valoresAsig
    (81) varAsig -> . varYVals MENOSEQ valoresAsig
    (82) varAsig -> . varYVals = valoresAsig
    (83) varAsig -> . ID . ID = valoresAsig
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (32) funcReturn -> . funcInt
    (33) funcReturn -> . funcString
    (34) funcReturn -> . funcBool
    (39) funcVoid -> . PRINT ( valores )
    (65) vecVal -> . ID m
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (37) funcString -> . CAPITALIZAR ( valores )
    (38) funcBool -> . COLINEALES ( valores , valores )

    {               shift and go to state 36
    IF              shift and go to state 12
    COMMENT         shift and go to state 9
    DO              shift and go to state 1
    WHILE           shift and go to state 6
    FOR             shift and go to state 17
    RETURN          shift and go to state 2
    ;               shift and go to state 11
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    ID              shift and go to state 20
    PRINT           shift and go to state 7
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 4

    funcBool                       shift and go to state 3
    funcInt                        shift and go to state 5
    bloqueCerrado                  shift and go to state 270
    linea                          shift and go to state 271
    vecVal                         shift and go to state 8
    sentencia                      shift and go to state 10
    funcVoid                       shift and go to state 15
    func                           shift and go to state 19
    varAsig                        shift and go to state 21
    funcString                     shift and go to state 23
    funcReturn                     shift and go to state 25
    lCerrada                       shift and go to state 272
    lAbierta                       shift and go to state 28
    varsOps                        shift and go to state 14
    varYVals                       shift and go to state 31
    loop                           shift and go to state 30

state 199

    (21) loop -> FOR ( primParam ; . cosaBooleana ; tercerParam )
    (22) cosaBooleana -> . expBool
    (23) cosaBooleana -> . valoresBool
    (130) expBool -> . expBool OR and
    (131) expBool -> . valoresBool OR and
    (132) expBool -> . expBool OR valoresBool
    (133) expBool -> . valoresBool OR valoresBool
    (134) expBool -> . and
    (123) valoresBool -> . BOOL
    (124) valoresBool -> . funcBool
    (125) valoresBool -> . varYVals
    (126) valoresBool -> . varsOps
    (135) and -> . and AND eq
    (136) and -> . valoresBool AND eq
    (137) and -> . and AND valoresBool
    (138) and -> . valoresBool AND valoresBool
    (139) and -> . eq
    (38) funcBool -> . COLINEALES ( valores , valores )
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (140) eq -> . eq EQEQ mayor
    (141) eq -> . eq DISTINTO mayor
    (142) eq -> . tCompare EQEQ mayor
    (143) eq -> . tCompare DISTINTO mayor
    (144) eq -> . eq EQEQ tCompare
    (145) eq -> . eq DISTINTO tCompare
    (146) eq -> . tCompare EQEQ tCompare
    (147) eq -> . tCompare DISTINTO tCompare
    (148) eq -> . mayor
    (65) vecVal -> . ID m
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (161) parenBool -> . ( expBool )
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (122) paren -> . ( eMat )

    BOOL            shift and go to state 116
    COLINEALES      shift and go to state 4
    ID              shift and go to state 46
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    INT             shift and go to state 114
    FLOAT           shift and go to state 115
    STRING          shift and go to state 108
    NOT             shift and go to state 100
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    (               shift and go to state 110
    -               shift and go to state 83
    +               shift and go to state 82

    and                            shift and go to state 70
    funcBool                       shift and go to state 106
    funcInt                        shift and go to state 107
    menor                          shift and go to state 76
    valoresMat                     shift and go to state 77
    eq                             shift and go to state 78
    vecVal                         shift and go to state 8
    valoresBool                    shift and go to state 111
    eMat                           shift and go to state 109
    mayor                          shift and go to state 103
    paren                          shift and go to state 89
    iSing                          shift and go to state 86
    tCompare                       shift and go to state 88
    not                            shift and go to state 75
    cosaBooleana                   shift and go to state 273
    p                              shift and go to state 96
    varsOps                        shift and go to state 117
    exp                            shift and go to state 101
    varYVals                       shift and go to state 118
    parenBool                      shift and go to state 99
    expBool                        shift and go to state 112

state 200

    (36) funcInt -> LENGTH ( valores ) .

    ,               reduce using rule 36 (funcInt -> LENGTH ( valores ) .)
    ]               reduce using rule 36 (funcInt -> LENGTH ( valores ) .)
    +               reduce using rule 36 (funcInt -> LENGTH ( valores ) .)
    -               reduce using rule 36 (funcInt -> LENGTH ( valores ) .)
    *               reduce using rule 36 (funcInt -> LENGTH ( valores ) .)
    /               reduce using rule 36 (funcInt -> LENGTH ( valores ) .)
    %               reduce using rule 36 (funcInt -> LENGTH ( valores ) .)
    ^               reduce using rule 36 (funcInt -> LENGTH ( valores ) .)
    EQEQ            reduce using rule 36 (funcInt -> LENGTH ( valores ) .)
    DISTINTO        reduce using rule 36 (funcInt -> LENGTH ( valores ) .)
    >               reduce using rule 36 (funcInt -> LENGTH ( valores ) .)
    <               reduce using rule 36 (funcInt -> LENGTH ( valores ) .)
    )               reduce using rule 36 (funcInt -> LENGTH ( valores ) .)
    ;               reduce using rule 36 (funcInt -> LENGTH ( valores ) .)
    }               reduce using rule 36 (funcInt -> LENGTH ( valores ) .)
    AND             reduce using rule 36 (funcInt -> LENGTH ( valores ) .)
    OR              reduce using rule 36 (funcInt -> LENGTH ( valores ) .)
    ?               reduce using rule 36 (funcInt -> LENGTH ( valores ) .)
    :               reduce using rule 36 (funcInt -> LENGTH ( valores ) .)


state 201

    (83) varAsig -> ID . ID = . valoresAsig
    (77) valoresAsig -> . valores
    (46) valores -> . eMat
    (47) valores -> . expBool
    (48) valores -> . funcReturn
    (49) valores -> . reg
    (50) valores -> . INT
    (51) valores -> . FLOAT
    (52) valores -> . STRING
    (53) valores -> . BOOL
    (54) valores -> . varYVals
    (55) valores -> . varsOps
    (56) valores -> . vec
    (57) valores -> . ternario
    (58) valores -> . ID . valoresCampos
    (59) valores -> . RES
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (130) expBool -> . expBool OR and
    (131) expBool -> . valoresBool OR and
    (132) expBool -> . expBool OR valoresBool
    (133) expBool -> . valoresBool OR valoresBool
    (134) expBool -> . and
    (32) funcReturn -> . funcInt
    (33) funcReturn -> . funcString
    (34) funcReturn -> . funcBool
    (70) reg -> . { campos }
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (43) vec -> . [ elem ]
    (127) ternario -> . valoresBool ? valores : valores
    (128) ternario -> . expBool ? valores : valores
    (129) ternario -> . ( ternario )
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (123) valoresBool -> . BOOL
    (124) valoresBool -> . funcBool
    (125) valoresBool -> . varYVals
    (126) valoresBool -> . varsOps
    (135) and -> . and AND eq
    (136) and -> . valoresBool AND eq
    (137) and -> . and AND valoresBool
    (138) and -> . valoresBool AND valoresBool
    (139) and -> . eq
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (37) funcString -> . CAPITALIZAR ( valores )
    (38) funcBool -> . COLINEALES ( valores , valores )
    (65) vecVal -> . ID m
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (140) eq -> . eq EQEQ mayor
    (141) eq -> . eq DISTINTO mayor
    (142) eq -> . tCompare EQEQ mayor
    (143) eq -> . tCompare DISTINTO mayor
    (144) eq -> . eq EQEQ tCompare
    (145) eq -> . eq DISTINTO tCompare
    (146) eq -> . tCompare EQEQ tCompare
    (147) eq -> . tCompare DISTINTO tCompare
    (148) eq -> . mayor
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (122) paren -> . ( eMat )
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (161) parenBool -> . ( expBool )

    INT             shift and go to state 92
    FLOAT           shift and go to state 94
    STRING          shift and go to state 87
    BOOL            shift and go to state 97
    ID              shift and go to state 91
    RES             shift and go to state 73
    {               shift and go to state 102
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    [               shift and go to state 90
    (               shift and go to state 81
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 4
    -               shift and go to state 83
    +               shift and go to state 82
    NOT             shift and go to state 100

    and                            shift and go to state 70
    ternario                       shift and go to state 71
    funcBool                       shift and go to state 72
    funcInt                        shift and go to state 74
    menor                          shift and go to state 76
    mayor                          shift and go to state 103
    valoresMat                     shift and go to state 77
    eq                             shift and go to state 78
    valoresBool                    shift and go to state 79
    eMat                           shift and go to state 80
    vecVal                         shift and go to state 8
    vec                            shift and go to state 84
    paren                          shift and go to state 89
    reg                            shift and go to state 85
    iSing                          shift and go to state 86
    exp                            shift and go to state 101
    tCompare                       shift and go to state 88
    not                            shift and go to state 75
    valoresAsig                    shift and go to state 274
    funcString                     shift and go to state 23
    funcReturn                     shift and go to state 93
    valores                        shift and go to state 132
    p                              shift and go to state 96
    varsOps                        shift and go to state 98
    varYVals                       shift and go to state 104
    parenBool                      shift and go to state 99
    expBool                        shift and go to state 105

state 202

    (66) m -> [ INT ] .
    (67) m -> [ INT ] . m
    (66) m -> . [ INT ]
    (67) m -> . [ INT ] m
    (68) m -> . [ varYVals ] m
    (69) m -> . [ varYVals ]

    MASMAS          reduce using rule 66 (m -> [ INT ] .)
    MENOSMENOS      reduce using rule 66 (m -> [ INT ] .)
    MULEQ           reduce using rule 66 (m -> [ INT ] .)
    DIVEQ           reduce using rule 66 (m -> [ INT ] .)
    MASEQ           reduce using rule 66 (m -> [ INT ] .)
    MENOSEQ         reduce using rule 66 (m -> [ INT ] .)
    =               reduce using rule 66 (m -> [ INT ] .)
    ;               reduce using rule 66 (m -> [ INT ] .)
    ,               reduce using rule 66 (m -> [ INT ] .)
    +               reduce using rule 66 (m -> [ INT ] .)
    -               reduce using rule 66 (m -> [ INT ] .)
    *               reduce using rule 66 (m -> [ INT ] .)
    /               reduce using rule 66 (m -> [ INT ] .)
    %               reduce using rule 66 (m -> [ INT ] .)
    ^               reduce using rule 66 (m -> [ INT ] .)
    OR              reduce using rule 66 (m -> [ INT ] .)
    ?               reduce using rule 66 (m -> [ INT ] .)
    AND             reduce using rule 66 (m -> [ INT ] .)
    EQEQ            reduce using rule 66 (m -> [ INT ] .)
    DISTINTO        reduce using rule 66 (m -> [ INT ] .)
    >               reduce using rule 66 (m -> [ INT ] .)
    <               reduce using rule 66 (m -> [ INT ] .)
    )               reduce using rule 66 (m -> [ INT ] .)
    ]               reduce using rule 66 (m -> [ INT ] .)
    }               reduce using rule 66 (m -> [ INT ] .)
    :               reduce using rule 66 (m -> [ INT ] .)
    [               shift and go to state 52

    m                              shift and go to state 275

state 203

    (68) m -> [ varYVals ] . m
    (69) m -> [ varYVals ] .
    (66) m -> . [ INT ]
    (67) m -> . [ INT ] m
    (68) m -> . [ varYVals ] m
    (69) m -> . [ varYVals ]

    MASMAS          reduce using rule 69 (m -> [ varYVals ] .)
    MENOSMENOS      reduce using rule 69 (m -> [ varYVals ] .)
    MULEQ           reduce using rule 69 (m -> [ varYVals ] .)
    DIVEQ           reduce using rule 69 (m -> [ varYVals ] .)
    MASEQ           reduce using rule 69 (m -> [ varYVals ] .)
    MENOSEQ         reduce using rule 69 (m -> [ varYVals ] .)
    =               reduce using rule 69 (m -> [ varYVals ] .)
    ;               reduce using rule 69 (m -> [ varYVals ] .)
    ,               reduce using rule 69 (m -> [ varYVals ] .)
    +               reduce using rule 69 (m -> [ varYVals ] .)
    -               reduce using rule 69 (m -> [ varYVals ] .)
    *               reduce using rule 69 (m -> [ varYVals ] .)
    /               reduce using rule 69 (m -> [ varYVals ] .)
    %               reduce using rule 69 (m -> [ varYVals ] .)
    ^               reduce using rule 69 (m -> [ varYVals ] .)
    OR              reduce using rule 69 (m -> [ varYVals ] .)
    ?               reduce using rule 69 (m -> [ varYVals ] .)
    AND             reduce using rule 69 (m -> [ varYVals ] .)
    EQEQ            reduce using rule 69 (m -> [ varYVals ] .)
    DISTINTO        reduce using rule 69 (m -> [ varYVals ] .)
    >               reduce using rule 69 (m -> [ varYVals ] .)
    <               reduce using rule 69 (m -> [ varYVals ] .)
    )               reduce using rule 69 (m -> [ varYVals ] .)
    ]               reduce using rule 69 (m -> [ varYVals ] .)
    }               reduce using rule 69 (m -> [ varYVals ] .)
    :               reduce using rule 69 (m -> [ varYVals ] .)
    [               shift and go to state 52

    m                              shift and go to state 276

state 204

    (35) funcInt -> MULTIESCALAR ( valores , . valores param )
    (46) valores -> . eMat
    (47) valores -> . expBool
    (48) valores -> . funcReturn
    (49) valores -> . reg
    (50) valores -> . INT
    (51) valores -> . FLOAT
    (52) valores -> . STRING
    (53) valores -> . BOOL
    (54) valores -> . varYVals
    (55) valores -> . varsOps
    (56) valores -> . vec
    (57) valores -> . ternario
    (58) valores -> . ID . valoresCampos
    (59) valores -> . RES
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (130) expBool -> . expBool OR and
    (131) expBool -> . valoresBool OR and
    (132) expBool -> . expBool OR valoresBool
    (133) expBool -> . valoresBool OR valoresBool
    (134) expBool -> . and
    (32) funcReturn -> . funcInt
    (33) funcReturn -> . funcString
    (34) funcReturn -> . funcBool
    (70) reg -> . { campos }
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (43) vec -> . [ elem ]
    (127) ternario -> . valoresBool ? valores : valores
    (128) ternario -> . expBool ? valores : valores
    (129) ternario -> . ( ternario )
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (123) valoresBool -> . BOOL
    (124) valoresBool -> . funcBool
    (125) valoresBool -> . varYVals
    (126) valoresBool -> . varsOps
    (135) and -> . and AND eq
    (136) and -> . valoresBool AND eq
    (137) and -> . and AND valoresBool
    (138) and -> . valoresBool AND valoresBool
    (139) and -> . eq
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (37) funcString -> . CAPITALIZAR ( valores )
    (38) funcBool -> . COLINEALES ( valores , valores )
    (65) vecVal -> . ID m
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (140) eq -> . eq EQEQ mayor
    (141) eq -> . eq DISTINTO mayor
    (142) eq -> . tCompare EQEQ mayor
    (143) eq -> . tCompare DISTINTO mayor
    (144) eq -> . eq EQEQ tCompare
    (145) eq -> . eq DISTINTO tCompare
    (146) eq -> . tCompare EQEQ tCompare
    (147) eq -> . tCompare DISTINTO tCompare
    (148) eq -> . mayor
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (122) paren -> . ( eMat )
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (161) parenBool -> . ( expBool )

    INT             shift and go to state 92
    FLOAT           shift and go to state 94
    STRING          shift and go to state 87
    BOOL            shift and go to state 97
    ID              shift and go to state 91
    RES             shift and go to state 73
    {               shift and go to state 102
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    [               shift and go to state 90
    (               shift and go to state 81
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 4
    -               shift and go to state 83
    +               shift and go to state 82
    NOT             shift and go to state 100

    and                            shift and go to state 70
    ternario                       shift and go to state 71
    funcBool                       shift and go to state 72
    funcInt                        shift and go to state 74
    menor                          shift and go to state 76
    mayor                          shift and go to state 103
    valoresMat                     shift and go to state 77
    eq                             shift and go to state 78
    valoresBool                    shift and go to state 79
    eMat                           shift and go to state 80
    vecVal                         shift and go to state 8
    vec                            shift and go to state 84
    paren                          shift and go to state 89
    reg                            shift and go to state 85
    iSing                          shift and go to state 86
    exp                            shift and go to state 101
    tCompare                       shift and go to state 88
    not                            shift and go to state 75
    funcString                     shift and go to state 23
    funcReturn                     shift and go to state 93
    valores                        shift and go to state 277
    p                              shift and go to state 96
    varsOps                        shift and go to state 98
    varYVals                       shift and go to state 104
    parenBool                      shift and go to state 99
    expBool                        shift and go to state 105

state 205

    (37) funcString -> CAPITALIZAR ( valores ) .

    ;               reduce using rule 37 (funcString -> CAPITALIZAR ( valores ) .)
    ,               reduce using rule 37 (funcString -> CAPITALIZAR ( valores ) .)
    )               reduce using rule 37 (funcString -> CAPITALIZAR ( valores ) .)
    ]               reduce using rule 37 (funcString -> CAPITALIZAR ( valores ) .)
    }               reduce using rule 37 (funcString -> CAPITALIZAR ( valores ) .)
    :               reduce using rule 37 (funcString -> CAPITALIZAR ( valores ) .)


state 206

    (14) lCerrada -> DO bloqueCerrado WHILE ( cosaBooleana . ) ;

    )               shift and go to state 278


state 207

    (12) lCerrada -> IF ( cosaBooleana ) . bloqueCerrado ELSE bloqueCerrado
    (8) bloqueCerrado -> . lCerrada
    (9) bloqueCerrado -> . { g }
    (10) lCerrada -> . sentencia
    (11) lCerrada -> . COMMENT lCerrada
    (12) lCerrada -> . IF ( cosaBooleana ) bloqueCerrado ELSE bloqueCerrado
    (13) lCerrada -> . loop bloqueCerrado
    (14) lCerrada -> . DO bloqueCerrado WHILE ( cosaBooleana ) ;
    (15) sentencia -> . varsOps ;
    (16) sentencia -> . func ;
    (17) sentencia -> . varAsig ;
    (18) sentencia -> . RETURN ;
    (19) sentencia -> . ;
    (20) loop -> . WHILE ( cosaBooleana )
    (21) loop -> . FOR ( primParam ; cosaBooleana ; tercerParam )
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (30) func -> . funcReturn
    (31) func -> . funcVoid
    (78) varAsig -> . varYVals MULEQ valoresAsig
    (79) varAsig -> . varYVals DIVEQ valoresAsig
    (80) varAsig -> . varYVals MASEQ valoresAsig
    (81) varAsig -> . varYVals MENOSEQ valoresAsig
    (82) varAsig -> . varYVals = valoresAsig
    (83) varAsig -> . ID . ID = valoresAsig
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (32) funcReturn -> . funcInt
    (33) funcReturn -> . funcString
    (34) funcReturn -> . funcBool
    (39) funcVoid -> . PRINT ( valores )
    (65) vecVal -> . ID m
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (37) funcString -> . CAPITALIZAR ( valores )
    (38) funcBool -> . COLINEALES ( valores , valores )

    {               shift and go to state 36
    COMMENT         shift and go to state 9
    IF              shift and go to state 34
    DO              shift and go to state 1
    RETURN          shift and go to state 2
    ;               shift and go to state 11
    WHILE           shift and go to state 6
    FOR             shift and go to state 17
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    ID              shift and go to state 20
    PRINT           shift and go to state 7
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 4

    funcBool                       shift and go to state 3
    funcInt                        shift and go to state 5
    bloqueCerrado                  shift and go to state 279
    vecVal                         shift and go to state 8
    sentencia                      shift and go to state 10
    funcVoid                       shift and go to state 15
    func                           shift and go to state 19
    varAsig                        shift and go to state 21
    funcString                     shift and go to state 23
    funcReturn                     shift and go to state 25
    lCerrada                       shift and go to state 35
    varsOps                        shift and go to state 14
    varYVals                       shift and go to state 31
    loop                           shift and go to state 37

state 208

    (135) and -> and AND eq .
    (140) eq -> eq . EQEQ mayor
    (141) eq -> eq . DISTINTO mayor
    (144) eq -> eq . EQEQ tCompare
    (145) eq -> eq . DISTINTO tCompare

    AND             reduce using rule 135 (and -> and AND eq .)
    OR              reduce using rule 135 (and -> and AND eq .)
    ?               reduce using rule 135 (and -> and AND eq .)
    ;               reduce using rule 135 (and -> and AND eq .)
    )               reduce using rule 135 (and -> and AND eq .)
    ,               reduce using rule 135 (and -> and AND eq .)
    ]               reduce using rule 135 (and -> and AND eq .)
    }               reduce using rule 135 (and -> and AND eq .)
    :               reduce using rule 135 (and -> and AND eq .)
    EQEQ            shift and go to state 147
    DISTINTO        shift and go to state 148


state 209

    (137) and -> and AND valoresBool .

    AND             reduce using rule 137 (and -> and AND valoresBool .)
    OR              reduce using rule 137 (and -> and AND valoresBool .)
    ?               reduce using rule 137 (and -> and AND valoresBool .)
    ;               reduce using rule 137 (and -> and AND valoresBool .)
    )               reduce using rule 137 (and -> and AND valoresBool .)
    ,               reduce using rule 137 (and -> and AND valoresBool .)
    ]               reduce using rule 137 (and -> and AND valoresBool .)
    }               reduce using rule 137 (and -> and AND valoresBool .)
    :               reduce using rule 137 (and -> and AND valoresBool .)


state 210

    (125) valoresBool -> varYVals .
    (151) tCompare -> varYVals .
    (75) varsOps -> varYVals . MASMAS
    (76) varsOps -> varYVals . MENOSMENOS
    (87) valoresMat -> varYVals .

    AND             reduce using rule 125 (valoresBool -> varYVals .)
    OR              reduce using rule 125 (valoresBool -> varYVals .)
    ?               reduce using rule 125 (valoresBool -> varYVals .)
    ,               reduce using rule 125 (valoresBool -> varYVals .)
    )               reduce using rule 125 (valoresBool -> varYVals .)
    ;               reduce using rule 125 (valoresBool -> varYVals .)
    ]               reduce using rule 125 (valoresBool -> varYVals .)
    }               reduce using rule 125 (valoresBool -> varYVals .)
    :               reduce using rule 125 (valoresBool -> varYVals .)
    EQEQ            reduce using rule 151 (tCompare -> varYVals .)
    DISTINTO        reduce using rule 151 (tCompare -> varYVals .)
    >               reduce using rule 151 (tCompare -> varYVals .)
    <               reduce using rule 151 (tCompare -> varYVals .)
    MASMAS          shift and go to state 63
    MENOSMENOS      shift and go to state 60
    +               reduce using rule 87 (valoresMat -> varYVals .)
    -               reduce using rule 87 (valoresMat -> varYVals .)
    *               reduce using rule 87 (valoresMat -> varYVals .)
    /               reduce using rule 87 (valoresMat -> varYVals .)
    %               reduce using rule 87 (valoresMat -> varYVals .)
    ^               reduce using rule 87 (valoresMat -> varYVals .)


state 211

    (110) p -> valoresMat % valoresMat .
    (113) exp -> valoresMat . ^ iSing
    (115) exp -> valoresMat . ^ valoresMat

    *               reduce using rule 110 (p -> valoresMat % valoresMat .)
    /               reduce using rule 110 (p -> valoresMat % valoresMat .)
    %               reduce using rule 110 (p -> valoresMat % valoresMat .)
    +               reduce using rule 110 (p -> valoresMat % valoresMat .)
    -               reduce using rule 110 (p -> valoresMat % valoresMat .)
    EQEQ            reduce using rule 110 (p -> valoresMat % valoresMat .)
    DISTINTO        reduce using rule 110 (p -> valoresMat % valoresMat .)
    >               reduce using rule 110 (p -> valoresMat % valoresMat .)
    <               reduce using rule 110 (p -> valoresMat % valoresMat .)
    ;               reduce using rule 110 (p -> valoresMat % valoresMat .)
    )               reduce using rule 110 (p -> valoresMat % valoresMat .)
    ,               reduce using rule 110 (p -> valoresMat % valoresMat .)
    ]               reduce using rule 110 (p -> valoresMat % valoresMat .)
    }               reduce using rule 110 (p -> valoresMat % valoresMat .)
    :               reduce using rule 110 (p -> valoresMat % valoresMat .)
    AND             reduce using rule 110 (p -> valoresMat % valoresMat .)
    OR              reduce using rule 110 (p -> valoresMat % valoresMat .)
    ?               reduce using rule 110 (p -> valoresMat % valoresMat .)
    ^               shift and go to state 146


state 212

    (104) p -> valoresMat % exp .
    (112) exp -> exp . ^ iSing
    (114) exp -> exp . ^ valoresMat

    *               reduce using rule 104 (p -> valoresMat % exp .)
    /               reduce using rule 104 (p -> valoresMat % exp .)
    %               reduce using rule 104 (p -> valoresMat % exp .)
    +               reduce using rule 104 (p -> valoresMat % exp .)
    -               reduce using rule 104 (p -> valoresMat % exp .)
    EQEQ            reduce using rule 104 (p -> valoresMat % exp .)
    DISTINTO        reduce using rule 104 (p -> valoresMat % exp .)
    >               reduce using rule 104 (p -> valoresMat % exp .)
    <               reduce using rule 104 (p -> valoresMat % exp .)
    ;               reduce using rule 104 (p -> valoresMat % exp .)
    )               reduce using rule 104 (p -> valoresMat % exp .)
    ,               reduce using rule 104 (p -> valoresMat % exp .)
    ]               reduce using rule 104 (p -> valoresMat % exp .)
    }               reduce using rule 104 (p -> valoresMat % exp .)
    :               reduce using rule 104 (p -> valoresMat % exp .)
    AND             reduce using rule 104 (p -> valoresMat % exp .)
    OR              reduce using rule 104 (p -> valoresMat % exp .)
    ?               reduce using rule 104 (p -> valoresMat % exp .)
    ^               shift and go to state 187


state 213

    (96) eMat -> valoresMat + valoresMat .
    (102) p -> valoresMat . * exp
    (103) p -> valoresMat . / exp
    (104) p -> valoresMat . % exp
    (108) p -> valoresMat . * valoresMat
    (109) p -> valoresMat . / valoresMat
    (110) p -> valoresMat . % valoresMat
    (113) exp -> valoresMat . ^ iSing
    (115) exp -> valoresMat . ^ valoresMat

    +               reduce using rule 96 (eMat -> valoresMat + valoresMat .)
    -               reduce using rule 96 (eMat -> valoresMat + valoresMat .)
    >               reduce using rule 96 (eMat -> valoresMat + valoresMat .)
    <               reduce using rule 96 (eMat -> valoresMat + valoresMat .)
    EQEQ            reduce using rule 96 (eMat -> valoresMat + valoresMat .)
    DISTINTO        reduce using rule 96 (eMat -> valoresMat + valoresMat .)
    AND             reduce using rule 96 (eMat -> valoresMat + valoresMat .)
    OR              reduce using rule 96 (eMat -> valoresMat + valoresMat .)
    ?               reduce using rule 96 (eMat -> valoresMat + valoresMat .)
    ,               reduce using rule 96 (eMat -> valoresMat + valoresMat .)
    )               reduce using rule 96 (eMat -> valoresMat + valoresMat .)
    ;               reduce using rule 96 (eMat -> valoresMat + valoresMat .)
    ]               reduce using rule 96 (eMat -> valoresMat + valoresMat .)
    }               reduce using rule 96 (eMat -> valoresMat + valoresMat .)
    :               reduce using rule 96 (eMat -> valoresMat + valoresMat .)
    *               shift and go to state 143
    /               shift and go to state 145
    %               shift and go to state 141
    ^               shift and go to state 146


state 214

    (92) eMat -> valoresMat + p .
    (99) p -> p . * exp
    (100) p -> p . / exp
    (101) p -> p . % exp
    (105) p -> p . * valoresMat
    (106) p -> p . / valoresMat
    (107) p -> p . % valoresMat

    +               reduce using rule 92 (eMat -> valoresMat + p .)
    -               reduce using rule 92 (eMat -> valoresMat + p .)
    >               reduce using rule 92 (eMat -> valoresMat + p .)
    <               reduce using rule 92 (eMat -> valoresMat + p .)
    EQEQ            reduce using rule 92 (eMat -> valoresMat + p .)
    DISTINTO        reduce using rule 92 (eMat -> valoresMat + p .)
    AND             reduce using rule 92 (eMat -> valoresMat + p .)
    OR              reduce using rule 92 (eMat -> valoresMat + p .)
    ?               reduce using rule 92 (eMat -> valoresMat + p .)
    ,               reduce using rule 92 (eMat -> valoresMat + p .)
    )               reduce using rule 92 (eMat -> valoresMat + p .)
    ;               reduce using rule 92 (eMat -> valoresMat + p .)
    ]               reduce using rule 92 (eMat -> valoresMat + p .)
    }               reduce using rule 92 (eMat -> valoresMat + p .)
    :               reduce using rule 92 (eMat -> valoresMat + p .)
    *               shift and go to state 180
    /               shift and go to state 181
    %               shift and go to state 179


state 215

    (108) p -> valoresMat * valoresMat .
    (113) exp -> valoresMat . ^ iSing
    (115) exp -> valoresMat . ^ valoresMat

    *               reduce using rule 108 (p -> valoresMat * valoresMat .)
    /               reduce using rule 108 (p -> valoresMat * valoresMat .)
    %               reduce using rule 108 (p -> valoresMat * valoresMat .)
    +               reduce using rule 108 (p -> valoresMat * valoresMat .)
    -               reduce using rule 108 (p -> valoresMat * valoresMat .)
    EQEQ            reduce using rule 108 (p -> valoresMat * valoresMat .)
    DISTINTO        reduce using rule 108 (p -> valoresMat * valoresMat .)
    >               reduce using rule 108 (p -> valoresMat * valoresMat .)
    <               reduce using rule 108 (p -> valoresMat * valoresMat .)
    ;               reduce using rule 108 (p -> valoresMat * valoresMat .)
    )               reduce using rule 108 (p -> valoresMat * valoresMat .)
    ,               reduce using rule 108 (p -> valoresMat * valoresMat .)
    ]               reduce using rule 108 (p -> valoresMat * valoresMat .)
    }               reduce using rule 108 (p -> valoresMat * valoresMat .)
    :               reduce using rule 108 (p -> valoresMat * valoresMat .)
    AND             reduce using rule 108 (p -> valoresMat * valoresMat .)
    OR              reduce using rule 108 (p -> valoresMat * valoresMat .)
    ?               reduce using rule 108 (p -> valoresMat * valoresMat .)
    ^               shift and go to state 146


state 216

    (102) p -> valoresMat * exp .
    (112) exp -> exp . ^ iSing
    (114) exp -> exp . ^ valoresMat

    *               reduce using rule 102 (p -> valoresMat * exp .)
    /               reduce using rule 102 (p -> valoresMat * exp .)
    %               reduce using rule 102 (p -> valoresMat * exp .)
    +               reduce using rule 102 (p -> valoresMat * exp .)
    -               reduce using rule 102 (p -> valoresMat * exp .)
    EQEQ            reduce using rule 102 (p -> valoresMat * exp .)
    DISTINTO        reduce using rule 102 (p -> valoresMat * exp .)
    >               reduce using rule 102 (p -> valoresMat * exp .)
    <               reduce using rule 102 (p -> valoresMat * exp .)
    ;               reduce using rule 102 (p -> valoresMat * exp .)
    )               reduce using rule 102 (p -> valoresMat * exp .)
    ,               reduce using rule 102 (p -> valoresMat * exp .)
    ]               reduce using rule 102 (p -> valoresMat * exp .)
    }               reduce using rule 102 (p -> valoresMat * exp .)
    :               reduce using rule 102 (p -> valoresMat * exp .)
    AND             reduce using rule 102 (p -> valoresMat * exp .)
    OR              reduce using rule 102 (p -> valoresMat * exp .)
    ?               reduce using rule 102 (p -> valoresMat * exp .)
    ^               shift and go to state 187


state 217

    (97) eMat -> valoresMat - valoresMat .
    (102) p -> valoresMat . * exp
    (103) p -> valoresMat . / exp
    (104) p -> valoresMat . % exp
    (108) p -> valoresMat . * valoresMat
    (109) p -> valoresMat . / valoresMat
    (110) p -> valoresMat . % valoresMat
    (113) exp -> valoresMat . ^ iSing
    (115) exp -> valoresMat . ^ valoresMat

    +               reduce using rule 97 (eMat -> valoresMat - valoresMat .)
    -               reduce using rule 97 (eMat -> valoresMat - valoresMat .)
    >               reduce using rule 97 (eMat -> valoresMat - valoresMat .)
    <               reduce using rule 97 (eMat -> valoresMat - valoresMat .)
    EQEQ            reduce using rule 97 (eMat -> valoresMat - valoresMat .)
    DISTINTO        reduce using rule 97 (eMat -> valoresMat - valoresMat .)
    AND             reduce using rule 97 (eMat -> valoresMat - valoresMat .)
    OR              reduce using rule 97 (eMat -> valoresMat - valoresMat .)
    ?               reduce using rule 97 (eMat -> valoresMat - valoresMat .)
    ,               reduce using rule 97 (eMat -> valoresMat - valoresMat .)
    )               reduce using rule 97 (eMat -> valoresMat - valoresMat .)
    ;               reduce using rule 97 (eMat -> valoresMat - valoresMat .)
    ]               reduce using rule 97 (eMat -> valoresMat - valoresMat .)
    }               reduce using rule 97 (eMat -> valoresMat - valoresMat .)
    :               reduce using rule 97 (eMat -> valoresMat - valoresMat .)
    *               shift and go to state 143
    /               shift and go to state 145
    %               shift and go to state 141
    ^               shift and go to state 146


state 218

    (93) eMat -> valoresMat - p .
    (99) p -> p . * exp
    (100) p -> p . / exp
    (101) p -> p . % exp
    (105) p -> p . * valoresMat
    (106) p -> p . / valoresMat
    (107) p -> p . % valoresMat

    +               reduce using rule 93 (eMat -> valoresMat - p .)
    -               reduce using rule 93 (eMat -> valoresMat - p .)
    >               reduce using rule 93 (eMat -> valoresMat - p .)
    <               reduce using rule 93 (eMat -> valoresMat - p .)
    EQEQ            reduce using rule 93 (eMat -> valoresMat - p .)
    DISTINTO        reduce using rule 93 (eMat -> valoresMat - p .)
    AND             reduce using rule 93 (eMat -> valoresMat - p .)
    OR              reduce using rule 93 (eMat -> valoresMat - p .)
    ?               reduce using rule 93 (eMat -> valoresMat - p .)
    ,               reduce using rule 93 (eMat -> valoresMat - p .)
    )               reduce using rule 93 (eMat -> valoresMat - p .)
    ;               reduce using rule 93 (eMat -> valoresMat - p .)
    ]               reduce using rule 93 (eMat -> valoresMat - p .)
    }               reduce using rule 93 (eMat -> valoresMat - p .)
    :               reduce using rule 93 (eMat -> valoresMat - p .)
    *               shift and go to state 180
    /               shift and go to state 181
    %               shift and go to state 179


state 219

    (109) p -> valoresMat / valoresMat .
    (113) exp -> valoresMat . ^ iSing
    (115) exp -> valoresMat . ^ valoresMat

    *               reduce using rule 109 (p -> valoresMat / valoresMat .)
    /               reduce using rule 109 (p -> valoresMat / valoresMat .)
    %               reduce using rule 109 (p -> valoresMat / valoresMat .)
    +               reduce using rule 109 (p -> valoresMat / valoresMat .)
    -               reduce using rule 109 (p -> valoresMat / valoresMat .)
    EQEQ            reduce using rule 109 (p -> valoresMat / valoresMat .)
    DISTINTO        reduce using rule 109 (p -> valoresMat / valoresMat .)
    >               reduce using rule 109 (p -> valoresMat / valoresMat .)
    <               reduce using rule 109 (p -> valoresMat / valoresMat .)
    ;               reduce using rule 109 (p -> valoresMat / valoresMat .)
    )               reduce using rule 109 (p -> valoresMat / valoresMat .)
    ,               reduce using rule 109 (p -> valoresMat / valoresMat .)
    ]               reduce using rule 109 (p -> valoresMat / valoresMat .)
    }               reduce using rule 109 (p -> valoresMat / valoresMat .)
    :               reduce using rule 109 (p -> valoresMat / valoresMat .)
    AND             reduce using rule 109 (p -> valoresMat / valoresMat .)
    OR              reduce using rule 109 (p -> valoresMat / valoresMat .)
    ?               reduce using rule 109 (p -> valoresMat / valoresMat .)
    ^               shift and go to state 146


state 220

    (103) p -> valoresMat / exp .
    (112) exp -> exp . ^ iSing
    (114) exp -> exp . ^ valoresMat

    *               reduce using rule 103 (p -> valoresMat / exp .)
    /               reduce using rule 103 (p -> valoresMat / exp .)
    %               reduce using rule 103 (p -> valoresMat / exp .)
    +               reduce using rule 103 (p -> valoresMat / exp .)
    -               reduce using rule 103 (p -> valoresMat / exp .)
    EQEQ            reduce using rule 103 (p -> valoresMat / exp .)
    DISTINTO        reduce using rule 103 (p -> valoresMat / exp .)
    >               reduce using rule 103 (p -> valoresMat / exp .)
    <               reduce using rule 103 (p -> valoresMat / exp .)
    ;               reduce using rule 103 (p -> valoresMat / exp .)
    )               reduce using rule 103 (p -> valoresMat / exp .)
    ,               reduce using rule 103 (p -> valoresMat / exp .)
    ]               reduce using rule 103 (p -> valoresMat / exp .)
    }               reduce using rule 103 (p -> valoresMat / exp .)
    :               reduce using rule 103 (p -> valoresMat / exp .)
    AND             reduce using rule 103 (p -> valoresMat / exp .)
    OR              reduce using rule 103 (p -> valoresMat / exp .)
    ?               reduce using rule 103 (p -> valoresMat / exp .)
    ^               shift and go to state 187


state 221

    (115) exp -> valoresMat ^ valoresMat .

    ^               reduce using rule 115 (exp -> valoresMat ^ valoresMat .)
    *               reduce using rule 115 (exp -> valoresMat ^ valoresMat .)
    /               reduce using rule 115 (exp -> valoresMat ^ valoresMat .)
    %               reduce using rule 115 (exp -> valoresMat ^ valoresMat .)
    +               reduce using rule 115 (exp -> valoresMat ^ valoresMat .)
    -               reduce using rule 115 (exp -> valoresMat ^ valoresMat .)
    ,               reduce using rule 115 (exp -> valoresMat ^ valoresMat .)
    )               reduce using rule 115 (exp -> valoresMat ^ valoresMat .)
    ;               reduce using rule 115 (exp -> valoresMat ^ valoresMat .)
    ]               reduce using rule 115 (exp -> valoresMat ^ valoresMat .)
    }               reduce using rule 115 (exp -> valoresMat ^ valoresMat .)
    :               reduce using rule 115 (exp -> valoresMat ^ valoresMat .)
    EQEQ            reduce using rule 115 (exp -> valoresMat ^ valoresMat .)
    DISTINTO        reduce using rule 115 (exp -> valoresMat ^ valoresMat .)
    >               reduce using rule 115 (exp -> valoresMat ^ valoresMat .)
    <               reduce using rule 115 (exp -> valoresMat ^ valoresMat .)
    AND             reduce using rule 115 (exp -> valoresMat ^ valoresMat .)
    OR              reduce using rule 115 (exp -> valoresMat ^ valoresMat .)
    ?               reduce using rule 115 (exp -> valoresMat ^ valoresMat .)


state 222

    (113) exp -> valoresMat ^ iSing .

    ^               reduce using rule 113 (exp -> valoresMat ^ iSing .)
    *               reduce using rule 113 (exp -> valoresMat ^ iSing .)
    /               reduce using rule 113 (exp -> valoresMat ^ iSing .)
    %               reduce using rule 113 (exp -> valoresMat ^ iSing .)
    +               reduce using rule 113 (exp -> valoresMat ^ iSing .)
    -               reduce using rule 113 (exp -> valoresMat ^ iSing .)
    ,               reduce using rule 113 (exp -> valoresMat ^ iSing .)
    )               reduce using rule 113 (exp -> valoresMat ^ iSing .)
    ;               reduce using rule 113 (exp -> valoresMat ^ iSing .)
    ]               reduce using rule 113 (exp -> valoresMat ^ iSing .)
    }               reduce using rule 113 (exp -> valoresMat ^ iSing .)
    :               reduce using rule 113 (exp -> valoresMat ^ iSing .)
    EQEQ            reduce using rule 113 (exp -> valoresMat ^ iSing .)
    DISTINTO        reduce using rule 113 (exp -> valoresMat ^ iSing .)
    >               reduce using rule 113 (exp -> valoresMat ^ iSing .)
    <               reduce using rule 113 (exp -> valoresMat ^ iSing .)
    AND             reduce using rule 113 (exp -> valoresMat ^ iSing .)
    OR              reduce using rule 113 (exp -> valoresMat ^ iSing .)
    ?               reduce using rule 113 (exp -> valoresMat ^ iSing .)


state 223

    (140) eq -> eq EQEQ mayor .

    EQEQ            reduce using rule 140 (eq -> eq EQEQ mayor .)
    DISTINTO        reduce using rule 140 (eq -> eq EQEQ mayor .)
    AND             reduce using rule 140 (eq -> eq EQEQ mayor .)
    OR              reduce using rule 140 (eq -> eq EQEQ mayor .)
    ?               reduce using rule 140 (eq -> eq EQEQ mayor .)
    ,               reduce using rule 140 (eq -> eq EQEQ mayor .)
    )               reduce using rule 140 (eq -> eq EQEQ mayor .)
    ;               reduce using rule 140 (eq -> eq EQEQ mayor .)
    ]               reduce using rule 140 (eq -> eq EQEQ mayor .)
    }               reduce using rule 140 (eq -> eq EQEQ mayor .)
    :               reduce using rule 140 (eq -> eq EQEQ mayor .)


state 224

    (144) eq -> eq EQEQ tCompare .
    (154) mayor -> tCompare . > tCompare
    (156) menor -> tCompare . < tCompare

    EQEQ            reduce using rule 144 (eq -> eq EQEQ tCompare .)
    DISTINTO        reduce using rule 144 (eq -> eq EQEQ tCompare .)
    AND             reduce using rule 144 (eq -> eq EQEQ tCompare .)
    OR              reduce using rule 144 (eq -> eq EQEQ tCompare .)
    ?               reduce using rule 144 (eq -> eq EQEQ tCompare .)
    ,               reduce using rule 144 (eq -> eq EQEQ tCompare .)
    )               reduce using rule 144 (eq -> eq EQEQ tCompare .)
    ;               reduce using rule 144 (eq -> eq EQEQ tCompare .)
    ]               reduce using rule 144 (eq -> eq EQEQ tCompare .)
    }               reduce using rule 144 (eq -> eq EQEQ tCompare .)
    :               reduce using rule 144 (eq -> eq EQEQ tCompare .)
    >               shift and go to state 174
    <               shift and go to state 173


state 225

    (150) tCompare -> varsOps .
    (88) valoresMat -> varsOps .

    EQEQ            reduce using rule 150 (tCompare -> varsOps .)
    DISTINTO        reduce using rule 150 (tCompare -> varsOps .)
    AND             reduce using rule 150 (tCompare -> varsOps .)
    OR              reduce using rule 150 (tCompare -> varsOps .)
    ?               reduce using rule 150 (tCompare -> varsOps .)
    ,               reduce using rule 150 (tCompare -> varsOps .)
    )               reduce using rule 150 (tCompare -> varsOps .)
    ;               reduce using rule 150 (tCompare -> varsOps .)
    ]               reduce using rule 150 (tCompare -> varsOps .)
    }               reduce using rule 150 (tCompare -> varsOps .)
    :               reduce using rule 150 (tCompare -> varsOps .)
    >               reduce using rule 150 (tCompare -> varsOps .)
    <               reduce using rule 150 (tCompare -> varsOps .)
    +               reduce using rule 88 (valoresMat -> varsOps .)
    -               reduce using rule 88 (valoresMat -> varsOps .)
    *               reduce using rule 88 (valoresMat -> varsOps .)
    /               reduce using rule 88 (valoresMat -> varsOps .)
    %               reduce using rule 88 (valoresMat -> varsOps .)
    ^               reduce using rule 88 (valoresMat -> varsOps .)


state 226

    (151) tCompare -> varYVals .
    (75) varsOps -> varYVals . MASMAS
    (76) varsOps -> varYVals . MENOSMENOS
    (87) valoresMat -> varYVals .

    EQEQ            reduce using rule 151 (tCompare -> varYVals .)
    DISTINTO        reduce using rule 151 (tCompare -> varYVals .)
    AND             reduce using rule 151 (tCompare -> varYVals .)
    OR              reduce using rule 151 (tCompare -> varYVals .)
    ?               reduce using rule 151 (tCompare -> varYVals .)
    ,               reduce using rule 151 (tCompare -> varYVals .)
    )               reduce using rule 151 (tCompare -> varYVals .)
    ;               reduce using rule 151 (tCompare -> varYVals .)
    ]               reduce using rule 151 (tCompare -> varYVals .)
    }               reduce using rule 151 (tCompare -> varYVals .)
    :               reduce using rule 151 (tCompare -> varYVals .)
    >               reduce using rule 151 (tCompare -> varYVals .)
    <               reduce using rule 151 (tCompare -> varYVals .)
    MASMAS          shift and go to state 63
    MENOSMENOS      shift and go to state 60
    +               reduce using rule 87 (valoresMat -> varYVals .)
    -               reduce using rule 87 (valoresMat -> varYVals .)
    *               reduce using rule 87 (valoresMat -> varYVals .)
    /               reduce using rule 87 (valoresMat -> varYVals .)
    %               reduce using rule 87 (valoresMat -> varYVals .)
    ^               reduce using rule 87 (valoresMat -> varYVals .)


state 227

    (141) eq -> eq DISTINTO mayor .

    EQEQ            reduce using rule 141 (eq -> eq DISTINTO mayor .)
    DISTINTO        reduce using rule 141 (eq -> eq DISTINTO mayor .)
    AND             reduce using rule 141 (eq -> eq DISTINTO mayor .)
    OR              reduce using rule 141 (eq -> eq DISTINTO mayor .)
    ?               reduce using rule 141 (eq -> eq DISTINTO mayor .)
    ,               reduce using rule 141 (eq -> eq DISTINTO mayor .)
    )               reduce using rule 141 (eq -> eq DISTINTO mayor .)
    ;               reduce using rule 141 (eq -> eq DISTINTO mayor .)
    ]               reduce using rule 141 (eq -> eq DISTINTO mayor .)
    }               reduce using rule 141 (eq -> eq DISTINTO mayor .)
    :               reduce using rule 141 (eq -> eq DISTINTO mayor .)


state 228

    (145) eq -> eq DISTINTO tCompare .
    (154) mayor -> tCompare . > tCompare
    (156) menor -> tCompare . < tCompare

    EQEQ            reduce using rule 145 (eq -> eq DISTINTO tCompare .)
    DISTINTO        reduce using rule 145 (eq -> eq DISTINTO tCompare .)
    AND             reduce using rule 145 (eq -> eq DISTINTO tCompare .)
    OR              reduce using rule 145 (eq -> eq DISTINTO tCompare .)
    ?               reduce using rule 145 (eq -> eq DISTINTO tCompare .)
    ,               reduce using rule 145 (eq -> eq DISTINTO tCompare .)
    )               reduce using rule 145 (eq -> eq DISTINTO tCompare .)
    ;               reduce using rule 145 (eq -> eq DISTINTO tCompare .)
    ]               reduce using rule 145 (eq -> eq DISTINTO tCompare .)
    }               reduce using rule 145 (eq -> eq DISTINTO tCompare .)
    :               reduce using rule 145 (eq -> eq DISTINTO tCompare .)
    >               shift and go to state 174
    <               shift and go to state 173


state 229

    (136) and -> valoresBool AND eq .
    (140) eq -> eq . EQEQ mayor
    (141) eq -> eq . DISTINTO mayor
    (144) eq -> eq . EQEQ tCompare
    (145) eq -> eq . DISTINTO tCompare

    AND             reduce using rule 136 (and -> valoresBool AND eq .)
    OR              reduce using rule 136 (and -> valoresBool AND eq .)
    ?               reduce using rule 136 (and -> valoresBool AND eq .)
    ;               reduce using rule 136 (and -> valoresBool AND eq .)
    )               reduce using rule 136 (and -> valoresBool AND eq .)
    ,               reduce using rule 136 (and -> valoresBool AND eq .)
    ]               reduce using rule 136 (and -> valoresBool AND eq .)
    }               reduce using rule 136 (and -> valoresBool AND eq .)
    :               reduce using rule 136 (and -> valoresBool AND eq .)
    EQEQ            shift and go to state 147
    DISTINTO        shift and go to state 148


state 230

    (138) and -> valoresBool AND valoresBool .

    AND             reduce using rule 138 (and -> valoresBool AND valoresBool .)
    OR              reduce using rule 138 (and -> valoresBool AND valoresBool .)
    ?               reduce using rule 138 (and -> valoresBool AND valoresBool .)
    ;               reduce using rule 138 (and -> valoresBool AND valoresBool .)
    )               reduce using rule 138 (and -> valoresBool AND valoresBool .)
    ,               reduce using rule 138 (and -> valoresBool AND valoresBool .)
    ]               reduce using rule 138 (and -> valoresBool AND valoresBool .)
    }               reduce using rule 138 (and -> valoresBool AND valoresBool .)
    :               reduce using rule 138 (and -> valoresBool AND valoresBool .)


state 231

    (131) expBool -> valoresBool OR and .
    (135) and -> and . AND eq
    (137) and -> and . AND valoresBool

    OR              reduce using rule 131 (expBool -> valoresBool OR and .)
    ?               reduce using rule 131 (expBool -> valoresBool OR and .)
    )               reduce using rule 131 (expBool -> valoresBool OR and .)
    ,               reduce using rule 131 (expBool -> valoresBool OR and .)
    ;               reduce using rule 131 (expBool -> valoresBool OR and .)
    ]               reduce using rule 131 (expBool -> valoresBool OR and .)
    }               reduce using rule 131 (expBool -> valoresBool OR and .)
    :               reduce using rule 131 (expBool -> valoresBool OR and .)
    AND             shift and go to state 140


state 232

    (133) expBool -> valoresBool OR valoresBool .
    (136) and -> valoresBool . AND eq
    (138) and -> valoresBool . AND valoresBool

    OR              reduce using rule 133 (expBool -> valoresBool OR valoresBool .)
    ?               reduce using rule 133 (expBool -> valoresBool OR valoresBool .)
    )               reduce using rule 133 (expBool -> valoresBool OR valoresBool .)
    ,               reduce using rule 133 (expBool -> valoresBool OR valoresBool .)
    ;               reduce using rule 133 (expBool -> valoresBool OR valoresBool .)
    ]               reduce using rule 133 (expBool -> valoresBool OR valoresBool .)
    }               reduce using rule 133 (expBool -> valoresBool OR valoresBool .)
    :               reduce using rule 133 (expBool -> valoresBool OR valoresBool .)
    AND             shift and go to state 149


state 233

    (127) ternario -> valoresBool ? valores . : valores

    :               shift and go to state 280


state 234

    (94) eMat -> eMat + valoresMat .
    (102) p -> valoresMat . * exp
    (103) p -> valoresMat . / exp
    (104) p -> valoresMat . % exp
    (108) p -> valoresMat . * valoresMat
    (109) p -> valoresMat . / valoresMat
    (110) p -> valoresMat . % valoresMat
    (113) exp -> valoresMat . ^ iSing
    (115) exp -> valoresMat . ^ valoresMat

    +               reduce using rule 94 (eMat -> eMat + valoresMat .)
    -               reduce using rule 94 (eMat -> eMat + valoresMat .)
    >               reduce using rule 94 (eMat -> eMat + valoresMat .)
    <               reduce using rule 94 (eMat -> eMat + valoresMat .)
    EQEQ            reduce using rule 94 (eMat -> eMat + valoresMat .)
    DISTINTO        reduce using rule 94 (eMat -> eMat + valoresMat .)
    AND             reduce using rule 94 (eMat -> eMat + valoresMat .)
    OR              reduce using rule 94 (eMat -> eMat + valoresMat .)
    ?               reduce using rule 94 (eMat -> eMat + valoresMat .)
    ,               reduce using rule 94 (eMat -> eMat + valoresMat .)
    )               reduce using rule 94 (eMat -> eMat + valoresMat .)
    ;               reduce using rule 94 (eMat -> eMat + valoresMat .)
    ]               reduce using rule 94 (eMat -> eMat + valoresMat .)
    }               reduce using rule 94 (eMat -> eMat + valoresMat .)
    :               reduce using rule 94 (eMat -> eMat + valoresMat .)
    *               shift and go to state 143
    /               shift and go to state 145
    %               shift and go to state 141
    ^               shift and go to state 146


state 235

    (90) eMat -> eMat + p .
    (99) p -> p . * exp
    (100) p -> p . / exp
    (101) p -> p . % exp
    (105) p -> p . * valoresMat
    (106) p -> p . / valoresMat
    (107) p -> p . % valoresMat

    +               reduce using rule 90 (eMat -> eMat + p .)
    -               reduce using rule 90 (eMat -> eMat + p .)
    >               reduce using rule 90 (eMat -> eMat + p .)
    <               reduce using rule 90 (eMat -> eMat + p .)
    EQEQ            reduce using rule 90 (eMat -> eMat + p .)
    DISTINTO        reduce using rule 90 (eMat -> eMat + p .)
    AND             reduce using rule 90 (eMat -> eMat + p .)
    OR              reduce using rule 90 (eMat -> eMat + p .)
    ?               reduce using rule 90 (eMat -> eMat + p .)
    ,               reduce using rule 90 (eMat -> eMat + p .)
    )               reduce using rule 90 (eMat -> eMat + p .)
    ;               reduce using rule 90 (eMat -> eMat + p .)
    ]               reduce using rule 90 (eMat -> eMat + p .)
    }               reduce using rule 90 (eMat -> eMat + p .)
    :               reduce using rule 90 (eMat -> eMat + p .)
    *               shift and go to state 180
    /               shift and go to state 181
    %               shift and go to state 179


state 236

    (95) eMat -> eMat - valoresMat .
    (102) p -> valoresMat . * exp
    (103) p -> valoresMat . / exp
    (104) p -> valoresMat . % exp
    (108) p -> valoresMat . * valoresMat
    (109) p -> valoresMat . / valoresMat
    (110) p -> valoresMat . % valoresMat
    (113) exp -> valoresMat . ^ iSing
    (115) exp -> valoresMat . ^ valoresMat

    +               reduce using rule 95 (eMat -> eMat - valoresMat .)
    -               reduce using rule 95 (eMat -> eMat - valoresMat .)
    >               reduce using rule 95 (eMat -> eMat - valoresMat .)
    <               reduce using rule 95 (eMat -> eMat - valoresMat .)
    EQEQ            reduce using rule 95 (eMat -> eMat - valoresMat .)
    DISTINTO        reduce using rule 95 (eMat -> eMat - valoresMat .)
    AND             reduce using rule 95 (eMat -> eMat - valoresMat .)
    OR              reduce using rule 95 (eMat -> eMat - valoresMat .)
    ?               reduce using rule 95 (eMat -> eMat - valoresMat .)
    ,               reduce using rule 95 (eMat -> eMat - valoresMat .)
    )               reduce using rule 95 (eMat -> eMat - valoresMat .)
    ;               reduce using rule 95 (eMat -> eMat - valoresMat .)
    ]               reduce using rule 95 (eMat -> eMat - valoresMat .)
    }               reduce using rule 95 (eMat -> eMat - valoresMat .)
    :               reduce using rule 95 (eMat -> eMat - valoresMat .)
    *               shift and go to state 143
    /               shift and go to state 145
    %               shift and go to state 141
    ^               shift and go to state 146


state 237

    (91) eMat -> eMat - p .
    (99) p -> p . * exp
    (100) p -> p . / exp
    (101) p -> p . % exp
    (105) p -> p . * valoresMat
    (106) p -> p . / valoresMat
    (107) p -> p . % valoresMat

    +               reduce using rule 91 (eMat -> eMat - p .)
    -               reduce using rule 91 (eMat -> eMat - p .)
    >               reduce using rule 91 (eMat -> eMat - p .)
    <               reduce using rule 91 (eMat -> eMat - p .)
    EQEQ            reduce using rule 91 (eMat -> eMat - p .)
    DISTINTO        reduce using rule 91 (eMat -> eMat - p .)
    AND             reduce using rule 91 (eMat -> eMat - p .)
    OR              reduce using rule 91 (eMat -> eMat - p .)
    ?               reduce using rule 91 (eMat -> eMat - p .)
    ,               reduce using rule 91 (eMat -> eMat - p .)
    )               reduce using rule 91 (eMat -> eMat - p .)
    ;               reduce using rule 91 (eMat -> eMat - p .)
    ]               reduce using rule 91 (eMat -> eMat - p .)
    }               reduce using rule 91 (eMat -> eMat - p .)
    :               reduce using rule 91 (eMat -> eMat - p .)
    *               shift and go to state 180
    /               shift and go to state 181
    %               shift and go to state 179


state 238

    (129) ternario -> ( ternario ) .

    ;               reduce using rule 129 (ternario -> ( ternario ) .)
    )               reduce using rule 129 (ternario -> ( ternario ) .)
    ,               reduce using rule 129 (ternario -> ( ternario ) .)
    ]               reduce using rule 129 (ternario -> ( ternario ) .)
    :               reduce using rule 129 (ternario -> ( ternario ) .)
    }               reduce using rule 129 (ternario -> ( ternario ) .)


state 239

    (122) paren -> ( eMat ) .

    ^               reduce using rule 122 (paren -> ( eMat ) .)
    *               reduce using rule 122 (paren -> ( eMat ) .)
    /               reduce using rule 122 (paren -> ( eMat ) .)
    %               reduce using rule 122 (paren -> ( eMat ) .)
    +               reduce using rule 122 (paren -> ( eMat ) .)
    -               reduce using rule 122 (paren -> ( eMat ) .)
    EQEQ            reduce using rule 122 (paren -> ( eMat ) .)
    DISTINTO        reduce using rule 122 (paren -> ( eMat ) .)
    >               reduce using rule 122 (paren -> ( eMat ) .)
    <               reduce using rule 122 (paren -> ( eMat ) .)
    :               reduce using rule 122 (paren -> ( eMat ) .)
    }               reduce using rule 122 (paren -> ( eMat ) .)
    ;               reduce using rule 122 (paren -> ( eMat ) .)
    )               reduce using rule 122 (paren -> ( eMat ) .)
    AND             reduce using rule 122 (paren -> ( eMat ) .)
    OR              reduce using rule 122 (paren -> ( eMat ) .)
    ?               reduce using rule 122 (paren -> ( eMat ) .)
    ,               reduce using rule 122 (paren -> ( eMat ) .)
    ]               reduce using rule 122 (paren -> ( eMat ) .)


state 240

    (161) parenBool -> ( expBool ) .

    EQEQ            reduce using rule 161 (parenBool -> ( expBool ) .)
    DISTINTO        reduce using rule 161 (parenBool -> ( expBool ) .)
    AND             reduce using rule 161 (parenBool -> ( expBool ) .)
    )               reduce using rule 161 (parenBool -> ( expBool ) .)
    OR              reduce using rule 161 (parenBool -> ( expBool ) .)
    ?               reduce using rule 161 (parenBool -> ( expBool ) .)
    ,               reduce using rule 161 (parenBool -> ( expBool ) .)
    ;               reduce using rule 161 (parenBool -> ( expBool ) .)
    ]               reduce using rule 161 (parenBool -> ( expBool ) .)
    }               reduce using rule 161 (parenBool -> ( expBool ) .)
    :               reduce using rule 161 (parenBool -> ( expBool ) .)


state 241

    (122) paren -> ( eMat . )
    (90) eMat -> eMat . + p
    (91) eMat -> eMat . - p
    (94) eMat -> eMat . + valoresMat
    (95) eMat -> eMat . - valoresMat

    )               shift and go to state 239
    +               shift and go to state 152
    -               shift and go to state 153


state 242

    (143) eq -> tCompare DISTINTO mayor .

    EQEQ            reduce using rule 143 (eq -> tCompare DISTINTO mayor .)
    DISTINTO        reduce using rule 143 (eq -> tCompare DISTINTO mayor .)
    AND             reduce using rule 143 (eq -> tCompare DISTINTO mayor .)
    OR              reduce using rule 143 (eq -> tCompare DISTINTO mayor .)
    ?               reduce using rule 143 (eq -> tCompare DISTINTO mayor .)
    ,               reduce using rule 143 (eq -> tCompare DISTINTO mayor .)
    )               reduce using rule 143 (eq -> tCompare DISTINTO mayor .)
    ;               reduce using rule 143 (eq -> tCompare DISTINTO mayor .)
    ]               reduce using rule 143 (eq -> tCompare DISTINTO mayor .)
    }               reduce using rule 143 (eq -> tCompare DISTINTO mayor .)
    :               reduce using rule 143 (eq -> tCompare DISTINTO mayor .)


state 243

    (147) eq -> tCompare DISTINTO tCompare .
    (154) mayor -> tCompare . > tCompare
    (156) menor -> tCompare . < tCompare

    EQEQ            reduce using rule 147 (eq -> tCompare DISTINTO tCompare .)
    DISTINTO        reduce using rule 147 (eq -> tCompare DISTINTO tCompare .)
    AND             reduce using rule 147 (eq -> tCompare DISTINTO tCompare .)
    OR              reduce using rule 147 (eq -> tCompare DISTINTO tCompare .)
    ?               reduce using rule 147 (eq -> tCompare DISTINTO tCompare .)
    ,               reduce using rule 147 (eq -> tCompare DISTINTO tCompare .)
    )               reduce using rule 147 (eq -> tCompare DISTINTO tCompare .)
    ;               reduce using rule 147 (eq -> tCompare DISTINTO tCompare .)
    ]               reduce using rule 147 (eq -> tCompare DISTINTO tCompare .)
    }               reduce using rule 147 (eq -> tCompare DISTINTO tCompare .)
    :               reduce using rule 147 (eq -> tCompare DISTINTO tCompare .)
    >               shift and go to state 174
    <               shift and go to state 173


state 244

    (142) eq -> tCompare EQEQ mayor .

    EQEQ            reduce using rule 142 (eq -> tCompare EQEQ mayor .)
    DISTINTO        reduce using rule 142 (eq -> tCompare EQEQ mayor .)
    AND             reduce using rule 142 (eq -> tCompare EQEQ mayor .)
    OR              reduce using rule 142 (eq -> tCompare EQEQ mayor .)
    ?               reduce using rule 142 (eq -> tCompare EQEQ mayor .)
    ,               reduce using rule 142 (eq -> tCompare EQEQ mayor .)
    )               reduce using rule 142 (eq -> tCompare EQEQ mayor .)
    ;               reduce using rule 142 (eq -> tCompare EQEQ mayor .)
    ]               reduce using rule 142 (eq -> tCompare EQEQ mayor .)
    }               reduce using rule 142 (eq -> tCompare EQEQ mayor .)
    :               reduce using rule 142 (eq -> tCompare EQEQ mayor .)


state 245

    (146) eq -> tCompare EQEQ tCompare .
    (154) mayor -> tCompare . > tCompare
    (156) menor -> tCompare . < tCompare

    EQEQ            reduce using rule 146 (eq -> tCompare EQEQ tCompare .)
    DISTINTO        reduce using rule 146 (eq -> tCompare EQEQ tCompare .)
    AND             reduce using rule 146 (eq -> tCompare EQEQ tCompare .)
    OR              reduce using rule 146 (eq -> tCompare EQEQ tCompare .)
    ?               reduce using rule 146 (eq -> tCompare EQEQ tCompare .)
    ,               reduce using rule 146 (eq -> tCompare EQEQ tCompare .)
    )               reduce using rule 146 (eq -> tCompare EQEQ tCompare .)
    ;               reduce using rule 146 (eq -> tCompare EQEQ tCompare .)
    ]               reduce using rule 146 (eq -> tCompare EQEQ tCompare .)
    }               reduce using rule 146 (eq -> tCompare EQEQ tCompare .)
    :               reduce using rule 146 (eq -> tCompare EQEQ tCompare .)
    >               shift and go to state 174
    <               shift and go to state 173


state 246

    (156) menor -> tCompare < tCompare .

    EQEQ            reduce using rule 156 (menor -> tCompare < tCompare .)
    DISTINTO        reduce using rule 156 (menor -> tCompare < tCompare .)
    AND             reduce using rule 156 (menor -> tCompare < tCompare .)
    OR              reduce using rule 156 (menor -> tCompare < tCompare .)
    ?               reduce using rule 156 (menor -> tCompare < tCompare .)
    ,               reduce using rule 156 (menor -> tCompare < tCompare .)
    )               reduce using rule 156 (menor -> tCompare < tCompare .)
    ;               reduce using rule 156 (menor -> tCompare < tCompare .)
    ]               reduce using rule 156 (menor -> tCompare < tCompare .)
    }               reduce using rule 156 (menor -> tCompare < tCompare .)
    :               reduce using rule 156 (menor -> tCompare < tCompare .)


state 247

    (154) mayor -> tCompare > tCompare .

    EQEQ            reduce using rule 154 (mayor -> tCompare > tCompare .)
    DISTINTO        reduce using rule 154 (mayor -> tCompare > tCompare .)
    AND             reduce using rule 154 (mayor -> tCompare > tCompare .)
    OR              reduce using rule 154 (mayor -> tCompare > tCompare .)
    ?               reduce using rule 154 (mayor -> tCompare > tCompare .)
    ,               reduce using rule 154 (mayor -> tCompare > tCompare .)
    )               reduce using rule 154 (mayor -> tCompare > tCompare .)
    ;               reduce using rule 154 (mayor -> tCompare > tCompare .)
    ]               reduce using rule 154 (mayor -> tCompare > tCompare .)
    }               reduce using rule 154 (mayor -> tCompare > tCompare .)
    :               reduce using rule 154 (mayor -> tCompare > tCompare .)


state 248

    (44) elem -> valores , . elem
    (44) elem -> . valores , elem
    (45) elem -> . valores
    (46) valores -> . eMat
    (47) valores -> . expBool
    (48) valores -> . funcReturn
    (49) valores -> . reg
    (50) valores -> . INT
    (51) valores -> . FLOAT
    (52) valores -> . STRING
    (53) valores -> . BOOL
    (54) valores -> . varYVals
    (55) valores -> . varsOps
    (56) valores -> . vec
    (57) valores -> . ternario
    (58) valores -> . ID . valoresCampos
    (59) valores -> . RES
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (130) expBool -> . expBool OR and
    (131) expBool -> . valoresBool OR and
    (132) expBool -> . expBool OR valoresBool
    (133) expBool -> . valoresBool OR valoresBool
    (134) expBool -> . and
    (32) funcReturn -> . funcInt
    (33) funcReturn -> . funcString
    (34) funcReturn -> . funcBool
    (70) reg -> . { campos }
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (43) vec -> . [ elem ]
    (127) ternario -> . valoresBool ? valores : valores
    (128) ternario -> . expBool ? valores : valores
    (129) ternario -> . ( ternario )
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (123) valoresBool -> . BOOL
    (124) valoresBool -> . funcBool
    (125) valoresBool -> . varYVals
    (126) valoresBool -> . varsOps
    (135) and -> . and AND eq
    (136) and -> . valoresBool AND eq
    (137) and -> . and AND valoresBool
    (138) and -> . valoresBool AND valoresBool
    (139) and -> . eq
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (37) funcString -> . CAPITALIZAR ( valores )
    (38) funcBool -> . COLINEALES ( valores , valores )
    (65) vecVal -> . ID m
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (140) eq -> . eq EQEQ mayor
    (141) eq -> . eq DISTINTO mayor
    (142) eq -> . tCompare EQEQ mayor
    (143) eq -> . tCompare DISTINTO mayor
    (144) eq -> . eq EQEQ tCompare
    (145) eq -> . eq DISTINTO tCompare
    (146) eq -> . tCompare EQEQ tCompare
    (147) eq -> . tCompare DISTINTO tCompare
    (148) eq -> . mayor
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (122) paren -> . ( eMat )
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (161) parenBool -> . ( expBool )

    INT             shift and go to state 92
    FLOAT           shift and go to state 94
    STRING          shift and go to state 87
    BOOL            shift and go to state 97
    ID              shift and go to state 91
    RES             shift and go to state 73
    {               shift and go to state 102
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    [               shift and go to state 90
    (               shift and go to state 81
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 4
    -               shift and go to state 83
    +               shift and go to state 82
    NOT             shift and go to state 100

    and                            shift and go to state 70
    ternario                       shift and go to state 71
    funcBool                       shift and go to state 72
    funcInt                        shift and go to state 74
    elem                           shift and go to state 281
    menor                          shift and go to state 76
    mayor                          shift and go to state 103
    valoresMat                     shift and go to state 77
    eq                             shift and go to state 78
    valoresBool                    shift and go to state 79
    eMat                           shift and go to state 80
    vecVal                         shift and go to state 8
    vec                            shift and go to state 84
    paren                          shift and go to state 89
    reg                            shift and go to state 85
    iSing                          shift and go to state 86
    exp                            shift and go to state 101
    tCompare                       shift and go to state 88
    not                            shift and go to state 75
    funcString                     shift and go to state 23
    funcReturn                     shift and go to state 93
    valores                        shift and go to state 175
    p                              shift and go to state 96
    varsOps                        shift and go to state 98
    varYVals                       shift and go to state 104
    parenBool                      shift and go to state 99
    expBool                        shift and go to state 105

state 249

    (43) vec -> [ elem ] .

    ;               reduce using rule 43 (vec -> [ elem ] .)
    )               reduce using rule 43 (vec -> [ elem ] .)
    ,               reduce using rule 43 (vec -> [ elem ] .)
    ]               reduce using rule 43 (vec -> [ elem ] .)
    :               reduce using rule 43 (vec -> [ elem ] .)
    }               reduce using rule 43 (vec -> [ elem ] .)


state 250

    (62) valoresCampos -> BEGIN .

    ,               reduce using rule 62 (valoresCampos -> BEGIN .)
    )               reduce using rule 62 (valoresCampos -> BEGIN .)
    ;               reduce using rule 62 (valoresCampos -> BEGIN .)
    ]               reduce using rule 62 (valoresCampos -> BEGIN .)
    }               reduce using rule 62 (valoresCampos -> BEGIN .)
    :               reduce using rule 62 (valoresCampos -> BEGIN .)


state 251

    (61) valoresCampos -> END .

    ,               reduce using rule 61 (valoresCampos -> END .)
    )               reduce using rule 61 (valoresCampos -> END .)
    ;               reduce using rule 61 (valoresCampos -> END .)
    ]               reduce using rule 61 (valoresCampos -> END .)
    }               reduce using rule 61 (valoresCampos -> END .)
    :               reduce using rule 61 (valoresCampos -> END .)


state 252

    (60) valoresCampos -> ID .

    ,               reduce using rule 60 (valoresCampos -> ID .)
    )               reduce using rule 60 (valoresCampos -> ID .)
    ;               reduce using rule 60 (valoresCampos -> ID .)
    ]               reduce using rule 60 (valoresCampos -> ID .)
    }               reduce using rule 60 (valoresCampos -> ID .)
    :               reduce using rule 60 (valoresCampos -> ID .)


state 253

    (58) valores -> ID . valoresCampos .

    ;               reduce using rule 58 (valores -> ID . valoresCampos .)
    )               reduce using rule 58 (valores -> ID . valoresCampos .)
    :               reduce using rule 58 (valores -> ID . valoresCampos .)
    }               reduce using rule 58 (valores -> ID . valoresCampos .)
    ,               reduce using rule 58 (valores -> ID . valoresCampos .)
    ]               reduce using rule 58 (valores -> ID . valoresCampos .)


state 254

    (38) funcBool -> COLINEALES ( valores , valores . )

    )               shift and go to state 282


state 255

    (107) p -> p % valoresMat .
    (113) exp -> valoresMat . ^ iSing
    (115) exp -> valoresMat . ^ valoresMat

    *               reduce using rule 107 (p -> p % valoresMat .)
    /               reduce using rule 107 (p -> p % valoresMat .)
    %               reduce using rule 107 (p -> p % valoresMat .)
    +               reduce using rule 107 (p -> p % valoresMat .)
    -               reduce using rule 107 (p -> p % valoresMat .)
    EQEQ            reduce using rule 107 (p -> p % valoresMat .)
    DISTINTO        reduce using rule 107 (p -> p % valoresMat .)
    >               reduce using rule 107 (p -> p % valoresMat .)
    <               reduce using rule 107 (p -> p % valoresMat .)
    ;               reduce using rule 107 (p -> p % valoresMat .)
    )               reduce using rule 107 (p -> p % valoresMat .)
    ,               reduce using rule 107 (p -> p % valoresMat .)
    ]               reduce using rule 107 (p -> p % valoresMat .)
    }               reduce using rule 107 (p -> p % valoresMat .)
    :               reduce using rule 107 (p -> p % valoresMat .)
    AND             reduce using rule 107 (p -> p % valoresMat .)
    OR              reduce using rule 107 (p -> p % valoresMat .)
    ?               reduce using rule 107 (p -> p % valoresMat .)
    ^               shift and go to state 146


state 256

    (101) p -> p % exp .
    (112) exp -> exp . ^ iSing
    (114) exp -> exp . ^ valoresMat

    *               reduce using rule 101 (p -> p % exp .)
    /               reduce using rule 101 (p -> p % exp .)
    %               reduce using rule 101 (p -> p % exp .)
    +               reduce using rule 101 (p -> p % exp .)
    -               reduce using rule 101 (p -> p % exp .)
    EQEQ            reduce using rule 101 (p -> p % exp .)
    DISTINTO        reduce using rule 101 (p -> p % exp .)
    >               reduce using rule 101 (p -> p % exp .)
    <               reduce using rule 101 (p -> p % exp .)
    ;               reduce using rule 101 (p -> p % exp .)
    )               reduce using rule 101 (p -> p % exp .)
    ,               reduce using rule 101 (p -> p % exp .)
    ]               reduce using rule 101 (p -> p % exp .)
    }               reduce using rule 101 (p -> p % exp .)
    :               reduce using rule 101 (p -> p % exp .)
    AND             reduce using rule 101 (p -> p % exp .)
    OR              reduce using rule 101 (p -> p % exp .)
    ?               reduce using rule 101 (p -> p % exp .)
    ^               shift and go to state 187


state 257

    (105) p -> p * valoresMat .
    (113) exp -> valoresMat . ^ iSing
    (115) exp -> valoresMat . ^ valoresMat

    *               reduce using rule 105 (p -> p * valoresMat .)
    /               reduce using rule 105 (p -> p * valoresMat .)
    %               reduce using rule 105 (p -> p * valoresMat .)
    +               reduce using rule 105 (p -> p * valoresMat .)
    -               reduce using rule 105 (p -> p * valoresMat .)
    EQEQ            reduce using rule 105 (p -> p * valoresMat .)
    DISTINTO        reduce using rule 105 (p -> p * valoresMat .)
    >               reduce using rule 105 (p -> p * valoresMat .)
    <               reduce using rule 105 (p -> p * valoresMat .)
    ;               reduce using rule 105 (p -> p * valoresMat .)
    )               reduce using rule 105 (p -> p * valoresMat .)
    ,               reduce using rule 105 (p -> p * valoresMat .)
    ]               reduce using rule 105 (p -> p * valoresMat .)
    }               reduce using rule 105 (p -> p * valoresMat .)
    :               reduce using rule 105 (p -> p * valoresMat .)
    AND             reduce using rule 105 (p -> p * valoresMat .)
    OR              reduce using rule 105 (p -> p * valoresMat .)
    ?               reduce using rule 105 (p -> p * valoresMat .)
    ^               shift and go to state 146


state 258

    (99) p -> p * exp .
    (112) exp -> exp . ^ iSing
    (114) exp -> exp . ^ valoresMat

    *               reduce using rule 99 (p -> p * exp .)
    /               reduce using rule 99 (p -> p * exp .)
    %               reduce using rule 99 (p -> p * exp .)
    +               reduce using rule 99 (p -> p * exp .)
    -               reduce using rule 99 (p -> p * exp .)
    EQEQ            reduce using rule 99 (p -> p * exp .)
    DISTINTO        reduce using rule 99 (p -> p * exp .)
    >               reduce using rule 99 (p -> p * exp .)
    <               reduce using rule 99 (p -> p * exp .)
    ;               reduce using rule 99 (p -> p * exp .)
    )               reduce using rule 99 (p -> p * exp .)
    ,               reduce using rule 99 (p -> p * exp .)
    ]               reduce using rule 99 (p -> p * exp .)
    }               reduce using rule 99 (p -> p * exp .)
    :               reduce using rule 99 (p -> p * exp .)
    AND             reduce using rule 99 (p -> p * exp .)
    OR              reduce using rule 99 (p -> p * exp .)
    ?               reduce using rule 99 (p -> p * exp .)
    ^               shift and go to state 187


state 259

    (106) p -> p / valoresMat .
    (113) exp -> valoresMat . ^ iSing
    (115) exp -> valoresMat . ^ valoresMat

    *               reduce using rule 106 (p -> p / valoresMat .)
    /               reduce using rule 106 (p -> p / valoresMat .)
    %               reduce using rule 106 (p -> p / valoresMat .)
    +               reduce using rule 106 (p -> p / valoresMat .)
    -               reduce using rule 106 (p -> p / valoresMat .)
    EQEQ            reduce using rule 106 (p -> p / valoresMat .)
    DISTINTO        reduce using rule 106 (p -> p / valoresMat .)
    >               reduce using rule 106 (p -> p / valoresMat .)
    <               reduce using rule 106 (p -> p / valoresMat .)
    ;               reduce using rule 106 (p -> p / valoresMat .)
    )               reduce using rule 106 (p -> p / valoresMat .)
    ,               reduce using rule 106 (p -> p / valoresMat .)
    ]               reduce using rule 106 (p -> p / valoresMat .)
    }               reduce using rule 106 (p -> p / valoresMat .)
    :               reduce using rule 106 (p -> p / valoresMat .)
    AND             reduce using rule 106 (p -> p / valoresMat .)
    OR              reduce using rule 106 (p -> p / valoresMat .)
    ?               reduce using rule 106 (p -> p / valoresMat .)
    ^               shift and go to state 146


state 260

    (100) p -> p / exp .
    (112) exp -> exp . ^ iSing
    (114) exp -> exp . ^ valoresMat

    *               reduce using rule 100 (p -> p / exp .)
    /               reduce using rule 100 (p -> p / exp .)
    %               reduce using rule 100 (p -> p / exp .)
    +               reduce using rule 100 (p -> p / exp .)
    -               reduce using rule 100 (p -> p / exp .)
    EQEQ            reduce using rule 100 (p -> p / exp .)
    DISTINTO        reduce using rule 100 (p -> p / exp .)
    >               reduce using rule 100 (p -> p / exp .)
    <               reduce using rule 100 (p -> p / exp .)
    ;               reduce using rule 100 (p -> p / exp .)
    )               reduce using rule 100 (p -> p / exp .)
    ,               reduce using rule 100 (p -> p / exp .)
    ]               reduce using rule 100 (p -> p / exp .)
    }               reduce using rule 100 (p -> p / exp .)
    :               reduce using rule 100 (p -> p / exp .)
    AND             reduce using rule 100 (p -> p / exp .)
    OR              reduce using rule 100 (p -> p / exp .)
    ?               reduce using rule 100 (p -> p / exp .)
    ^               shift and go to state 187


state 261

    (114) exp -> exp ^ valoresMat .

    ^               reduce using rule 114 (exp -> exp ^ valoresMat .)
    *               reduce using rule 114 (exp -> exp ^ valoresMat .)
    /               reduce using rule 114 (exp -> exp ^ valoresMat .)
    %               reduce using rule 114 (exp -> exp ^ valoresMat .)
    +               reduce using rule 114 (exp -> exp ^ valoresMat .)
    -               reduce using rule 114 (exp -> exp ^ valoresMat .)
    ,               reduce using rule 114 (exp -> exp ^ valoresMat .)
    )               reduce using rule 114 (exp -> exp ^ valoresMat .)
    ;               reduce using rule 114 (exp -> exp ^ valoresMat .)
    ]               reduce using rule 114 (exp -> exp ^ valoresMat .)
    }               reduce using rule 114 (exp -> exp ^ valoresMat .)
    :               reduce using rule 114 (exp -> exp ^ valoresMat .)
    EQEQ            reduce using rule 114 (exp -> exp ^ valoresMat .)
    DISTINTO        reduce using rule 114 (exp -> exp ^ valoresMat .)
    >               reduce using rule 114 (exp -> exp ^ valoresMat .)
    <               reduce using rule 114 (exp -> exp ^ valoresMat .)
    AND             reduce using rule 114 (exp -> exp ^ valoresMat .)
    OR              reduce using rule 114 (exp -> exp ^ valoresMat .)
    ?               reduce using rule 114 (exp -> exp ^ valoresMat .)


state 262

    (112) exp -> exp ^ iSing .

    ^               reduce using rule 112 (exp -> exp ^ iSing .)
    *               reduce using rule 112 (exp -> exp ^ iSing .)
    /               reduce using rule 112 (exp -> exp ^ iSing .)
    %               reduce using rule 112 (exp -> exp ^ iSing .)
    +               reduce using rule 112 (exp -> exp ^ iSing .)
    -               reduce using rule 112 (exp -> exp ^ iSing .)
    ,               reduce using rule 112 (exp -> exp ^ iSing .)
    )               reduce using rule 112 (exp -> exp ^ iSing .)
    ;               reduce using rule 112 (exp -> exp ^ iSing .)
    ]               reduce using rule 112 (exp -> exp ^ iSing .)
    }               reduce using rule 112 (exp -> exp ^ iSing .)
    :               reduce using rule 112 (exp -> exp ^ iSing .)
    EQEQ            reduce using rule 112 (exp -> exp ^ iSing .)
    DISTINTO        reduce using rule 112 (exp -> exp ^ iSing .)
    >               reduce using rule 112 (exp -> exp ^ iSing .)
    <               reduce using rule 112 (exp -> exp ^ iSing .)
    AND             reduce using rule 112 (exp -> exp ^ iSing .)
    OR              reduce using rule 112 (exp -> exp ^ iSing .)
    ?               reduce using rule 112 (exp -> exp ^ iSing .)


state 263

    (70) reg -> { campos } .

    ,               reduce using rule 70 (reg -> { campos } .)
    ]               reduce using rule 70 (reg -> { campos } .)
    }               reduce using rule 70 (reg -> { campos } .)
    :               reduce using rule 70 (reg -> { campos } .)
    ;               reduce using rule 70 (reg -> { campos } .)
    )               reduce using rule 70 (reg -> { campos } .)


state 264

    (71) campos -> ID : . valores , campos
    (46) valores -> . eMat
    (47) valores -> . expBool
    (48) valores -> . funcReturn
    (49) valores -> . reg
    (50) valores -> . INT
    (51) valores -> . FLOAT
    (52) valores -> . STRING
    (53) valores -> . BOOL
    (54) valores -> . varYVals
    (55) valores -> . varsOps
    (56) valores -> . vec
    (57) valores -> . ternario
    (58) valores -> . ID . valoresCampos
    (59) valores -> . RES
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (130) expBool -> . expBool OR and
    (131) expBool -> . valoresBool OR and
    (132) expBool -> . expBool OR valoresBool
    (133) expBool -> . valoresBool OR valoresBool
    (134) expBool -> . and
    (32) funcReturn -> . funcInt
    (33) funcReturn -> . funcString
    (34) funcReturn -> . funcBool
    (70) reg -> . { campos }
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (43) vec -> . [ elem ]
    (127) ternario -> . valoresBool ? valores : valores
    (128) ternario -> . expBool ? valores : valores
    (129) ternario -> . ( ternario )
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (123) valoresBool -> . BOOL
    (124) valoresBool -> . funcBool
    (125) valoresBool -> . varYVals
    (126) valoresBool -> . varsOps
    (135) and -> . and AND eq
    (136) and -> . valoresBool AND eq
    (137) and -> . and AND valoresBool
    (138) and -> . valoresBool AND valoresBool
    (139) and -> . eq
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (37) funcString -> . CAPITALIZAR ( valores )
    (38) funcBool -> . COLINEALES ( valores , valores )
    (65) vecVal -> . ID m
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (140) eq -> . eq EQEQ mayor
    (141) eq -> . eq DISTINTO mayor
    (142) eq -> . tCompare EQEQ mayor
    (143) eq -> . tCompare DISTINTO mayor
    (144) eq -> . eq EQEQ tCompare
    (145) eq -> . eq DISTINTO tCompare
    (146) eq -> . tCompare EQEQ tCompare
    (147) eq -> . tCompare DISTINTO tCompare
    (148) eq -> . mayor
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (122) paren -> . ( eMat )
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (161) parenBool -> . ( expBool )

    INT             shift and go to state 92
    FLOAT           shift and go to state 94
    STRING          shift and go to state 87
    BOOL            shift and go to state 97
    ID              shift and go to state 91
    RES             shift and go to state 73
    {               shift and go to state 102
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    [               shift and go to state 90
    (               shift and go to state 81
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 4
    -               shift and go to state 83
    +               shift and go to state 82
    NOT             shift and go to state 100

    and                            shift and go to state 70
    ternario                       shift and go to state 71
    funcBool                       shift and go to state 72
    funcInt                        shift and go to state 74
    menor                          shift and go to state 76
    mayor                          shift and go to state 103
    valoresMat                     shift and go to state 77
    eq                             shift and go to state 78
    valoresBool                    shift and go to state 79
    eMat                           shift and go to state 80
    vecVal                         shift and go to state 8
    vec                            shift and go to state 84
    paren                          shift and go to state 89
    reg                            shift and go to state 85
    iSing                          shift and go to state 86
    exp                            shift and go to state 101
    tCompare                       shift and go to state 88
    not                            shift and go to state 75
    funcString                     shift and go to state 23
    funcReturn                     shift and go to state 93
    valores                        shift and go to state 283
    p                              shift and go to state 96
    varsOps                        shift and go to state 98
    varYVals                       shift and go to state 104
    parenBool                      shift and go to state 99
    expBool                        shift and go to state 105

state 265

    (130) expBool -> expBool OR and .
    (135) and -> and . AND eq
    (137) and -> and . AND valoresBool

    OR              reduce using rule 130 (expBool -> expBool OR and .)
    ?               reduce using rule 130 (expBool -> expBool OR and .)
    )               reduce using rule 130 (expBool -> expBool OR and .)
    ,               reduce using rule 130 (expBool -> expBool OR and .)
    ;               reduce using rule 130 (expBool -> expBool OR and .)
    ]               reduce using rule 130 (expBool -> expBool OR and .)
    }               reduce using rule 130 (expBool -> expBool OR and .)
    :               reduce using rule 130 (expBool -> expBool OR and .)
    AND             shift and go to state 140


state 266

    (132) expBool -> expBool OR valoresBool .
    (136) and -> valoresBool . AND eq
    (138) and -> valoresBool . AND valoresBool

    OR              reduce using rule 132 (expBool -> expBool OR valoresBool .)
    ?               reduce using rule 132 (expBool -> expBool OR valoresBool .)
    )               reduce using rule 132 (expBool -> expBool OR valoresBool .)
    ,               reduce using rule 132 (expBool -> expBool OR valoresBool .)
    ;               reduce using rule 132 (expBool -> expBool OR valoresBool .)
    ]               reduce using rule 132 (expBool -> expBool OR valoresBool .)
    }               reduce using rule 132 (expBool -> expBool OR valoresBool .)
    :               reduce using rule 132 (expBool -> expBool OR valoresBool .)
    AND             shift and go to state 149


state 267

    (128) ternario -> expBool ? valores . : valores

    :               shift and go to state 284


state 268

    (88) valoresMat -> varsOps .
    (126) valoresBool -> varsOps .
    (150) tCompare -> varsOps .

    +               reduce using rule 88 (valoresMat -> varsOps .)
    -               reduce using rule 88 (valoresMat -> varsOps .)
    *               reduce using rule 88 (valoresMat -> varsOps .)
    /               reduce using rule 88 (valoresMat -> varsOps .)
    %               reduce using rule 88 (valoresMat -> varsOps .)
    ^               reduce using rule 88 (valoresMat -> varsOps .)
    OR              reduce using rule 126 (valoresBool -> varsOps .)
    AND             reduce using rule 126 (valoresBool -> varsOps .)
    EQEQ            reduce using rule 150 (tCompare -> varsOps .)
    DISTINTO        reduce using rule 150 (tCompare -> varsOps .)
    >               reduce using rule 150 (tCompare -> varsOps .)
    <               reduce using rule 150 (tCompare -> varsOps .)


state 269

    (87) valoresMat -> varYVals .
    (125) valoresBool -> varYVals .
    (75) varsOps -> varYVals . MASMAS
    (76) varsOps -> varYVals . MENOSMENOS
    (151) tCompare -> varYVals .

    +               reduce using rule 87 (valoresMat -> varYVals .)
    -               reduce using rule 87 (valoresMat -> varYVals .)
    *               reduce using rule 87 (valoresMat -> varYVals .)
    /               reduce using rule 87 (valoresMat -> varYVals .)
    %               reduce using rule 87 (valoresMat -> varYVals .)
    ^               reduce using rule 87 (valoresMat -> varYVals .)
    OR              reduce using rule 125 (valoresBool -> varYVals .)
    AND             reduce using rule 125 (valoresBool -> varYVals .)
    MASMAS          shift and go to state 63
    MENOSMENOS      shift and go to state 60
    EQEQ            reduce using rule 151 (tCompare -> varYVals .)
    DISTINTO        reduce using rule 151 (tCompare -> varYVals .)
    >               reduce using rule 151 (tCompare -> varYVals .)
    <               reduce using rule 151 (tCompare -> varYVals .)


state 270

    (6) lAbierta -> IF ( cosaBooleana ) bloqueCerrado . ELSE lAbierta
    (12) lCerrada -> IF ( cosaBooleana ) bloqueCerrado . ELSE bloqueCerrado

    ELSE            shift and go to state 285


state 271

    (5) lAbierta -> IF ( cosaBooleana ) linea .

    IF              reduce using rule 5 (lAbierta -> IF ( cosaBooleana ) linea .)
    COMMENT         reduce using rule 5 (lAbierta -> IF ( cosaBooleana ) linea .)
    DO              reduce using rule 5 (lAbierta -> IF ( cosaBooleana ) linea .)
    WHILE           reduce using rule 5 (lAbierta -> IF ( cosaBooleana ) linea .)
    FOR             reduce using rule 5 (lAbierta -> IF ( cosaBooleana ) linea .)
    RETURN          reduce using rule 5 (lAbierta -> IF ( cosaBooleana ) linea .)
    ;               reduce using rule 5 (lAbierta -> IF ( cosaBooleana ) linea .)
    MENOSMENOS      reduce using rule 5 (lAbierta -> IF ( cosaBooleana ) linea .)
    MASMAS          reduce using rule 5 (lAbierta -> IF ( cosaBooleana ) linea .)
    ID              reduce using rule 5 (lAbierta -> IF ( cosaBooleana ) linea .)
    PRINT           reduce using rule 5 (lAbierta -> IF ( cosaBooleana ) linea .)
    MULTIESCALAR    reduce using rule 5 (lAbierta -> IF ( cosaBooleana ) linea .)
    LENGTH          reduce using rule 5 (lAbierta -> IF ( cosaBooleana ) linea .)
    CAPITALIZAR     reduce using rule 5 (lAbierta -> IF ( cosaBooleana ) linea .)
    COLINEALES      reduce using rule 5 (lAbierta -> IF ( cosaBooleana ) linea .)
    $end            reduce using rule 5 (lAbierta -> IF ( cosaBooleana ) linea .)
    }               reduce using rule 5 (lAbierta -> IF ( cosaBooleana ) linea .)


state 272

    (4) linea -> lCerrada .
    (8) bloqueCerrado -> lCerrada .

    IF              reduce using rule 4 (linea -> lCerrada .)
    COMMENT         reduce using rule 4 (linea -> lCerrada .)
    DO              reduce using rule 4 (linea -> lCerrada .)
    WHILE           reduce using rule 4 (linea -> lCerrada .)
    FOR             reduce using rule 4 (linea -> lCerrada .)
    RETURN          reduce using rule 4 (linea -> lCerrada .)
    ;               reduce using rule 4 (linea -> lCerrada .)
    MENOSMENOS      reduce using rule 4 (linea -> lCerrada .)
    MASMAS          reduce using rule 4 (linea -> lCerrada .)
    ID              reduce using rule 4 (linea -> lCerrada .)
    PRINT           reduce using rule 4 (linea -> lCerrada .)
    MULTIESCALAR    reduce using rule 4 (linea -> lCerrada .)
    LENGTH          reduce using rule 4 (linea -> lCerrada .)
    CAPITALIZAR     reduce using rule 4 (linea -> lCerrada .)
    COLINEALES      reduce using rule 4 (linea -> lCerrada .)
    $end            reduce using rule 4 (linea -> lCerrada .)
    }               reduce using rule 4 (linea -> lCerrada .)
    ELSE            reduce using rule 8 (bloqueCerrado -> lCerrada .)


state 273

    (21) loop -> FOR ( primParam ; cosaBooleana . ; tercerParam )

    ;               shift and go to state 286


state 274

    (83) varAsig -> ID . ID = valoresAsig .

    ;               reduce using rule 83 (varAsig -> ID . ID = valoresAsig .)
    )               reduce using rule 83 (varAsig -> ID . ID = valoresAsig .)


state 275

    (67) m -> [ INT ] m .

    MASMAS          reduce using rule 67 (m -> [ INT ] m .)
    MENOSMENOS      reduce using rule 67 (m -> [ INT ] m .)
    MULEQ           reduce using rule 67 (m -> [ INT ] m .)
    DIVEQ           reduce using rule 67 (m -> [ INT ] m .)
    MASEQ           reduce using rule 67 (m -> [ INT ] m .)
    MENOSEQ         reduce using rule 67 (m -> [ INT ] m .)
    =               reduce using rule 67 (m -> [ INT ] m .)
    ;               reduce using rule 67 (m -> [ INT ] m .)
    ,               reduce using rule 67 (m -> [ INT ] m .)
    +               reduce using rule 67 (m -> [ INT ] m .)
    -               reduce using rule 67 (m -> [ INT ] m .)
    *               reduce using rule 67 (m -> [ INT ] m .)
    /               reduce using rule 67 (m -> [ INT ] m .)
    %               reduce using rule 67 (m -> [ INT ] m .)
    ^               reduce using rule 67 (m -> [ INT ] m .)
    OR              reduce using rule 67 (m -> [ INT ] m .)
    ?               reduce using rule 67 (m -> [ INT ] m .)
    AND             reduce using rule 67 (m -> [ INT ] m .)
    EQEQ            reduce using rule 67 (m -> [ INT ] m .)
    DISTINTO        reduce using rule 67 (m -> [ INT ] m .)
    >               reduce using rule 67 (m -> [ INT ] m .)
    <               reduce using rule 67 (m -> [ INT ] m .)
    )               reduce using rule 67 (m -> [ INT ] m .)
    ]               reduce using rule 67 (m -> [ INT ] m .)
    }               reduce using rule 67 (m -> [ INT ] m .)
    :               reduce using rule 67 (m -> [ INT ] m .)


state 276

    (68) m -> [ varYVals ] m .

    MASMAS          reduce using rule 68 (m -> [ varYVals ] m .)
    MENOSMENOS      reduce using rule 68 (m -> [ varYVals ] m .)
    MULEQ           reduce using rule 68 (m -> [ varYVals ] m .)
    DIVEQ           reduce using rule 68 (m -> [ varYVals ] m .)
    MASEQ           reduce using rule 68 (m -> [ varYVals ] m .)
    MENOSEQ         reduce using rule 68 (m -> [ varYVals ] m .)
    =               reduce using rule 68 (m -> [ varYVals ] m .)
    ;               reduce using rule 68 (m -> [ varYVals ] m .)
    ,               reduce using rule 68 (m -> [ varYVals ] m .)
    +               reduce using rule 68 (m -> [ varYVals ] m .)
    -               reduce using rule 68 (m -> [ varYVals ] m .)
    *               reduce using rule 68 (m -> [ varYVals ] m .)
    /               reduce using rule 68 (m -> [ varYVals ] m .)
    %               reduce using rule 68 (m -> [ varYVals ] m .)
    ^               reduce using rule 68 (m -> [ varYVals ] m .)
    OR              reduce using rule 68 (m -> [ varYVals ] m .)
    ?               reduce using rule 68 (m -> [ varYVals ] m .)
    AND             reduce using rule 68 (m -> [ varYVals ] m .)
    EQEQ            reduce using rule 68 (m -> [ varYVals ] m .)
    DISTINTO        reduce using rule 68 (m -> [ varYVals ] m .)
    >               reduce using rule 68 (m -> [ varYVals ] m .)
    <               reduce using rule 68 (m -> [ varYVals ] m .)
    )               reduce using rule 68 (m -> [ varYVals ] m .)
    ]               reduce using rule 68 (m -> [ varYVals ] m .)
    }               reduce using rule 68 (m -> [ varYVals ] m .)
    :               reduce using rule 68 (m -> [ varYVals ] m .)


state 277

    (35) funcInt -> MULTIESCALAR ( valores , valores . param )
    (40) param -> . , valores
    (41) param -> . empty
    (42) empty -> .

    ,               shift and go to state 288
    )               reduce using rule 42 (empty -> .)

    empty                          shift and go to state 289
    param                          shift and go to state 287

state 278

    (14) lCerrada -> DO bloqueCerrado WHILE ( cosaBooleana ) . ;

    ;               shift and go to state 290


state 279

    (12) lCerrada -> IF ( cosaBooleana ) bloqueCerrado . ELSE bloqueCerrado

    ELSE            shift and go to state 291


state 280

    (127) ternario -> valoresBool ? valores : . valores
    (46) valores -> . eMat
    (47) valores -> . expBool
    (48) valores -> . funcReturn
    (49) valores -> . reg
    (50) valores -> . INT
    (51) valores -> . FLOAT
    (52) valores -> . STRING
    (53) valores -> . BOOL
    (54) valores -> . varYVals
    (55) valores -> . varsOps
    (56) valores -> . vec
    (57) valores -> . ternario
    (58) valores -> . ID . valoresCampos
    (59) valores -> . RES
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (130) expBool -> . expBool OR and
    (131) expBool -> . valoresBool OR and
    (132) expBool -> . expBool OR valoresBool
    (133) expBool -> . valoresBool OR valoresBool
    (134) expBool -> . and
    (32) funcReturn -> . funcInt
    (33) funcReturn -> . funcString
    (34) funcReturn -> . funcBool
    (70) reg -> . { campos }
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (43) vec -> . [ elem ]
    (127) ternario -> . valoresBool ? valores : valores
    (128) ternario -> . expBool ? valores : valores
    (129) ternario -> . ( ternario )
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (123) valoresBool -> . BOOL
    (124) valoresBool -> . funcBool
    (125) valoresBool -> . varYVals
    (126) valoresBool -> . varsOps
    (135) and -> . and AND eq
    (136) and -> . valoresBool AND eq
    (137) and -> . and AND valoresBool
    (138) and -> . valoresBool AND valoresBool
    (139) and -> . eq
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (37) funcString -> . CAPITALIZAR ( valores )
    (38) funcBool -> . COLINEALES ( valores , valores )
    (65) vecVal -> . ID m
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (140) eq -> . eq EQEQ mayor
    (141) eq -> . eq DISTINTO mayor
    (142) eq -> . tCompare EQEQ mayor
    (143) eq -> . tCompare DISTINTO mayor
    (144) eq -> . eq EQEQ tCompare
    (145) eq -> . eq DISTINTO tCompare
    (146) eq -> . tCompare EQEQ tCompare
    (147) eq -> . tCompare DISTINTO tCompare
    (148) eq -> . mayor
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (122) paren -> . ( eMat )
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (161) parenBool -> . ( expBool )

    INT             shift and go to state 92
    FLOAT           shift and go to state 94
    STRING          shift and go to state 87
    BOOL            shift and go to state 97
    ID              shift and go to state 91
    RES             shift and go to state 73
    {               shift and go to state 102
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    [               shift and go to state 90
    (               shift and go to state 81
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 4
    -               shift and go to state 83
    +               shift and go to state 82
    NOT             shift and go to state 100

    and                            shift and go to state 70
    ternario                       shift and go to state 71
    funcBool                       shift and go to state 72
    funcInt                        shift and go to state 74
    menor                          shift and go to state 76
    mayor                          shift and go to state 103
    valoresMat                     shift and go to state 77
    eq                             shift and go to state 78
    valoresBool                    shift and go to state 79
    eMat                           shift and go to state 80
    vecVal                         shift and go to state 8
    vec                            shift and go to state 84
    paren                          shift and go to state 89
    reg                            shift and go to state 85
    iSing                          shift and go to state 86
    exp                            shift and go to state 101
    tCompare                       shift and go to state 88
    not                            shift and go to state 75
    funcString                     shift and go to state 23
    funcReturn                     shift and go to state 93
    valores                        shift and go to state 292
    p                              shift and go to state 96
    varsOps                        shift and go to state 98
    varYVals                       shift and go to state 104
    parenBool                      shift and go to state 99
    expBool                        shift and go to state 105

state 281

    (44) elem -> valores , elem .

    ]               reduce using rule 44 (elem -> valores , elem .)


state 282

    (38) funcBool -> COLINEALES ( valores , valores ) .

    AND             reduce using rule 38 (funcBool -> COLINEALES ( valores , valores ) .)
    OR              reduce using rule 38 (funcBool -> COLINEALES ( valores , valores ) .)
    ?               reduce using rule 38 (funcBool -> COLINEALES ( valores , valores ) .)
    ,               reduce using rule 38 (funcBool -> COLINEALES ( valores , valores ) .)
    )               reduce using rule 38 (funcBool -> COLINEALES ( valores , valores ) .)
    ;               reduce using rule 38 (funcBool -> COLINEALES ( valores , valores ) .)
    ]               reduce using rule 38 (funcBool -> COLINEALES ( valores , valores ) .)
    }               reduce using rule 38 (funcBool -> COLINEALES ( valores , valores ) .)
    :               reduce using rule 38 (funcBool -> COLINEALES ( valores , valores ) .)
    EQEQ            reduce using rule 38 (funcBool -> COLINEALES ( valores , valores ) .)
    DISTINTO        reduce using rule 38 (funcBool -> COLINEALES ( valores , valores ) .)


state 283

    (71) campos -> ID : valores . , campos

    ,               shift and go to state 293


state 284

    (128) ternario -> expBool ? valores : . valores
    (46) valores -> . eMat
    (47) valores -> . expBool
    (48) valores -> . funcReturn
    (49) valores -> . reg
    (50) valores -> . INT
    (51) valores -> . FLOAT
    (52) valores -> . STRING
    (53) valores -> . BOOL
    (54) valores -> . varYVals
    (55) valores -> . varsOps
    (56) valores -> . vec
    (57) valores -> . ternario
    (58) valores -> . ID . valoresCampos
    (59) valores -> . RES
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (130) expBool -> . expBool OR and
    (131) expBool -> . valoresBool OR and
    (132) expBool -> . expBool OR valoresBool
    (133) expBool -> . valoresBool OR valoresBool
    (134) expBool -> . and
    (32) funcReturn -> . funcInt
    (33) funcReturn -> . funcString
    (34) funcReturn -> . funcBool
    (70) reg -> . { campos }
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (43) vec -> . [ elem ]
    (127) ternario -> . valoresBool ? valores : valores
    (128) ternario -> . expBool ? valores : valores
    (129) ternario -> . ( ternario )
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (123) valoresBool -> . BOOL
    (124) valoresBool -> . funcBool
    (125) valoresBool -> . varYVals
    (126) valoresBool -> . varsOps
    (135) and -> . and AND eq
    (136) and -> . valoresBool AND eq
    (137) and -> . and AND valoresBool
    (138) and -> . valoresBool AND valoresBool
    (139) and -> . eq
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (37) funcString -> . CAPITALIZAR ( valores )
    (38) funcBool -> . COLINEALES ( valores , valores )
    (65) vecVal -> . ID m
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (140) eq -> . eq EQEQ mayor
    (141) eq -> . eq DISTINTO mayor
    (142) eq -> . tCompare EQEQ mayor
    (143) eq -> . tCompare DISTINTO mayor
    (144) eq -> . eq EQEQ tCompare
    (145) eq -> . eq DISTINTO tCompare
    (146) eq -> . tCompare EQEQ tCompare
    (147) eq -> . tCompare DISTINTO tCompare
    (148) eq -> . mayor
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (122) paren -> . ( eMat )
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (161) parenBool -> . ( expBool )

    INT             shift and go to state 92
    FLOAT           shift and go to state 94
    STRING          shift and go to state 87
    BOOL            shift and go to state 97
    ID              shift and go to state 91
    RES             shift and go to state 73
    {               shift and go to state 102
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    [               shift and go to state 90
    (               shift and go to state 81
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 4
    -               shift and go to state 83
    +               shift and go to state 82
    NOT             shift and go to state 100

    and                            shift and go to state 70
    ternario                       shift and go to state 71
    funcBool                       shift and go to state 72
    funcInt                        shift and go to state 74
    menor                          shift and go to state 76
    mayor                          shift and go to state 103
    valoresMat                     shift and go to state 77
    eq                             shift and go to state 78
    valoresBool                    shift and go to state 79
    eMat                           shift and go to state 80
    vecVal                         shift and go to state 8
    vec                            shift and go to state 84
    paren                          shift and go to state 89
    reg                            shift and go to state 85
    iSing                          shift and go to state 86
    exp                            shift and go to state 101
    tCompare                       shift and go to state 88
    not                            shift and go to state 75
    funcString                     shift and go to state 23
    funcReturn                     shift and go to state 93
    valores                        shift and go to state 294
    p                              shift and go to state 96
    varsOps                        shift and go to state 98
    varYVals                       shift and go to state 104
    parenBool                      shift and go to state 99
    expBool                        shift and go to state 105

state 285

    (6) lAbierta -> IF ( cosaBooleana ) bloqueCerrado ELSE . lAbierta
    (12) lCerrada -> IF ( cosaBooleana ) bloqueCerrado ELSE . bloqueCerrado
    (5) lAbierta -> . IF ( cosaBooleana ) linea
    (6) lAbierta -> . IF ( cosaBooleana ) bloqueCerrado ELSE lAbierta
    (7) lAbierta -> . loop lAbierta
    (8) bloqueCerrado -> . lCerrada
    (9) bloqueCerrado -> . { g }
    (20) loop -> . WHILE ( cosaBooleana )
    (21) loop -> . FOR ( primParam ; cosaBooleana ; tercerParam )
    (10) lCerrada -> . sentencia
    (11) lCerrada -> . COMMENT lCerrada
    (12) lCerrada -> . IF ( cosaBooleana ) bloqueCerrado ELSE bloqueCerrado
    (13) lCerrada -> . loop bloqueCerrado
    (14) lCerrada -> . DO bloqueCerrado WHILE ( cosaBooleana ) ;
    (15) sentencia -> . varsOps ;
    (16) sentencia -> . func ;
    (17) sentencia -> . varAsig ;
    (18) sentencia -> . RETURN ;
    (19) sentencia -> . ;
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (30) func -> . funcReturn
    (31) func -> . funcVoid
    (78) varAsig -> . varYVals MULEQ valoresAsig
    (79) varAsig -> . varYVals DIVEQ valoresAsig
    (80) varAsig -> . varYVals MASEQ valoresAsig
    (81) varAsig -> . varYVals MENOSEQ valoresAsig
    (82) varAsig -> . varYVals = valoresAsig
    (83) varAsig -> . ID . ID = valoresAsig
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (32) funcReturn -> . funcInt
    (33) funcReturn -> . funcString
    (34) funcReturn -> . funcBool
    (39) funcVoid -> . PRINT ( valores )
    (65) vecVal -> . ID m
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (37) funcString -> . CAPITALIZAR ( valores )
    (38) funcBool -> . COLINEALES ( valores , valores )

    IF              shift and go to state 12
    {               shift and go to state 36
    WHILE           shift and go to state 6
    FOR             shift and go to state 17
    COMMENT         shift and go to state 9
    DO              shift and go to state 1
    RETURN          shift and go to state 2
    ;               shift and go to state 11
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    ID              shift and go to state 20
    PRINT           shift and go to state 7
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 4

    funcBool                       shift and go to state 3
    funcInt                        shift and go to state 5
    bloqueCerrado                  shift and go to state 295
    loop                           shift and go to state 30
    vecVal                         shift and go to state 8
    sentencia                      shift and go to state 10
    funcVoid                       shift and go to state 15
    func                           shift and go to state 19
    varAsig                        shift and go to state 21
    funcString                     shift and go to state 23
    funcReturn                     shift and go to state 25
    lCerrada                       shift and go to state 35
    lAbierta                       shift and go to state 296
    varsOps                        shift and go to state 14
    varYVals                       shift and go to state 31

state 286

    (21) loop -> FOR ( primParam ; cosaBooleana ; . tercerParam )
    (26) tercerParam -> . varsOps
    (27) tercerParam -> . varAsig
    (28) tercerParam -> . func
    (29) tercerParam -> . empty
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (78) varAsig -> . varYVals MULEQ valoresAsig
    (79) varAsig -> . varYVals DIVEQ valoresAsig
    (80) varAsig -> . varYVals MASEQ valoresAsig
    (81) varAsig -> . varYVals MENOSEQ valoresAsig
    (82) varAsig -> . varYVals = valoresAsig
    (83) varAsig -> . ID . ID = valoresAsig
    (30) func -> . funcReturn
    (31) func -> . funcVoid
    (42) empty -> .
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (32) funcReturn -> . funcInt
    (33) funcReturn -> . funcString
    (34) funcReturn -> . funcBool
    (39) funcVoid -> . PRINT ( valores )
    (65) vecVal -> . ID m
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (37) funcString -> . CAPITALIZAR ( valores )
    (38) funcBool -> . COLINEALES ( valores , valores )

    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    ID              shift and go to state 20
    )               reduce using rule 42 (empty -> .)
    PRINT           shift and go to state 7
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 4

    varAsig                        shift and go to state 299
    funcVoid                       shift and go to state 15
    funcBool                       shift and go to state 3
    funcString                     shift and go to state 23
    funcInt                        shift and go to state 5
    funcReturn                     shift and go to state 25
    varsOps                        shift and go to state 301
    func                           shift and go to state 297
    varYVals                       shift and go to state 31
    vecVal                         shift and go to state 8
    empty                          shift and go to state 300
    tercerParam                    shift and go to state 298

state 287

    (35) funcInt -> MULTIESCALAR ( valores , valores param . )

    )               shift and go to state 302


state 288

    (40) param -> , . valores
    (46) valores -> . eMat
    (47) valores -> . expBool
    (48) valores -> . funcReturn
    (49) valores -> . reg
    (50) valores -> . INT
    (51) valores -> . FLOAT
    (52) valores -> . STRING
    (53) valores -> . BOOL
    (54) valores -> . varYVals
    (55) valores -> . varsOps
    (56) valores -> . vec
    (57) valores -> . ternario
    (58) valores -> . ID . valoresCampos
    (59) valores -> . RES
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (130) expBool -> . expBool OR and
    (131) expBool -> . valoresBool OR and
    (132) expBool -> . expBool OR valoresBool
    (133) expBool -> . valoresBool OR valoresBool
    (134) expBool -> . and
    (32) funcReturn -> . funcInt
    (33) funcReturn -> . funcString
    (34) funcReturn -> . funcBool
    (70) reg -> . { campos }
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (43) vec -> . [ elem ]
    (127) ternario -> . valoresBool ? valores : valores
    (128) ternario -> . expBool ? valores : valores
    (129) ternario -> . ( ternario )
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (123) valoresBool -> . BOOL
    (124) valoresBool -> . funcBool
    (125) valoresBool -> . varYVals
    (126) valoresBool -> . varsOps
    (135) and -> . and AND eq
    (136) and -> . valoresBool AND eq
    (137) and -> . and AND valoresBool
    (138) and -> . valoresBool AND valoresBool
    (139) and -> . eq
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (37) funcString -> . CAPITALIZAR ( valores )
    (38) funcBool -> . COLINEALES ( valores , valores )
    (65) vecVal -> . ID m
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (140) eq -> . eq EQEQ mayor
    (141) eq -> . eq DISTINTO mayor
    (142) eq -> . tCompare EQEQ mayor
    (143) eq -> . tCompare DISTINTO mayor
    (144) eq -> . eq EQEQ tCompare
    (145) eq -> . eq DISTINTO tCompare
    (146) eq -> . tCompare EQEQ tCompare
    (147) eq -> . tCompare DISTINTO tCompare
    (148) eq -> . mayor
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (122) paren -> . ( eMat )
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (161) parenBool -> . ( expBool )

    INT             shift and go to state 92
    FLOAT           shift and go to state 94
    STRING          shift and go to state 87
    BOOL            shift and go to state 97
    ID              shift and go to state 91
    RES             shift and go to state 73
    {               shift and go to state 102
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    [               shift and go to state 90
    (               shift and go to state 81
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 4
    -               shift and go to state 83
    +               shift and go to state 82
    NOT             shift and go to state 100

    and                            shift and go to state 70
    ternario                       shift and go to state 71
    funcBool                       shift and go to state 72
    funcInt                        shift and go to state 74
    menor                          shift and go to state 76
    mayor                          shift and go to state 103
    valoresMat                     shift and go to state 77
    eq                             shift and go to state 78
    valoresBool                    shift and go to state 79
    eMat                           shift and go to state 80
    vecVal                         shift and go to state 8
    vec                            shift and go to state 84
    paren                          shift and go to state 89
    reg                            shift and go to state 85
    iSing                          shift and go to state 86
    exp                            shift and go to state 101
    tCompare                       shift and go to state 88
    not                            shift and go to state 75
    funcString                     shift and go to state 23
    funcReturn                     shift and go to state 93
    valores                        shift and go to state 303
    p                              shift and go to state 96
    varsOps                        shift and go to state 98
    varYVals                       shift and go to state 104
    parenBool                      shift and go to state 99
    expBool                        shift and go to state 105

state 289

    (41) param -> empty .

    )               reduce using rule 41 (param -> empty .)


state 290

    (14) lCerrada -> DO bloqueCerrado WHILE ( cosaBooleana ) ; .

    WHILE           reduce using rule 14 (lCerrada -> DO bloqueCerrado WHILE ( cosaBooleana ) ; .)
    ELSE            reduce using rule 14 (lCerrada -> DO bloqueCerrado WHILE ( cosaBooleana ) ; .)
    IF              reduce using rule 14 (lCerrada -> DO bloqueCerrado WHILE ( cosaBooleana ) ; .)
    COMMENT         reduce using rule 14 (lCerrada -> DO bloqueCerrado WHILE ( cosaBooleana ) ; .)
    DO              reduce using rule 14 (lCerrada -> DO bloqueCerrado WHILE ( cosaBooleana ) ; .)
    FOR             reduce using rule 14 (lCerrada -> DO bloqueCerrado WHILE ( cosaBooleana ) ; .)
    RETURN          reduce using rule 14 (lCerrada -> DO bloqueCerrado WHILE ( cosaBooleana ) ; .)
    ;               reduce using rule 14 (lCerrada -> DO bloqueCerrado WHILE ( cosaBooleana ) ; .)
    MENOSMENOS      reduce using rule 14 (lCerrada -> DO bloqueCerrado WHILE ( cosaBooleana ) ; .)
    MASMAS          reduce using rule 14 (lCerrada -> DO bloqueCerrado WHILE ( cosaBooleana ) ; .)
    ID              reduce using rule 14 (lCerrada -> DO bloqueCerrado WHILE ( cosaBooleana ) ; .)
    PRINT           reduce using rule 14 (lCerrada -> DO bloqueCerrado WHILE ( cosaBooleana ) ; .)
    MULTIESCALAR    reduce using rule 14 (lCerrada -> DO bloqueCerrado WHILE ( cosaBooleana ) ; .)
    LENGTH          reduce using rule 14 (lCerrada -> DO bloqueCerrado WHILE ( cosaBooleana ) ; .)
    CAPITALIZAR     reduce using rule 14 (lCerrada -> DO bloqueCerrado WHILE ( cosaBooleana ) ; .)
    COLINEALES      reduce using rule 14 (lCerrada -> DO bloqueCerrado WHILE ( cosaBooleana ) ; .)
    $end            reduce using rule 14 (lCerrada -> DO bloqueCerrado WHILE ( cosaBooleana ) ; .)
    }               reduce using rule 14 (lCerrada -> DO bloqueCerrado WHILE ( cosaBooleana ) ; .)


state 291

    (12) lCerrada -> IF ( cosaBooleana ) bloqueCerrado ELSE . bloqueCerrado
    (8) bloqueCerrado -> . lCerrada
    (9) bloqueCerrado -> . { g }
    (10) lCerrada -> . sentencia
    (11) lCerrada -> . COMMENT lCerrada
    (12) lCerrada -> . IF ( cosaBooleana ) bloqueCerrado ELSE bloqueCerrado
    (13) lCerrada -> . loop bloqueCerrado
    (14) lCerrada -> . DO bloqueCerrado WHILE ( cosaBooleana ) ;
    (15) sentencia -> . varsOps ;
    (16) sentencia -> . func ;
    (17) sentencia -> . varAsig ;
    (18) sentencia -> . RETURN ;
    (19) sentencia -> . ;
    (20) loop -> . WHILE ( cosaBooleana )
    (21) loop -> . FOR ( primParam ; cosaBooleana ; tercerParam )
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (30) func -> . funcReturn
    (31) func -> . funcVoid
    (78) varAsig -> . varYVals MULEQ valoresAsig
    (79) varAsig -> . varYVals DIVEQ valoresAsig
    (80) varAsig -> . varYVals MASEQ valoresAsig
    (81) varAsig -> . varYVals MENOSEQ valoresAsig
    (82) varAsig -> . varYVals = valoresAsig
    (83) varAsig -> . ID . ID = valoresAsig
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (32) funcReturn -> . funcInt
    (33) funcReturn -> . funcString
    (34) funcReturn -> . funcBool
    (39) funcVoid -> . PRINT ( valores )
    (65) vecVal -> . ID m
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (37) funcString -> . CAPITALIZAR ( valores )
    (38) funcBool -> . COLINEALES ( valores , valores )

    {               shift and go to state 36
    COMMENT         shift and go to state 9
    IF              shift and go to state 34
    DO              shift and go to state 1
    RETURN          shift and go to state 2
    ;               shift and go to state 11
    WHILE           shift and go to state 6
    FOR             shift and go to state 17
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    ID              shift and go to state 20
    PRINT           shift and go to state 7
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 4

    funcBool                       shift and go to state 3
    funcInt                        shift and go to state 5
    bloqueCerrado                  shift and go to state 295
    vecVal                         shift and go to state 8
    sentencia                      shift and go to state 10
    funcVoid                       shift and go to state 15
    func                           shift and go to state 19
    varAsig                        shift and go to state 21
    funcString                     shift and go to state 23
    funcReturn                     shift and go to state 25
    lCerrada                       shift and go to state 35
    varsOps                        shift and go to state 14
    varYVals                       shift and go to state 31
    loop                           shift and go to state 37

state 292

    (127) ternario -> valoresBool ? valores : valores .

    ;               reduce using rule 127 (ternario -> valoresBool ? valores : valores .)
    )               reduce using rule 127 (ternario -> valoresBool ? valores : valores .)
    ,               reduce using rule 127 (ternario -> valoresBool ? valores : valores .)
    ]               reduce using rule 127 (ternario -> valoresBool ? valores : valores .)
    :               reduce using rule 127 (ternario -> valoresBool ? valores : valores .)
    }               reduce using rule 127 (ternario -> valoresBool ? valores : valores .)


state 293

    (71) campos -> ID : valores , . campos
    (71) campos -> . ID : valores , campos
    (72) campos -> . valores
    (46) valores -> . eMat
    (47) valores -> . expBool
    (48) valores -> . funcReturn
    (49) valores -> . reg
    (50) valores -> . INT
    (51) valores -> . FLOAT
    (52) valores -> . STRING
    (53) valores -> . BOOL
    (54) valores -> . varYVals
    (55) valores -> . varsOps
    (56) valores -> . vec
    (57) valores -> . ternario
    (58) valores -> . ID . valoresCampos
    (59) valores -> . RES
    (90) eMat -> . eMat + p
    (91) eMat -> . eMat - p
    (92) eMat -> . valoresMat + p
    (93) eMat -> . valoresMat - p
    (94) eMat -> . eMat + valoresMat
    (95) eMat -> . eMat - valoresMat
    (96) eMat -> . valoresMat + valoresMat
    (97) eMat -> . valoresMat - valoresMat
    (98) eMat -> . p
    (130) expBool -> . expBool OR and
    (131) expBool -> . valoresBool OR and
    (132) expBool -> . expBool OR valoresBool
    (133) expBool -> . valoresBool OR valoresBool
    (134) expBool -> . and
    (32) funcReturn -> . funcInt
    (33) funcReturn -> . funcString
    (34) funcReturn -> . funcBool
    (70) reg -> . { campos }
    (63) varYVals -> . ID
    (64) varYVals -> . vecVal
    (73) varsOps -> . MENOSMENOS varYVals
    (74) varsOps -> . MASMAS varYVals
    (75) varsOps -> . varYVals MASMAS
    (76) varsOps -> . varYVals MENOSMENOS
    (43) vec -> . [ elem ]
    (127) ternario -> . valoresBool ? valores : valores
    (128) ternario -> . expBool ? valores : valores
    (129) ternario -> . ( ternario )
    (84) valoresMat -> . INT
    (85) valoresMat -> . FLOAT
    (86) valoresMat -> . funcInt
    (87) valoresMat -> . varYVals
    (88) valoresMat -> . varsOps
    (89) valoresMat -> . STRING
    (99) p -> . p * exp
    (100) p -> . p / exp
    (101) p -> . p % exp
    (102) p -> . valoresMat * exp
    (103) p -> . valoresMat / exp
    (104) p -> . valoresMat % exp
    (105) p -> . p * valoresMat
    (106) p -> . p / valoresMat
    (107) p -> . p % valoresMat
    (108) p -> . valoresMat * valoresMat
    (109) p -> . valoresMat / valoresMat
    (110) p -> . valoresMat % valoresMat
    (111) p -> . exp
    (123) valoresBool -> . BOOL
    (124) valoresBool -> . funcBool
    (125) valoresBool -> . varYVals
    (126) valoresBool -> . varsOps
    (135) and -> . and AND eq
    (136) and -> . valoresBool AND eq
    (137) and -> . and AND valoresBool
    (138) and -> . valoresBool AND valoresBool
    (139) and -> . eq
    (35) funcInt -> . MULTIESCALAR ( valores , valores param )
    (36) funcInt -> . LENGTH ( valores )
    (37) funcString -> . CAPITALIZAR ( valores )
    (38) funcBool -> . COLINEALES ( valores , valores )
    (65) vecVal -> . ID m
    (112) exp -> . exp ^ iSing
    (113) exp -> . valoresMat ^ iSing
    (114) exp -> . exp ^ valoresMat
    (115) exp -> . valoresMat ^ valoresMat
    (116) exp -> . iSing
    (140) eq -> . eq EQEQ mayor
    (141) eq -> . eq DISTINTO mayor
    (142) eq -> . tCompare EQEQ mayor
    (143) eq -> . tCompare DISTINTO mayor
    (144) eq -> . eq EQEQ tCompare
    (145) eq -> . eq DISTINTO tCompare
    (146) eq -> . tCompare EQEQ tCompare
    (147) eq -> . tCompare DISTINTO tCompare
    (148) eq -> . mayor
    (117) iSing -> . - paren
    (118) iSing -> . + paren
    (119) iSing -> . - valoresMat
    (120) iSing -> . + valoresMat
    (121) iSing -> . paren
    (149) tCompare -> . eMat
    (150) tCompare -> . varsOps
    (151) tCompare -> . varYVals
    (152) tCompare -> . INT
    (153) tCompare -> . FLOAT
    (154) mayor -> . tCompare > tCompare
    (155) mayor -> . menor
    (122) paren -> . ( eMat )
    (156) menor -> . tCompare < tCompare
    (157) menor -> . not
    (158) not -> . NOT not
    (159) not -> . NOT valoresBool
    (160) not -> . parenBool
    (161) parenBool -> . ( expBool )

    ID              shift and go to state 189
    INT             shift and go to state 92
    FLOAT           shift and go to state 94
    STRING          shift and go to state 87
    BOOL            shift and go to state 97
    RES             shift and go to state 73
    {               shift and go to state 102
    MENOSMENOS      shift and go to state 16
    MASMAS          shift and go to state 29
    [               shift and go to state 90
    (               shift and go to state 81
    MULTIESCALAR    shift and go to state 24
    LENGTH          shift and go to state 18
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 4
    -               shift and go to state 83
    +               shift and go to state 82
    NOT             shift and go to state 100

    and                            shift and go to state 70
    ternario                       shift and go to state 71
    funcBool                       shift and go to state 72
    funcInt                        shift and go to state 74
    menor                          shift and go to state 76
    mayor                          shift and go to state 103
    valoresMat                     shift and go to state 77
    eq                             shift and go to state 78
    valoresBool                    shift and go to state 79
    eMat                           shift and go to state 80
    vecVal                         shift and go to state 8
    vec                            shift and go to state 84
    paren                          shift and go to state 89
    reg                            shift and go to state 85
    iSing                          shift and go to state 86
    exp                            shift and go to state 101
    tCompare                       shift and go to state 88
    campos                         shift and go to state 304
    not                            shift and go to state 75
    funcString                     shift and go to state 23
    funcReturn                     shift and go to state 93
    valores                        shift and go to state 190
    p                              shift and go to state 96
    varsOps                        shift and go to state 98
    varYVals                       shift and go to state 104
    parenBool                      shift and go to state 99
    expBool                        shift and go to state 105

state 294

    (128) ternario -> expBool ? valores : valores .

    ;               reduce using rule 128 (ternario -> expBool ? valores : valores .)
    )               reduce using rule 128 (ternario -> expBool ? valores : valores .)
    ,               reduce using rule 128 (ternario -> expBool ? valores : valores .)
    ]               reduce using rule 128 (ternario -> expBool ? valores : valores .)
    :               reduce using rule 128 (ternario -> expBool ? valores : valores .)
    }               reduce using rule 128 (ternario -> expBool ? valores : valores .)


state 295

    (12) lCerrada -> IF ( cosaBooleana ) bloqueCerrado ELSE bloqueCerrado .

    WHILE           reduce using rule 12 (lCerrada -> IF ( cosaBooleana ) bloqueCerrado ELSE bloqueCerrado .)
    ELSE            reduce using rule 12 (lCerrada -> IF ( cosaBooleana ) bloqueCerrado ELSE bloqueCerrado .)
    IF              reduce using rule 12 (lCerrada -> IF ( cosaBooleana ) bloqueCerrado ELSE bloqueCerrado .)
    COMMENT         reduce using rule 12 (lCerrada -> IF ( cosaBooleana ) bloqueCerrado ELSE bloqueCerrado .)
    DO              reduce using rule 12 (lCerrada -> IF ( cosaBooleana ) bloqueCerrado ELSE bloqueCerrado .)
    FOR             reduce using rule 12 (lCerrada -> IF ( cosaBooleana ) bloqueCerrado ELSE bloqueCerrado .)
    RETURN          reduce using rule 12 (lCerrada -> IF ( cosaBooleana ) bloqueCerrado ELSE bloqueCerrado .)
    ;               reduce using rule 12 (lCerrada -> IF ( cosaBooleana ) bloqueCerrado ELSE bloqueCerrado .)
    MENOSMENOS      reduce using rule 12 (lCerrada -> IF ( cosaBooleana ) bloqueCerrado ELSE bloqueCerrado .)
    MASMAS          reduce using rule 12 (lCerrada -> IF ( cosaBooleana ) bloqueCerrado ELSE bloqueCerrado .)
    ID              reduce using rule 12 (lCerrada -> IF ( cosaBooleana ) bloqueCerrado ELSE bloqueCerrado .)
    PRINT           reduce using rule 12 (lCerrada -> IF ( cosaBooleana ) bloqueCerrado ELSE bloqueCerrado .)
    MULTIESCALAR    reduce using rule 12 (lCerrada -> IF ( cosaBooleana ) bloqueCerrado ELSE bloqueCerrado .)
    LENGTH          reduce using rule 12 (lCerrada -> IF ( cosaBooleana ) bloqueCerrado ELSE bloqueCerrado .)
    CAPITALIZAR     reduce using rule 12 (lCerrada -> IF ( cosaBooleana ) bloqueCerrado ELSE bloqueCerrado .)
    COLINEALES      reduce using rule 12 (lCerrada -> IF ( cosaBooleana ) bloqueCerrado ELSE bloqueCerrado .)
    $end            reduce using rule 12 (lCerrada -> IF ( cosaBooleana ) bloqueCerrado ELSE bloqueCerrado .)
    }               reduce using rule 12 (lCerrada -> IF ( cosaBooleana ) bloqueCerrado ELSE bloqueCerrado .)


state 296

    (6) lAbierta -> IF ( cosaBooleana ) bloqueCerrado ELSE lAbierta .

    IF              reduce using rule 6 (lAbierta -> IF ( cosaBooleana ) bloqueCerrado ELSE lAbierta .)
    COMMENT         reduce using rule 6 (lAbierta -> IF ( cosaBooleana ) bloqueCerrado ELSE lAbierta .)
    DO              reduce using rule 6 (lAbierta -> IF ( cosaBooleana ) bloqueCerrado ELSE lAbierta .)
    WHILE           reduce using rule 6 (lAbierta -> IF ( cosaBooleana ) bloqueCerrado ELSE lAbierta .)
    FOR             reduce using rule 6 (lAbierta -> IF ( cosaBooleana ) bloqueCerrado ELSE lAbierta .)
    RETURN          reduce using rule 6 (lAbierta -> IF ( cosaBooleana ) bloqueCerrado ELSE lAbierta .)
    ;               reduce using rule 6 (lAbierta -> IF ( cosaBooleana ) bloqueCerrado ELSE lAbierta .)
    MENOSMENOS      reduce using rule 6 (lAbierta -> IF ( cosaBooleana ) bloqueCerrado ELSE lAbierta .)
    MASMAS          reduce using rule 6 (lAbierta -> IF ( cosaBooleana ) bloqueCerrado ELSE lAbierta .)
    ID              reduce using rule 6 (lAbierta -> IF ( cosaBooleana ) bloqueCerrado ELSE lAbierta .)
    PRINT           reduce using rule 6 (lAbierta -> IF ( cosaBooleana ) bloqueCerrado ELSE lAbierta .)
    MULTIESCALAR    reduce using rule 6 (lAbierta -> IF ( cosaBooleana ) bloqueCerrado ELSE lAbierta .)
    LENGTH          reduce using rule 6 (lAbierta -> IF ( cosaBooleana ) bloqueCerrado ELSE lAbierta .)
    CAPITALIZAR     reduce using rule 6 (lAbierta -> IF ( cosaBooleana ) bloqueCerrado ELSE lAbierta .)
    COLINEALES      reduce using rule 6 (lAbierta -> IF ( cosaBooleana ) bloqueCerrado ELSE lAbierta .)
    $end            reduce using rule 6 (lAbierta -> IF ( cosaBooleana ) bloqueCerrado ELSE lAbierta .)
    }               reduce using rule 6 (lAbierta -> IF ( cosaBooleana ) bloqueCerrado ELSE lAbierta .)


state 297

    (28) tercerParam -> func .

    )               reduce using rule 28 (tercerParam -> func .)


state 298

    (21) loop -> FOR ( primParam ; cosaBooleana ; tercerParam . )

    )               shift and go to state 305


state 299

    (27) tercerParam -> varAsig .

    )               reduce using rule 27 (tercerParam -> varAsig .)


state 300

    (29) tercerParam -> empty .

    )               reduce using rule 29 (tercerParam -> empty .)


state 301

    (26) tercerParam -> varsOps .

    )               reduce using rule 26 (tercerParam -> varsOps .)


state 302

    (35) funcInt -> MULTIESCALAR ( valores , valores param ) .

    ,               reduce using rule 35 (funcInt -> MULTIESCALAR ( valores , valores param ) .)
    ]               reduce using rule 35 (funcInt -> MULTIESCALAR ( valores , valores param ) .)
    +               reduce using rule 35 (funcInt -> MULTIESCALAR ( valores , valores param ) .)
    -               reduce using rule 35 (funcInt -> MULTIESCALAR ( valores , valores param ) .)
    *               reduce using rule 35 (funcInt -> MULTIESCALAR ( valores , valores param ) .)
    /               reduce using rule 35 (funcInt -> MULTIESCALAR ( valores , valores param ) .)
    %               reduce using rule 35 (funcInt -> MULTIESCALAR ( valores , valores param ) .)
    ^               reduce using rule 35 (funcInt -> MULTIESCALAR ( valores , valores param ) .)
    EQEQ            reduce using rule 35 (funcInt -> MULTIESCALAR ( valores , valores param ) .)
    DISTINTO        reduce using rule 35 (funcInt -> MULTIESCALAR ( valores , valores param ) .)
    >               reduce using rule 35 (funcInt -> MULTIESCALAR ( valores , valores param ) .)
    <               reduce using rule 35 (funcInt -> MULTIESCALAR ( valores , valores param ) .)
    )               reduce using rule 35 (funcInt -> MULTIESCALAR ( valores , valores param ) .)
    ;               reduce using rule 35 (funcInt -> MULTIESCALAR ( valores , valores param ) .)
    }               reduce using rule 35 (funcInt -> MULTIESCALAR ( valores , valores param ) .)
    AND             reduce using rule 35 (funcInt -> MULTIESCALAR ( valores , valores param ) .)
    OR              reduce using rule 35 (funcInt -> MULTIESCALAR ( valores , valores param ) .)
    ?               reduce using rule 35 (funcInt -> MULTIESCALAR ( valores , valores param ) .)
    :               reduce using rule 35 (funcInt -> MULTIESCALAR ( valores , valores param ) .)


state 303

    (40) param -> , valores .

    )               reduce using rule 40 (param -> , valores .)


state 304

    (71) campos -> ID : valores , campos .

    }               reduce using rule 71 (campos -> ID : valores , campos .)


state 305

    (21) loop -> FOR ( primParam ; cosaBooleana ; tercerParam ) .

    IF              reduce using rule 21 (loop -> FOR ( primParam ; cosaBooleana ; tercerParam ) .)
    {               reduce using rule 21 (loop -> FOR ( primParam ; cosaBooleana ; tercerParam ) .)
    WHILE           reduce using rule 21 (loop -> FOR ( primParam ; cosaBooleana ; tercerParam ) .)
    FOR             reduce using rule 21 (loop -> FOR ( primParam ; cosaBooleana ; tercerParam ) .)
    COMMENT         reduce using rule 21 (loop -> FOR ( primParam ; cosaBooleana ; tercerParam ) .)
    DO              reduce using rule 21 (loop -> FOR ( primParam ; cosaBooleana ; tercerParam ) .)
    RETURN          reduce using rule 21 (loop -> FOR ( primParam ; cosaBooleana ; tercerParam ) .)
    ;               reduce using rule 21 (loop -> FOR ( primParam ; cosaBooleana ; tercerParam ) .)
    MENOSMENOS      reduce using rule 21 (loop -> FOR ( primParam ; cosaBooleana ; tercerParam ) .)
    MASMAS          reduce using rule 21 (loop -> FOR ( primParam ; cosaBooleana ; tercerParam ) .)
    ID              reduce using rule 21 (loop -> FOR ( primParam ; cosaBooleana ; tercerParam ) .)
    PRINT           reduce using rule 21 (loop -> FOR ( primParam ; cosaBooleana ; tercerParam ) .)
    MULTIESCALAR    reduce using rule 21 (loop -> FOR ( primParam ; cosaBooleana ; tercerParam ) .)
    LENGTH          reduce using rule 21 (loop -> FOR ( primParam ; cosaBooleana ; tercerParam ) .)
    CAPITALIZAR     reduce using rule 21 (loop -> FOR ( primParam ; cosaBooleana ; tercerParam ) .)
    COLINEALES      reduce using rule 21 (loop -> FOR ( primParam ; cosaBooleana ; tercerParam ) .)

