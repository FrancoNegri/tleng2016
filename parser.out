Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    RES
    COMMENT
    BEGIN
    MASEQ
    DIVEQ
    END
    MENOSEQ

Grammar

Rule 0     S' -> g
Rule 1     g -> sentencia
Rule 2     g -> ctrl g
Rule 3     g -> empty
Rule 4     sentencia -> varsOps ;
Rule 5     sentencia -> func ;
Rule 6     sentencia -> varAsig ;
Rule 7     sentencia -> RETURN ;
Rule 8     ctrl -> if
Rule 9     ctrl -> loop
Rule 10    loop -> WHILE ( expBool ) bloque
Rule 11    loop -> DO bloque WHILE ( expBool ) ;
Rule 12    loop -> FOR ( varAsig ; expBool ; varsOps ) bloque
Rule 13    if -> IF ( expBool ) bloque else
Rule 14    else -> ELSE bloque
Rule 15    else -> empty
Rule 16    bloque -> sentencia ;
Rule 17    bloque -> { g }
Rule 18    func -> funcReturn
Rule 19    func -> funcVoid
Rule 20    funcReturn -> funcInt
Rule 21    funcReturn -> funcString
Rule 22    funcReturn -> funcBool
Rule 23    funcInt -> MULTIESCALAR ( vec , eMat , param )
Rule 24    funcInt -> LENGTH ( vec )
Rule 25    funcString -> CAPITALIZAR ( expString )
Rule 26    funcBool -> COLINEALES ( vec , vec )
Rule 27    funcVoid -> PRINT ( valores )
Rule 28    param -> expBool
Rule 29    param -> empty
Rule 30    empty -> <empty>
Rule 31    vec -> [ elem ]
Rule 32    elem -> valores , elem
Rule 33    elem -> valores
Rule 34    valores -> eMat
Rule 35    valores -> expBool
Rule 36    valores -> expString
Rule 37    valores -> varYVals
Rule 38    valores -> funcReturn
Rule 39    valores -> reg
Rule 40    valores -> ID . ID
Rule 41    varYVals -> ID
Rule 42    varYVals -> vecVal
Rule 43    vecVal -> ID m
Rule 44    m -> [ INT ]
Rule 45    m -> [ INT ] m
Rule 46    reg -> { campos }
Rule 47    campos -> ID : valores , campos
Rule 48    campos -> valores
Rule 49    varsOps -> MENOSMENOS varYVals
Rule 50    varsOps -> MASMAS varYVals
Rule 51    varsOps -> varYVals MASMAS
Rule 52    varsOps -> varYVals MENOSMENOS
Rule 53    varAsig -> ID MULEQ varAsig
Rule 54    varAsig -> asig MULEQ varAsig
Rule 55    varAsig -> asig MULEQ ID
Rule 56    varAsig -> asig MULEQ valores
Rule 57    varAsig -> finVarAsig
Rule 58    varAsig -> asig
Rule 59    finVarAsig -> ID = valores
Rule 60    finVarAsig -> ID MULEQ valores
Rule 61    finVarAsig -> ID MULEQ ID
Rule 62    asig -> ID = asig
Rule 63    asig -> ID = ID
Rule 64    eMat -> eMat + p
Rule 65    eMat -> eMat - p
Rule 66    eMat -> p
Rule 67    p -> p * exp
Rule 68    p -> p / exp
Rule 69    p -> p % exp
Rule 70    p -> exp
Rule 71    exp -> exp ^ iSing
Rule 72    exp -> iSing
Rule 73    iSing -> - paren
Rule 74    iSing -> + paren
Rule 75    iSing -> paren
Rule 76    paren -> ( eMat )
Rule 77    paren -> INT
Rule 78    paren -> varYVals
Rule 79    paren -> FLOAT
Rule 80    paren -> varsOps
Rule 81    paren -> funcInt
Rule 82    expString -> expString + STRING
Rule 83    expString -> STRING
Rule 84    expString -> varYVals
Rule 85    expString -> funcString
Rule 86    expBool -> or ? expBool : expBool
Rule 87    expBool -> or
Rule 88    or -> or OR and
Rule 89    or -> and
Rule 90    and -> and AND eq
Rule 91    and -> eq
Rule 92    eq -> eq EQEQ tBool
Rule 93    eq -> eq DISTINTO tBool
Rule 94    eq -> mayor
Rule 95    mayor -> tCompare > tCompare
Rule 96    mayor -> menor
Rule 97    menor -> tCompare < tCompare
Rule 98    menor -> not
Rule 99    not -> NOT not
Rule 100   not -> tBool
Rule 101   tBool -> ( expBool )
Rule 102   tBool -> BOOL
Rule 103   tBool -> varYVals
Rule 104   tBool -> funcBool
Rule 105   tCompare -> eMat
Rule 106   tCompare -> varsOps
Rule 107   tCompare -> varYVals

Terminals, with rules where they appear

%                    : 69
(                    : 10 11 12 13 23 24 25 26 27 76 101
)                    : 10 11 12 13 23 24 25 26 27 76 101
*                    : 67
+                    : 64 74 82
,                    : 23 23 26 32 47
-                    : 65 73
.                    : 40
/                    : 68
:                    : 47 86
;                    : 4 5 6 7 11 12 12 16
<                    : 97
=                    : 59 62 63
>                    : 95
?                    : 86
AND                  : 90
BEGIN                : 
BOOL                 : 102
CAPITALIZAR          : 25
COLINEALES           : 26
COMMENT              : 
DISTINTO             : 93
DIVEQ                : 
DO                   : 11
ELSE                 : 14
END                  : 
EQEQ                 : 92
FLOAT                : 79
FOR                  : 12
ID                   : 40 40 41 43 47 53 55 59 60 61 61 62 63 63
IF                   : 13
INT                  : 44 45 77
LENGTH               : 24
MASEQ                : 
MASMAS               : 50 51
MENOSEQ              : 
MENOSMENOS           : 49 52
MULEQ                : 53 54 55 56 60 61
MULTIESCALAR         : 23
NOT                  : 99
OR                   : 88
PRINT                : 27
RES                  : 
RETURN               : 7
STRING               : 82 83
WHILE                : 10 11
[                    : 31 44 45
]                    : 31 44 45
^                    : 71
error                : 
{                    : 17 46
}                    : 17 46

Nonterminals, with rules where they appear

and                  : 88 89 90
asig                 : 54 55 56 58 62
bloque               : 10 11 12 13 14
campos               : 46 47
ctrl                 : 2
eMat                 : 23 34 64 65 76 105
elem                 : 31 32
else                 : 13
empty                : 3 15 29
eq                   : 90 91 92 93
exp                  : 67 68 69 70 71
expBool              : 10 11 12 13 28 35 86 86 101
expString            : 25 36 82
finVarAsig           : 57
func                 : 5
funcBool             : 22 104
funcInt              : 20 81
funcReturn           : 18 38
funcString           : 21 85
funcVoid             : 19
g                    : 2 17 0
iSing                : 71 72
if                   : 8
loop                 : 9
m                    : 43 45
mayor                : 94
menor                : 96
not                  : 98 99
or                   : 86 87 88
p                    : 64 65 66 67 68 69
param                : 23
paren                : 73 74 75
reg                  : 39
sentencia            : 1 16
tBool                : 92 93 100
tCompare             : 95 95 97 97
valores              : 27 32 33 47 48 56 59 60
varAsig              : 6 12 53 54
varYVals             : 37 49 50 51 52 78 84 103 107
varsOps              : 4 12 80 106
vec                  : 23 24 26 26
vecVal               : 42

Parsing method: LALR

state 0

    (0) S' -> . g
    (1) g -> . sentencia
    (2) g -> . ctrl g
    (3) g -> . empty
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (8) ctrl -> . if
    (9) ctrl -> . loop
    (30) empty -> .
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (53) varAsig -> . ID MULEQ varAsig
    (54) varAsig -> . asig MULEQ varAsig
    (55) varAsig -> . asig MULEQ ID
    (56) varAsig -> . asig MULEQ valores
    (57) varAsig -> . finVarAsig
    (58) varAsig -> . asig
    (13) if -> . IF ( expBool ) bloque else
    (10) loop -> . WHILE ( expBool ) bloque
    (11) loop -> . DO bloque WHILE ( expBool ) ;
    (12) loop -> . FOR ( varAsig ; expBool ; varsOps ) bloque
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (62) asig -> . ID = asig
    (63) asig -> . ID = ID
    (59) finVarAsig -> . ID = valores
    (60) finVarAsig -> . ID MULEQ valores
    (61) finVarAsig -> . ID MULEQ ID
    (43) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( expString )
    (26) funcBool -> . COLINEALES ( vec , vec )

    RETURN          shift and go to state 2
    $end            reduce using rule 30 (empty -> .)
    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    ID              shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 6
    DO              shift and go to state 1
    FOR             shift and go to state 16
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 15

    funcBool                       shift and go to state 3
    ctrl                           shift and go to state 4
    funcInt                        shift and go to state 5
    loop                           shift and go to state 7
    vecVal                         shift and go to state 9
    if                             shift and go to state 10
    sentencia                      shift and go to state 11
    asig                           shift and go to state 12
    empty                          shift and go to state 13
    funcVoid                       shift and go to state 14
    func                           shift and go to state 17
    varAsig                        shift and go to state 20
    g                              shift and go to state 21
    funcString                     shift and go to state 22
    funcReturn                     shift and go to state 24
    finVarAsig                     shift and go to state 25
    varsOps                        shift and go to state 29
    varYVals                       shift and go to state 30

state 1

    (11) loop -> DO . bloque WHILE ( expBool ) ;
    (16) bloque -> . sentencia ;
    (17) bloque -> . { g }
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (53) varAsig -> . ID MULEQ varAsig
    (54) varAsig -> . asig MULEQ varAsig
    (55) varAsig -> . asig MULEQ ID
    (56) varAsig -> . asig MULEQ valores
    (57) varAsig -> . finVarAsig
    (58) varAsig -> . asig
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (62) asig -> . ID = asig
    (63) asig -> . ID = ID
    (59) finVarAsig -> . ID = valores
    (60) finVarAsig -> . ID MULEQ valores
    (61) finVarAsig -> . ID MULEQ ID
    (43) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( expString )
    (26) funcBool -> . COLINEALES ( vec , vec )

    {               shift and go to state 34
    RETURN          shift and go to state 2
    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    ID              shift and go to state 18
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 15

    funcBool                       shift and go to state 3
    funcInt                        shift and go to state 5
    bloque                         shift and go to state 32
    vecVal                         shift and go to state 9
    sentencia                      shift and go to state 33
    asig                           shift and go to state 12
    funcVoid                       shift and go to state 14
    func                           shift and go to state 17
    varAsig                        shift and go to state 20
    funcString                     shift and go to state 22
    funcReturn                     shift and go to state 24
    finVarAsig                     shift and go to state 25
    varsOps                        shift and go to state 29
    varYVals                       shift and go to state 30

state 2

    (7) sentencia -> RETURN . ;

    ;               shift and go to state 35


state 3

    (22) funcReturn -> funcBool .

    ;               reduce using rule 22 (funcReturn -> funcBool .)


state 4

    (2) g -> ctrl . g
    (1) g -> . sentencia
    (2) g -> . ctrl g
    (3) g -> . empty
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (8) ctrl -> . if
    (9) ctrl -> . loop
    (30) empty -> .
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (53) varAsig -> . ID MULEQ varAsig
    (54) varAsig -> . asig MULEQ varAsig
    (55) varAsig -> . asig MULEQ ID
    (56) varAsig -> . asig MULEQ valores
    (57) varAsig -> . finVarAsig
    (58) varAsig -> . asig
    (13) if -> . IF ( expBool ) bloque else
    (10) loop -> . WHILE ( expBool ) bloque
    (11) loop -> . DO bloque WHILE ( expBool ) ;
    (12) loop -> . FOR ( varAsig ; expBool ; varsOps ) bloque
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (62) asig -> . ID = asig
    (63) asig -> . ID = ID
    (59) finVarAsig -> . ID = valores
    (60) finVarAsig -> . ID MULEQ valores
    (61) finVarAsig -> . ID MULEQ ID
    (43) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( expString )
    (26) funcBool -> . COLINEALES ( vec , vec )

    RETURN          shift and go to state 2
    $end            reduce using rule 30 (empty -> .)
    }               reduce using rule 30 (empty -> .)
    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    ID              shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 6
    DO              shift and go to state 1
    FOR             shift and go to state 16
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 15

    funcBool                       shift and go to state 3
    ctrl                           shift and go to state 4
    funcInt                        shift and go to state 5
    loop                           shift and go to state 7
    vecVal                         shift and go to state 9
    if                             shift and go to state 10
    sentencia                      shift and go to state 11
    asig                           shift and go to state 12
    empty                          shift and go to state 13
    funcVoid                       shift and go to state 14
    func                           shift and go to state 17
    varAsig                        shift and go to state 20
    g                              shift and go to state 36
    funcString                     shift and go to state 22
    funcReturn                     shift and go to state 24
    finVarAsig                     shift and go to state 25
    varsOps                        shift and go to state 29
    varYVals                       shift and go to state 30

state 5

    (20) funcReturn -> funcInt .

    ;               reduce using rule 20 (funcReturn -> funcInt .)


state 6

    (10) loop -> WHILE . ( expBool ) bloque

    (               shift and go to state 37


state 7

    (9) ctrl -> loop .

    RETURN          reduce using rule 9 (ctrl -> loop .)
    MENOSMENOS      reduce using rule 9 (ctrl -> loop .)
    MASMAS          reduce using rule 9 (ctrl -> loop .)
    ID              reduce using rule 9 (ctrl -> loop .)
    IF              reduce using rule 9 (ctrl -> loop .)
    WHILE           reduce using rule 9 (ctrl -> loop .)
    DO              reduce using rule 9 (ctrl -> loop .)
    FOR             reduce using rule 9 (ctrl -> loop .)
    PRINT           reduce using rule 9 (ctrl -> loop .)
    MULTIESCALAR    reduce using rule 9 (ctrl -> loop .)
    LENGTH          reduce using rule 9 (ctrl -> loop .)
    CAPITALIZAR     reduce using rule 9 (ctrl -> loop .)
    COLINEALES      reduce using rule 9 (ctrl -> loop .)
    $end            reduce using rule 9 (ctrl -> loop .)
    }               reduce using rule 9 (ctrl -> loop .)


state 8

    (27) funcVoid -> PRINT . ( valores )

    (               shift and go to state 38


state 9

    (42) varYVals -> vecVal .

    MASMAS          reduce using rule 42 (varYVals -> vecVal .)
    MENOSMENOS      reduce using rule 42 (varYVals -> vecVal .)
    ^               reduce using rule 42 (varYVals -> vecVal .)
    *               reduce using rule 42 (varYVals -> vecVal .)
    /               reduce using rule 42 (varYVals -> vecVal .)
    %               reduce using rule 42 (varYVals -> vecVal .)
    +               reduce using rule 42 (varYVals -> vecVal .)
    -               reduce using rule 42 (varYVals -> vecVal .)
    >               reduce using rule 42 (varYVals -> vecVal .)
    <               reduce using rule 42 (varYVals -> vecVal .)
    )               reduce using rule 42 (varYVals -> vecVal .)
    ;               reduce using rule 42 (varYVals -> vecVal .)
    }               reduce using rule 42 (varYVals -> vecVal .)
    ,               reduce using rule 42 (varYVals -> vecVal .)
    ]               reduce using rule 42 (varYVals -> vecVal .)
    EQEQ            reduce using rule 42 (varYVals -> vecVal .)
    DISTINTO        reduce using rule 42 (varYVals -> vecVal .)
    AND             reduce using rule 42 (varYVals -> vecVal .)
    ?               reduce using rule 42 (varYVals -> vecVal .)
    OR              reduce using rule 42 (varYVals -> vecVal .)
    :               reduce using rule 42 (varYVals -> vecVal .)


state 10

    (8) ctrl -> if .

    RETURN          reduce using rule 8 (ctrl -> if .)
    MENOSMENOS      reduce using rule 8 (ctrl -> if .)
    MASMAS          reduce using rule 8 (ctrl -> if .)
    ID              reduce using rule 8 (ctrl -> if .)
    IF              reduce using rule 8 (ctrl -> if .)
    WHILE           reduce using rule 8 (ctrl -> if .)
    DO              reduce using rule 8 (ctrl -> if .)
    FOR             reduce using rule 8 (ctrl -> if .)
    PRINT           reduce using rule 8 (ctrl -> if .)
    MULTIESCALAR    reduce using rule 8 (ctrl -> if .)
    LENGTH          reduce using rule 8 (ctrl -> if .)
    CAPITALIZAR     reduce using rule 8 (ctrl -> if .)
    COLINEALES      reduce using rule 8 (ctrl -> if .)
    $end            reduce using rule 8 (ctrl -> if .)
    }               reduce using rule 8 (ctrl -> if .)


state 11

    (1) g -> sentencia .

    $end            reduce using rule 1 (g -> sentencia .)
    }               reduce using rule 1 (g -> sentencia .)


state 12

    (54) varAsig -> asig . MULEQ varAsig
    (55) varAsig -> asig . MULEQ ID
    (56) varAsig -> asig . MULEQ valores
    (58) varAsig -> asig .

    MULEQ           shift and go to state 39
    ;               reduce using rule 58 (varAsig -> asig .)


state 13

    (3) g -> empty .

    $end            reduce using rule 3 (g -> empty .)
    }               reduce using rule 3 (g -> empty .)


state 14

    (19) func -> funcVoid .

    ;               reduce using rule 19 (func -> funcVoid .)


state 15

    (26) funcBool -> COLINEALES . ( vec , vec )

    (               shift and go to state 40


state 16

    (12) loop -> FOR . ( varAsig ; expBool ; varsOps ) bloque

    (               shift and go to state 41


state 17

    (5) sentencia -> func . ;

    ;               shift and go to state 42


state 18

    (53) varAsig -> ID . MULEQ varAsig
    (41) varYVals -> ID .
    (62) asig -> ID . = asig
    (63) asig -> ID . = ID
    (59) finVarAsig -> ID . = valores
    (60) finVarAsig -> ID . MULEQ valores
    (61) finVarAsig -> ID . MULEQ ID
    (43) vecVal -> ID . m
    (44) m -> . [ INT ]
    (45) m -> . [ INT ] m

    MULEQ           shift and go to state 44
    MASMAS          reduce using rule 41 (varYVals -> ID .)
    MENOSMENOS      reduce using rule 41 (varYVals -> ID .)
    =               shift and go to state 46
    [               shift and go to state 45

    m                              shift and go to state 43

state 19

    (13) if -> IF . ( expBool ) bloque else

    (               shift and go to state 47


state 20

    (6) sentencia -> varAsig . ;

    ;               shift and go to state 48


state 21

    (0) S' -> g .



state 22

    (21) funcReturn -> funcString .

    ;               reduce using rule 21 (funcReturn -> funcString .)


state 23

    (23) funcInt -> MULTIESCALAR . ( vec , eMat , param )

    (               shift and go to state 49


state 24

    (18) func -> funcReturn .

    ;               reduce using rule 18 (func -> funcReturn .)


state 25

    (57) varAsig -> finVarAsig .

    ;               reduce using rule 57 (varAsig -> finVarAsig .)


state 26

    (25) funcString -> CAPITALIZAR . ( expString )

    (               shift and go to state 50


state 27

    (24) funcInt -> LENGTH . ( vec )

    (               shift and go to state 51


state 28

    (50) varsOps -> MASMAS . varYVals
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (43) vecVal -> . ID m

    ID              shift and go to state 53

    varYVals                       shift and go to state 52
    vecVal                         shift and go to state 9

state 29

    (4) sentencia -> varsOps . ;

    ;               shift and go to state 54


state 30

    (51) varsOps -> varYVals . MASMAS
    (52) varsOps -> varYVals . MENOSMENOS

    MASMAS          shift and go to state 55
    MENOSMENOS      shift and go to state 56


state 31

    (49) varsOps -> MENOSMENOS . varYVals
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (43) vecVal -> . ID m

    ID              shift and go to state 53

    varYVals                       shift and go to state 57
    vecVal                         shift and go to state 9

state 32

    (11) loop -> DO bloque . WHILE ( expBool ) ;

    WHILE           shift and go to state 58


state 33

    (16) bloque -> sentencia . ;

    ;               shift and go to state 59


state 34

    (17) bloque -> { . g }
    (1) g -> . sentencia
    (2) g -> . ctrl g
    (3) g -> . empty
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (8) ctrl -> . if
    (9) ctrl -> . loop
    (30) empty -> .
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (53) varAsig -> . ID MULEQ varAsig
    (54) varAsig -> . asig MULEQ varAsig
    (55) varAsig -> . asig MULEQ ID
    (56) varAsig -> . asig MULEQ valores
    (57) varAsig -> . finVarAsig
    (58) varAsig -> . asig
    (13) if -> . IF ( expBool ) bloque else
    (10) loop -> . WHILE ( expBool ) bloque
    (11) loop -> . DO bloque WHILE ( expBool ) ;
    (12) loop -> . FOR ( varAsig ; expBool ; varsOps ) bloque
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (62) asig -> . ID = asig
    (63) asig -> . ID = ID
    (59) finVarAsig -> . ID = valores
    (60) finVarAsig -> . ID MULEQ valores
    (61) finVarAsig -> . ID MULEQ ID
    (43) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( expString )
    (26) funcBool -> . COLINEALES ( vec , vec )

    RETURN          shift and go to state 2
    }               reduce using rule 30 (empty -> .)
    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    ID              shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 6
    DO              shift and go to state 1
    FOR             shift and go to state 16
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 15

    funcBool                       shift and go to state 3
    ctrl                           shift and go to state 4
    funcInt                        shift and go to state 5
    loop                           shift and go to state 7
    vecVal                         shift and go to state 9
    if                             shift and go to state 10
    sentencia                      shift and go to state 11
    asig                           shift and go to state 12
    empty                          shift and go to state 13
    funcVoid                       shift and go to state 14
    func                           shift and go to state 17
    varAsig                        shift and go to state 20
    g                              shift and go to state 60
    funcString                     shift and go to state 22
    funcReturn                     shift and go to state 24
    finVarAsig                     shift and go to state 25
    varsOps                        shift and go to state 29
    varYVals                       shift and go to state 30

state 35

    (7) sentencia -> RETURN ; .

    $end            reduce using rule 7 (sentencia -> RETURN ; .)
    ;               reduce using rule 7 (sentencia -> RETURN ; .)
    }               reduce using rule 7 (sentencia -> RETURN ; .)


state 36

    (2) g -> ctrl g .

    $end            reduce using rule 2 (g -> ctrl g .)
    }               reduce using rule 2 (g -> ctrl g .)


state 37

    (10) loop -> WHILE ( . expBool ) bloque
    (86) expBool -> . or ? expBool : expBool
    (87) expBool -> . or
    (88) or -> . or OR and
    (89) or -> . and
    (90) and -> . and AND eq
    (91) and -> . eq
    (92) eq -> . eq EQEQ tBool
    (93) eq -> . eq DISTINTO tBool
    (94) eq -> . mayor
    (95) mayor -> . tCompare > tCompare
    (96) mayor -> . menor
    (105) tCompare -> . eMat
    (106) tCompare -> . varsOps
    (107) tCompare -> . varYVals
    (97) menor -> . tCompare < tCompare
    (98) menor -> . not
    (64) eMat -> . eMat + p
    (65) eMat -> . eMat - p
    (66) eMat -> . p
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (99) not -> . NOT not
    (100) not -> . tBool
    (67) p -> . p * exp
    (68) p -> . p / exp
    (69) p -> . p % exp
    (70) p -> . exp
    (43) vecVal -> . ID m
    (101) tBool -> . ( expBool )
    (102) tBool -> . BOOL
    (103) tBool -> . varYVals
    (104) tBool -> . funcBool
    (71) exp -> . exp ^ iSing
    (72) exp -> . iSing
    (26) funcBool -> . COLINEALES ( vec , vec )
    (73) iSing -> . - paren
    (74) iSing -> . + paren
    (75) iSing -> . paren
    (76) paren -> . ( eMat )
    (77) paren -> . INT
    (78) paren -> . varYVals
    (79) paren -> . FLOAT
    (80) paren -> . varsOps
    (81) paren -> . funcInt
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )

    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    ID              shift and go to state 53
    NOT             shift and go to state 82
    (               shift and go to state 68
    BOOL            shift and go to state 71
    COLINEALES      shift and go to state 15
    -               shift and go to state 70
    +               shift and go to state 69
    INT             shift and go to state 76
    FLOAT           shift and go to state 77
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27

    and                            shift and go to state 61
    funcBool                       shift and go to state 62
    funcInt                        shift and go to state 63
    menor                          shift and go to state 64
    eq                             shift and go to state 65
    mayor                          shift and go to state 66
    eMat                           shift and go to state 67
    vecVal                         shift and go to state 9
    paren                          shift and go to state 74
    iSing                          shift and go to state 72
    tCompare                       shift and go to state 73
    not                            shift and go to state 75
    p                              shift and go to state 79
    varsOps                        shift and go to state 80
    exp                            shift and go to state 81
    tBool                          shift and go to state 83
    varYVals                       shift and go to state 84
    or                             shift and go to state 78
    expBool                        shift and go to state 85

state 38

    (27) funcVoid -> PRINT ( . valores )
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . expString
    (37) valores -> . varYVals
    (38) valores -> . funcReturn
    (39) valores -> . reg
    (40) valores -> . ID . ID
    (64) eMat -> . eMat + p
    (65) eMat -> . eMat - p
    (66) eMat -> . p
    (86) expBool -> . or ? expBool : expBool
    (87) expBool -> . or
    (82) expString -> . expString + STRING
    (83) expString -> . STRING
    (84) expString -> . varYVals
    (85) expString -> . funcString
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (46) reg -> . { campos }
    (67) p -> . p * exp
    (68) p -> . p / exp
    (69) p -> . p % exp
    (70) p -> . exp
    (88) or -> . or OR and
    (89) or -> . and
    (25) funcString -> . CAPITALIZAR ( expString )
    (43) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (26) funcBool -> . COLINEALES ( vec , vec )
    (71) exp -> . exp ^ iSing
    (72) exp -> . iSing
    (90) and -> . and AND eq
    (91) and -> . eq
    (73) iSing -> . - paren
    (74) iSing -> . + paren
    (75) iSing -> . paren
    (92) eq -> . eq EQEQ tBool
    (93) eq -> . eq DISTINTO tBool
    (94) eq -> . mayor
    (76) paren -> . ( eMat )
    (77) paren -> . INT
    (78) paren -> . varYVals
    (79) paren -> . FLOAT
    (80) paren -> . varsOps
    (81) paren -> . funcInt
    (95) mayor -> . tCompare > tCompare
    (96) mayor -> . menor
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (105) tCompare -> . eMat
    (106) tCompare -> . varsOps
    (107) tCompare -> . varYVals
    (97) menor -> . tCompare < tCompare
    (98) menor -> . not
    (99) not -> . NOT not
    (100) not -> . tBool
    (101) tBool -> . ( expBool )
    (102) tBool -> . BOOL
    (103) tBool -> . varYVals
    (104) tBool -> . funcBool

    ID              shift and go to state 94
    STRING          shift and go to state 92
    {               shift and go to state 98
    CAPITALIZAR     shift and go to state 26
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27
    COLINEALES      shift and go to state 15
    -               shift and go to state 70
    +               shift and go to state 69
    (               shift and go to state 89
    INT             shift and go to state 76
    FLOAT           shift and go to state 77
    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    NOT             shift and go to state 82
    BOOL            shift and go to state 71

    and                            shift and go to state 61
    funcBool                       shift and go to state 86
    funcInt                        shift and go to state 87
    menor                          shift and go to state 64
    eq                             shift and go to state 65
    vecVal                         shift and go to state 9
    eMat                           shift and go to state 88
    mayor                          shift and go to state 66
    paren                          shift and go to state 74
    reg                            shift and go to state 90
    varsOps                        shift and go to state 91
    expString                      shift and go to state 93
    tCompare                       shift and go to state 73
    not                            shift and go to state 75
    funcString                     shift and go to state 95
    funcReturn                     shift and go to state 96
    valores                        shift and go to state 97
    p                              shift and go to state 79
    iSing                          shift and go to state 72
    exp                            shift and go to state 81
    tBool                          shift and go to state 83
    varYVals                       shift and go to state 99
    or                             shift and go to state 78
    expBool                        shift and go to state 100

state 39

    (54) varAsig -> asig MULEQ . varAsig
    (55) varAsig -> asig MULEQ . ID
    (56) varAsig -> asig MULEQ . valores
    (53) varAsig -> . ID MULEQ varAsig
    (54) varAsig -> . asig MULEQ varAsig
    (55) varAsig -> . asig MULEQ ID
    (56) varAsig -> . asig MULEQ valores
    (57) varAsig -> . finVarAsig
    (58) varAsig -> . asig
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . expString
    (37) valores -> . varYVals
    (38) valores -> . funcReturn
    (39) valores -> . reg
    (40) valores -> . ID . ID
    (62) asig -> . ID = asig
    (63) asig -> . ID = ID
    (59) finVarAsig -> . ID = valores
    (60) finVarAsig -> . ID MULEQ valores
    (61) finVarAsig -> . ID MULEQ ID
    (64) eMat -> . eMat + p
    (65) eMat -> . eMat - p
    (66) eMat -> . p
    (86) expBool -> . or ? expBool : expBool
    (87) expBool -> . or
    (82) expString -> . expString + STRING
    (83) expString -> . STRING
    (84) expString -> . varYVals
    (85) expString -> . funcString
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (46) reg -> . { campos }
    (67) p -> . p * exp
    (68) p -> . p / exp
    (69) p -> . p % exp
    (70) p -> . exp
    (88) or -> . or OR and
    (89) or -> . and
    (25) funcString -> . CAPITALIZAR ( expString )
    (43) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (26) funcBool -> . COLINEALES ( vec , vec )
    (71) exp -> . exp ^ iSing
    (72) exp -> . iSing
    (90) and -> . and AND eq
    (91) and -> . eq
    (73) iSing -> . - paren
    (74) iSing -> . + paren
    (75) iSing -> . paren
    (92) eq -> . eq EQEQ tBool
    (93) eq -> . eq DISTINTO tBool
    (94) eq -> . mayor
    (76) paren -> . ( eMat )
    (77) paren -> . INT
    (78) paren -> . varYVals
    (79) paren -> . FLOAT
    (80) paren -> . varsOps
    (81) paren -> . funcInt
    (95) mayor -> . tCompare > tCompare
    (96) mayor -> . menor
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (105) tCompare -> . eMat
    (106) tCompare -> . varsOps
    (107) tCompare -> . varYVals
    (97) menor -> . tCompare < tCompare
    (98) menor -> . not
    (99) not -> . NOT not
    (100) not -> . tBool
    (101) tBool -> . ( expBool )
    (102) tBool -> . BOOL
    (103) tBool -> . varYVals
    (104) tBool -> . funcBool

    ID              shift and go to state 101
    STRING          shift and go to state 92
    {               shift and go to state 98
    CAPITALIZAR     shift and go to state 26
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27
    COLINEALES      shift and go to state 15
    -               shift and go to state 70
    +               shift and go to state 69
    (               shift and go to state 89
    INT             shift and go to state 76
    FLOAT           shift and go to state 77
    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    NOT             shift and go to state 82
    BOOL            shift and go to state 71

    and                            shift and go to state 61
    funcBool                       shift and go to state 86
    finVarAsig                     shift and go to state 25
    funcInt                        shift and go to state 87
    menor                          shift and go to state 64
    eq                             shift and go to state 65
    vecVal                         shift and go to state 9
    eMat                           shift and go to state 88
    asig                           shift and go to state 12
    mayor                          shift and go to state 66
    paren                          shift and go to state 74
    reg                            shift and go to state 90
    varsOps                        shift and go to state 91
    expString                      shift and go to state 93
    tCompare                       shift and go to state 73
    not                            shift and go to state 75
    varAsig                        shift and go to state 102
    funcString                     shift and go to state 95
    funcReturn                     shift and go to state 96
    valores                        shift and go to state 103
    p                              shift and go to state 79
    iSing                          shift and go to state 72
    exp                            shift and go to state 81
    tBool                          shift and go to state 83
    varYVals                       shift and go to state 99
    or                             shift and go to state 78
    expBool                        shift and go to state 100

state 40

    (26) funcBool -> COLINEALES ( . vec , vec )
    (31) vec -> . [ elem ]

    [               shift and go to state 105

    vec                            shift and go to state 104

state 41

    (12) loop -> FOR ( . varAsig ; expBool ; varsOps ) bloque
    (53) varAsig -> . ID MULEQ varAsig
    (54) varAsig -> . asig MULEQ varAsig
    (55) varAsig -> . asig MULEQ ID
    (56) varAsig -> . asig MULEQ valores
    (57) varAsig -> . finVarAsig
    (58) varAsig -> . asig
    (62) asig -> . ID = asig
    (63) asig -> . ID = ID
    (59) finVarAsig -> . ID = valores
    (60) finVarAsig -> . ID MULEQ valores
    (61) finVarAsig -> . ID MULEQ ID

    ID              shift and go to state 107

    varAsig                        shift and go to state 106
    asig                           shift and go to state 12
    finVarAsig                     shift and go to state 25

state 42

    (5) sentencia -> func ; .

    $end            reduce using rule 5 (sentencia -> func ; .)
    ;               reduce using rule 5 (sentencia -> func ; .)
    }               reduce using rule 5 (sentencia -> func ; .)


state 43

    (43) vecVal -> ID m .

    MASMAS          reduce using rule 43 (vecVal -> ID m .)
    MENOSMENOS      reduce using rule 43 (vecVal -> ID m .)
    ^               reduce using rule 43 (vecVal -> ID m .)
    *               reduce using rule 43 (vecVal -> ID m .)
    /               reduce using rule 43 (vecVal -> ID m .)
    %               reduce using rule 43 (vecVal -> ID m .)
    )               reduce using rule 43 (vecVal -> ID m .)
    +               reduce using rule 43 (vecVal -> ID m .)
    -               reduce using rule 43 (vecVal -> ID m .)
    >               reduce using rule 43 (vecVal -> ID m .)
    <               reduce using rule 43 (vecVal -> ID m .)
    EQEQ            reduce using rule 43 (vecVal -> ID m .)
    DISTINTO        reduce using rule 43 (vecVal -> ID m .)
    AND             reduce using rule 43 (vecVal -> ID m .)
    ?               reduce using rule 43 (vecVal -> ID m .)
    OR              reduce using rule 43 (vecVal -> ID m .)
    ;               reduce using rule 43 (vecVal -> ID m .)
    }               reduce using rule 43 (vecVal -> ID m .)
    ,               reduce using rule 43 (vecVal -> ID m .)
    ]               reduce using rule 43 (vecVal -> ID m .)
    :               reduce using rule 43 (vecVal -> ID m .)


state 44

    (53) varAsig -> ID MULEQ . varAsig
    (60) finVarAsig -> ID MULEQ . valores
    (61) finVarAsig -> ID MULEQ . ID
    (53) varAsig -> . ID MULEQ varAsig
    (54) varAsig -> . asig MULEQ varAsig
    (55) varAsig -> . asig MULEQ ID
    (56) varAsig -> . asig MULEQ valores
    (57) varAsig -> . finVarAsig
    (58) varAsig -> . asig
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . expString
    (37) valores -> . varYVals
    (38) valores -> . funcReturn
    (39) valores -> . reg
    (40) valores -> . ID . ID
    (62) asig -> . ID = asig
    (63) asig -> . ID = ID
    (59) finVarAsig -> . ID = valores
    (60) finVarAsig -> . ID MULEQ valores
    (61) finVarAsig -> . ID MULEQ ID
    (64) eMat -> . eMat + p
    (65) eMat -> . eMat - p
    (66) eMat -> . p
    (86) expBool -> . or ? expBool : expBool
    (87) expBool -> . or
    (82) expString -> . expString + STRING
    (83) expString -> . STRING
    (84) expString -> . varYVals
    (85) expString -> . funcString
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (46) reg -> . { campos }
    (67) p -> . p * exp
    (68) p -> . p / exp
    (69) p -> . p % exp
    (70) p -> . exp
    (88) or -> . or OR and
    (89) or -> . and
    (25) funcString -> . CAPITALIZAR ( expString )
    (43) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (26) funcBool -> . COLINEALES ( vec , vec )
    (71) exp -> . exp ^ iSing
    (72) exp -> . iSing
    (90) and -> . and AND eq
    (91) and -> . eq
    (73) iSing -> . - paren
    (74) iSing -> . + paren
    (75) iSing -> . paren
    (92) eq -> . eq EQEQ tBool
    (93) eq -> . eq DISTINTO tBool
    (94) eq -> . mayor
    (76) paren -> . ( eMat )
    (77) paren -> . INT
    (78) paren -> . varYVals
    (79) paren -> . FLOAT
    (80) paren -> . varsOps
    (81) paren -> . funcInt
    (95) mayor -> . tCompare > tCompare
    (96) mayor -> . menor
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (105) tCompare -> . eMat
    (106) tCompare -> . varsOps
    (107) tCompare -> . varYVals
    (97) menor -> . tCompare < tCompare
    (98) menor -> . not
    (99) not -> . NOT not
    (100) not -> . tBool
    (101) tBool -> . ( expBool )
    (102) tBool -> . BOOL
    (103) tBool -> . varYVals
    (104) tBool -> . funcBool

    ID              shift and go to state 108
    STRING          shift and go to state 92
    {               shift and go to state 98
    CAPITALIZAR     shift and go to state 26
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27
    COLINEALES      shift and go to state 15
    -               shift and go to state 70
    +               shift and go to state 69
    (               shift and go to state 89
    INT             shift and go to state 76
    FLOAT           shift and go to state 77
    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    NOT             shift and go to state 82
    BOOL            shift and go to state 71

    and                            shift and go to state 61
    funcBool                       shift and go to state 86
    finVarAsig                     shift and go to state 25
    funcInt                        shift and go to state 87
    menor                          shift and go to state 64
    eq                             shift and go to state 65
    vecVal                         shift and go to state 9
    eMat                           shift and go to state 88
    asig                           shift and go to state 12
    mayor                          shift and go to state 66
    paren                          shift and go to state 74
    reg                            shift and go to state 90
    varsOps                        shift and go to state 91
    expString                      shift and go to state 93
    tCompare                       shift and go to state 73
    not                            shift and go to state 75
    varAsig                        shift and go to state 109
    funcString                     shift and go to state 95
    funcReturn                     shift and go to state 96
    valores                        shift and go to state 110
    p                              shift and go to state 79
    iSing                          shift and go to state 72
    exp                            shift and go to state 81
    tBool                          shift and go to state 83
    varYVals                       shift and go to state 99
    or                             shift and go to state 78
    expBool                        shift and go to state 100

state 45

    (44) m -> [ . INT ]
    (45) m -> [ . INT ] m

    INT             shift and go to state 111


state 46

    (62) asig -> ID = . asig
    (63) asig -> ID = . ID
    (59) finVarAsig -> ID = . valores
    (62) asig -> . ID = asig
    (63) asig -> . ID = ID
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . expString
    (37) valores -> . varYVals
    (38) valores -> . funcReturn
    (39) valores -> . reg
    (40) valores -> . ID . ID
    (64) eMat -> . eMat + p
    (65) eMat -> . eMat - p
    (66) eMat -> . p
    (86) expBool -> . or ? expBool : expBool
    (87) expBool -> . or
    (82) expString -> . expString + STRING
    (83) expString -> . STRING
    (84) expString -> . varYVals
    (85) expString -> . funcString
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (46) reg -> . { campos }
    (67) p -> . p * exp
    (68) p -> . p / exp
    (69) p -> . p % exp
    (70) p -> . exp
    (88) or -> . or OR and
    (89) or -> . and
    (25) funcString -> . CAPITALIZAR ( expString )
    (43) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (26) funcBool -> . COLINEALES ( vec , vec )
    (71) exp -> . exp ^ iSing
    (72) exp -> . iSing
    (90) and -> . and AND eq
    (91) and -> . eq
    (73) iSing -> . - paren
    (74) iSing -> . + paren
    (75) iSing -> . paren
    (92) eq -> . eq EQEQ tBool
    (93) eq -> . eq DISTINTO tBool
    (94) eq -> . mayor
    (76) paren -> . ( eMat )
    (77) paren -> . INT
    (78) paren -> . varYVals
    (79) paren -> . FLOAT
    (80) paren -> . varsOps
    (81) paren -> . funcInt
    (95) mayor -> . tCompare > tCompare
    (96) mayor -> . menor
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (105) tCompare -> . eMat
    (106) tCompare -> . varsOps
    (107) tCompare -> . varYVals
    (97) menor -> . tCompare < tCompare
    (98) menor -> . not
    (99) not -> . NOT not
    (100) not -> . tBool
    (101) tBool -> . ( expBool )
    (102) tBool -> . BOOL
    (103) tBool -> . varYVals
    (104) tBool -> . funcBool

    ID              shift and go to state 113
    STRING          shift and go to state 92
    {               shift and go to state 98
    CAPITALIZAR     shift and go to state 26
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27
    COLINEALES      shift and go to state 15
    -               shift and go to state 70
    +               shift and go to state 69
    (               shift and go to state 89
    INT             shift and go to state 76
    FLOAT           shift and go to state 77
    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    NOT             shift and go to state 82
    BOOL            shift and go to state 71

    and                            shift and go to state 61
    funcBool                       shift and go to state 86
    funcInt                        shift and go to state 87
    menor                          shift and go to state 64
    eq                             shift and go to state 65
    vecVal                         shift and go to state 9
    eMat                           shift and go to state 88
    asig                           shift and go to state 112
    mayor                          shift and go to state 66
    paren                          shift and go to state 74
    reg                            shift and go to state 90
    varsOps                        shift and go to state 91
    expString                      shift and go to state 93
    tCompare                       shift and go to state 73
    not                            shift and go to state 75
    funcString                     shift and go to state 95
    funcReturn                     shift and go to state 96
    valores                        shift and go to state 114
    p                              shift and go to state 79
    iSing                          shift and go to state 72
    exp                            shift and go to state 81
    tBool                          shift and go to state 83
    varYVals                       shift and go to state 99
    or                             shift and go to state 78
    expBool                        shift and go to state 100

state 47

    (13) if -> IF ( . expBool ) bloque else
    (86) expBool -> . or ? expBool : expBool
    (87) expBool -> . or
    (88) or -> . or OR and
    (89) or -> . and
    (90) and -> . and AND eq
    (91) and -> . eq
    (92) eq -> . eq EQEQ tBool
    (93) eq -> . eq DISTINTO tBool
    (94) eq -> . mayor
    (95) mayor -> . tCompare > tCompare
    (96) mayor -> . menor
    (105) tCompare -> . eMat
    (106) tCompare -> . varsOps
    (107) tCompare -> . varYVals
    (97) menor -> . tCompare < tCompare
    (98) menor -> . not
    (64) eMat -> . eMat + p
    (65) eMat -> . eMat - p
    (66) eMat -> . p
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (99) not -> . NOT not
    (100) not -> . tBool
    (67) p -> . p * exp
    (68) p -> . p / exp
    (69) p -> . p % exp
    (70) p -> . exp
    (43) vecVal -> . ID m
    (101) tBool -> . ( expBool )
    (102) tBool -> . BOOL
    (103) tBool -> . varYVals
    (104) tBool -> . funcBool
    (71) exp -> . exp ^ iSing
    (72) exp -> . iSing
    (26) funcBool -> . COLINEALES ( vec , vec )
    (73) iSing -> . - paren
    (74) iSing -> . + paren
    (75) iSing -> . paren
    (76) paren -> . ( eMat )
    (77) paren -> . INT
    (78) paren -> . varYVals
    (79) paren -> . FLOAT
    (80) paren -> . varsOps
    (81) paren -> . funcInt
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )

    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    ID              shift and go to state 53
    NOT             shift and go to state 82
    (               shift and go to state 68
    BOOL            shift and go to state 71
    COLINEALES      shift and go to state 15
    -               shift and go to state 70
    +               shift and go to state 69
    INT             shift and go to state 76
    FLOAT           shift and go to state 77
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27

    and                            shift and go to state 61
    funcBool                       shift and go to state 62
    funcInt                        shift and go to state 63
    menor                          shift and go to state 64
    eq                             shift and go to state 65
    mayor                          shift and go to state 66
    eMat                           shift and go to state 67
    vecVal                         shift and go to state 9
    paren                          shift and go to state 74
    varsOps                        shift and go to state 80
    tCompare                       shift and go to state 73
    not                            shift and go to state 75
    p                              shift and go to state 79
    iSing                          shift and go to state 72
    exp                            shift and go to state 81
    tBool                          shift and go to state 83
    varYVals                       shift and go to state 84
    or                             shift and go to state 78
    expBool                        shift and go to state 115

state 48

    (6) sentencia -> varAsig ; .

    $end            reduce using rule 6 (sentencia -> varAsig ; .)
    ;               reduce using rule 6 (sentencia -> varAsig ; .)
    }               reduce using rule 6 (sentencia -> varAsig ; .)


state 49

    (23) funcInt -> MULTIESCALAR ( . vec , eMat , param )
    (31) vec -> . [ elem ]

    [               shift and go to state 105

    vec                            shift and go to state 116

state 50

    (25) funcString -> CAPITALIZAR ( . expString )
    (82) expString -> . expString + STRING
    (83) expString -> . STRING
    (84) expString -> . varYVals
    (85) expString -> . funcString
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (25) funcString -> . CAPITALIZAR ( expString )
    (43) vecVal -> . ID m

    STRING          shift and go to state 92
    ID              shift and go to state 53
    CAPITALIZAR     shift and go to state 26

    funcString                     shift and go to state 118
    varYVals                       shift and go to state 119
    vecVal                         shift and go to state 9
    expString                      shift and go to state 117

state 51

    (24) funcInt -> LENGTH ( . vec )
    (31) vec -> . [ elem ]

    [               shift and go to state 105

    vec                            shift and go to state 120

state 52

    (50) varsOps -> MASMAS varYVals .

    ^               reduce using rule 50 (varsOps -> MASMAS varYVals .)
    *               reduce using rule 50 (varsOps -> MASMAS varYVals .)
    /               reduce using rule 50 (varsOps -> MASMAS varYVals .)
    %               reduce using rule 50 (varsOps -> MASMAS varYVals .)
    +               reduce using rule 50 (varsOps -> MASMAS varYVals .)
    -               reduce using rule 50 (varsOps -> MASMAS varYVals .)
    >               reduce using rule 50 (varsOps -> MASMAS varYVals .)
    <               reduce using rule 50 (varsOps -> MASMAS varYVals .)
    )               reduce using rule 50 (varsOps -> MASMAS varYVals .)
    ;               reduce using rule 50 (varsOps -> MASMAS varYVals .)
    }               reduce using rule 50 (varsOps -> MASMAS varYVals .)
    ,               reduce using rule 50 (varsOps -> MASMAS varYVals .)
    ]               reduce using rule 50 (varsOps -> MASMAS varYVals .)
    EQEQ            reduce using rule 50 (varsOps -> MASMAS varYVals .)
    DISTINTO        reduce using rule 50 (varsOps -> MASMAS varYVals .)
    AND             reduce using rule 50 (varsOps -> MASMAS varYVals .)
    ?               reduce using rule 50 (varsOps -> MASMAS varYVals .)
    OR              reduce using rule 50 (varsOps -> MASMAS varYVals .)
    :               reduce using rule 50 (varsOps -> MASMAS varYVals .)


state 53

    (41) varYVals -> ID .
    (43) vecVal -> ID . m
    (44) m -> . [ INT ]
    (45) m -> . [ INT ] m

    MASMAS          reduce using rule 41 (varYVals -> ID .)
    MENOSMENOS      reduce using rule 41 (varYVals -> ID .)
    ^               reduce using rule 41 (varYVals -> ID .)
    *               reduce using rule 41 (varYVals -> ID .)
    /               reduce using rule 41 (varYVals -> ID .)
    %               reduce using rule 41 (varYVals -> ID .)
    +               reduce using rule 41 (varYVals -> ID .)
    -               reduce using rule 41 (varYVals -> ID .)
    >               reduce using rule 41 (varYVals -> ID .)
    <               reduce using rule 41 (varYVals -> ID .)
    )               reduce using rule 41 (varYVals -> ID .)
    ;               reduce using rule 41 (varYVals -> ID .)
    }               reduce using rule 41 (varYVals -> ID .)
    ,               reduce using rule 41 (varYVals -> ID .)
    ]               reduce using rule 41 (varYVals -> ID .)
    EQEQ            reduce using rule 41 (varYVals -> ID .)
    DISTINTO        reduce using rule 41 (varYVals -> ID .)
    AND             reduce using rule 41 (varYVals -> ID .)
    ?               reduce using rule 41 (varYVals -> ID .)
    OR              reduce using rule 41 (varYVals -> ID .)
    :               reduce using rule 41 (varYVals -> ID .)
    [               shift and go to state 45

    m                              shift and go to state 43

state 54

    (4) sentencia -> varsOps ; .

    $end            reduce using rule 4 (sentencia -> varsOps ; .)
    ;               reduce using rule 4 (sentencia -> varsOps ; .)
    }               reduce using rule 4 (sentencia -> varsOps ; .)


state 55

    (51) varsOps -> varYVals MASMAS .

    ^               reduce using rule 51 (varsOps -> varYVals MASMAS .)
    *               reduce using rule 51 (varsOps -> varYVals MASMAS .)
    /               reduce using rule 51 (varsOps -> varYVals MASMAS .)
    %               reduce using rule 51 (varsOps -> varYVals MASMAS .)
    +               reduce using rule 51 (varsOps -> varYVals MASMAS .)
    -               reduce using rule 51 (varsOps -> varYVals MASMAS .)
    >               reduce using rule 51 (varsOps -> varYVals MASMAS .)
    <               reduce using rule 51 (varsOps -> varYVals MASMAS .)
    )               reduce using rule 51 (varsOps -> varYVals MASMAS .)
    ;               reduce using rule 51 (varsOps -> varYVals MASMAS .)
    }               reduce using rule 51 (varsOps -> varYVals MASMAS .)
    ,               reduce using rule 51 (varsOps -> varYVals MASMAS .)
    ]               reduce using rule 51 (varsOps -> varYVals MASMAS .)
    EQEQ            reduce using rule 51 (varsOps -> varYVals MASMAS .)
    DISTINTO        reduce using rule 51 (varsOps -> varYVals MASMAS .)
    AND             reduce using rule 51 (varsOps -> varYVals MASMAS .)
    ?               reduce using rule 51 (varsOps -> varYVals MASMAS .)
    OR              reduce using rule 51 (varsOps -> varYVals MASMAS .)
    :               reduce using rule 51 (varsOps -> varYVals MASMAS .)


state 56

    (52) varsOps -> varYVals MENOSMENOS .

    ^               reduce using rule 52 (varsOps -> varYVals MENOSMENOS .)
    *               reduce using rule 52 (varsOps -> varYVals MENOSMENOS .)
    /               reduce using rule 52 (varsOps -> varYVals MENOSMENOS .)
    %               reduce using rule 52 (varsOps -> varYVals MENOSMENOS .)
    +               reduce using rule 52 (varsOps -> varYVals MENOSMENOS .)
    -               reduce using rule 52 (varsOps -> varYVals MENOSMENOS .)
    >               reduce using rule 52 (varsOps -> varYVals MENOSMENOS .)
    <               reduce using rule 52 (varsOps -> varYVals MENOSMENOS .)
    )               reduce using rule 52 (varsOps -> varYVals MENOSMENOS .)
    ;               reduce using rule 52 (varsOps -> varYVals MENOSMENOS .)
    }               reduce using rule 52 (varsOps -> varYVals MENOSMENOS .)
    ,               reduce using rule 52 (varsOps -> varYVals MENOSMENOS .)
    ]               reduce using rule 52 (varsOps -> varYVals MENOSMENOS .)
    EQEQ            reduce using rule 52 (varsOps -> varYVals MENOSMENOS .)
    DISTINTO        reduce using rule 52 (varsOps -> varYVals MENOSMENOS .)
    AND             reduce using rule 52 (varsOps -> varYVals MENOSMENOS .)
    ?               reduce using rule 52 (varsOps -> varYVals MENOSMENOS .)
    OR              reduce using rule 52 (varsOps -> varYVals MENOSMENOS .)
    :               reduce using rule 52 (varsOps -> varYVals MENOSMENOS .)


state 57

    (49) varsOps -> MENOSMENOS varYVals .

    ^               reduce using rule 49 (varsOps -> MENOSMENOS varYVals .)
    *               reduce using rule 49 (varsOps -> MENOSMENOS varYVals .)
    /               reduce using rule 49 (varsOps -> MENOSMENOS varYVals .)
    %               reduce using rule 49 (varsOps -> MENOSMENOS varYVals .)
    +               reduce using rule 49 (varsOps -> MENOSMENOS varYVals .)
    -               reduce using rule 49 (varsOps -> MENOSMENOS varYVals .)
    >               reduce using rule 49 (varsOps -> MENOSMENOS varYVals .)
    <               reduce using rule 49 (varsOps -> MENOSMENOS varYVals .)
    )               reduce using rule 49 (varsOps -> MENOSMENOS varYVals .)
    ;               reduce using rule 49 (varsOps -> MENOSMENOS varYVals .)
    }               reduce using rule 49 (varsOps -> MENOSMENOS varYVals .)
    ,               reduce using rule 49 (varsOps -> MENOSMENOS varYVals .)
    ]               reduce using rule 49 (varsOps -> MENOSMENOS varYVals .)
    EQEQ            reduce using rule 49 (varsOps -> MENOSMENOS varYVals .)
    DISTINTO        reduce using rule 49 (varsOps -> MENOSMENOS varYVals .)
    AND             reduce using rule 49 (varsOps -> MENOSMENOS varYVals .)
    ?               reduce using rule 49 (varsOps -> MENOSMENOS varYVals .)
    OR              reduce using rule 49 (varsOps -> MENOSMENOS varYVals .)
    :               reduce using rule 49 (varsOps -> MENOSMENOS varYVals .)


state 58

    (11) loop -> DO bloque WHILE . ( expBool ) ;

    (               shift and go to state 121


state 59

    (16) bloque -> sentencia ; .

    ELSE            reduce using rule 16 (bloque -> sentencia ; .)
    RETURN          reduce using rule 16 (bloque -> sentencia ; .)
    MENOSMENOS      reduce using rule 16 (bloque -> sentencia ; .)
    MASMAS          reduce using rule 16 (bloque -> sentencia ; .)
    ID              reduce using rule 16 (bloque -> sentencia ; .)
    IF              reduce using rule 16 (bloque -> sentencia ; .)
    WHILE           reduce using rule 16 (bloque -> sentencia ; .)
    DO              reduce using rule 16 (bloque -> sentencia ; .)
    FOR             reduce using rule 16 (bloque -> sentencia ; .)
    PRINT           reduce using rule 16 (bloque -> sentencia ; .)
    MULTIESCALAR    reduce using rule 16 (bloque -> sentencia ; .)
    LENGTH          reduce using rule 16 (bloque -> sentencia ; .)
    CAPITALIZAR     reduce using rule 16 (bloque -> sentencia ; .)
    COLINEALES      reduce using rule 16 (bloque -> sentencia ; .)
    $end            reduce using rule 16 (bloque -> sentencia ; .)
    }               reduce using rule 16 (bloque -> sentencia ; .)


state 60

    (17) bloque -> { g . }

    }               shift and go to state 122


state 61

    (89) or -> and .
    (90) and -> and . AND eq

    ?               reduce using rule 89 (or -> and .)
    OR              reduce using rule 89 (or -> and .)
    )               reduce using rule 89 (or -> and .)
    ;               reduce using rule 89 (or -> and .)
    }               reduce using rule 89 (or -> and .)
    ,               reduce using rule 89 (or -> and .)
    ]               reduce using rule 89 (or -> and .)
    :               reduce using rule 89 (or -> and .)
    AND             shift and go to state 123


state 62

    (104) tBool -> funcBool .

    EQEQ            reduce using rule 104 (tBool -> funcBool .)
    DISTINTO        reduce using rule 104 (tBool -> funcBool .)
    AND             reduce using rule 104 (tBool -> funcBool .)
    ?               reduce using rule 104 (tBool -> funcBool .)
    OR              reduce using rule 104 (tBool -> funcBool .)
    )               reduce using rule 104 (tBool -> funcBool .)
    ;               reduce using rule 104 (tBool -> funcBool .)
    :               reduce using rule 104 (tBool -> funcBool .)
    }               reduce using rule 104 (tBool -> funcBool .)
    ,               reduce using rule 104 (tBool -> funcBool .)
    ]               reduce using rule 104 (tBool -> funcBool .)


state 63

    (81) paren -> funcInt .

    ^               reduce using rule 81 (paren -> funcInt .)
    *               reduce using rule 81 (paren -> funcInt .)
    /               reduce using rule 81 (paren -> funcInt .)
    %               reduce using rule 81 (paren -> funcInt .)
    ,               reduce using rule 81 (paren -> funcInt .)
    +               reduce using rule 81 (paren -> funcInt .)
    -               reduce using rule 81 (paren -> funcInt .)
    EQEQ            reduce using rule 81 (paren -> funcInt .)
    DISTINTO        reduce using rule 81 (paren -> funcInt .)
    AND             reduce using rule 81 (paren -> funcInt .)
    ?               reduce using rule 81 (paren -> funcInt .)
    OR              reduce using rule 81 (paren -> funcInt .)
    )               reduce using rule 81 (paren -> funcInt .)
    ;               reduce using rule 81 (paren -> funcInt .)
    }               reduce using rule 81 (paren -> funcInt .)
    ]               reduce using rule 81 (paren -> funcInt .)
    :               reduce using rule 81 (paren -> funcInt .)
    >               reduce using rule 81 (paren -> funcInt .)
    <               reduce using rule 81 (paren -> funcInt .)


state 64

    (96) mayor -> menor .

    EQEQ            reduce using rule 96 (mayor -> menor .)
    DISTINTO        reduce using rule 96 (mayor -> menor .)
    AND             reduce using rule 96 (mayor -> menor .)
    ?               reduce using rule 96 (mayor -> menor .)
    OR              reduce using rule 96 (mayor -> menor .)
    )               reduce using rule 96 (mayor -> menor .)
    }               reduce using rule 96 (mayor -> menor .)
    ;               reduce using rule 96 (mayor -> menor .)
    ,               reduce using rule 96 (mayor -> menor .)
    ]               reduce using rule 96 (mayor -> menor .)
    :               reduce using rule 96 (mayor -> menor .)


state 65

    (91) and -> eq .
    (92) eq -> eq . EQEQ tBool
    (93) eq -> eq . DISTINTO tBool

    AND             reduce using rule 91 (and -> eq .)
    ?               reduce using rule 91 (and -> eq .)
    OR              reduce using rule 91 (and -> eq .)
    ;               reduce using rule 91 (and -> eq .)
    )               reduce using rule 91 (and -> eq .)
    :               reduce using rule 91 (and -> eq .)
    }               reduce using rule 91 (and -> eq .)
    ,               reduce using rule 91 (and -> eq .)
    ]               reduce using rule 91 (and -> eq .)
    EQEQ            shift and go to state 124
    DISTINTO        shift and go to state 125


state 66

    (94) eq -> mayor .

    EQEQ            reduce using rule 94 (eq -> mayor .)
    DISTINTO        reduce using rule 94 (eq -> mayor .)
    AND             reduce using rule 94 (eq -> mayor .)
    ?               reduce using rule 94 (eq -> mayor .)
    OR              reduce using rule 94 (eq -> mayor .)
    ;               reduce using rule 94 (eq -> mayor .)
    ,               reduce using rule 94 (eq -> mayor .)
    )               reduce using rule 94 (eq -> mayor .)
    }               reduce using rule 94 (eq -> mayor .)
    ]               reduce using rule 94 (eq -> mayor .)
    :               reduce using rule 94 (eq -> mayor .)


state 67

    (105) tCompare -> eMat .
    (64) eMat -> eMat . + p
    (65) eMat -> eMat . - p

    >               reduce using rule 105 (tCompare -> eMat .)
    <               reduce using rule 105 (tCompare -> eMat .)
    EQEQ            reduce using rule 105 (tCompare -> eMat .)
    DISTINTO        reduce using rule 105 (tCompare -> eMat .)
    AND             reduce using rule 105 (tCompare -> eMat .)
    ?               reduce using rule 105 (tCompare -> eMat .)
    OR              reduce using rule 105 (tCompare -> eMat .)
    )               reduce using rule 105 (tCompare -> eMat .)
    ;               reduce using rule 105 (tCompare -> eMat .)
    }               reduce using rule 105 (tCompare -> eMat .)
    ,               reduce using rule 105 (tCompare -> eMat .)
    ]               reduce using rule 105 (tCompare -> eMat .)
    :               reduce using rule 105 (tCompare -> eMat .)
    +               shift and go to state 126
    -               shift and go to state 127


state 68

    (101) tBool -> ( . expBool )
    (76) paren -> ( . eMat )
    (86) expBool -> . or ? expBool : expBool
    (87) expBool -> . or
    (64) eMat -> . eMat + p
    (65) eMat -> . eMat - p
    (66) eMat -> . p
    (88) or -> . or OR and
    (89) or -> . and
    (67) p -> . p * exp
    (68) p -> . p / exp
    (69) p -> . p % exp
    (70) p -> . exp
    (90) and -> . and AND eq
    (91) and -> . eq
    (71) exp -> . exp ^ iSing
    (72) exp -> . iSing
    (92) eq -> . eq EQEQ tBool
    (93) eq -> . eq DISTINTO tBool
    (94) eq -> . mayor
    (73) iSing -> . - paren
    (74) iSing -> . + paren
    (75) iSing -> . paren
    (95) mayor -> . tCompare > tCompare
    (96) mayor -> . menor
    (76) paren -> . ( eMat )
    (77) paren -> . INT
    (78) paren -> . varYVals
    (79) paren -> . FLOAT
    (80) paren -> . varsOps
    (81) paren -> . funcInt
    (105) tCompare -> . eMat
    (106) tCompare -> . varsOps
    (107) tCompare -> . varYVals
    (97) menor -> . tCompare < tCompare
    (98) menor -> . not
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (99) not -> . NOT not
    (100) not -> . tBool
    (43) vecVal -> . ID m
    (101) tBool -> . ( expBool )
    (102) tBool -> . BOOL
    (103) tBool -> . varYVals
    (104) tBool -> . funcBool
    (26) funcBool -> . COLINEALES ( vec , vec )

    -               shift and go to state 70
    +               shift and go to state 69
    (               shift and go to state 89
    INT             shift and go to state 76
    FLOAT           shift and go to state 77
    ID              shift and go to state 53
    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27
    NOT             shift and go to state 82
    BOOL            shift and go to state 71
    COLINEALES      shift and go to state 15

    and                            shift and go to state 61
    funcBool                       shift and go to state 62
    funcInt                        shift and go to state 63
    menor                          shift and go to state 64
    eq                             shift and go to state 65
    mayor                          shift and go to state 66
    eMat                           shift and go to state 128
    vecVal                         shift and go to state 9
    paren                          shift and go to state 74
    varsOps                        shift and go to state 91
    tCompare                       shift and go to state 73
    not                            shift and go to state 75
    p                              shift and go to state 79
    iSing                          shift and go to state 72
    exp                            shift and go to state 81
    tBool                          shift and go to state 83
    varYVals                       shift and go to state 129
    or                             shift and go to state 78
    expBool                        shift and go to state 130

state 69

    (74) iSing -> + . paren
    (76) paren -> . ( eMat )
    (77) paren -> . INT
    (78) paren -> . varYVals
    (79) paren -> . FLOAT
    (80) paren -> . varsOps
    (81) paren -> . funcInt
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (43) vecVal -> . ID m

    (               shift and go to state 131
    INT             shift and go to state 76
    FLOAT           shift and go to state 77
    ID              shift and go to state 53
    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27

    funcInt                        shift and go to state 63
    varsOps                        shift and go to state 132
    paren                          shift and go to state 133
    varYVals                       shift and go to state 134
    vecVal                         shift and go to state 9

state 70

    (73) iSing -> - . paren
    (76) paren -> . ( eMat )
    (77) paren -> . INT
    (78) paren -> . varYVals
    (79) paren -> . FLOAT
    (80) paren -> . varsOps
    (81) paren -> . funcInt
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (43) vecVal -> . ID m

    (               shift and go to state 131
    INT             shift and go to state 76
    FLOAT           shift and go to state 77
    ID              shift and go to state 53
    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27

    funcInt                        shift and go to state 63
    varsOps                        shift and go to state 132
    paren                          shift and go to state 135
    varYVals                       shift and go to state 134
    vecVal                         shift and go to state 9

state 71

    (102) tBool -> BOOL .

    EQEQ            reduce using rule 102 (tBool -> BOOL .)
    DISTINTO        reduce using rule 102 (tBool -> BOOL .)
    AND             reduce using rule 102 (tBool -> BOOL .)
    ?               reduce using rule 102 (tBool -> BOOL .)
    OR              reduce using rule 102 (tBool -> BOOL .)
    )               reduce using rule 102 (tBool -> BOOL .)
    }               reduce using rule 102 (tBool -> BOOL .)
    ;               reduce using rule 102 (tBool -> BOOL .)
    :               reduce using rule 102 (tBool -> BOOL .)
    ,               reduce using rule 102 (tBool -> BOOL .)
    ]               reduce using rule 102 (tBool -> BOOL .)


state 72

    (72) exp -> iSing .

    ^               reduce using rule 72 (exp -> iSing .)
    *               reduce using rule 72 (exp -> iSing .)
    /               reduce using rule 72 (exp -> iSing .)
    %               reduce using rule 72 (exp -> iSing .)
    )               reduce using rule 72 (exp -> iSing .)
    +               reduce using rule 72 (exp -> iSing .)
    -               reduce using rule 72 (exp -> iSing .)
    >               reduce using rule 72 (exp -> iSing .)
    <               reduce using rule 72 (exp -> iSing .)
    ;               reduce using rule 72 (exp -> iSing .)
    }               reduce using rule 72 (exp -> iSing .)
    ,               reduce using rule 72 (exp -> iSing .)
    ]               reduce using rule 72 (exp -> iSing .)
    EQEQ            reduce using rule 72 (exp -> iSing .)
    DISTINTO        reduce using rule 72 (exp -> iSing .)
    AND             reduce using rule 72 (exp -> iSing .)
    ?               reduce using rule 72 (exp -> iSing .)
    OR              reduce using rule 72 (exp -> iSing .)
    :               reduce using rule 72 (exp -> iSing .)


state 73

    (95) mayor -> tCompare . > tCompare
    (97) menor -> tCompare . < tCompare

    >               shift and go to state 137
    <               shift and go to state 136


state 74

    (75) iSing -> paren .

    ^               reduce using rule 75 (iSing -> paren .)
    *               reduce using rule 75 (iSing -> paren .)
    /               reduce using rule 75 (iSing -> paren .)
    %               reduce using rule 75 (iSing -> paren .)
    +               reduce using rule 75 (iSing -> paren .)
    -               reduce using rule 75 (iSing -> paren .)
    EQEQ            reduce using rule 75 (iSing -> paren .)
    DISTINTO        reduce using rule 75 (iSing -> paren .)
    AND             reduce using rule 75 (iSing -> paren .)
    ?               reduce using rule 75 (iSing -> paren .)
    OR              reduce using rule 75 (iSing -> paren .)
    )               reduce using rule 75 (iSing -> paren .)
    ;               reduce using rule 75 (iSing -> paren .)
    }               reduce using rule 75 (iSing -> paren .)
    ,               reduce using rule 75 (iSing -> paren .)
    ]               reduce using rule 75 (iSing -> paren .)
    :               reduce using rule 75 (iSing -> paren .)
    >               reduce using rule 75 (iSing -> paren .)
    <               reduce using rule 75 (iSing -> paren .)


state 75

    (98) menor -> not .

    EQEQ            reduce using rule 98 (menor -> not .)
    DISTINTO        reduce using rule 98 (menor -> not .)
    AND             reduce using rule 98 (menor -> not .)
    ?               reduce using rule 98 (menor -> not .)
    OR              reduce using rule 98 (menor -> not .)
    ,               reduce using rule 98 (menor -> not .)
    :               reduce using rule 98 (menor -> not .)
    )               reduce using rule 98 (menor -> not .)
    ;               reduce using rule 98 (menor -> not .)
    }               reduce using rule 98 (menor -> not .)
    ]               reduce using rule 98 (menor -> not .)


state 76

    (77) paren -> INT .

    ^               reduce using rule 77 (paren -> INT .)
    *               reduce using rule 77 (paren -> INT .)
    /               reduce using rule 77 (paren -> INT .)
    %               reduce using rule 77 (paren -> INT .)
    ,               reduce using rule 77 (paren -> INT .)
    +               reduce using rule 77 (paren -> INT .)
    -               reduce using rule 77 (paren -> INT .)
    EQEQ            reduce using rule 77 (paren -> INT .)
    DISTINTO        reduce using rule 77 (paren -> INT .)
    AND             reduce using rule 77 (paren -> INT .)
    ?               reduce using rule 77 (paren -> INT .)
    OR              reduce using rule 77 (paren -> INT .)
    )               reduce using rule 77 (paren -> INT .)
    ;               reduce using rule 77 (paren -> INT .)
    }               reduce using rule 77 (paren -> INT .)
    ]               reduce using rule 77 (paren -> INT .)
    :               reduce using rule 77 (paren -> INT .)
    >               reduce using rule 77 (paren -> INT .)
    <               reduce using rule 77 (paren -> INT .)


state 77

    (79) paren -> FLOAT .

    ^               reduce using rule 79 (paren -> FLOAT .)
    *               reduce using rule 79 (paren -> FLOAT .)
    /               reduce using rule 79 (paren -> FLOAT .)
    %               reduce using rule 79 (paren -> FLOAT .)
    ,               reduce using rule 79 (paren -> FLOAT .)
    +               reduce using rule 79 (paren -> FLOAT .)
    -               reduce using rule 79 (paren -> FLOAT .)
    EQEQ            reduce using rule 79 (paren -> FLOAT .)
    DISTINTO        reduce using rule 79 (paren -> FLOAT .)
    AND             reduce using rule 79 (paren -> FLOAT .)
    ?               reduce using rule 79 (paren -> FLOAT .)
    OR              reduce using rule 79 (paren -> FLOAT .)
    )               reduce using rule 79 (paren -> FLOAT .)
    ;               reduce using rule 79 (paren -> FLOAT .)
    }               reduce using rule 79 (paren -> FLOAT .)
    ]               reduce using rule 79 (paren -> FLOAT .)
    :               reduce using rule 79 (paren -> FLOAT .)
    >               reduce using rule 79 (paren -> FLOAT .)
    <               reduce using rule 79 (paren -> FLOAT .)


state 78

    (86) expBool -> or . ? expBool : expBool
    (87) expBool -> or .
    (88) or -> or . OR and

    ?               shift and go to state 139
    )               reduce using rule 87 (expBool -> or .)
    ;               reduce using rule 87 (expBool -> or .)
    }               reduce using rule 87 (expBool -> or .)
    ,               reduce using rule 87 (expBool -> or .)
    ]               reduce using rule 87 (expBool -> or .)
    :               reduce using rule 87 (expBool -> or .)
    OR              shift and go to state 138


state 79

    (66) eMat -> p .
    (67) p -> p . * exp
    (68) p -> p . / exp
    (69) p -> p . % exp

    +               reduce using rule 66 (eMat -> p .)
    -               reduce using rule 66 (eMat -> p .)
    }               reduce using rule 66 (eMat -> p .)
    >               reduce using rule 66 (eMat -> p .)
    <               reduce using rule 66 (eMat -> p .)
    )               reduce using rule 66 (eMat -> p .)
    ;               reduce using rule 66 (eMat -> p .)
    EQEQ            reduce using rule 66 (eMat -> p .)
    DISTINTO        reduce using rule 66 (eMat -> p .)
    AND             reduce using rule 66 (eMat -> p .)
    ?               reduce using rule 66 (eMat -> p .)
    OR              reduce using rule 66 (eMat -> p .)
    ,               reduce using rule 66 (eMat -> p .)
    ]               reduce using rule 66 (eMat -> p .)
    :               reduce using rule 66 (eMat -> p .)
    *               shift and go to state 140
    /               shift and go to state 142
    %               shift and go to state 141


state 80

    (106) tCompare -> varsOps .
    (80) paren -> varsOps .

  ! reduce/reduce conflict for EQEQ resolved using rule 80 (paren -> varsOps .)
  ! reduce/reduce conflict for DISTINTO resolved using rule 80 (paren -> varsOps .)
  ! reduce/reduce conflict for AND resolved using rule 80 (paren -> varsOps .)
  ! reduce/reduce conflict for ? resolved using rule 80 (paren -> varsOps .)
  ! reduce/reduce conflict for OR resolved using rule 80 (paren -> varsOps .)
  ! reduce/reduce conflict for ) resolved using rule 80 (paren -> varsOps .)
  ! reduce/reduce conflict for ; resolved using rule 80 (paren -> varsOps .)
  ! reduce/reduce conflict for } resolved using rule 80 (paren -> varsOps .)
  ! reduce/reduce conflict for , resolved using rule 80 (paren -> varsOps .)
  ! reduce/reduce conflict for ] resolved using rule 80 (paren -> varsOps .)
  ! reduce/reduce conflict for : resolved using rule 80 (paren -> varsOps .)
  ! reduce/reduce conflict for > resolved using rule 80 (paren -> varsOps .)
  ! reduce/reduce conflict for < resolved using rule 80 (paren -> varsOps .)
    ^               reduce using rule 80 (paren -> varsOps .)
    *               reduce using rule 80 (paren -> varsOps .)
    /               reduce using rule 80 (paren -> varsOps .)
    %               reduce using rule 80 (paren -> varsOps .)
    +               reduce using rule 80 (paren -> varsOps .)
    -               reduce using rule 80 (paren -> varsOps .)
    EQEQ            reduce using rule 80 (paren -> varsOps .)
    DISTINTO        reduce using rule 80 (paren -> varsOps .)
    AND             reduce using rule 80 (paren -> varsOps .)
    ?               reduce using rule 80 (paren -> varsOps .)
    OR              reduce using rule 80 (paren -> varsOps .)
    )               reduce using rule 80 (paren -> varsOps .)
    ;               reduce using rule 80 (paren -> varsOps .)
    }               reduce using rule 80 (paren -> varsOps .)
    ,               reduce using rule 80 (paren -> varsOps .)
    ]               reduce using rule 80 (paren -> varsOps .)
    :               reduce using rule 80 (paren -> varsOps .)
    >               reduce using rule 80 (paren -> varsOps .)
    <               reduce using rule 80 (paren -> varsOps .)

  ! >               [ reduce using rule 106 (tCompare -> varsOps .) ]
  ! <               [ reduce using rule 106 (tCompare -> varsOps .) ]
  ! EQEQ            [ reduce using rule 106 (tCompare -> varsOps .) ]
  ! DISTINTO        [ reduce using rule 106 (tCompare -> varsOps .) ]
  ! AND             [ reduce using rule 106 (tCompare -> varsOps .) ]
  ! ?               [ reduce using rule 106 (tCompare -> varsOps .) ]
  ! OR              [ reduce using rule 106 (tCompare -> varsOps .) ]
  ! )               [ reduce using rule 106 (tCompare -> varsOps .) ]
  ! ;               [ reduce using rule 106 (tCompare -> varsOps .) ]
  ! }               [ reduce using rule 106 (tCompare -> varsOps .) ]
  ! ,               [ reduce using rule 106 (tCompare -> varsOps .) ]
  ! ]               [ reduce using rule 106 (tCompare -> varsOps .) ]
  ! :               [ reduce using rule 106 (tCompare -> varsOps .) ]


state 81

    (70) p -> exp .
    (71) exp -> exp . ^ iSing

    *               reduce using rule 70 (p -> exp .)
    /               reduce using rule 70 (p -> exp .)
    %               reduce using rule 70 (p -> exp .)
    +               reduce using rule 70 (p -> exp .)
    -               reduce using rule 70 (p -> exp .)
    EQEQ            reduce using rule 70 (p -> exp .)
    DISTINTO        reduce using rule 70 (p -> exp .)
    AND             reduce using rule 70 (p -> exp .)
    ?               reduce using rule 70 (p -> exp .)
    OR              reduce using rule 70 (p -> exp .)
    )               reduce using rule 70 (p -> exp .)
    ;               reduce using rule 70 (p -> exp .)
    }               reduce using rule 70 (p -> exp .)
    ,               reduce using rule 70 (p -> exp .)
    ]               reduce using rule 70 (p -> exp .)
    :               reduce using rule 70 (p -> exp .)
    >               reduce using rule 70 (p -> exp .)
    <               reduce using rule 70 (p -> exp .)
    ^               shift and go to state 143


state 82

    (99) not -> NOT . not
    (99) not -> . NOT not
    (100) not -> . tBool
    (101) tBool -> . ( expBool )
    (102) tBool -> . BOOL
    (103) tBool -> . varYVals
    (104) tBool -> . funcBool
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (26) funcBool -> . COLINEALES ( vec , vec )
    (43) vecVal -> . ID m

    NOT             shift and go to state 82
    (               shift and go to state 144
    BOOL            shift and go to state 71
    ID              shift and go to state 53
    COLINEALES      shift and go to state 15

    funcBool                       shift and go to state 62
    not                            shift and go to state 145
    tBool                          shift and go to state 83
    varYVals                       shift and go to state 146
    vecVal                         shift and go to state 9

state 83

    (100) not -> tBool .

    EQEQ            reduce using rule 100 (not -> tBool .)
    DISTINTO        reduce using rule 100 (not -> tBool .)
    AND             reduce using rule 100 (not -> tBool .)
    ?               reduce using rule 100 (not -> tBool .)
    OR              reduce using rule 100 (not -> tBool .)
    )               reduce using rule 100 (not -> tBool .)
    ;               reduce using rule 100 (not -> tBool .)
    }               reduce using rule 100 (not -> tBool .)
    ,               reduce using rule 100 (not -> tBool .)
    ]               reduce using rule 100 (not -> tBool .)
    :               reduce using rule 100 (not -> tBool .)


state 84

    (107) tCompare -> varYVals .
    (51) varsOps -> varYVals . MASMAS
    (52) varsOps -> varYVals . MENOSMENOS
    (103) tBool -> varYVals .
    (78) paren -> varYVals .

  ! reduce/reduce conflict for > resolved using rule 78 (paren -> varYVals .)
  ! reduce/reduce conflict for < resolved using rule 78 (paren -> varYVals .)
    MASMAS          shift and go to state 55
    MENOSMENOS      shift and go to state 56
    EQEQ            reduce using rule 103 (tBool -> varYVals .)
    DISTINTO        reduce using rule 103 (tBool -> varYVals .)
    AND             reduce using rule 103 (tBool -> varYVals .)
    ?               reduce using rule 103 (tBool -> varYVals .)
    OR              reduce using rule 103 (tBool -> varYVals .)
    )               reduce using rule 103 (tBool -> varYVals .)
    ;               reduce using rule 103 (tBool -> varYVals .)
    :               reduce using rule 103 (tBool -> varYVals .)
    }               reduce using rule 103 (tBool -> varYVals .)
    ,               reduce using rule 103 (tBool -> varYVals .)
    ]               reduce using rule 103 (tBool -> varYVals .)
    ^               reduce using rule 78 (paren -> varYVals .)
    *               reduce using rule 78 (paren -> varYVals .)
    /               reduce using rule 78 (paren -> varYVals .)
    %               reduce using rule 78 (paren -> varYVals .)
    +               reduce using rule 78 (paren -> varYVals .)
    -               reduce using rule 78 (paren -> varYVals .)
    >               reduce using rule 78 (paren -> varYVals .)
    <               reduce using rule 78 (paren -> varYVals .)

  ! >               [ reduce using rule 107 (tCompare -> varYVals .) ]
  ! <               [ reduce using rule 107 (tCompare -> varYVals .) ]


state 85

    (10) loop -> WHILE ( expBool . ) bloque

    )               shift and go to state 147


state 86

    (22) funcReturn -> funcBool .
    (104) tBool -> funcBool .

  ! reduce/reduce conflict for } resolved using rule 22 (funcReturn -> funcBool .)
  ! reduce/reduce conflict for ) resolved using rule 22 (funcReturn -> funcBool .)
  ! reduce/reduce conflict for ; resolved using rule 22 (funcReturn -> funcBool .)
  ! reduce/reduce conflict for , resolved using rule 22 (funcReturn -> funcBool .)
  ! reduce/reduce conflict for ] resolved using rule 22 (funcReturn -> funcBool .)
    )               reduce using rule 22 (funcReturn -> funcBool .)
    }               reduce using rule 22 (funcReturn -> funcBool .)
    ,               reduce using rule 22 (funcReturn -> funcBool .)
    ]               reduce using rule 22 (funcReturn -> funcBool .)
    ;               reduce using rule 22 (funcReturn -> funcBool .)
    EQEQ            reduce using rule 104 (tBool -> funcBool .)
    DISTINTO        reduce using rule 104 (tBool -> funcBool .)
    AND             reduce using rule 104 (tBool -> funcBool .)
    ?               reduce using rule 104 (tBool -> funcBool .)
    OR              reduce using rule 104 (tBool -> funcBool .)

  ! }               [ reduce using rule 104 (tBool -> funcBool .) ]
  ! )               [ reduce using rule 104 (tBool -> funcBool .) ]
  ! ;               [ reduce using rule 104 (tBool -> funcBool .) ]
  ! ,               [ reduce using rule 104 (tBool -> funcBool .) ]
  ! ]               [ reduce using rule 104 (tBool -> funcBool .) ]


state 87

    (20) funcReturn -> funcInt .
    (81) paren -> funcInt .

  ! reduce/reduce conflict for } resolved using rule 20 (funcReturn -> funcInt .)
  ! reduce/reduce conflict for ; resolved using rule 20 (funcReturn -> funcInt .)
  ! reduce/reduce conflict for ) resolved using rule 20 (funcReturn -> funcInt .)
  ! reduce/reduce conflict for , resolved using rule 20 (funcReturn -> funcInt .)
  ! reduce/reduce conflict for ] resolved using rule 20 (funcReturn -> funcInt .)
    )               reduce using rule 20 (funcReturn -> funcInt .)
    }               reduce using rule 20 (funcReturn -> funcInt .)
    ,               reduce using rule 20 (funcReturn -> funcInt .)
    ]               reduce using rule 20 (funcReturn -> funcInt .)
    ;               reduce using rule 20 (funcReturn -> funcInt .)
    ^               reduce using rule 81 (paren -> funcInt .)
    *               reduce using rule 81 (paren -> funcInt .)
    /               reduce using rule 81 (paren -> funcInt .)
    %               reduce using rule 81 (paren -> funcInt .)
    +               reduce using rule 81 (paren -> funcInt .)
    -               reduce using rule 81 (paren -> funcInt .)
    >               reduce using rule 81 (paren -> funcInt .)
    <               reduce using rule 81 (paren -> funcInt .)

  ! }               [ reduce using rule 81 (paren -> funcInt .) ]
  ! ;               [ reduce using rule 81 (paren -> funcInt .) ]
  ! )               [ reduce using rule 81 (paren -> funcInt .) ]
  ! ,               [ reduce using rule 81 (paren -> funcInt .) ]
  ! ]               [ reduce using rule 81 (paren -> funcInt .) ]


state 88

    (34) valores -> eMat .
    (64) eMat -> eMat . + p
    (65) eMat -> eMat . - p
    (105) tCompare -> eMat .

    }               reduce using rule 34 (valores -> eMat .)
    )               reduce using rule 34 (valores -> eMat .)
    ,               reduce using rule 34 (valores -> eMat .)
    ]               reduce using rule 34 (valores -> eMat .)
    ;               reduce using rule 34 (valores -> eMat .)
    +               shift and go to state 126
    -               shift and go to state 127
    >               reduce using rule 105 (tCompare -> eMat .)
    <               reduce using rule 105 (tCompare -> eMat .)


state 89

    (76) paren -> ( . eMat )
    (101) tBool -> ( . expBool )
    (64) eMat -> . eMat + p
    (65) eMat -> . eMat - p
    (66) eMat -> . p
    (86) expBool -> . or ? expBool : expBool
    (87) expBool -> . or
    (67) p -> . p * exp
    (68) p -> . p / exp
    (69) p -> . p % exp
    (70) p -> . exp
    (88) or -> . or OR and
    (89) or -> . and
    (71) exp -> . exp ^ iSing
    (72) exp -> . iSing
    (90) and -> . and AND eq
    (91) and -> . eq
    (73) iSing -> . - paren
    (74) iSing -> . + paren
    (75) iSing -> . paren
    (92) eq -> . eq EQEQ tBool
    (93) eq -> . eq DISTINTO tBool
    (94) eq -> . mayor
    (76) paren -> . ( eMat )
    (77) paren -> . INT
    (78) paren -> . varYVals
    (79) paren -> . FLOAT
    (80) paren -> . varsOps
    (81) paren -> . funcInt
    (95) mayor -> . tCompare > tCompare
    (96) mayor -> . menor
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (105) tCompare -> . eMat
    (106) tCompare -> . varsOps
    (107) tCompare -> . varYVals
    (97) menor -> . tCompare < tCompare
    (98) menor -> . not
    (43) vecVal -> . ID m
    (99) not -> . NOT not
    (100) not -> . tBool
    (101) tBool -> . ( expBool )
    (102) tBool -> . BOOL
    (103) tBool -> . varYVals
    (104) tBool -> . funcBool
    (26) funcBool -> . COLINEALES ( vec , vec )

    -               shift and go to state 70
    +               shift and go to state 69
    (               shift and go to state 89
    INT             shift and go to state 76
    FLOAT           shift and go to state 77
    ID              shift and go to state 53
    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27
    NOT             shift and go to state 82
    BOOL            shift and go to state 71
    COLINEALES      shift and go to state 15

    and                            shift and go to state 61
    funcBool                       shift and go to state 62
    funcInt                        shift and go to state 63
    menor                          shift and go to state 64
    eq                             shift and go to state 65
    mayor                          shift and go to state 66
    eMat                           shift and go to state 128
    vecVal                         shift and go to state 9
    paren                          shift and go to state 74
    varsOps                        shift and go to state 91
    tCompare                       shift and go to state 73
    not                            shift and go to state 75
    p                              shift and go to state 79
    iSing                          shift and go to state 72
    exp                            shift and go to state 81
    tBool                          shift and go to state 83
    varYVals                       shift and go to state 148
    or                             shift and go to state 78
    expBool                        shift and go to state 130

state 90

    (39) valores -> reg .

    }               reduce using rule 39 (valores -> reg .)
    )               reduce using rule 39 (valores -> reg .)
    ,               reduce using rule 39 (valores -> reg .)
    ]               reduce using rule 39 (valores -> reg .)
    ;               reduce using rule 39 (valores -> reg .)


state 91

    (80) paren -> varsOps .
    (106) tCompare -> varsOps .

  ! reduce/reduce conflict for > resolved using rule 80 (paren -> varsOps .)
  ! reduce/reduce conflict for < resolved using rule 80 (paren -> varsOps .)
    ^               reduce using rule 80 (paren -> varsOps .)
    *               reduce using rule 80 (paren -> varsOps .)
    /               reduce using rule 80 (paren -> varsOps .)
    %               reduce using rule 80 (paren -> varsOps .)
    +               reduce using rule 80 (paren -> varsOps .)
    -               reduce using rule 80 (paren -> varsOps .)
    }               reduce using rule 80 (paren -> varsOps .)
    >               reduce using rule 80 (paren -> varsOps .)
    <               reduce using rule 80 (paren -> varsOps .)
    ;               reduce using rule 80 (paren -> varsOps .)
    )               reduce using rule 80 (paren -> varsOps .)
    ,               reduce using rule 80 (paren -> varsOps .)
    ]               reduce using rule 80 (paren -> varsOps .)

  ! >               [ reduce using rule 106 (tCompare -> varsOps .) ]
  ! <               [ reduce using rule 106 (tCompare -> varsOps .) ]


state 92

    (83) expString -> STRING .

    +               reduce using rule 83 (expString -> STRING .)
    ,               reduce using rule 83 (expString -> STRING .)
    ;               reduce using rule 83 (expString -> STRING .)
    }               reduce using rule 83 (expString -> STRING .)
    ]               reduce using rule 83 (expString -> STRING .)
    )               reduce using rule 83 (expString -> STRING .)


state 93

    (36) valores -> expString .
    (82) expString -> expString . + STRING

    }               reduce using rule 36 (valores -> expString .)
    )               reduce using rule 36 (valores -> expString .)
    ,               reduce using rule 36 (valores -> expString .)
    ]               reduce using rule 36 (valores -> expString .)
    ;               reduce using rule 36 (valores -> expString .)
    +               shift and go to state 149


state 94

    (40) valores -> ID . . ID
    (41) varYVals -> ID .
    (43) vecVal -> ID . m
    (44) m -> . [ INT ]
    (45) m -> . [ INT ] m

    .               shift and go to state 150
    MASMAS          reduce using rule 41 (varYVals -> ID .)
    MENOSMENOS      reduce using rule 41 (varYVals -> ID .)
    ,               reduce using rule 41 (varYVals -> ID .)
    +               reduce using rule 41 (varYVals -> ID .)
    ^               reduce using rule 41 (varYVals -> ID .)
    *               reduce using rule 41 (varYVals -> ID .)
    /               reduce using rule 41 (varYVals -> ID .)
    %               reduce using rule 41 (varYVals -> ID .)
    -               reduce using rule 41 (varYVals -> ID .)
    >               reduce using rule 41 (varYVals -> ID .)
    <               reduce using rule 41 (varYVals -> ID .)
    EQEQ            reduce using rule 41 (varYVals -> ID .)
    DISTINTO        reduce using rule 41 (varYVals -> ID .)
    AND             reduce using rule 41 (varYVals -> ID .)
    ?               reduce using rule 41 (varYVals -> ID .)
    OR              reduce using rule 41 (varYVals -> ID .)
    ]               reduce using rule 41 (varYVals -> ID .)
    )               reduce using rule 41 (varYVals -> ID .)
    [               shift and go to state 45

    m                              shift and go to state 43

state 95

    (85) expString -> funcString .
    (21) funcReturn -> funcString .

  ! reduce/reduce conflict for ) resolved using rule 21 (funcReturn -> funcString .)
  ! reduce/reduce conflict for } resolved using rule 21 (funcReturn -> funcString .)
  ! reduce/reduce conflict for , resolved using rule 21 (funcReturn -> funcString .)
  ! reduce/reduce conflict for ] resolved using rule 21 (funcReturn -> funcString .)
  ! reduce/reduce conflict for ; resolved using rule 21 (funcReturn -> funcString .)
    +               reduce using rule 85 (expString -> funcString .)
    )               reduce using rule 21 (funcReturn -> funcString .)
    }               reduce using rule 21 (funcReturn -> funcString .)
    ,               reduce using rule 21 (funcReturn -> funcString .)
    ]               reduce using rule 21 (funcReturn -> funcString .)
    ;               reduce using rule 21 (funcReturn -> funcString .)

  ! ,               [ reduce using rule 85 (expString -> funcString .) ]
  ! ;               [ reduce using rule 85 (expString -> funcString .) ]
  ! }               [ reduce using rule 85 (expString -> funcString .) ]
  ! ]               [ reduce using rule 85 (expString -> funcString .) ]
  ! )               [ reduce using rule 85 (expString -> funcString .) ]


state 96

    (38) valores -> funcReturn .

    }               reduce using rule 38 (valores -> funcReturn .)
    )               reduce using rule 38 (valores -> funcReturn .)
    ,               reduce using rule 38 (valores -> funcReturn .)
    ]               reduce using rule 38 (valores -> funcReturn .)
    ;               reduce using rule 38 (valores -> funcReturn .)


state 97

    (27) funcVoid -> PRINT ( valores . )

    )               shift and go to state 151


state 98

    (46) reg -> { . campos }
    (47) campos -> . ID : valores , campos
    (48) campos -> . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . expString
    (37) valores -> . varYVals
    (38) valores -> . funcReturn
    (39) valores -> . reg
    (40) valores -> . ID . ID
    (64) eMat -> . eMat + p
    (65) eMat -> . eMat - p
    (66) eMat -> . p
    (86) expBool -> . or ? expBool : expBool
    (87) expBool -> . or
    (82) expString -> . expString + STRING
    (83) expString -> . STRING
    (84) expString -> . varYVals
    (85) expString -> . funcString
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (46) reg -> . { campos }
    (67) p -> . p * exp
    (68) p -> . p / exp
    (69) p -> . p % exp
    (70) p -> . exp
    (88) or -> . or OR and
    (89) or -> . and
    (25) funcString -> . CAPITALIZAR ( expString )
    (43) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (26) funcBool -> . COLINEALES ( vec , vec )
    (71) exp -> . exp ^ iSing
    (72) exp -> . iSing
    (90) and -> . and AND eq
    (91) and -> . eq
    (73) iSing -> . - paren
    (74) iSing -> . + paren
    (75) iSing -> . paren
    (92) eq -> . eq EQEQ tBool
    (93) eq -> . eq DISTINTO tBool
    (94) eq -> . mayor
    (76) paren -> . ( eMat )
    (77) paren -> . INT
    (78) paren -> . varYVals
    (79) paren -> . FLOAT
    (80) paren -> . varsOps
    (81) paren -> . funcInt
    (95) mayor -> . tCompare > tCompare
    (96) mayor -> . menor
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (105) tCompare -> . eMat
    (106) tCompare -> . varsOps
    (107) tCompare -> . varYVals
    (97) menor -> . tCompare < tCompare
    (98) menor -> . not
    (99) not -> . NOT not
    (100) not -> . tBool
    (101) tBool -> . ( expBool )
    (102) tBool -> . BOOL
    (103) tBool -> . varYVals
    (104) tBool -> . funcBool

    ID              shift and go to state 153
    STRING          shift and go to state 92
    {               shift and go to state 98
    CAPITALIZAR     shift and go to state 26
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27
    COLINEALES      shift and go to state 15
    -               shift and go to state 70
    +               shift and go to state 69
    (               shift and go to state 89
    INT             shift and go to state 76
    FLOAT           shift and go to state 77
    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    NOT             shift and go to state 82
    BOOL            shift and go to state 71

    and                            shift and go to state 61
    funcBool                       shift and go to state 86
    funcInt                        shift and go to state 87
    menor                          shift and go to state 64
    eq                             shift and go to state 65
    vecVal                         shift and go to state 9
    eMat                           shift and go to state 88
    mayor                          shift and go to state 66
    paren                          shift and go to state 74
    reg                            shift and go to state 90
    varsOps                        shift and go to state 91
    expString                      shift and go to state 93
    tCompare                       shift and go to state 73
    campos                         shift and go to state 152
    not                            shift and go to state 75
    funcString                     shift and go to state 95
    funcReturn                     shift and go to state 96
    valores                        shift and go to state 154
    p                              shift and go to state 79
    iSing                          shift and go to state 72
    exp                            shift and go to state 81
    tBool                          shift and go to state 83
    varYVals                       shift and go to state 99
    or                             shift and go to state 78
    expBool                        shift and go to state 100

state 99

    (37) valores -> varYVals .
    (84) expString -> varYVals .
    (78) paren -> varYVals .
    (51) varsOps -> varYVals . MASMAS
    (52) varsOps -> varYVals . MENOSMENOS
    (107) tCompare -> varYVals .
    (103) tBool -> varYVals .

  ! reduce/reduce conflict for , resolved using rule 37 (valores -> varYVals .)
  ! reduce/reduce conflict for ; resolved using rule 37 (valores -> varYVals .)
  ! reduce/reduce conflict for } resolved using rule 37 (valores -> varYVals .)
  ! reduce/reduce conflict for ] resolved using rule 37 (valores -> varYVals .)
  ! reduce/reduce conflict for ) resolved using rule 37 (valores -> varYVals .)
  ! reduce/reduce conflict for + resolved using rule 78 (paren -> varYVals .)
  ! reduce/reduce conflict for } resolved using rule 37 (valores -> varYVals .)
  ! reduce/reduce conflict for ; resolved using rule 37 (valores -> varYVals .)
  ! reduce/reduce conflict for ) resolved using rule 37 (valores -> varYVals .)
  ! reduce/reduce conflict for , resolved using rule 37 (valores -> varYVals .)
  ! reduce/reduce conflict for ] resolved using rule 37 (valores -> varYVals .)
  ! reduce/reduce conflict for > resolved using rule 78 (paren -> varYVals .)
  ! reduce/reduce conflict for < resolved using rule 78 (paren -> varYVals .)
  ! reduce/reduce conflict for } resolved using rule 37 (valores -> varYVals .)
  ! reduce/reduce conflict for ) resolved using rule 37 (valores -> varYVals .)
  ! reduce/reduce conflict for ; resolved using rule 37 (valores -> varYVals .)
  ! reduce/reduce conflict for , resolved using rule 37 (valores -> varYVals .)
  ! reduce/reduce conflict for ] resolved using rule 37 (valores -> varYVals .)
    }               reduce using rule 37 (valores -> varYVals .)
    )               reduce using rule 37 (valores -> varYVals .)
    ,               reduce using rule 37 (valores -> varYVals .)
    ]               reduce using rule 37 (valores -> varYVals .)
    ;               reduce using rule 37 (valores -> varYVals .)
    ^               reduce using rule 78 (paren -> varYVals .)
    *               reduce using rule 78 (paren -> varYVals .)
    /               reduce using rule 78 (paren -> varYVals .)
    %               reduce using rule 78 (paren -> varYVals .)
    +               reduce using rule 78 (paren -> varYVals .)
    -               reduce using rule 78 (paren -> varYVals .)
    >               reduce using rule 78 (paren -> varYVals .)
    <               reduce using rule 78 (paren -> varYVals .)
    MASMAS          shift and go to state 55
    MENOSMENOS      shift and go to state 56
    EQEQ            reduce using rule 103 (tBool -> varYVals .)
    DISTINTO        reduce using rule 103 (tBool -> varYVals .)
    AND             reduce using rule 103 (tBool -> varYVals .)
    ?               reduce using rule 103 (tBool -> varYVals .)
    OR              reduce using rule 103 (tBool -> varYVals .)

  ! +               [ reduce using rule 84 (expString -> varYVals .) ]
  ! ,               [ reduce using rule 84 (expString -> varYVals .) ]
  ! ;               [ reduce using rule 84 (expString -> varYVals .) ]
  ! }               [ reduce using rule 84 (expString -> varYVals .) ]
  ! ]               [ reduce using rule 84 (expString -> varYVals .) ]
  ! )               [ reduce using rule 84 (expString -> varYVals .) ]
  ! }               [ reduce using rule 78 (paren -> varYVals .) ]
  ! ;               [ reduce using rule 78 (paren -> varYVals .) ]
  ! )               [ reduce using rule 78 (paren -> varYVals .) ]
  ! ,               [ reduce using rule 78 (paren -> varYVals .) ]
  ! ]               [ reduce using rule 78 (paren -> varYVals .) ]
  ! >               [ reduce using rule 107 (tCompare -> varYVals .) ]
  ! <               [ reduce using rule 107 (tCompare -> varYVals .) ]
  ! }               [ reduce using rule 103 (tBool -> varYVals .) ]
  ! )               [ reduce using rule 103 (tBool -> varYVals .) ]
  ! ;               [ reduce using rule 103 (tBool -> varYVals .) ]
  ! ,               [ reduce using rule 103 (tBool -> varYVals .) ]
  ! ]               [ reduce using rule 103 (tBool -> varYVals .) ]


state 100

    (35) valores -> expBool .

    }               reduce using rule 35 (valores -> expBool .)
    )               reduce using rule 35 (valores -> expBool .)
    ,               reduce using rule 35 (valores -> expBool .)
    ]               reduce using rule 35 (valores -> expBool .)
    ;               reduce using rule 35 (valores -> expBool .)


state 101

    (55) varAsig -> asig MULEQ ID .
    (53) varAsig -> ID . MULEQ varAsig
    (40) valores -> ID . . ID
    (62) asig -> ID . = asig
    (63) asig -> ID . = ID
    (59) finVarAsig -> ID . = valores
    (60) finVarAsig -> ID . MULEQ valores
    (61) finVarAsig -> ID . MULEQ ID
    (41) varYVals -> ID .
    (43) vecVal -> ID . m
    (44) m -> . [ INT ]
    (45) m -> . [ INT ] m

  ! reduce/reduce conflict for ; resolved using rule 41 (varYVals -> ID .)
    MULEQ           shift and go to state 44
    .               shift and go to state 150
    =               shift and go to state 46
    MASMAS          reduce using rule 41 (varYVals -> ID .)
    MENOSMENOS      reduce using rule 41 (varYVals -> ID .)
    ;               reduce using rule 41 (varYVals -> ID .)
    +               reduce using rule 41 (varYVals -> ID .)
    ^               reduce using rule 41 (varYVals -> ID .)
    *               reduce using rule 41 (varYVals -> ID .)
    /               reduce using rule 41 (varYVals -> ID .)
    %               reduce using rule 41 (varYVals -> ID .)
    -               reduce using rule 41 (varYVals -> ID .)
    >               reduce using rule 41 (varYVals -> ID .)
    <               reduce using rule 41 (varYVals -> ID .)
    EQEQ            reduce using rule 41 (varYVals -> ID .)
    DISTINTO        reduce using rule 41 (varYVals -> ID .)
    AND             reduce using rule 41 (varYVals -> ID .)
    ?               reduce using rule 41 (varYVals -> ID .)
    OR              reduce using rule 41 (varYVals -> ID .)
    [               shift and go to state 45

  ! ;               [ reduce using rule 55 (varAsig -> asig MULEQ ID .) ]

    m                              shift and go to state 43

state 102

    (54) varAsig -> asig MULEQ varAsig .

    ;               reduce using rule 54 (varAsig -> asig MULEQ varAsig .)


state 103

    (56) varAsig -> asig MULEQ valores .

    ;               reduce using rule 56 (varAsig -> asig MULEQ valores .)


state 104

    (26) funcBool -> COLINEALES ( vec . , vec )

    ,               shift and go to state 155


state 105

    (31) vec -> [ . elem ]
    (32) elem -> . valores , elem
    (33) elem -> . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . expString
    (37) valores -> . varYVals
    (38) valores -> . funcReturn
    (39) valores -> . reg
    (40) valores -> . ID . ID
    (64) eMat -> . eMat + p
    (65) eMat -> . eMat - p
    (66) eMat -> . p
    (86) expBool -> . or ? expBool : expBool
    (87) expBool -> . or
    (82) expString -> . expString + STRING
    (83) expString -> . STRING
    (84) expString -> . varYVals
    (85) expString -> . funcString
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (46) reg -> . { campos }
    (67) p -> . p * exp
    (68) p -> . p / exp
    (69) p -> . p % exp
    (70) p -> . exp
    (88) or -> . or OR and
    (89) or -> . and
    (25) funcString -> . CAPITALIZAR ( expString )
    (43) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (26) funcBool -> . COLINEALES ( vec , vec )
    (71) exp -> . exp ^ iSing
    (72) exp -> . iSing
    (90) and -> . and AND eq
    (91) and -> . eq
    (73) iSing -> . - paren
    (74) iSing -> . + paren
    (75) iSing -> . paren
    (92) eq -> . eq EQEQ tBool
    (93) eq -> . eq DISTINTO tBool
    (94) eq -> . mayor
    (76) paren -> . ( eMat )
    (77) paren -> . INT
    (78) paren -> . varYVals
    (79) paren -> . FLOAT
    (80) paren -> . varsOps
    (81) paren -> . funcInt
    (95) mayor -> . tCompare > tCompare
    (96) mayor -> . menor
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (105) tCompare -> . eMat
    (106) tCompare -> . varsOps
    (107) tCompare -> . varYVals
    (97) menor -> . tCompare < tCompare
    (98) menor -> . not
    (99) not -> . NOT not
    (100) not -> . tBool
    (101) tBool -> . ( expBool )
    (102) tBool -> . BOOL
    (103) tBool -> . varYVals
    (104) tBool -> . funcBool

    ID              shift and go to state 94
    STRING          shift and go to state 92
    {               shift and go to state 98
    CAPITALIZAR     shift and go to state 26
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27
    COLINEALES      shift and go to state 15
    -               shift and go to state 70
    +               shift and go to state 69
    (               shift and go to state 89
    INT             shift and go to state 76
    FLOAT           shift and go to state 77
    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    NOT             shift and go to state 82
    BOOL            shift and go to state 71

    and                            shift and go to state 61
    funcBool                       shift and go to state 86
    funcInt                        shift and go to state 87
    valores                        shift and go to state 156
    menor                          shift and go to state 64
    eq                             shift and go to state 65
    vecVal                         shift and go to state 9
    eMat                           shift and go to state 88
    mayor                          shift and go to state 66
    paren                          shift and go to state 74
    reg                            shift and go to state 90
    varsOps                        shift and go to state 91
    expString                      shift and go to state 93
    tCompare                       shift and go to state 73
    not                            shift and go to state 75
    funcString                     shift and go to state 95
    funcReturn                     shift and go to state 96
    elem                           shift and go to state 157
    p                              shift and go to state 79
    iSing                          shift and go to state 72
    exp                            shift and go to state 81
    tBool                          shift and go to state 83
    varYVals                       shift and go to state 99
    or                             shift and go to state 78
    expBool                        shift and go to state 100

state 106

    (12) loop -> FOR ( varAsig . ; expBool ; varsOps ) bloque

    ;               shift and go to state 158


state 107

    (53) varAsig -> ID . MULEQ varAsig
    (62) asig -> ID . = asig
    (63) asig -> ID . = ID
    (59) finVarAsig -> ID . = valores
    (60) finVarAsig -> ID . MULEQ valores
    (61) finVarAsig -> ID . MULEQ ID

    MULEQ           shift and go to state 44
    =               shift and go to state 46


state 108

    (61) finVarAsig -> ID MULEQ ID .
    (53) varAsig -> ID . MULEQ varAsig
    (40) valores -> ID . . ID
    (62) asig -> ID . = asig
    (63) asig -> ID . = ID
    (59) finVarAsig -> ID . = valores
    (60) finVarAsig -> ID . MULEQ valores
    (61) finVarAsig -> ID . MULEQ ID
    (41) varYVals -> ID .
    (43) vecVal -> ID . m
    (44) m -> . [ INT ]
    (45) m -> . [ INT ] m

  ! reduce/reduce conflict for ; resolved using rule 41 (varYVals -> ID .)
    MULEQ           shift and go to state 44
    .               shift and go to state 150
    =               shift and go to state 46
    MASMAS          reduce using rule 41 (varYVals -> ID .)
    MENOSMENOS      reduce using rule 41 (varYVals -> ID .)
    ;               reduce using rule 41 (varYVals -> ID .)
    +               reduce using rule 41 (varYVals -> ID .)
    ^               reduce using rule 41 (varYVals -> ID .)
    *               reduce using rule 41 (varYVals -> ID .)
    /               reduce using rule 41 (varYVals -> ID .)
    %               reduce using rule 41 (varYVals -> ID .)
    -               reduce using rule 41 (varYVals -> ID .)
    >               reduce using rule 41 (varYVals -> ID .)
    <               reduce using rule 41 (varYVals -> ID .)
    EQEQ            reduce using rule 41 (varYVals -> ID .)
    DISTINTO        reduce using rule 41 (varYVals -> ID .)
    AND             reduce using rule 41 (varYVals -> ID .)
    ?               reduce using rule 41 (varYVals -> ID .)
    OR              reduce using rule 41 (varYVals -> ID .)
    [               shift and go to state 45

  ! ;               [ reduce using rule 61 (finVarAsig -> ID MULEQ ID .) ]

    m                              shift and go to state 43

state 109

    (53) varAsig -> ID MULEQ varAsig .

    ;               reduce using rule 53 (varAsig -> ID MULEQ varAsig .)


state 110

    (60) finVarAsig -> ID MULEQ valores .

    ;               reduce using rule 60 (finVarAsig -> ID MULEQ valores .)


state 111

    (44) m -> [ INT . ]
    (45) m -> [ INT . ] m

    ]               shift and go to state 159


state 112

    (62) asig -> ID = asig .

    MULEQ           reduce using rule 62 (asig -> ID = asig .)
    ;               reduce using rule 62 (asig -> ID = asig .)


state 113

    (63) asig -> ID = ID .
    (62) asig -> ID . = asig
    (63) asig -> ID . = ID
    (40) valores -> ID . . ID
    (41) varYVals -> ID .
    (43) vecVal -> ID . m
    (44) m -> . [ INT ]
    (45) m -> . [ INT ] m

  ! reduce/reduce conflict for ; resolved using rule 41 (varYVals -> ID .)
    MULEQ           reduce using rule 63 (asig -> ID = ID .)
    =               shift and go to state 160
    .               shift and go to state 150
    MASMAS          reduce using rule 41 (varYVals -> ID .)
    MENOSMENOS      reduce using rule 41 (varYVals -> ID .)
    ;               reduce using rule 41 (varYVals -> ID .)
    +               reduce using rule 41 (varYVals -> ID .)
    ^               reduce using rule 41 (varYVals -> ID .)
    *               reduce using rule 41 (varYVals -> ID .)
    /               reduce using rule 41 (varYVals -> ID .)
    %               reduce using rule 41 (varYVals -> ID .)
    -               reduce using rule 41 (varYVals -> ID .)
    >               reduce using rule 41 (varYVals -> ID .)
    <               reduce using rule 41 (varYVals -> ID .)
    EQEQ            reduce using rule 41 (varYVals -> ID .)
    DISTINTO        reduce using rule 41 (varYVals -> ID .)
    AND             reduce using rule 41 (varYVals -> ID .)
    ?               reduce using rule 41 (varYVals -> ID .)
    OR              reduce using rule 41 (varYVals -> ID .)
    [               shift and go to state 45

  ! ;               [ reduce using rule 63 (asig -> ID = ID .) ]

    m                              shift and go to state 43

state 114

    (59) finVarAsig -> ID = valores .

    ;               reduce using rule 59 (finVarAsig -> ID = valores .)


state 115

    (13) if -> IF ( expBool . ) bloque else

    )               shift and go to state 161


state 116

    (23) funcInt -> MULTIESCALAR ( vec . , eMat , param )

    ,               shift and go to state 162


state 117

    (25) funcString -> CAPITALIZAR ( expString . )
    (82) expString -> expString . + STRING

    )               shift and go to state 163
    +               shift and go to state 149


state 118

    (85) expString -> funcString .

    )               reduce using rule 85 (expString -> funcString .)
    +               reduce using rule 85 (expString -> funcString .)


state 119

    (84) expString -> varYVals .

    )               reduce using rule 84 (expString -> varYVals .)
    +               reduce using rule 84 (expString -> varYVals .)


state 120

    (24) funcInt -> LENGTH ( vec . )

    )               shift and go to state 164


state 121

    (11) loop -> DO bloque WHILE ( . expBool ) ;
    (86) expBool -> . or ? expBool : expBool
    (87) expBool -> . or
    (88) or -> . or OR and
    (89) or -> . and
    (90) and -> . and AND eq
    (91) and -> . eq
    (92) eq -> . eq EQEQ tBool
    (93) eq -> . eq DISTINTO tBool
    (94) eq -> . mayor
    (95) mayor -> . tCompare > tCompare
    (96) mayor -> . menor
    (105) tCompare -> . eMat
    (106) tCompare -> . varsOps
    (107) tCompare -> . varYVals
    (97) menor -> . tCompare < tCompare
    (98) menor -> . not
    (64) eMat -> . eMat + p
    (65) eMat -> . eMat - p
    (66) eMat -> . p
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (99) not -> . NOT not
    (100) not -> . tBool
    (67) p -> . p * exp
    (68) p -> . p / exp
    (69) p -> . p % exp
    (70) p -> . exp
    (43) vecVal -> . ID m
    (101) tBool -> . ( expBool )
    (102) tBool -> . BOOL
    (103) tBool -> . varYVals
    (104) tBool -> . funcBool
    (71) exp -> . exp ^ iSing
    (72) exp -> . iSing
    (26) funcBool -> . COLINEALES ( vec , vec )
    (73) iSing -> . - paren
    (74) iSing -> . + paren
    (75) iSing -> . paren
    (76) paren -> . ( eMat )
    (77) paren -> . INT
    (78) paren -> . varYVals
    (79) paren -> . FLOAT
    (80) paren -> . varsOps
    (81) paren -> . funcInt
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )

    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    ID              shift and go to state 53
    NOT             shift and go to state 82
    (               shift and go to state 68
    BOOL            shift and go to state 71
    COLINEALES      shift and go to state 15
    -               shift and go to state 70
    +               shift and go to state 69
    INT             shift and go to state 76
    FLOAT           shift and go to state 77
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27

    and                            shift and go to state 61
    funcBool                       shift and go to state 62
    funcInt                        shift and go to state 63
    menor                          shift and go to state 64
    eq                             shift and go to state 65
    mayor                          shift and go to state 66
    eMat                           shift and go to state 67
    vecVal                         shift and go to state 9
    paren                          shift and go to state 74
    iSing                          shift and go to state 72
    tCompare                       shift and go to state 73
    not                            shift and go to state 75
    p                              shift and go to state 79
    varsOps                        shift and go to state 80
    exp                            shift and go to state 81
    tBool                          shift and go to state 83
    varYVals                       shift and go to state 84
    or                             shift and go to state 78
    expBool                        shift and go to state 165

state 122

    (17) bloque -> { g } .

    ELSE            reduce using rule 17 (bloque -> { g } .)
    RETURN          reduce using rule 17 (bloque -> { g } .)
    MENOSMENOS      reduce using rule 17 (bloque -> { g } .)
    MASMAS          reduce using rule 17 (bloque -> { g } .)
    ID              reduce using rule 17 (bloque -> { g } .)
    IF              reduce using rule 17 (bloque -> { g } .)
    WHILE           reduce using rule 17 (bloque -> { g } .)
    DO              reduce using rule 17 (bloque -> { g } .)
    FOR             reduce using rule 17 (bloque -> { g } .)
    PRINT           reduce using rule 17 (bloque -> { g } .)
    MULTIESCALAR    reduce using rule 17 (bloque -> { g } .)
    LENGTH          reduce using rule 17 (bloque -> { g } .)
    CAPITALIZAR     reduce using rule 17 (bloque -> { g } .)
    COLINEALES      reduce using rule 17 (bloque -> { g } .)
    $end            reduce using rule 17 (bloque -> { g } .)
    }               reduce using rule 17 (bloque -> { g } .)


state 123

    (90) and -> and AND . eq
    (92) eq -> . eq EQEQ tBool
    (93) eq -> . eq DISTINTO tBool
    (94) eq -> . mayor
    (95) mayor -> . tCompare > tCompare
    (96) mayor -> . menor
    (105) tCompare -> . eMat
    (106) tCompare -> . varsOps
    (107) tCompare -> . varYVals
    (97) menor -> . tCompare < tCompare
    (98) menor -> . not
    (64) eMat -> . eMat + p
    (65) eMat -> . eMat - p
    (66) eMat -> . p
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (99) not -> . NOT not
    (100) not -> . tBool
    (67) p -> . p * exp
    (68) p -> . p / exp
    (69) p -> . p % exp
    (70) p -> . exp
    (43) vecVal -> . ID m
    (101) tBool -> . ( expBool )
    (102) tBool -> . BOOL
    (103) tBool -> . varYVals
    (104) tBool -> . funcBool
    (71) exp -> . exp ^ iSing
    (72) exp -> . iSing
    (26) funcBool -> . COLINEALES ( vec , vec )
    (73) iSing -> . - paren
    (74) iSing -> . + paren
    (75) iSing -> . paren
    (76) paren -> . ( eMat )
    (77) paren -> . INT
    (78) paren -> . varYVals
    (79) paren -> . FLOAT
    (80) paren -> . varsOps
    (81) paren -> . funcInt
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )

    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    ID              shift and go to state 53
    NOT             shift and go to state 82
    (               shift and go to state 68
    BOOL            shift and go to state 71
    COLINEALES      shift and go to state 15
    -               shift and go to state 70
    +               shift and go to state 69
    INT             shift and go to state 76
    FLOAT           shift and go to state 77
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27

    eMat                           shift and go to state 67
    funcBool                       shift and go to state 62
    p                              shift and go to state 79
    varYVals                       shift and go to state 84
    funcInt                        shift and go to state 63
    vecVal                         shift and go to state 9
    tCompare                       shift and go to state 73
    menor                          shift and go to state 64
    varsOps                        shift and go to state 80
    exp                            shift and go to state 81
    paren                          shift and go to state 74
    not                            shift and go to state 75
    tBool                          shift and go to state 83
    eq                             shift and go to state 166
    mayor                          shift and go to state 66
    iSing                          shift and go to state 72

state 124

    (92) eq -> eq EQEQ . tBool
    (101) tBool -> . ( expBool )
    (102) tBool -> . BOOL
    (103) tBool -> . varYVals
    (104) tBool -> . funcBool
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (26) funcBool -> . COLINEALES ( vec , vec )
    (43) vecVal -> . ID m

    (               shift and go to state 144
    BOOL            shift and go to state 71
    ID              shift and go to state 53
    COLINEALES      shift and go to state 15

    funcBool                       shift and go to state 62
    varYVals                       shift and go to state 146
    tBool                          shift and go to state 167
    vecVal                         shift and go to state 9

state 125

    (93) eq -> eq DISTINTO . tBool
    (101) tBool -> . ( expBool )
    (102) tBool -> . BOOL
    (103) tBool -> . varYVals
    (104) tBool -> . funcBool
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (26) funcBool -> . COLINEALES ( vec , vec )
    (43) vecVal -> . ID m

    (               shift and go to state 144
    BOOL            shift and go to state 71
    ID              shift and go to state 53
    COLINEALES      shift and go to state 15

    funcBool                       shift and go to state 62
    varYVals                       shift and go to state 146
    tBool                          shift and go to state 168
    vecVal                         shift and go to state 9

state 126

    (64) eMat -> eMat + . p
    (67) p -> . p * exp
    (68) p -> . p / exp
    (69) p -> . p % exp
    (70) p -> . exp
    (71) exp -> . exp ^ iSing
    (72) exp -> . iSing
    (73) iSing -> . - paren
    (74) iSing -> . + paren
    (75) iSing -> . paren
    (76) paren -> . ( eMat )
    (77) paren -> . INT
    (78) paren -> . varYVals
    (79) paren -> . FLOAT
    (80) paren -> . varsOps
    (81) paren -> . funcInt
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (43) vecVal -> . ID m

    -               shift and go to state 70
    +               shift and go to state 69
    (               shift and go to state 131
    INT             shift and go to state 76
    FLOAT           shift and go to state 77
    ID              shift and go to state 53
    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27

    funcInt                        shift and go to state 63
    p                              shift and go to state 169
    iSing                          shift and go to state 72
    exp                            shift and go to state 81
    paren                          shift and go to state 74
    varYVals                       shift and go to state 134
    vecVal                         shift and go to state 9
    varsOps                        shift and go to state 132

state 127

    (65) eMat -> eMat - . p
    (67) p -> . p * exp
    (68) p -> . p / exp
    (69) p -> . p % exp
    (70) p -> . exp
    (71) exp -> . exp ^ iSing
    (72) exp -> . iSing
    (73) iSing -> . - paren
    (74) iSing -> . + paren
    (75) iSing -> . paren
    (76) paren -> . ( eMat )
    (77) paren -> . INT
    (78) paren -> . varYVals
    (79) paren -> . FLOAT
    (80) paren -> . varsOps
    (81) paren -> . funcInt
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (43) vecVal -> . ID m

    -               shift and go to state 70
    +               shift and go to state 69
    (               shift and go to state 131
    INT             shift and go to state 76
    FLOAT           shift and go to state 77
    ID              shift and go to state 53
    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27

    funcInt                        shift and go to state 63
    p                              shift and go to state 170
    iSing                          shift and go to state 72
    exp                            shift and go to state 81
    paren                          shift and go to state 74
    varYVals                       shift and go to state 134
    vecVal                         shift and go to state 9
    varsOps                        shift and go to state 132

state 128

    (76) paren -> ( eMat . )
    (64) eMat -> eMat . + p
    (65) eMat -> eMat . - p
    (105) tCompare -> eMat .

    )               shift and go to state 171
    +               shift and go to state 126
    -               shift and go to state 127
    >               reduce using rule 105 (tCompare -> eMat .)
    <               reduce using rule 105 (tCompare -> eMat .)


state 129

    (78) paren -> varYVals .
    (107) tCompare -> varYVals .
    (51) varsOps -> varYVals . MASMAS
    (52) varsOps -> varYVals . MENOSMENOS
    (103) tBool -> varYVals .

  ! reduce/reduce conflict for > resolved using rule 78 (paren -> varYVals .)
  ! reduce/reduce conflict for < resolved using rule 78 (paren -> varYVals .)
  ! reduce/reduce conflict for ) resolved using rule 78 (paren -> varYVals .)
    ^               reduce using rule 78 (paren -> varYVals .)
    *               reduce using rule 78 (paren -> varYVals .)
    /               reduce using rule 78 (paren -> varYVals .)
    %               reduce using rule 78 (paren -> varYVals .)
    )               reduce using rule 78 (paren -> varYVals .)
    +               reduce using rule 78 (paren -> varYVals .)
    -               reduce using rule 78 (paren -> varYVals .)
    >               reduce using rule 78 (paren -> varYVals .)
    <               reduce using rule 78 (paren -> varYVals .)
    MASMAS          shift and go to state 55
    MENOSMENOS      shift and go to state 56
    EQEQ            reduce using rule 103 (tBool -> varYVals .)
    DISTINTO        reduce using rule 103 (tBool -> varYVals .)
    AND             reduce using rule 103 (tBool -> varYVals .)
    ?               reduce using rule 103 (tBool -> varYVals .)
    OR              reduce using rule 103 (tBool -> varYVals .)

  ! >               [ reduce using rule 107 (tCompare -> varYVals .) ]
  ! <               [ reduce using rule 107 (tCompare -> varYVals .) ]
  ! )               [ reduce using rule 103 (tBool -> varYVals .) ]


state 130

    (101) tBool -> ( expBool . )

    )               shift and go to state 172


state 131

    (76) paren -> ( . eMat )
    (64) eMat -> . eMat + p
    (65) eMat -> . eMat - p
    (66) eMat -> . p
    (67) p -> . p * exp
    (68) p -> . p / exp
    (69) p -> . p % exp
    (70) p -> . exp
    (71) exp -> . exp ^ iSing
    (72) exp -> . iSing
    (73) iSing -> . - paren
    (74) iSing -> . + paren
    (75) iSing -> . paren
    (76) paren -> . ( eMat )
    (77) paren -> . INT
    (78) paren -> . varYVals
    (79) paren -> . FLOAT
    (80) paren -> . varsOps
    (81) paren -> . funcInt
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (43) vecVal -> . ID m

    -               shift and go to state 70
    +               shift and go to state 69
    (               shift and go to state 131
    INT             shift and go to state 76
    FLOAT           shift and go to state 77
    ID              shift and go to state 53
    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27

    eMat                           shift and go to state 173
    funcInt                        shift and go to state 63
    p                              shift and go to state 79
    iSing                          shift and go to state 72
    exp                            shift and go to state 81
    paren                          shift and go to state 74
    varYVals                       shift and go to state 134
    vecVal                         shift and go to state 9
    varsOps                        shift and go to state 132

state 132

    (80) paren -> varsOps .

    ^               reduce using rule 80 (paren -> varsOps .)
    *               reduce using rule 80 (paren -> varsOps .)
    /               reduce using rule 80 (paren -> varsOps .)
    %               reduce using rule 80 (paren -> varsOps .)
    ,               reduce using rule 80 (paren -> varsOps .)
    +               reduce using rule 80 (paren -> varsOps .)
    -               reduce using rule 80 (paren -> varsOps .)
    >               reduce using rule 80 (paren -> varsOps .)
    <               reduce using rule 80 (paren -> varsOps .)
    )               reduce using rule 80 (paren -> varsOps .)
    ;               reduce using rule 80 (paren -> varsOps .)
    }               reduce using rule 80 (paren -> varsOps .)
    ]               reduce using rule 80 (paren -> varsOps .)
    EQEQ            reduce using rule 80 (paren -> varsOps .)
    DISTINTO        reduce using rule 80 (paren -> varsOps .)
    AND             reduce using rule 80 (paren -> varsOps .)
    ?               reduce using rule 80 (paren -> varsOps .)
    OR              reduce using rule 80 (paren -> varsOps .)
    :               reduce using rule 80 (paren -> varsOps .)


state 133

    (74) iSing -> + paren .

    ^               reduce using rule 74 (iSing -> + paren .)
    *               reduce using rule 74 (iSing -> + paren .)
    /               reduce using rule 74 (iSing -> + paren .)
    %               reduce using rule 74 (iSing -> + paren .)
    +               reduce using rule 74 (iSing -> + paren .)
    -               reduce using rule 74 (iSing -> + paren .)
    EQEQ            reduce using rule 74 (iSing -> + paren .)
    DISTINTO        reduce using rule 74 (iSing -> + paren .)
    AND             reduce using rule 74 (iSing -> + paren .)
    ?               reduce using rule 74 (iSing -> + paren .)
    OR              reduce using rule 74 (iSing -> + paren .)
    )               reduce using rule 74 (iSing -> + paren .)
    ;               reduce using rule 74 (iSing -> + paren .)
    }               reduce using rule 74 (iSing -> + paren .)
    ,               reduce using rule 74 (iSing -> + paren .)
    ]               reduce using rule 74 (iSing -> + paren .)
    :               reduce using rule 74 (iSing -> + paren .)
    >               reduce using rule 74 (iSing -> + paren .)
    <               reduce using rule 74 (iSing -> + paren .)


state 134

    (78) paren -> varYVals .
    (51) varsOps -> varYVals . MASMAS
    (52) varsOps -> varYVals . MENOSMENOS

    ^               reduce using rule 78 (paren -> varYVals .)
    *               reduce using rule 78 (paren -> varYVals .)
    /               reduce using rule 78 (paren -> varYVals .)
    %               reduce using rule 78 (paren -> varYVals .)
    ,               reduce using rule 78 (paren -> varYVals .)
    +               reduce using rule 78 (paren -> varYVals .)
    -               reduce using rule 78 (paren -> varYVals .)
    >               reduce using rule 78 (paren -> varYVals .)
    <               reduce using rule 78 (paren -> varYVals .)
    )               reduce using rule 78 (paren -> varYVals .)
    ;               reduce using rule 78 (paren -> varYVals .)
    }               reduce using rule 78 (paren -> varYVals .)
    ]               reduce using rule 78 (paren -> varYVals .)
    EQEQ            reduce using rule 78 (paren -> varYVals .)
    DISTINTO        reduce using rule 78 (paren -> varYVals .)
    AND             reduce using rule 78 (paren -> varYVals .)
    ?               reduce using rule 78 (paren -> varYVals .)
    OR              reduce using rule 78 (paren -> varYVals .)
    :               reduce using rule 78 (paren -> varYVals .)
    MASMAS          shift and go to state 55
    MENOSMENOS      shift and go to state 56


state 135

    (73) iSing -> - paren .

    ^               reduce using rule 73 (iSing -> - paren .)
    *               reduce using rule 73 (iSing -> - paren .)
    /               reduce using rule 73 (iSing -> - paren .)
    %               reduce using rule 73 (iSing -> - paren .)
    +               reduce using rule 73 (iSing -> - paren .)
    -               reduce using rule 73 (iSing -> - paren .)
    EQEQ            reduce using rule 73 (iSing -> - paren .)
    DISTINTO        reduce using rule 73 (iSing -> - paren .)
    AND             reduce using rule 73 (iSing -> - paren .)
    ?               reduce using rule 73 (iSing -> - paren .)
    OR              reduce using rule 73 (iSing -> - paren .)
    )               reduce using rule 73 (iSing -> - paren .)
    ;               reduce using rule 73 (iSing -> - paren .)
    }               reduce using rule 73 (iSing -> - paren .)
    ,               reduce using rule 73 (iSing -> - paren .)
    ]               reduce using rule 73 (iSing -> - paren .)
    :               reduce using rule 73 (iSing -> - paren .)
    >               reduce using rule 73 (iSing -> - paren .)
    <               reduce using rule 73 (iSing -> - paren .)


state 136

    (97) menor -> tCompare < . tCompare
    (105) tCompare -> . eMat
    (106) tCompare -> . varsOps
    (107) tCompare -> . varYVals
    (64) eMat -> . eMat + p
    (65) eMat -> . eMat - p
    (66) eMat -> . p
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (67) p -> . p * exp
    (68) p -> . p / exp
    (69) p -> . p % exp
    (70) p -> . exp
    (43) vecVal -> . ID m
    (71) exp -> . exp ^ iSing
    (72) exp -> . iSing
    (73) iSing -> . - paren
    (74) iSing -> . + paren
    (75) iSing -> . paren
    (76) paren -> . ( eMat )
    (77) paren -> . INT
    (78) paren -> . varYVals
    (79) paren -> . FLOAT
    (80) paren -> . varsOps
    (81) paren -> . funcInt
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )

    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    ID              shift and go to state 53
    -               shift and go to state 70
    +               shift and go to state 69
    (               shift and go to state 131
    INT             shift and go to state 76
    FLOAT           shift and go to state 77
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27

    eMat                           shift and go to state 67
    p                              shift and go to state 79
    funcInt                        shift and go to state 63
    tCompare                       shift and go to state 174
    varsOps                        shift and go to state 80
    exp                            shift and go to state 81
    paren                          shift and go to state 74
    varYVals                       shift and go to state 175
    vecVal                         shift and go to state 9
    iSing                          shift and go to state 72

state 137

    (95) mayor -> tCompare > . tCompare
    (105) tCompare -> . eMat
    (106) tCompare -> . varsOps
    (107) tCompare -> . varYVals
    (64) eMat -> . eMat + p
    (65) eMat -> . eMat - p
    (66) eMat -> . p
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (67) p -> . p * exp
    (68) p -> . p / exp
    (69) p -> . p % exp
    (70) p -> . exp
    (43) vecVal -> . ID m
    (71) exp -> . exp ^ iSing
    (72) exp -> . iSing
    (73) iSing -> . - paren
    (74) iSing -> . + paren
    (75) iSing -> . paren
    (76) paren -> . ( eMat )
    (77) paren -> . INT
    (78) paren -> . varYVals
    (79) paren -> . FLOAT
    (80) paren -> . varsOps
    (81) paren -> . funcInt
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )

    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    ID              shift and go to state 53
    -               shift and go to state 70
    +               shift and go to state 69
    (               shift and go to state 131
    INT             shift and go to state 76
    FLOAT           shift and go to state 77
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27

    eMat                           shift and go to state 67
    p                              shift and go to state 79
    funcInt                        shift and go to state 63
    tCompare                       shift and go to state 176
    varsOps                        shift and go to state 80
    exp                            shift and go to state 81
    paren                          shift and go to state 74
    varYVals                       shift and go to state 175
    vecVal                         shift and go to state 9
    iSing                          shift and go to state 72

state 138

    (88) or -> or OR . and
    (90) and -> . and AND eq
    (91) and -> . eq
    (92) eq -> . eq EQEQ tBool
    (93) eq -> . eq DISTINTO tBool
    (94) eq -> . mayor
    (95) mayor -> . tCompare > tCompare
    (96) mayor -> . menor
    (105) tCompare -> . eMat
    (106) tCompare -> . varsOps
    (107) tCompare -> . varYVals
    (97) menor -> . tCompare < tCompare
    (98) menor -> . not
    (64) eMat -> . eMat + p
    (65) eMat -> . eMat - p
    (66) eMat -> . p
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (99) not -> . NOT not
    (100) not -> . tBool
    (67) p -> . p * exp
    (68) p -> . p / exp
    (69) p -> . p % exp
    (70) p -> . exp
    (43) vecVal -> . ID m
    (101) tBool -> . ( expBool )
    (102) tBool -> . BOOL
    (103) tBool -> . varYVals
    (104) tBool -> . funcBool
    (71) exp -> . exp ^ iSing
    (72) exp -> . iSing
    (26) funcBool -> . COLINEALES ( vec , vec )
    (73) iSing -> . - paren
    (74) iSing -> . + paren
    (75) iSing -> . paren
    (76) paren -> . ( eMat )
    (77) paren -> . INT
    (78) paren -> . varYVals
    (79) paren -> . FLOAT
    (80) paren -> . varsOps
    (81) paren -> . funcInt
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )

    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    ID              shift and go to state 53
    NOT             shift and go to state 82
    (               shift and go to state 68
    BOOL            shift and go to state 71
    COLINEALES      shift and go to state 15
    -               shift and go to state 70
    +               shift and go to state 69
    INT             shift and go to state 76
    FLOAT           shift and go to state 77
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27

    and                            shift and go to state 177
    funcBool                       shift and go to state 62
    funcInt                        shift and go to state 63
    menor                          shift and go to state 64
    eq                             shift and go to state 65
    mayor                          shift and go to state 66
    eMat                           shift and go to state 67
    vecVal                         shift and go to state 9
    paren                          shift and go to state 74
    iSing                          shift and go to state 72
    tCompare                       shift and go to state 73
    not                            shift and go to state 75
    p                              shift and go to state 79
    varsOps                        shift and go to state 80
    exp                            shift and go to state 81
    tBool                          shift and go to state 83
    varYVals                       shift and go to state 84

state 139

    (86) expBool -> or ? . expBool : expBool
    (86) expBool -> . or ? expBool : expBool
    (87) expBool -> . or
    (88) or -> . or OR and
    (89) or -> . and
    (90) and -> . and AND eq
    (91) and -> . eq
    (92) eq -> . eq EQEQ tBool
    (93) eq -> . eq DISTINTO tBool
    (94) eq -> . mayor
    (95) mayor -> . tCompare > tCompare
    (96) mayor -> . menor
    (105) tCompare -> . eMat
    (106) tCompare -> . varsOps
    (107) tCompare -> . varYVals
    (97) menor -> . tCompare < tCompare
    (98) menor -> . not
    (64) eMat -> . eMat + p
    (65) eMat -> . eMat - p
    (66) eMat -> . p
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (99) not -> . NOT not
    (100) not -> . tBool
    (67) p -> . p * exp
    (68) p -> . p / exp
    (69) p -> . p % exp
    (70) p -> . exp
    (43) vecVal -> . ID m
    (101) tBool -> . ( expBool )
    (102) tBool -> . BOOL
    (103) tBool -> . varYVals
    (104) tBool -> . funcBool
    (71) exp -> . exp ^ iSing
    (72) exp -> . iSing
    (26) funcBool -> . COLINEALES ( vec , vec )
    (73) iSing -> . - paren
    (74) iSing -> . + paren
    (75) iSing -> . paren
    (76) paren -> . ( eMat )
    (77) paren -> . INT
    (78) paren -> . varYVals
    (79) paren -> . FLOAT
    (80) paren -> . varsOps
    (81) paren -> . funcInt
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )

    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    ID              shift and go to state 53
    NOT             shift and go to state 82
    (               shift and go to state 68
    BOOL            shift and go to state 71
    COLINEALES      shift and go to state 15
    -               shift and go to state 70
    +               shift and go to state 69
    INT             shift and go to state 76
    FLOAT           shift and go to state 77
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27

    and                            shift and go to state 61
    funcBool                       shift and go to state 62
    funcInt                        shift and go to state 63
    menor                          shift and go to state 64
    eq                             shift and go to state 65
    mayor                          shift and go to state 66
    eMat                           shift and go to state 67
    vecVal                         shift and go to state 9
    paren                          shift and go to state 74
    iSing                          shift and go to state 72
    tCompare                       shift and go to state 73
    not                            shift and go to state 75
    p                              shift and go to state 79
    varsOps                        shift and go to state 80
    exp                            shift and go to state 81
    tBool                          shift and go to state 83
    varYVals                       shift and go to state 84
    or                             shift and go to state 78
    expBool                        shift and go to state 178

state 140

    (67) p -> p * . exp
    (71) exp -> . exp ^ iSing
    (72) exp -> . iSing
    (73) iSing -> . - paren
    (74) iSing -> . + paren
    (75) iSing -> . paren
    (76) paren -> . ( eMat )
    (77) paren -> . INT
    (78) paren -> . varYVals
    (79) paren -> . FLOAT
    (80) paren -> . varsOps
    (81) paren -> . funcInt
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (43) vecVal -> . ID m

    -               shift and go to state 70
    +               shift and go to state 69
    (               shift and go to state 131
    INT             shift and go to state 76
    FLOAT           shift and go to state 77
    ID              shift and go to state 53
    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27

    funcInt                        shift and go to state 63
    iSing                          shift and go to state 72
    exp                            shift and go to state 179
    paren                          shift and go to state 74
    varYVals                       shift and go to state 134
    vecVal                         shift and go to state 9
    varsOps                        shift and go to state 132

state 141

    (69) p -> p % . exp
    (71) exp -> . exp ^ iSing
    (72) exp -> . iSing
    (73) iSing -> . - paren
    (74) iSing -> . + paren
    (75) iSing -> . paren
    (76) paren -> . ( eMat )
    (77) paren -> . INT
    (78) paren -> . varYVals
    (79) paren -> . FLOAT
    (80) paren -> . varsOps
    (81) paren -> . funcInt
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (43) vecVal -> . ID m

    -               shift and go to state 70
    +               shift and go to state 69
    (               shift and go to state 131
    INT             shift and go to state 76
    FLOAT           shift and go to state 77
    ID              shift and go to state 53
    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27

    funcInt                        shift and go to state 63
    iSing                          shift and go to state 72
    exp                            shift and go to state 180
    paren                          shift and go to state 74
    varYVals                       shift and go to state 134
    vecVal                         shift and go to state 9
    varsOps                        shift and go to state 132

state 142

    (68) p -> p / . exp
    (71) exp -> . exp ^ iSing
    (72) exp -> . iSing
    (73) iSing -> . - paren
    (74) iSing -> . + paren
    (75) iSing -> . paren
    (76) paren -> . ( eMat )
    (77) paren -> . INT
    (78) paren -> . varYVals
    (79) paren -> . FLOAT
    (80) paren -> . varsOps
    (81) paren -> . funcInt
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (43) vecVal -> . ID m

    -               shift and go to state 70
    +               shift and go to state 69
    (               shift and go to state 131
    INT             shift and go to state 76
    FLOAT           shift and go to state 77
    ID              shift and go to state 53
    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27

    funcInt                        shift and go to state 63
    iSing                          shift and go to state 72
    exp                            shift and go to state 181
    paren                          shift and go to state 74
    varYVals                       shift and go to state 134
    vecVal                         shift and go to state 9
    varsOps                        shift and go to state 132

state 143

    (71) exp -> exp ^ . iSing
    (73) iSing -> . - paren
    (74) iSing -> . + paren
    (75) iSing -> . paren
    (76) paren -> . ( eMat )
    (77) paren -> . INT
    (78) paren -> . varYVals
    (79) paren -> . FLOAT
    (80) paren -> . varsOps
    (81) paren -> . funcInt
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (43) vecVal -> . ID m

    -               shift and go to state 70
    +               shift and go to state 69
    (               shift and go to state 131
    INT             shift and go to state 76
    FLOAT           shift and go to state 77
    ID              shift and go to state 53
    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27

    funcInt                        shift and go to state 63
    varsOps                        shift and go to state 132
    paren                          shift and go to state 74
    varYVals                       shift and go to state 134
    vecVal                         shift and go to state 9
    iSing                          shift and go to state 182

state 144

    (101) tBool -> ( . expBool )
    (86) expBool -> . or ? expBool : expBool
    (87) expBool -> . or
    (88) or -> . or OR and
    (89) or -> . and
    (90) and -> . and AND eq
    (91) and -> . eq
    (92) eq -> . eq EQEQ tBool
    (93) eq -> . eq DISTINTO tBool
    (94) eq -> . mayor
    (95) mayor -> . tCompare > tCompare
    (96) mayor -> . menor
    (105) tCompare -> . eMat
    (106) tCompare -> . varsOps
    (107) tCompare -> . varYVals
    (97) menor -> . tCompare < tCompare
    (98) menor -> . not
    (64) eMat -> . eMat + p
    (65) eMat -> . eMat - p
    (66) eMat -> . p
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (99) not -> . NOT not
    (100) not -> . tBool
    (67) p -> . p * exp
    (68) p -> . p / exp
    (69) p -> . p % exp
    (70) p -> . exp
    (43) vecVal -> . ID m
    (101) tBool -> . ( expBool )
    (102) tBool -> . BOOL
    (103) tBool -> . varYVals
    (104) tBool -> . funcBool
    (71) exp -> . exp ^ iSing
    (72) exp -> . iSing
    (26) funcBool -> . COLINEALES ( vec , vec )
    (73) iSing -> . - paren
    (74) iSing -> . + paren
    (75) iSing -> . paren
    (76) paren -> . ( eMat )
    (77) paren -> . INT
    (78) paren -> . varYVals
    (79) paren -> . FLOAT
    (80) paren -> . varsOps
    (81) paren -> . funcInt
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )

    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    ID              shift and go to state 53
    NOT             shift and go to state 82
    (               shift and go to state 68
    BOOL            shift and go to state 71
    COLINEALES      shift and go to state 15
    -               shift and go to state 70
    +               shift and go to state 69
    INT             shift and go to state 76
    FLOAT           shift and go to state 77
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27

    and                            shift and go to state 61
    funcBool                       shift and go to state 62
    funcInt                        shift and go to state 63
    menor                          shift and go to state 64
    eq                             shift and go to state 65
    mayor                          shift and go to state 66
    eMat                           shift and go to state 67
    vecVal                         shift and go to state 9
    paren                          shift and go to state 74
    iSing                          shift and go to state 72
    tCompare                       shift and go to state 73
    not                            shift and go to state 75
    p                              shift and go to state 79
    varsOps                        shift and go to state 80
    exp                            shift and go to state 81
    tBool                          shift and go to state 83
    varYVals                       shift and go to state 84
    or                             shift and go to state 78
    expBool                        shift and go to state 130

state 145

    (99) not -> NOT not .

    EQEQ            reduce using rule 99 (not -> NOT not .)
    DISTINTO        reduce using rule 99 (not -> NOT not .)
    AND             reduce using rule 99 (not -> NOT not .)
    ?               reduce using rule 99 (not -> NOT not .)
    OR              reduce using rule 99 (not -> NOT not .)
    )               reduce using rule 99 (not -> NOT not .)
    ;               reduce using rule 99 (not -> NOT not .)
    }               reduce using rule 99 (not -> NOT not .)
    ,               reduce using rule 99 (not -> NOT not .)
    ]               reduce using rule 99 (not -> NOT not .)
    :               reduce using rule 99 (not -> NOT not .)


state 146

    (103) tBool -> varYVals .

    EQEQ            reduce using rule 103 (tBool -> varYVals .)
    DISTINTO        reduce using rule 103 (tBool -> varYVals .)
    AND             reduce using rule 103 (tBool -> varYVals .)
    ?               reduce using rule 103 (tBool -> varYVals .)
    OR              reduce using rule 103 (tBool -> varYVals .)
    )               reduce using rule 103 (tBool -> varYVals .)
    ;               reduce using rule 103 (tBool -> varYVals .)
    }               reduce using rule 103 (tBool -> varYVals .)
    ,               reduce using rule 103 (tBool -> varYVals .)
    ]               reduce using rule 103 (tBool -> varYVals .)
    :               reduce using rule 103 (tBool -> varYVals .)


state 147

    (10) loop -> WHILE ( expBool ) . bloque
    (16) bloque -> . sentencia ;
    (17) bloque -> . { g }
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (53) varAsig -> . ID MULEQ varAsig
    (54) varAsig -> . asig MULEQ varAsig
    (55) varAsig -> . asig MULEQ ID
    (56) varAsig -> . asig MULEQ valores
    (57) varAsig -> . finVarAsig
    (58) varAsig -> . asig
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (62) asig -> . ID = asig
    (63) asig -> . ID = ID
    (59) finVarAsig -> . ID = valores
    (60) finVarAsig -> . ID MULEQ valores
    (61) finVarAsig -> . ID MULEQ ID
    (43) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( expString )
    (26) funcBool -> . COLINEALES ( vec , vec )

    {               shift and go to state 34
    RETURN          shift and go to state 2
    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    ID              shift and go to state 18
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 15

    funcBool                       shift and go to state 3
    funcInt                        shift and go to state 5
    bloque                         shift and go to state 183
    vecVal                         shift and go to state 9
    sentencia                      shift and go to state 33
    asig                           shift and go to state 12
    funcVoid                       shift and go to state 14
    func                           shift and go to state 17
    varAsig                        shift and go to state 20
    funcString                     shift and go to state 22
    funcReturn                     shift and go to state 24
    finVarAsig                     shift and go to state 25
    varsOps                        shift and go to state 29
    varYVals                       shift and go to state 30

state 148

    (78) paren -> varYVals .
    (51) varsOps -> varYVals . MASMAS
    (52) varsOps -> varYVals . MENOSMENOS
    (107) tCompare -> varYVals .
    (103) tBool -> varYVals .

  ! reduce/reduce conflict for > resolved using rule 78 (paren -> varYVals .)
  ! reduce/reduce conflict for < resolved using rule 78 (paren -> varYVals .)
  ! reduce/reduce conflict for ) resolved using rule 78 (paren -> varYVals .)
    ^               reduce using rule 78 (paren -> varYVals .)
    *               reduce using rule 78 (paren -> varYVals .)
    /               reduce using rule 78 (paren -> varYVals .)
    %               reduce using rule 78 (paren -> varYVals .)
    )               reduce using rule 78 (paren -> varYVals .)
    +               reduce using rule 78 (paren -> varYVals .)
    -               reduce using rule 78 (paren -> varYVals .)
    >               reduce using rule 78 (paren -> varYVals .)
    <               reduce using rule 78 (paren -> varYVals .)
    MASMAS          shift and go to state 55
    MENOSMENOS      shift and go to state 56
    EQEQ            reduce using rule 103 (tBool -> varYVals .)
    DISTINTO        reduce using rule 103 (tBool -> varYVals .)
    AND             reduce using rule 103 (tBool -> varYVals .)
    ?               reduce using rule 103 (tBool -> varYVals .)
    OR              reduce using rule 103 (tBool -> varYVals .)

  ! >               [ reduce using rule 107 (tCompare -> varYVals .) ]
  ! <               [ reduce using rule 107 (tCompare -> varYVals .) ]
  ! )               [ reduce using rule 103 (tBool -> varYVals .) ]


state 149

    (82) expString -> expString + . STRING

    STRING          shift and go to state 184


state 150

    (40) valores -> ID . . ID

    ID              shift and go to state 185


state 151

    (27) funcVoid -> PRINT ( valores ) .

    ;               reduce using rule 27 (funcVoid -> PRINT ( valores ) .)


state 152

    (46) reg -> { campos . }

    }               shift and go to state 186


state 153

    (47) campos -> ID . : valores , campos
    (40) valores -> ID . . ID
    (41) varYVals -> ID .
    (43) vecVal -> ID . m
    (44) m -> . [ INT ]
    (45) m -> . [ INT ] m

    :               shift and go to state 187
    .               shift and go to state 150
    MASMAS          reduce using rule 41 (varYVals -> ID .)
    MENOSMENOS      reduce using rule 41 (varYVals -> ID .)
    }               reduce using rule 41 (varYVals -> ID .)
    +               reduce using rule 41 (varYVals -> ID .)
    ^               reduce using rule 41 (varYVals -> ID .)
    *               reduce using rule 41 (varYVals -> ID .)
    /               reduce using rule 41 (varYVals -> ID .)
    %               reduce using rule 41 (varYVals -> ID .)
    -               reduce using rule 41 (varYVals -> ID .)
    >               reduce using rule 41 (varYVals -> ID .)
    <               reduce using rule 41 (varYVals -> ID .)
    EQEQ            reduce using rule 41 (varYVals -> ID .)
    DISTINTO        reduce using rule 41 (varYVals -> ID .)
    AND             reduce using rule 41 (varYVals -> ID .)
    ?               reduce using rule 41 (varYVals -> ID .)
    OR              reduce using rule 41 (varYVals -> ID .)
    [               shift and go to state 45

    m                              shift and go to state 43

state 154

    (48) campos -> valores .

    }               reduce using rule 48 (campos -> valores .)


state 155

    (26) funcBool -> COLINEALES ( vec , . vec )
    (31) vec -> . [ elem ]

    [               shift and go to state 105

    vec                            shift and go to state 188

state 156

    (32) elem -> valores . , elem
    (33) elem -> valores .

    ,               shift and go to state 189
    ]               reduce using rule 33 (elem -> valores .)


state 157

    (31) vec -> [ elem . ]

    ]               shift and go to state 190


state 158

    (12) loop -> FOR ( varAsig ; . expBool ; varsOps ) bloque
    (86) expBool -> . or ? expBool : expBool
    (87) expBool -> . or
    (88) or -> . or OR and
    (89) or -> . and
    (90) and -> . and AND eq
    (91) and -> . eq
    (92) eq -> . eq EQEQ tBool
    (93) eq -> . eq DISTINTO tBool
    (94) eq -> . mayor
    (95) mayor -> . tCompare > tCompare
    (96) mayor -> . menor
    (105) tCompare -> . eMat
    (106) tCompare -> . varsOps
    (107) tCompare -> . varYVals
    (97) menor -> . tCompare < tCompare
    (98) menor -> . not
    (64) eMat -> . eMat + p
    (65) eMat -> . eMat - p
    (66) eMat -> . p
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (99) not -> . NOT not
    (100) not -> . tBool
    (67) p -> . p * exp
    (68) p -> . p / exp
    (69) p -> . p % exp
    (70) p -> . exp
    (43) vecVal -> . ID m
    (101) tBool -> . ( expBool )
    (102) tBool -> . BOOL
    (103) tBool -> . varYVals
    (104) tBool -> . funcBool
    (71) exp -> . exp ^ iSing
    (72) exp -> . iSing
    (26) funcBool -> . COLINEALES ( vec , vec )
    (73) iSing -> . - paren
    (74) iSing -> . + paren
    (75) iSing -> . paren
    (76) paren -> . ( eMat )
    (77) paren -> . INT
    (78) paren -> . varYVals
    (79) paren -> . FLOAT
    (80) paren -> . varsOps
    (81) paren -> . funcInt
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )

    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    ID              shift and go to state 53
    NOT             shift and go to state 82
    (               shift and go to state 68
    BOOL            shift and go to state 71
    COLINEALES      shift and go to state 15
    -               shift and go to state 70
    +               shift and go to state 69
    INT             shift and go to state 76
    FLOAT           shift and go to state 77
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27

    and                            shift and go to state 61
    funcBool                       shift and go to state 62
    funcInt                        shift and go to state 63
    menor                          shift and go to state 64
    eq                             shift and go to state 65
    mayor                          shift and go to state 66
    eMat                           shift and go to state 67
    vecVal                         shift and go to state 9
    paren                          shift and go to state 74
    iSing                          shift and go to state 72
    tCompare                       shift and go to state 73
    not                            shift and go to state 75
    p                              shift and go to state 79
    varsOps                        shift and go to state 80
    exp                            shift and go to state 81
    tBool                          shift and go to state 83
    varYVals                       shift and go to state 84
    or                             shift and go to state 78
    expBool                        shift and go to state 191

state 159

    (44) m -> [ INT ] .
    (45) m -> [ INT ] . m
    (44) m -> . [ INT ]
    (45) m -> . [ INT ] m

    MASMAS          reduce using rule 44 (m -> [ INT ] .)
    MENOSMENOS      reduce using rule 44 (m -> [ INT ] .)
    ;               reduce using rule 44 (m -> [ INT ] .)
    +               reduce using rule 44 (m -> [ INT ] .)
    ^               reduce using rule 44 (m -> [ INT ] .)
    *               reduce using rule 44 (m -> [ INT ] .)
    /               reduce using rule 44 (m -> [ INT ] .)
    %               reduce using rule 44 (m -> [ INT ] .)
    -               reduce using rule 44 (m -> [ INT ] .)
    >               reduce using rule 44 (m -> [ INT ] .)
    <               reduce using rule 44 (m -> [ INT ] .)
    EQEQ            reduce using rule 44 (m -> [ INT ] .)
    DISTINTO        reduce using rule 44 (m -> [ INT ] .)
    AND             reduce using rule 44 (m -> [ INT ] .)
    ?               reduce using rule 44 (m -> [ INT ] .)
    OR              reduce using rule 44 (m -> [ INT ] .)
    )               reduce using rule 44 (m -> [ INT ] .)
    }               reduce using rule 44 (m -> [ INT ] .)
    ,               reduce using rule 44 (m -> [ INT ] .)
    ]               reduce using rule 44 (m -> [ INT ] .)
    :               reduce using rule 44 (m -> [ INT ] .)
    [               shift and go to state 45

    m                              shift and go to state 192

state 160

    (62) asig -> ID = . asig
    (63) asig -> ID = . ID
    (62) asig -> . ID = asig
    (63) asig -> . ID = ID

    ID              shift and go to state 193

    asig                           shift and go to state 112

state 161

    (13) if -> IF ( expBool ) . bloque else
    (16) bloque -> . sentencia ;
    (17) bloque -> . { g }
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (53) varAsig -> . ID MULEQ varAsig
    (54) varAsig -> . asig MULEQ varAsig
    (55) varAsig -> . asig MULEQ ID
    (56) varAsig -> . asig MULEQ valores
    (57) varAsig -> . finVarAsig
    (58) varAsig -> . asig
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (62) asig -> . ID = asig
    (63) asig -> . ID = ID
    (59) finVarAsig -> . ID = valores
    (60) finVarAsig -> . ID MULEQ valores
    (61) finVarAsig -> . ID MULEQ ID
    (43) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( expString )
    (26) funcBool -> . COLINEALES ( vec , vec )

    {               shift and go to state 34
    RETURN          shift and go to state 2
    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    ID              shift and go to state 18
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 15

    funcBool                       shift and go to state 3
    funcInt                        shift and go to state 5
    bloque                         shift and go to state 194
    vecVal                         shift and go to state 9
    sentencia                      shift and go to state 33
    asig                           shift and go to state 12
    funcVoid                       shift and go to state 14
    func                           shift and go to state 17
    varAsig                        shift and go to state 20
    funcString                     shift and go to state 22
    funcReturn                     shift and go to state 24
    finVarAsig                     shift and go to state 25
    varsOps                        shift and go to state 29
    varYVals                       shift and go to state 30

state 162

    (23) funcInt -> MULTIESCALAR ( vec , . eMat , param )
    (64) eMat -> . eMat + p
    (65) eMat -> . eMat - p
    (66) eMat -> . p
    (67) p -> . p * exp
    (68) p -> . p / exp
    (69) p -> . p % exp
    (70) p -> . exp
    (71) exp -> . exp ^ iSing
    (72) exp -> . iSing
    (73) iSing -> . - paren
    (74) iSing -> . + paren
    (75) iSing -> . paren
    (76) paren -> . ( eMat )
    (77) paren -> . INT
    (78) paren -> . varYVals
    (79) paren -> . FLOAT
    (80) paren -> . varsOps
    (81) paren -> . funcInt
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (43) vecVal -> . ID m

    -               shift and go to state 70
    +               shift and go to state 69
    (               shift and go to state 131
    INT             shift and go to state 76
    FLOAT           shift and go to state 77
    ID              shift and go to state 53
    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27

    eMat                           shift and go to state 195
    funcInt                        shift and go to state 63
    p                              shift and go to state 79
    iSing                          shift and go to state 72
    exp                            shift and go to state 81
    paren                          shift and go to state 74
    varsOps                        shift and go to state 132
    varYVals                       shift and go to state 134
    vecVal                         shift and go to state 9

state 163

    (25) funcString -> CAPITALIZAR ( expString ) .

    ;               reduce using rule 25 (funcString -> CAPITALIZAR ( expString ) .)
    +               reduce using rule 25 (funcString -> CAPITALIZAR ( expString ) .)
    )               reduce using rule 25 (funcString -> CAPITALIZAR ( expString ) .)
    }               reduce using rule 25 (funcString -> CAPITALIZAR ( expString ) .)
    ,               reduce using rule 25 (funcString -> CAPITALIZAR ( expString ) .)
    ]               reduce using rule 25 (funcString -> CAPITALIZAR ( expString ) .)


state 164

    (24) funcInt -> LENGTH ( vec ) .

    ^               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    *               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    /               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    %               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    +               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    -               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    EQEQ            reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    DISTINTO        reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    AND             reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    ?               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    OR              reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    )               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    ;               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    }               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    ,               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    ]               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    :               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    >               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)
    <               reduce using rule 24 (funcInt -> LENGTH ( vec ) .)


state 165

    (11) loop -> DO bloque WHILE ( expBool . ) ;

    )               shift and go to state 196


state 166

    (90) and -> and AND eq .
    (92) eq -> eq . EQEQ tBool
    (93) eq -> eq . DISTINTO tBool

    AND             reduce using rule 90 (and -> and AND eq .)
    ?               reduce using rule 90 (and -> and AND eq .)
    OR              reduce using rule 90 (and -> and AND eq .)
    ;               reduce using rule 90 (and -> and AND eq .)
    )               reduce using rule 90 (and -> and AND eq .)
    :               reduce using rule 90 (and -> and AND eq .)
    }               reduce using rule 90 (and -> and AND eq .)
    ,               reduce using rule 90 (and -> and AND eq .)
    ]               reduce using rule 90 (and -> and AND eq .)
    EQEQ            shift and go to state 124
    DISTINTO        shift and go to state 125


state 167

    (92) eq -> eq EQEQ tBool .

    EQEQ            reduce using rule 92 (eq -> eq EQEQ tBool .)
    DISTINTO        reduce using rule 92 (eq -> eq EQEQ tBool .)
    AND             reduce using rule 92 (eq -> eq EQEQ tBool .)
    ?               reduce using rule 92 (eq -> eq EQEQ tBool .)
    OR              reduce using rule 92 (eq -> eq EQEQ tBool .)
    ;               reduce using rule 92 (eq -> eq EQEQ tBool .)
    ,               reduce using rule 92 (eq -> eq EQEQ tBool .)
    )               reduce using rule 92 (eq -> eq EQEQ tBool .)
    }               reduce using rule 92 (eq -> eq EQEQ tBool .)
    ]               reduce using rule 92 (eq -> eq EQEQ tBool .)
    :               reduce using rule 92 (eq -> eq EQEQ tBool .)


state 168

    (93) eq -> eq DISTINTO tBool .

    EQEQ            reduce using rule 93 (eq -> eq DISTINTO tBool .)
    DISTINTO        reduce using rule 93 (eq -> eq DISTINTO tBool .)
    AND             reduce using rule 93 (eq -> eq DISTINTO tBool .)
    ?               reduce using rule 93 (eq -> eq DISTINTO tBool .)
    OR              reduce using rule 93 (eq -> eq DISTINTO tBool .)
    ;               reduce using rule 93 (eq -> eq DISTINTO tBool .)
    ,               reduce using rule 93 (eq -> eq DISTINTO tBool .)
    )               reduce using rule 93 (eq -> eq DISTINTO tBool .)
    }               reduce using rule 93 (eq -> eq DISTINTO tBool .)
    ]               reduce using rule 93 (eq -> eq DISTINTO tBool .)
    :               reduce using rule 93 (eq -> eq DISTINTO tBool .)


state 169

    (64) eMat -> eMat + p .
    (67) p -> p . * exp
    (68) p -> p . / exp
    (69) p -> p . % exp

    +               reduce using rule 64 (eMat -> eMat + p .)
    -               reduce using rule 64 (eMat -> eMat + p .)
    }               reduce using rule 64 (eMat -> eMat + p .)
    >               reduce using rule 64 (eMat -> eMat + p .)
    <               reduce using rule 64 (eMat -> eMat + p .)
    )               reduce using rule 64 (eMat -> eMat + p .)
    ;               reduce using rule 64 (eMat -> eMat + p .)
    EQEQ            reduce using rule 64 (eMat -> eMat + p .)
    DISTINTO        reduce using rule 64 (eMat -> eMat + p .)
    AND             reduce using rule 64 (eMat -> eMat + p .)
    ?               reduce using rule 64 (eMat -> eMat + p .)
    OR              reduce using rule 64 (eMat -> eMat + p .)
    ,               reduce using rule 64 (eMat -> eMat + p .)
    ]               reduce using rule 64 (eMat -> eMat + p .)
    :               reduce using rule 64 (eMat -> eMat + p .)
    *               shift and go to state 140
    /               shift and go to state 142
    %               shift and go to state 141


state 170

    (65) eMat -> eMat - p .
    (67) p -> p . * exp
    (68) p -> p . / exp
    (69) p -> p . % exp

    +               reduce using rule 65 (eMat -> eMat - p .)
    -               reduce using rule 65 (eMat -> eMat - p .)
    }               reduce using rule 65 (eMat -> eMat - p .)
    >               reduce using rule 65 (eMat -> eMat - p .)
    <               reduce using rule 65 (eMat -> eMat - p .)
    )               reduce using rule 65 (eMat -> eMat - p .)
    ;               reduce using rule 65 (eMat -> eMat - p .)
    EQEQ            reduce using rule 65 (eMat -> eMat - p .)
    DISTINTO        reduce using rule 65 (eMat -> eMat - p .)
    AND             reduce using rule 65 (eMat -> eMat - p .)
    ?               reduce using rule 65 (eMat -> eMat - p .)
    OR              reduce using rule 65 (eMat -> eMat - p .)
    ,               reduce using rule 65 (eMat -> eMat - p .)
    ]               reduce using rule 65 (eMat -> eMat - p .)
    :               reduce using rule 65 (eMat -> eMat - p .)
    *               shift and go to state 140
    /               shift and go to state 142
    %               shift and go to state 141


state 171

    (76) paren -> ( eMat ) .

    ^               reduce using rule 76 (paren -> ( eMat ) .)
    *               reduce using rule 76 (paren -> ( eMat ) .)
    /               reduce using rule 76 (paren -> ( eMat ) .)
    %               reduce using rule 76 (paren -> ( eMat ) .)
    ,               reduce using rule 76 (paren -> ( eMat ) .)
    +               reduce using rule 76 (paren -> ( eMat ) .)
    -               reduce using rule 76 (paren -> ( eMat ) .)
    EQEQ            reduce using rule 76 (paren -> ( eMat ) .)
    DISTINTO        reduce using rule 76 (paren -> ( eMat ) .)
    AND             reduce using rule 76 (paren -> ( eMat ) .)
    ?               reduce using rule 76 (paren -> ( eMat ) .)
    OR              reduce using rule 76 (paren -> ( eMat ) .)
    )               reduce using rule 76 (paren -> ( eMat ) .)
    ;               reduce using rule 76 (paren -> ( eMat ) .)
    }               reduce using rule 76 (paren -> ( eMat ) .)
    ]               reduce using rule 76 (paren -> ( eMat ) .)
    :               reduce using rule 76 (paren -> ( eMat ) .)
    >               reduce using rule 76 (paren -> ( eMat ) .)
    <               reduce using rule 76 (paren -> ( eMat ) .)


state 172

    (101) tBool -> ( expBool ) .

    EQEQ            reduce using rule 101 (tBool -> ( expBool ) .)
    DISTINTO        reduce using rule 101 (tBool -> ( expBool ) .)
    AND             reduce using rule 101 (tBool -> ( expBool ) .)
    ?               reduce using rule 101 (tBool -> ( expBool ) .)
    OR              reduce using rule 101 (tBool -> ( expBool ) .)
    )               reduce using rule 101 (tBool -> ( expBool ) .)
    }               reduce using rule 101 (tBool -> ( expBool ) .)
    ;               reduce using rule 101 (tBool -> ( expBool ) .)
    :               reduce using rule 101 (tBool -> ( expBool ) .)
    ,               reduce using rule 101 (tBool -> ( expBool ) .)
    ]               reduce using rule 101 (tBool -> ( expBool ) .)


state 173

    (76) paren -> ( eMat . )
    (64) eMat -> eMat . + p
    (65) eMat -> eMat . - p

    )               shift and go to state 171
    +               shift and go to state 126
    -               shift and go to state 127


state 174

    (97) menor -> tCompare < tCompare .

    EQEQ            reduce using rule 97 (menor -> tCompare < tCompare .)
    DISTINTO        reduce using rule 97 (menor -> tCompare < tCompare .)
    AND             reduce using rule 97 (menor -> tCompare < tCompare .)
    ?               reduce using rule 97 (menor -> tCompare < tCompare .)
    OR              reduce using rule 97 (menor -> tCompare < tCompare .)
    ,               reduce using rule 97 (menor -> tCompare < tCompare .)
    :               reduce using rule 97 (menor -> tCompare < tCompare .)
    )               reduce using rule 97 (menor -> tCompare < tCompare .)
    ;               reduce using rule 97 (menor -> tCompare < tCompare .)
    }               reduce using rule 97 (menor -> tCompare < tCompare .)
    ]               reduce using rule 97 (menor -> tCompare < tCompare .)


state 175

    (107) tCompare -> varYVals .
    (51) varsOps -> varYVals . MASMAS
    (52) varsOps -> varYVals . MENOSMENOS
    (78) paren -> varYVals .

  ! reduce/reduce conflict for EQEQ resolved using rule 78 (paren -> varYVals .)
  ! reduce/reduce conflict for DISTINTO resolved using rule 78 (paren -> varYVals .)
  ! reduce/reduce conflict for AND resolved using rule 78 (paren -> varYVals .)
  ! reduce/reduce conflict for ? resolved using rule 78 (paren -> varYVals .)
  ! reduce/reduce conflict for OR resolved using rule 78 (paren -> varYVals .)
  ! reduce/reduce conflict for ) resolved using rule 78 (paren -> varYVals .)
  ! reduce/reduce conflict for ; resolved using rule 78 (paren -> varYVals .)
  ! reduce/reduce conflict for } resolved using rule 78 (paren -> varYVals .)
  ! reduce/reduce conflict for , resolved using rule 78 (paren -> varYVals .)
  ! reduce/reduce conflict for ] resolved using rule 78 (paren -> varYVals .)
  ! reduce/reduce conflict for : resolved using rule 78 (paren -> varYVals .)
    MASMAS          shift and go to state 55
    MENOSMENOS      shift and go to state 56
    ^               reduce using rule 78 (paren -> varYVals .)
    *               reduce using rule 78 (paren -> varYVals .)
    /               reduce using rule 78 (paren -> varYVals .)
    %               reduce using rule 78 (paren -> varYVals .)
    +               reduce using rule 78 (paren -> varYVals .)
    -               reduce using rule 78 (paren -> varYVals .)
    EQEQ            reduce using rule 78 (paren -> varYVals .)
    DISTINTO        reduce using rule 78 (paren -> varYVals .)
    AND             reduce using rule 78 (paren -> varYVals .)
    ?               reduce using rule 78 (paren -> varYVals .)
    OR              reduce using rule 78 (paren -> varYVals .)
    )               reduce using rule 78 (paren -> varYVals .)
    ;               reduce using rule 78 (paren -> varYVals .)
    }               reduce using rule 78 (paren -> varYVals .)
    ,               reduce using rule 78 (paren -> varYVals .)
    ]               reduce using rule 78 (paren -> varYVals .)
    :               reduce using rule 78 (paren -> varYVals .)

  ! EQEQ            [ reduce using rule 107 (tCompare -> varYVals .) ]
  ! DISTINTO        [ reduce using rule 107 (tCompare -> varYVals .) ]
  ! AND             [ reduce using rule 107 (tCompare -> varYVals .) ]
  ! ?               [ reduce using rule 107 (tCompare -> varYVals .) ]
  ! OR              [ reduce using rule 107 (tCompare -> varYVals .) ]
  ! )               [ reduce using rule 107 (tCompare -> varYVals .) ]
  ! ;               [ reduce using rule 107 (tCompare -> varYVals .) ]
  ! }               [ reduce using rule 107 (tCompare -> varYVals .) ]
  ! ,               [ reduce using rule 107 (tCompare -> varYVals .) ]
  ! ]               [ reduce using rule 107 (tCompare -> varYVals .) ]
  ! :               [ reduce using rule 107 (tCompare -> varYVals .) ]


state 176

    (95) mayor -> tCompare > tCompare .

    EQEQ            reduce using rule 95 (mayor -> tCompare > tCompare .)
    DISTINTO        reduce using rule 95 (mayor -> tCompare > tCompare .)
    AND             reduce using rule 95 (mayor -> tCompare > tCompare .)
    ?               reduce using rule 95 (mayor -> tCompare > tCompare .)
    OR              reduce using rule 95 (mayor -> tCompare > tCompare .)
    )               reduce using rule 95 (mayor -> tCompare > tCompare .)
    }               reduce using rule 95 (mayor -> tCompare > tCompare .)
    ;               reduce using rule 95 (mayor -> tCompare > tCompare .)
    ,               reduce using rule 95 (mayor -> tCompare > tCompare .)
    ]               reduce using rule 95 (mayor -> tCompare > tCompare .)
    :               reduce using rule 95 (mayor -> tCompare > tCompare .)


state 177

    (88) or -> or OR and .
    (90) and -> and . AND eq

    ?               reduce using rule 88 (or -> or OR and .)
    OR              reduce using rule 88 (or -> or OR and .)
    )               reduce using rule 88 (or -> or OR and .)
    ;               reduce using rule 88 (or -> or OR and .)
    }               reduce using rule 88 (or -> or OR and .)
    ,               reduce using rule 88 (or -> or OR and .)
    ]               reduce using rule 88 (or -> or OR and .)
    :               reduce using rule 88 (or -> or OR and .)
    AND             shift and go to state 123


state 178

    (86) expBool -> or ? expBool . : expBool

    :               shift and go to state 197


state 179

    (67) p -> p * exp .
    (71) exp -> exp . ^ iSing

    *               reduce using rule 67 (p -> p * exp .)
    /               reduce using rule 67 (p -> p * exp .)
    %               reduce using rule 67 (p -> p * exp .)
    +               reduce using rule 67 (p -> p * exp .)
    -               reduce using rule 67 (p -> p * exp .)
    EQEQ            reduce using rule 67 (p -> p * exp .)
    DISTINTO        reduce using rule 67 (p -> p * exp .)
    AND             reduce using rule 67 (p -> p * exp .)
    ?               reduce using rule 67 (p -> p * exp .)
    OR              reduce using rule 67 (p -> p * exp .)
    )               reduce using rule 67 (p -> p * exp .)
    ;               reduce using rule 67 (p -> p * exp .)
    }               reduce using rule 67 (p -> p * exp .)
    ,               reduce using rule 67 (p -> p * exp .)
    ]               reduce using rule 67 (p -> p * exp .)
    :               reduce using rule 67 (p -> p * exp .)
    >               reduce using rule 67 (p -> p * exp .)
    <               reduce using rule 67 (p -> p * exp .)
    ^               shift and go to state 143


state 180

    (69) p -> p % exp .
    (71) exp -> exp . ^ iSing

    *               reduce using rule 69 (p -> p % exp .)
    /               reduce using rule 69 (p -> p % exp .)
    %               reduce using rule 69 (p -> p % exp .)
    +               reduce using rule 69 (p -> p % exp .)
    -               reduce using rule 69 (p -> p % exp .)
    EQEQ            reduce using rule 69 (p -> p % exp .)
    DISTINTO        reduce using rule 69 (p -> p % exp .)
    AND             reduce using rule 69 (p -> p % exp .)
    ?               reduce using rule 69 (p -> p % exp .)
    OR              reduce using rule 69 (p -> p % exp .)
    )               reduce using rule 69 (p -> p % exp .)
    ;               reduce using rule 69 (p -> p % exp .)
    }               reduce using rule 69 (p -> p % exp .)
    ,               reduce using rule 69 (p -> p % exp .)
    ]               reduce using rule 69 (p -> p % exp .)
    :               reduce using rule 69 (p -> p % exp .)
    >               reduce using rule 69 (p -> p % exp .)
    <               reduce using rule 69 (p -> p % exp .)
    ^               shift and go to state 143


state 181

    (68) p -> p / exp .
    (71) exp -> exp . ^ iSing

    *               reduce using rule 68 (p -> p / exp .)
    /               reduce using rule 68 (p -> p / exp .)
    %               reduce using rule 68 (p -> p / exp .)
    +               reduce using rule 68 (p -> p / exp .)
    -               reduce using rule 68 (p -> p / exp .)
    EQEQ            reduce using rule 68 (p -> p / exp .)
    DISTINTO        reduce using rule 68 (p -> p / exp .)
    AND             reduce using rule 68 (p -> p / exp .)
    ?               reduce using rule 68 (p -> p / exp .)
    OR              reduce using rule 68 (p -> p / exp .)
    )               reduce using rule 68 (p -> p / exp .)
    ;               reduce using rule 68 (p -> p / exp .)
    }               reduce using rule 68 (p -> p / exp .)
    ,               reduce using rule 68 (p -> p / exp .)
    ]               reduce using rule 68 (p -> p / exp .)
    :               reduce using rule 68 (p -> p / exp .)
    >               reduce using rule 68 (p -> p / exp .)
    <               reduce using rule 68 (p -> p / exp .)
    ^               shift and go to state 143


state 182

    (71) exp -> exp ^ iSing .

    ^               reduce using rule 71 (exp -> exp ^ iSing .)
    *               reduce using rule 71 (exp -> exp ^ iSing .)
    /               reduce using rule 71 (exp -> exp ^ iSing .)
    %               reduce using rule 71 (exp -> exp ^ iSing .)
    )               reduce using rule 71 (exp -> exp ^ iSing .)
    +               reduce using rule 71 (exp -> exp ^ iSing .)
    -               reduce using rule 71 (exp -> exp ^ iSing .)
    >               reduce using rule 71 (exp -> exp ^ iSing .)
    <               reduce using rule 71 (exp -> exp ^ iSing .)
    ;               reduce using rule 71 (exp -> exp ^ iSing .)
    }               reduce using rule 71 (exp -> exp ^ iSing .)
    ,               reduce using rule 71 (exp -> exp ^ iSing .)
    ]               reduce using rule 71 (exp -> exp ^ iSing .)
    EQEQ            reduce using rule 71 (exp -> exp ^ iSing .)
    DISTINTO        reduce using rule 71 (exp -> exp ^ iSing .)
    AND             reduce using rule 71 (exp -> exp ^ iSing .)
    ?               reduce using rule 71 (exp -> exp ^ iSing .)
    OR              reduce using rule 71 (exp -> exp ^ iSing .)
    :               reduce using rule 71 (exp -> exp ^ iSing .)


state 183

    (10) loop -> WHILE ( expBool ) bloque .

    RETURN          reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    MENOSMENOS      reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    MASMAS          reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    ID              reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    IF              reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    WHILE           reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    DO              reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    FOR             reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    PRINT           reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    MULTIESCALAR    reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    LENGTH          reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    CAPITALIZAR     reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    COLINEALES      reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    }               reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)
    $end            reduce using rule 10 (loop -> WHILE ( expBool ) bloque .)


state 184

    (82) expString -> expString + STRING .

    +               reduce using rule 82 (expString -> expString + STRING .)
    ,               reduce using rule 82 (expString -> expString + STRING .)
    ;               reduce using rule 82 (expString -> expString + STRING .)
    }               reduce using rule 82 (expString -> expString + STRING .)
    ]               reduce using rule 82 (expString -> expString + STRING .)
    )               reduce using rule 82 (expString -> expString + STRING .)


state 185

    (40) valores -> ID . ID .

    }               reduce using rule 40 (valores -> ID . ID .)
    )               reduce using rule 40 (valores -> ID . ID .)
    ,               reduce using rule 40 (valores -> ID . ID .)
    ]               reduce using rule 40 (valores -> ID . ID .)
    ;               reduce using rule 40 (valores -> ID . ID .)


state 186

    (46) reg -> { campos } .

    ,               reduce using rule 46 (reg -> { campos } .)
    ;               reduce using rule 46 (reg -> { campos } .)
    ]               reduce using rule 46 (reg -> { campos } .)
    )               reduce using rule 46 (reg -> { campos } .)
    }               reduce using rule 46 (reg -> { campos } .)


state 187

    (47) campos -> ID : . valores , campos
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . expString
    (37) valores -> . varYVals
    (38) valores -> . funcReturn
    (39) valores -> . reg
    (40) valores -> . ID . ID
    (64) eMat -> . eMat + p
    (65) eMat -> . eMat - p
    (66) eMat -> . p
    (86) expBool -> . or ? expBool : expBool
    (87) expBool -> . or
    (82) expString -> . expString + STRING
    (83) expString -> . STRING
    (84) expString -> . varYVals
    (85) expString -> . funcString
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (46) reg -> . { campos }
    (67) p -> . p * exp
    (68) p -> . p / exp
    (69) p -> . p % exp
    (70) p -> . exp
    (88) or -> . or OR and
    (89) or -> . and
    (25) funcString -> . CAPITALIZAR ( expString )
    (43) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (26) funcBool -> . COLINEALES ( vec , vec )
    (71) exp -> . exp ^ iSing
    (72) exp -> . iSing
    (90) and -> . and AND eq
    (91) and -> . eq
    (73) iSing -> . - paren
    (74) iSing -> . + paren
    (75) iSing -> . paren
    (92) eq -> . eq EQEQ tBool
    (93) eq -> . eq DISTINTO tBool
    (94) eq -> . mayor
    (76) paren -> . ( eMat )
    (77) paren -> . INT
    (78) paren -> . varYVals
    (79) paren -> . FLOAT
    (80) paren -> . varsOps
    (81) paren -> . funcInt
    (95) mayor -> . tCompare > tCompare
    (96) mayor -> . menor
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (105) tCompare -> . eMat
    (106) tCompare -> . varsOps
    (107) tCompare -> . varYVals
    (97) menor -> . tCompare < tCompare
    (98) menor -> . not
    (99) not -> . NOT not
    (100) not -> . tBool
    (101) tBool -> . ( expBool )
    (102) tBool -> . BOOL
    (103) tBool -> . varYVals
    (104) tBool -> . funcBool

    ID              shift and go to state 94
    STRING          shift and go to state 92
    {               shift and go to state 98
    CAPITALIZAR     shift and go to state 26
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27
    COLINEALES      shift and go to state 15
    -               shift and go to state 70
    +               shift and go to state 69
    (               shift and go to state 89
    INT             shift and go to state 76
    FLOAT           shift and go to state 77
    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    NOT             shift and go to state 82
    BOOL            shift and go to state 71

    and                            shift and go to state 61
    funcBool                       shift and go to state 86
    funcInt                        shift and go to state 87
    menor                          shift and go to state 64
    eq                             shift and go to state 65
    vecVal                         shift and go to state 9
    eMat                           shift and go to state 88
    mayor                          shift and go to state 66
    paren                          shift and go to state 74
    reg                            shift and go to state 90
    varsOps                        shift and go to state 91
    expString                      shift and go to state 93
    tCompare                       shift and go to state 73
    not                            shift and go to state 75
    funcString                     shift and go to state 95
    funcReturn                     shift and go to state 96
    valores                        shift and go to state 198
    p                              shift and go to state 79
    iSing                          shift and go to state 72
    exp                            shift and go to state 81
    tBool                          shift and go to state 83
    varYVals                       shift and go to state 99
    or                             shift and go to state 78
    expBool                        shift and go to state 100

state 188

    (26) funcBool -> COLINEALES ( vec , vec . )

    )               shift and go to state 199


state 189

    (32) elem -> valores , . elem
    (32) elem -> . valores , elem
    (33) elem -> . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . expString
    (37) valores -> . varYVals
    (38) valores -> . funcReturn
    (39) valores -> . reg
    (40) valores -> . ID . ID
    (64) eMat -> . eMat + p
    (65) eMat -> . eMat - p
    (66) eMat -> . p
    (86) expBool -> . or ? expBool : expBool
    (87) expBool -> . or
    (82) expString -> . expString + STRING
    (83) expString -> . STRING
    (84) expString -> . varYVals
    (85) expString -> . funcString
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (46) reg -> . { campos }
    (67) p -> . p * exp
    (68) p -> . p / exp
    (69) p -> . p % exp
    (70) p -> . exp
    (88) or -> . or OR and
    (89) or -> . and
    (25) funcString -> . CAPITALIZAR ( expString )
    (43) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (26) funcBool -> . COLINEALES ( vec , vec )
    (71) exp -> . exp ^ iSing
    (72) exp -> . iSing
    (90) and -> . and AND eq
    (91) and -> . eq
    (73) iSing -> . - paren
    (74) iSing -> . + paren
    (75) iSing -> . paren
    (92) eq -> . eq EQEQ tBool
    (93) eq -> . eq DISTINTO tBool
    (94) eq -> . mayor
    (76) paren -> . ( eMat )
    (77) paren -> . INT
    (78) paren -> . varYVals
    (79) paren -> . FLOAT
    (80) paren -> . varsOps
    (81) paren -> . funcInt
    (95) mayor -> . tCompare > tCompare
    (96) mayor -> . menor
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (105) tCompare -> . eMat
    (106) tCompare -> . varsOps
    (107) tCompare -> . varYVals
    (97) menor -> . tCompare < tCompare
    (98) menor -> . not
    (99) not -> . NOT not
    (100) not -> . tBool
    (101) tBool -> . ( expBool )
    (102) tBool -> . BOOL
    (103) tBool -> . varYVals
    (104) tBool -> . funcBool

    ID              shift and go to state 94
    STRING          shift and go to state 92
    {               shift and go to state 98
    CAPITALIZAR     shift and go to state 26
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27
    COLINEALES      shift and go to state 15
    -               shift and go to state 70
    +               shift and go to state 69
    (               shift and go to state 89
    INT             shift and go to state 76
    FLOAT           shift and go to state 77
    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    NOT             shift and go to state 82
    BOOL            shift and go to state 71

    and                            shift and go to state 61
    funcBool                       shift and go to state 86
    funcInt                        shift and go to state 87
    elem                           shift and go to state 200
    menor                          shift and go to state 64
    eq                             shift and go to state 65
    vecVal                         shift and go to state 9
    eMat                           shift and go to state 88
    mayor                          shift and go to state 66
    paren                          shift and go to state 74
    reg                            shift and go to state 90
    varsOps                        shift and go to state 91
    expString                      shift and go to state 93
    tCompare                       shift and go to state 73
    not                            shift and go to state 75
    funcString                     shift and go to state 95
    funcReturn                     shift and go to state 96
    valores                        shift and go to state 156
    p                              shift and go to state 79
    iSing                          shift and go to state 72
    exp                            shift and go to state 81
    tBool                          shift and go to state 83
    varYVals                       shift and go to state 99
    or                             shift and go to state 78
    expBool                        shift and go to state 100

state 190

    (31) vec -> [ elem ] .

    )               reduce using rule 31 (vec -> [ elem ] .)
    ,               reduce using rule 31 (vec -> [ elem ] .)


state 191

    (12) loop -> FOR ( varAsig ; expBool . ; varsOps ) bloque

    ;               shift and go to state 201


state 192

    (45) m -> [ INT ] m .

    MASMAS          reduce using rule 45 (m -> [ INT ] m .)
    MENOSMENOS      reduce using rule 45 (m -> [ INT ] m .)
    ;               reduce using rule 45 (m -> [ INT ] m .)
    +               reduce using rule 45 (m -> [ INT ] m .)
    ^               reduce using rule 45 (m -> [ INT ] m .)
    *               reduce using rule 45 (m -> [ INT ] m .)
    /               reduce using rule 45 (m -> [ INT ] m .)
    %               reduce using rule 45 (m -> [ INT ] m .)
    -               reduce using rule 45 (m -> [ INT ] m .)
    >               reduce using rule 45 (m -> [ INT ] m .)
    <               reduce using rule 45 (m -> [ INT ] m .)
    EQEQ            reduce using rule 45 (m -> [ INT ] m .)
    DISTINTO        reduce using rule 45 (m -> [ INT ] m .)
    AND             reduce using rule 45 (m -> [ INT ] m .)
    ?               reduce using rule 45 (m -> [ INT ] m .)
    OR              reduce using rule 45 (m -> [ INT ] m .)
    )               reduce using rule 45 (m -> [ INT ] m .)
    }               reduce using rule 45 (m -> [ INT ] m .)
    ,               reduce using rule 45 (m -> [ INT ] m .)
    ]               reduce using rule 45 (m -> [ INT ] m .)
    :               reduce using rule 45 (m -> [ INT ] m .)


state 193

    (63) asig -> ID = ID .
    (62) asig -> ID . = asig
    (63) asig -> ID . = ID

    MULEQ           reduce using rule 63 (asig -> ID = ID .)
    ;               reduce using rule 63 (asig -> ID = ID .)
    =               shift and go to state 160


state 194

    (13) if -> IF ( expBool ) bloque . else
    (14) else -> . ELSE bloque
    (15) else -> . empty
    (30) empty -> .

    ELSE            shift and go to state 204
    RETURN          reduce using rule 30 (empty -> .)
    MENOSMENOS      reduce using rule 30 (empty -> .)
    MASMAS          reduce using rule 30 (empty -> .)
    ID              reduce using rule 30 (empty -> .)
    IF              reduce using rule 30 (empty -> .)
    WHILE           reduce using rule 30 (empty -> .)
    DO              reduce using rule 30 (empty -> .)
    FOR             reduce using rule 30 (empty -> .)
    PRINT           reduce using rule 30 (empty -> .)
    MULTIESCALAR    reduce using rule 30 (empty -> .)
    LENGTH          reduce using rule 30 (empty -> .)
    CAPITALIZAR     reduce using rule 30 (empty -> .)
    COLINEALES      reduce using rule 30 (empty -> .)
    $end            reduce using rule 30 (empty -> .)
    }               reduce using rule 30 (empty -> .)

    empty                          shift and go to state 203
    else                           shift and go to state 202

state 195

    (23) funcInt -> MULTIESCALAR ( vec , eMat . , param )
    (64) eMat -> eMat . + p
    (65) eMat -> eMat . - p

    ,               shift and go to state 205
    +               shift and go to state 126
    -               shift and go to state 127


state 196

    (11) loop -> DO bloque WHILE ( expBool ) . ;

    ;               shift and go to state 206


state 197

    (86) expBool -> or ? expBool : . expBool
    (86) expBool -> . or ? expBool : expBool
    (87) expBool -> . or
    (88) or -> . or OR and
    (89) or -> . and
    (90) and -> . and AND eq
    (91) and -> . eq
    (92) eq -> . eq EQEQ tBool
    (93) eq -> . eq DISTINTO tBool
    (94) eq -> . mayor
    (95) mayor -> . tCompare > tCompare
    (96) mayor -> . menor
    (105) tCompare -> . eMat
    (106) tCompare -> . varsOps
    (107) tCompare -> . varYVals
    (97) menor -> . tCompare < tCompare
    (98) menor -> . not
    (64) eMat -> . eMat + p
    (65) eMat -> . eMat - p
    (66) eMat -> . p
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (99) not -> . NOT not
    (100) not -> . tBool
    (67) p -> . p * exp
    (68) p -> . p / exp
    (69) p -> . p % exp
    (70) p -> . exp
    (43) vecVal -> . ID m
    (101) tBool -> . ( expBool )
    (102) tBool -> . BOOL
    (103) tBool -> . varYVals
    (104) tBool -> . funcBool
    (71) exp -> . exp ^ iSing
    (72) exp -> . iSing
    (26) funcBool -> . COLINEALES ( vec , vec )
    (73) iSing -> . - paren
    (74) iSing -> . + paren
    (75) iSing -> . paren
    (76) paren -> . ( eMat )
    (77) paren -> . INT
    (78) paren -> . varYVals
    (79) paren -> . FLOAT
    (80) paren -> . varsOps
    (81) paren -> . funcInt
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )

    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    ID              shift and go to state 53
    NOT             shift and go to state 82
    (               shift and go to state 68
    BOOL            shift and go to state 71
    COLINEALES      shift and go to state 15
    -               shift and go to state 70
    +               shift and go to state 69
    INT             shift and go to state 76
    FLOAT           shift and go to state 77
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27

    and                            shift and go to state 61
    funcBool                       shift and go to state 62
    funcInt                        shift and go to state 63
    menor                          shift and go to state 64
    eq                             shift and go to state 65
    mayor                          shift and go to state 66
    eMat                           shift and go to state 67
    vecVal                         shift and go to state 9
    paren                          shift and go to state 74
    iSing                          shift and go to state 72
    tCompare                       shift and go to state 73
    not                            shift and go to state 75
    p                              shift and go to state 79
    varsOps                        shift and go to state 80
    exp                            shift and go to state 81
    tBool                          shift and go to state 83
    varYVals                       shift and go to state 84
    or                             shift and go to state 78
    expBool                        shift and go to state 207

state 198

    (47) campos -> ID : valores . , campos

    ,               shift and go to state 208


state 199

    (26) funcBool -> COLINEALES ( vec , vec ) .

    ,               reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    ]               reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    EQEQ            reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    DISTINTO        reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    AND             reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    ?               reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    OR              reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    ;               reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    )               reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    }               reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)
    :               reduce using rule 26 (funcBool -> COLINEALES ( vec , vec ) .)


state 200

    (32) elem -> valores , elem .

    ]               reduce using rule 32 (elem -> valores , elem .)


state 201

    (12) loop -> FOR ( varAsig ; expBool ; . varsOps ) bloque
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (43) vecVal -> . ID m

    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    ID              shift and go to state 53

    varsOps                        shift and go to state 209
    varYVals                       shift and go to state 30
    vecVal                         shift and go to state 9

state 202

    (13) if -> IF ( expBool ) bloque else .

    RETURN          reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    MENOSMENOS      reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    MASMAS          reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    ID              reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    IF              reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    WHILE           reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    DO              reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    FOR             reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    PRINT           reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    MULTIESCALAR    reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    LENGTH          reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    CAPITALIZAR     reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    COLINEALES      reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    }               reduce using rule 13 (if -> IF ( expBool ) bloque else .)
    $end            reduce using rule 13 (if -> IF ( expBool ) bloque else .)


state 203

    (15) else -> empty .

    RETURN          reduce using rule 15 (else -> empty .)
    MENOSMENOS      reduce using rule 15 (else -> empty .)
    MASMAS          reduce using rule 15 (else -> empty .)
    ID              reduce using rule 15 (else -> empty .)
    IF              reduce using rule 15 (else -> empty .)
    WHILE           reduce using rule 15 (else -> empty .)
    DO              reduce using rule 15 (else -> empty .)
    FOR             reduce using rule 15 (else -> empty .)
    PRINT           reduce using rule 15 (else -> empty .)
    MULTIESCALAR    reduce using rule 15 (else -> empty .)
    LENGTH          reduce using rule 15 (else -> empty .)
    CAPITALIZAR     reduce using rule 15 (else -> empty .)
    COLINEALES      reduce using rule 15 (else -> empty .)
    $end            reduce using rule 15 (else -> empty .)
    }               reduce using rule 15 (else -> empty .)


state 204

    (14) else -> ELSE . bloque
    (16) bloque -> . sentencia ;
    (17) bloque -> . { g }
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (53) varAsig -> . ID MULEQ varAsig
    (54) varAsig -> . asig MULEQ varAsig
    (55) varAsig -> . asig MULEQ ID
    (56) varAsig -> . asig MULEQ valores
    (57) varAsig -> . finVarAsig
    (58) varAsig -> . asig
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (62) asig -> . ID = asig
    (63) asig -> . ID = ID
    (59) finVarAsig -> . ID = valores
    (60) finVarAsig -> . ID MULEQ valores
    (61) finVarAsig -> . ID MULEQ ID
    (43) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( expString )
    (26) funcBool -> . COLINEALES ( vec , vec )

    {               shift and go to state 34
    RETURN          shift and go to state 2
    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    ID              shift and go to state 18
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 15

    varAsig                        shift and go to state 20
    sentencia                      shift and go to state 33
    funcInt                        shift and go to state 5
    funcBool                       shift and go to state 3
    funcString                     shift and go to state 22
    asig                           shift and go to state 12
    funcVoid                       shift and go to state 14
    funcReturn                     shift and go to state 24
    finVarAsig                     shift and go to state 25
    varsOps                        shift and go to state 29
    func                           shift and go to state 17
    bloque                         shift and go to state 210
    varYVals                       shift and go to state 30
    vecVal                         shift and go to state 9

state 205

    (23) funcInt -> MULTIESCALAR ( vec , eMat , . param )
    (28) param -> . expBool
    (29) param -> . empty
    (86) expBool -> . or ? expBool : expBool
    (87) expBool -> . or
    (30) empty -> .
    (88) or -> . or OR and
    (89) or -> . and
    (90) and -> . and AND eq
    (91) and -> . eq
    (92) eq -> . eq EQEQ tBool
    (93) eq -> . eq DISTINTO tBool
    (94) eq -> . mayor
    (95) mayor -> . tCompare > tCompare
    (96) mayor -> . menor
    (105) tCompare -> . eMat
    (106) tCompare -> . varsOps
    (107) tCompare -> . varYVals
    (97) menor -> . tCompare < tCompare
    (98) menor -> . not
    (64) eMat -> . eMat + p
    (65) eMat -> . eMat - p
    (66) eMat -> . p
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (99) not -> . NOT not
    (100) not -> . tBool
    (67) p -> . p * exp
    (68) p -> . p / exp
    (69) p -> . p % exp
    (70) p -> . exp
    (43) vecVal -> . ID m
    (101) tBool -> . ( expBool )
    (102) tBool -> . BOOL
    (103) tBool -> . varYVals
    (104) tBool -> . funcBool
    (71) exp -> . exp ^ iSing
    (72) exp -> . iSing
    (26) funcBool -> . COLINEALES ( vec , vec )
    (73) iSing -> . - paren
    (74) iSing -> . + paren
    (75) iSing -> . paren
    (76) paren -> . ( eMat )
    (77) paren -> . INT
    (78) paren -> . varYVals
    (79) paren -> . FLOAT
    (80) paren -> . varsOps
    (81) paren -> . funcInt
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )

    )               reduce using rule 30 (empty -> .)
    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    ID              shift and go to state 53
    NOT             shift and go to state 82
    (               shift and go to state 68
    BOOL            shift and go to state 71
    COLINEALES      shift and go to state 15
    -               shift and go to state 70
    +               shift and go to state 69
    INT             shift and go to state 76
    FLOAT           shift and go to state 77
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27

    and                            shift and go to state 61
    funcBool                       shift and go to state 62
    funcInt                        shift and go to state 63
    menor                          shift and go to state 64
    eq                             shift and go to state 65
    mayor                          shift and go to state 66
    eMat                           shift and go to state 67
    param                          shift and go to state 211
    vecVal                         shift and go to state 9
    paren                          shift and go to state 74
    empty                          shift and go to state 212
    varsOps                        shift and go to state 80
    tCompare                       shift and go to state 73
    not                            shift and go to state 75
    p                              shift and go to state 79
    iSing                          shift and go to state 72
    exp                            shift and go to state 81
    tBool                          shift and go to state 83
    varYVals                       shift and go to state 84
    or                             shift and go to state 78
    expBool                        shift and go to state 213

state 206

    (11) loop -> DO bloque WHILE ( expBool ) ; .

    RETURN          reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    MENOSMENOS      reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    MASMAS          reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    ID              reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    IF              reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    WHILE           reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    DO              reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    FOR             reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    PRINT           reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    MULTIESCALAR    reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    LENGTH          reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    CAPITALIZAR     reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    COLINEALES      reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    }               reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)
    $end            reduce using rule 11 (loop -> DO bloque WHILE ( expBool ) ; .)


state 207

    (86) expBool -> or ? expBool : expBool .

    )               reduce using rule 86 (expBool -> or ? expBool : expBool .)
    ;               reduce using rule 86 (expBool -> or ? expBool : expBool .)
    }               reduce using rule 86 (expBool -> or ? expBool : expBool .)
    ,               reduce using rule 86 (expBool -> or ? expBool : expBool .)
    ]               reduce using rule 86 (expBool -> or ? expBool : expBool .)
    :               reduce using rule 86 (expBool -> or ? expBool : expBool .)


state 208

    (47) campos -> ID : valores , . campos
    (47) campos -> . ID : valores , campos
    (48) campos -> . valores
    (34) valores -> . eMat
    (35) valores -> . expBool
    (36) valores -> . expString
    (37) valores -> . varYVals
    (38) valores -> . funcReturn
    (39) valores -> . reg
    (40) valores -> . ID . ID
    (64) eMat -> . eMat + p
    (65) eMat -> . eMat - p
    (66) eMat -> . p
    (86) expBool -> . or ? expBool : expBool
    (87) expBool -> . or
    (82) expString -> . expString + STRING
    (83) expString -> . STRING
    (84) expString -> . varYVals
    (85) expString -> . funcString
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (46) reg -> . { campos }
    (67) p -> . p * exp
    (68) p -> . p / exp
    (69) p -> . p % exp
    (70) p -> . exp
    (88) or -> . or OR and
    (89) or -> . and
    (25) funcString -> . CAPITALIZAR ( expString )
    (43) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (26) funcBool -> . COLINEALES ( vec , vec )
    (71) exp -> . exp ^ iSing
    (72) exp -> . iSing
    (90) and -> . and AND eq
    (91) and -> . eq
    (73) iSing -> . - paren
    (74) iSing -> . + paren
    (75) iSing -> . paren
    (92) eq -> . eq EQEQ tBool
    (93) eq -> . eq DISTINTO tBool
    (94) eq -> . mayor
    (76) paren -> . ( eMat )
    (77) paren -> . INT
    (78) paren -> . varYVals
    (79) paren -> . FLOAT
    (80) paren -> . varsOps
    (81) paren -> . funcInt
    (95) mayor -> . tCompare > tCompare
    (96) mayor -> . menor
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (105) tCompare -> . eMat
    (106) tCompare -> . varsOps
    (107) tCompare -> . varYVals
    (97) menor -> . tCompare < tCompare
    (98) menor -> . not
    (99) not -> . NOT not
    (100) not -> . tBool
    (101) tBool -> . ( expBool )
    (102) tBool -> . BOOL
    (103) tBool -> . varYVals
    (104) tBool -> . funcBool

    ID              shift and go to state 153
    STRING          shift and go to state 92
    {               shift and go to state 98
    CAPITALIZAR     shift and go to state 26
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27
    COLINEALES      shift and go to state 15
    -               shift and go to state 70
    +               shift and go to state 69
    (               shift and go to state 89
    INT             shift and go to state 76
    FLOAT           shift and go to state 77
    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    NOT             shift and go to state 82
    BOOL            shift and go to state 71

    and                            shift and go to state 61
    funcBool                       shift and go to state 86
    funcInt                        shift and go to state 87
    menor                          shift and go to state 64
    eq                             shift and go to state 65
    vecVal                         shift and go to state 9
    eMat                           shift and go to state 88
    mayor                          shift and go to state 66
    paren                          shift and go to state 74
    reg                            shift and go to state 90
    varsOps                        shift and go to state 91
    expString                      shift and go to state 93
    tCompare                       shift and go to state 73
    campos                         shift and go to state 214
    not                            shift and go to state 75
    funcString                     shift and go to state 95
    funcReturn                     shift and go to state 96
    valores                        shift and go to state 154
    p                              shift and go to state 79
    iSing                          shift and go to state 72
    exp                            shift and go to state 81
    tBool                          shift and go to state 83
    varYVals                       shift and go to state 99
    or                             shift and go to state 78
    expBool                        shift and go to state 100

state 209

    (12) loop -> FOR ( varAsig ; expBool ; varsOps . ) bloque

    )               shift and go to state 215


state 210

    (14) else -> ELSE bloque .

    RETURN          reduce using rule 14 (else -> ELSE bloque .)
    MENOSMENOS      reduce using rule 14 (else -> ELSE bloque .)
    MASMAS          reduce using rule 14 (else -> ELSE bloque .)
    ID              reduce using rule 14 (else -> ELSE bloque .)
    IF              reduce using rule 14 (else -> ELSE bloque .)
    WHILE           reduce using rule 14 (else -> ELSE bloque .)
    DO              reduce using rule 14 (else -> ELSE bloque .)
    FOR             reduce using rule 14 (else -> ELSE bloque .)
    PRINT           reduce using rule 14 (else -> ELSE bloque .)
    MULTIESCALAR    reduce using rule 14 (else -> ELSE bloque .)
    LENGTH          reduce using rule 14 (else -> ELSE bloque .)
    CAPITALIZAR     reduce using rule 14 (else -> ELSE bloque .)
    COLINEALES      reduce using rule 14 (else -> ELSE bloque .)
    $end            reduce using rule 14 (else -> ELSE bloque .)
    }               reduce using rule 14 (else -> ELSE bloque .)


state 211

    (23) funcInt -> MULTIESCALAR ( vec , eMat , param . )

    )               shift and go to state 216


state 212

    (29) param -> empty .

    )               reduce using rule 29 (param -> empty .)


state 213

    (28) param -> expBool .

    )               reduce using rule 28 (param -> expBool .)


state 214

    (47) campos -> ID : valores , campos .

    }               reduce using rule 47 (campos -> ID : valores , campos .)


state 215

    (12) loop -> FOR ( varAsig ; expBool ; varsOps ) . bloque
    (16) bloque -> . sentencia ;
    (17) bloque -> . { g }
    (4) sentencia -> . varsOps ;
    (5) sentencia -> . func ;
    (6) sentencia -> . varAsig ;
    (7) sentencia -> . RETURN ;
    (49) varsOps -> . MENOSMENOS varYVals
    (50) varsOps -> . MASMAS varYVals
    (51) varsOps -> . varYVals MASMAS
    (52) varsOps -> . varYVals MENOSMENOS
    (18) func -> . funcReturn
    (19) func -> . funcVoid
    (53) varAsig -> . ID MULEQ varAsig
    (54) varAsig -> . asig MULEQ varAsig
    (55) varAsig -> . asig MULEQ ID
    (56) varAsig -> . asig MULEQ valores
    (57) varAsig -> . finVarAsig
    (58) varAsig -> . asig
    (41) varYVals -> . ID
    (42) varYVals -> . vecVal
    (20) funcReturn -> . funcInt
    (21) funcReturn -> . funcString
    (22) funcReturn -> . funcBool
    (27) funcVoid -> . PRINT ( valores )
    (62) asig -> . ID = asig
    (63) asig -> . ID = ID
    (59) finVarAsig -> . ID = valores
    (60) finVarAsig -> . ID MULEQ valores
    (61) finVarAsig -> . ID MULEQ ID
    (43) vecVal -> . ID m
    (23) funcInt -> . MULTIESCALAR ( vec , eMat , param )
    (24) funcInt -> . LENGTH ( vec )
    (25) funcString -> . CAPITALIZAR ( expString )
    (26) funcBool -> . COLINEALES ( vec , vec )

    {               shift and go to state 34
    RETURN          shift and go to state 2
    MENOSMENOS      shift and go to state 31
    MASMAS          shift and go to state 28
    ID              shift and go to state 18
    PRINT           shift and go to state 8
    MULTIESCALAR    shift and go to state 23
    LENGTH          shift and go to state 27
    CAPITALIZAR     shift and go to state 26
    COLINEALES      shift and go to state 15

    funcBool                       shift and go to state 3
    funcInt                        shift and go to state 5
    bloque                         shift and go to state 217
    vecVal                         shift and go to state 9
    sentencia                      shift and go to state 33
    asig                           shift and go to state 12
    funcVoid                       shift and go to state 14
    func                           shift and go to state 17
    varAsig                        shift and go to state 20
    funcString                     shift and go to state 22
    funcReturn                     shift and go to state 24
    finVarAsig                     shift and go to state 25
    varsOps                        shift and go to state 29
    varYVals                       shift and go to state 30

state 216

    (23) funcInt -> MULTIESCALAR ( vec , eMat , param ) .

    ^               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    *               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    /               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    %               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    +               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    -               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    EQEQ            reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    DISTINTO        reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    AND             reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    ?               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    OR              reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    )               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    ;               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    }               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    ,               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    ]               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    :               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    >               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)
    <               reduce using rule 23 (funcInt -> MULTIESCALAR ( vec , eMat , param ) .)


state 217

    (12) loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .

    RETURN          reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    MENOSMENOS      reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    MASMAS          reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    ID              reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    IF              reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    WHILE           reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    DO              reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    FOR             reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    PRINT           reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    MULTIESCALAR    reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    LENGTH          reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    CAPITALIZAR     reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    COLINEALES      reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    }               reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)
    $end            reduce using rule 12 (loop -> FOR ( varAsig ; expBool ; varsOps ) bloque .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 80 resolved using rule (paren -> varsOps)
WARNING: rejected rule (tCompare -> varsOps) in state 80
WARNING: reduce/reduce conflict in state 84 resolved using rule (paren -> varYVals)
WARNING: rejected rule (tCompare -> varYVals) in state 84
WARNING: reduce/reduce conflict in state 86 resolved using rule (funcReturn -> funcBool)
WARNING: rejected rule (tBool -> funcBool) in state 86
WARNING: reduce/reduce conflict in state 87 resolved using rule (funcReturn -> funcInt)
WARNING: rejected rule (paren -> funcInt) in state 87
WARNING: reduce/reduce conflict in state 91 resolved using rule (paren -> varsOps)
WARNING: rejected rule (tCompare -> varsOps) in state 91
WARNING: reduce/reduce conflict in state 95 resolved using rule (funcReturn -> funcString)
WARNING: rejected rule (expString -> funcString) in state 95
WARNING: reduce/reduce conflict in state 99 resolved using rule (valores -> varYVals)
WARNING: rejected rule (expString -> varYVals) in state 99
WARNING: reduce/reduce conflict in state 99 resolved using rule (paren -> varYVals)
WARNING: rejected rule (expString -> varYVals) in state 99
WARNING: reduce/reduce conflict in state 99 resolved using rule (valores -> varYVals)
WARNING: rejected rule (paren -> varYVals) in state 99
WARNING: reduce/reduce conflict in state 99 resolved using rule (paren -> varYVals)
WARNING: rejected rule (tCompare -> varYVals) in state 99
WARNING: reduce/reduce conflict in state 99 resolved using rule (valores -> varYVals)
WARNING: rejected rule (tBool -> varYVals) in state 99
WARNING: reduce/reduce conflict in state 101 resolved using rule (varYVals -> ID)
WARNING: rejected rule (varAsig -> asig MULEQ ID) in state 101
WARNING: reduce/reduce conflict in state 108 resolved using rule (varYVals -> ID)
WARNING: rejected rule (finVarAsig -> ID MULEQ ID) in state 108
WARNING: reduce/reduce conflict in state 113 resolved using rule (varYVals -> ID)
WARNING: rejected rule (asig -> ID = ID) in state 113
WARNING: reduce/reduce conflict in state 129 resolved using rule (paren -> varYVals)
WARNING: rejected rule (tCompare -> varYVals) in state 129
WARNING: reduce/reduce conflict in state 129 resolved using rule (paren -> varYVals)
WARNING: rejected rule (tBool -> varYVals) in state 129
WARNING: reduce/reduce conflict in state 148 resolved using rule (paren -> varYVals)
WARNING: rejected rule (tCompare -> varYVals) in state 148
WARNING: reduce/reduce conflict in state 148 resolved using rule (paren -> varYVals)
WARNING: rejected rule (tBool -> varYVals) in state 148
WARNING: reduce/reduce conflict in state 175 resolved using rule (paren -> varYVals)
WARNING: rejected rule (tCompare -> varYVals) in state 175
WARNING: Rule (tCompare -> varsOps) is never reduced
WARNING: Rule (tCompare -> varYVals) is never reduced
WARNING: Rule (varAsig -> asig MULEQ ID) is never reduced
WARNING: Rule (finVarAsig -> ID MULEQ ID) is never reduced
